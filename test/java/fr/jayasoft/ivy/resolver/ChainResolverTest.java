begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlIvyConfigurationParser
import|;
end_import

begin_comment
comment|/**  * Tests ChainResolver  */
end_comment

begin_class
specifier|public
class|class
name|ChainResolverTest
extends|extends
name|TestCase
block|{
specifier|private
name|ResolveData
name|_data
init|=
operator|new
name|ResolveData
argument_list|(
operator|new
name|Ivy
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testOrderFromConf
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XmlIvyConfigurationParser
argument_list|(
name|_data
operator|.
name|getIvy
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|ChainResolverTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"chainresolverconf.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|resolver
init|=
name|_data
operator|.
name|getIvy
argument_list|()
operator|.
name|getResolver
argument_list|(
literal|"chain"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resolver
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|ChainResolver
name|chain
init|=
operator|(
name|ChainResolver
operator|)
name|resolver
decl_stmt|;
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertResolversSizeAndNames
parameter_list|(
name|ChainResolver
name|chain
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|List
name|resolvers
init|=
name|chain
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|resolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resolvers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DependencyResolver
name|r
init|=
operator|(
name|DependencyResolver
operator|)
name|resolvers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testName
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"chain"
argument_list|,
name|chain
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResolveOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"1"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"2"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"3"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resolvers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolvers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
name|resolvers
operator|.
name|length
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"rev"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|_data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
argument_list|,
name|resolvers
index|[
literal|0
index|]
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
argument_list|,
name|resolvers
index|[
literal|1
index|]
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resolvers
index|[
literal|2
index|]
operator|.
name|askedDeps
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLatestResolve
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"1"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"2"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"3"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
comment|// younger -> should the one kept
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"4"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"5"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"6"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|18
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"7"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resolvers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolvers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
name|resolvers
operator|.
name|length
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"latest.integration"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|_data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|ddAsList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resolvers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|ddAsList
argument_list|,
name|resolvers
index|[
name|i
index|]
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReturnFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setReturnFirst
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"1"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"2"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"3"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
comment|// younger -> should the one kept
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"4"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"5"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"6"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|18
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"7"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resolvers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolvers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
name|resolvers
operator|.
name|length
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"latest.integration"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|_data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|ddAsList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|resolvers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|resolvers
index|[
name|i
index|]
operator|.
name|askedDeps
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

