begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * @author Xavier Hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|SortTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testSort
parameter_list|()
block|{
name|ModuleRevisionId
name|mrid1
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"md1"
argument_list|,
literal|"rev1"
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|mrid2
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"md2"
argument_list|,
literal|"rev2"
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|mrid3
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"md3"
argument_list|,
literal|"rev3"
argument_list|)
decl_stmt|;
name|DefaultModuleDescriptor
index|[]
name|md
init|=
operator|new
name|DefaultModuleDescriptor
index|[]
block|{
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|mrid1
argument_list|,
literal|"integration"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
block|,
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|mrid2
argument_list|,
literal|"integration"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
block|,
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|mrid3
argument_list|,
literal|"integration"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
block|, 	    }
decl_stmt|;
name|md
index|[
literal|1
index|]
operator|.
name|addDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|mrid1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|md
index|[
literal|2
index|]
operator|.
name|addDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|mrid2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|toSort
decl_stmt|;
name|toSort
operator|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|md
index|[
literal|0
index|]
block|,
name|md
index|[
literal|2
index|]
block|,
name|md
index|[
literal|1
index|]
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertSorted
argument_list|(
name|md
argument_list|,
name|Ivy
operator|.
name|sortModuleDescriptors
argument_list|(
name|toSort
argument_list|)
argument_list|)
expr_stmt|;
name|toSort
operator|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|md
index|[
literal|0
index|]
block|,
name|md
index|[
literal|1
index|]
block|,
name|md
index|[
literal|2
index|]
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertSorted
argument_list|(
name|md
argument_list|,
name|Ivy
operator|.
name|sortModuleDescriptors
argument_list|(
name|toSort
argument_list|)
argument_list|)
expr_stmt|;
name|toSort
operator|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|md
index|[
literal|1
index|]
block|,
name|md
index|[
literal|0
index|]
block|,
name|md
index|[
literal|2
index|]
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertSorted
argument_list|(
name|md
argument_list|,
name|Ivy
operator|.
name|sortModuleDescriptors
argument_list|(
name|toSort
argument_list|)
argument_list|)
expr_stmt|;
name|toSort
operator|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|md
index|[
literal|1
index|]
block|,
name|md
index|[
literal|2
index|]
block|,
name|md
index|[
literal|0
index|]
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertSorted
argument_list|(
name|md
argument_list|,
name|Ivy
operator|.
name|sortModuleDescriptors
argument_list|(
name|toSort
argument_list|)
argument_list|)
expr_stmt|;
name|toSort
operator|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|md
index|[
literal|2
index|]
block|,
name|md
index|[
literal|1
index|]
block|,
name|md
index|[
literal|0
index|]
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertSorted
argument_list|(
name|md
argument_list|,
name|Ivy
operator|.
name|sortModuleDescriptors
argument_list|(
name|toSort
argument_list|)
argument_list|)
expr_stmt|;
name|toSort
operator|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|md
index|[
literal|2
index|]
block|,
name|md
index|[
literal|0
index|]
block|,
name|md
index|[
literal|1
index|]
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertSorted
argument_list|(
name|md
argument_list|,
name|Ivy
operator|.
name|sortModuleDescriptors
argument_list|(
name|toSort
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSorted
parameter_list|(
name|DefaultModuleDescriptor
index|[]
name|md
parameter_list|,
name|List
name|sorted
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|md
operator|.
name|length
argument_list|,
name|sorted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|md
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|md
index|[
name|i
index|]
argument_list|,
name|sorted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

