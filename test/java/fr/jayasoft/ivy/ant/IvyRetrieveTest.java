begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|IvyPatternHelper
import|;
end_import

begin_class
specifier|public
class|class
name|IvyRetrieveTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|IVY_RETRIEVE_PATTERN
init|=
literal|"build/test/lib/[organisation]/[module]/ivy-[revision].xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RETRIEVE_PATTERN
init|=
literal|"build/test/lib/[conf]/[artifact]-[revision].[type]"
decl_stmt|;
specifier|private
name|File
name|_cache
decl_stmt|;
specifier|private
name|IvyRetrieve
name|_retrieve
decl_stmt|;
specifier|private
name|Project
name|_project
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|createCache
argument_list|()
expr_stmt|;
name|cleanTestLib
argument_list|()
expr_stmt|;
name|_project
operator|=
operator|new
name|Project
argument_list|()
expr_stmt|;
name|_project
operator|.
name|setProperty
argument_list|(
literal|"ivy.conf.file"
argument_list|,
literal|"test/repositories/ivyconf.xml"
argument_list|)
expr_stmt|;
name|_retrieve
operator|=
operator|new
name|IvyRetrieve
argument_list|()
expr_stmt|;
name|_retrieve
operator|.
name|setProject
argument_list|(
name|_project
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|setCache
argument_list|(
name|_cache
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|setPattern
argument_list|(
name|RETRIEVE_PATTERN
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createCache
parameter_list|()
block|{
name|_cache
operator|=
operator|new
name|File
argument_list|(
literal|"build/cache"
argument_list|)
expr_stmt|;
name|_cache
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanCache
argument_list|()
expr_stmt|;
name|cleanTestLib
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cleanCache
parameter_list|()
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|()
decl_stmt|;
name|del
operator|.
name|setProject
argument_list|(
operator|new
name|Project
argument_list|()
argument_list|)
expr_stmt|;
name|del
operator|.
name|setDir
argument_list|(
name|_cache
argument_list|)
expr_stmt|;
name|del
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cleanTestLib
parameter_list|()
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|()
decl_stmt|;
name|del
operator|.
name|setProject
argument_list|(
operator|new
name|Project
argument_list|()
argument_list|)
expr_stmt|;
name|del
operator|.
name|setDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/lib"
argument_list|)
argument_list|)
expr_stmt|;
name|del
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|_project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/fr/jayasoft/ivy/ant/ivy-simple.xml"
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWithConf
parameter_list|()
throws|throws
name|Exception
block|{
name|_project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/repositories/1/org6/mod6.2/ivys/ivy-0.4.xml"
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWithAPreviousResolve
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first we do a resolve in another project
name|Project
name|project
init|=
operator|new
name|Project
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.conf.file"
argument_list|,
literal|"test/repositories/ivyconf.xml"
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/fr/jayasoft/ivy/ant/ivy-simple.xml"
argument_list|)
expr_stmt|;
name|IvyResolve
name|resolve
init|=
operator|new
name|IvyResolve
argument_list|()
decl_stmt|;
name|resolve
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setCache
argument_list|(
name|_cache
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// then we do a retrieve with the correct module information
name|_retrieve
operator|.
name|setOrganisation
argument_list|(
literal|"jayasoft"
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|setModule
argument_list|(
literal|"resolve-simple"
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|setConf
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFailureWithoutAPreviousResolve
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we do a retrieve with the module information whereas no resolve has been previously done
try|try
block|{
name|_retrieve
operator|.
name|setOrganisation
argument_list|(
literal|"jayasoft"
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|setModule
argument_list|(
literal|"resolve-simple"
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|setConf
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"retrieve without previous resolve should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// OK
block|}
block|}
specifier|public
name|void
name|testFailure
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|_project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/fr/jayasoft/ivy/ant/ivy-failure.xml"
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"failure didn't raised an exception with default haltonfailure setting"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BuildException
name|ex
parameter_list|)
block|{
comment|// ok => should raised an exception
block|}
block|}
specifier|public
name|void
name|testHaltOnFailure
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|_project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/fr/jayasoft/ivy/ant/ivy-failure.xml"
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|setHaltonfailure
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BuildException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"failure raised an exception with haltonfailure set to false"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCustomIvyPattern
parameter_list|()
throws|throws
name|Exception
block|{
comment|//      mod2.5 depends on virtual mod2.3 which depends on mod2.1 which depends on mod1.1 which depends on mod1.2
name|_project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/repositories/1/org2/mod2.5/ivys/ivy-0.6.1.xml"
argument_list|)
expr_stmt|;
name|String
name|ivyPattern
init|=
name|IVY_RETRIEVE_PATTERN
decl_stmt|;
name|_retrieve
operator|.
name|setIvypattern
argument_list|(
name|ivyPattern
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org2"
argument_list|,
literal|"mod2.3"
argument_list|,
literal|"0.4.1"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org2"
argument_list|,
literal|"mod2.1"
argument_list|,
literal|"0.3"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"1.0"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCustomIvyPatternWithConf
parameter_list|()
throws|throws
name|Exception
block|{
name|_project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/repositories/1/org6/mod6.2/ivys/ivy-0.4.xml"
argument_list|)
expr_stmt|;
name|String
name|ivyPattern
init|=
literal|"build/test/lib/[conf]/[organisation]/[module]/ivy-[revision].xml"
decl_stmt|;
name|_retrieve
operator|.
name|setIvypattern
argument_list|(
name|ivyPattern
argument_list|)
expr_stmt|;
name|_retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.1"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

