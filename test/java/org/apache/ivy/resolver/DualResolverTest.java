begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|resolver
operator|.
name|DualResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|resolver
operator|.
name|IBiblioResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlIvyConfigurationParser
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test for DualResolver  */
end_comment

begin_class
specifier|public
class|class
name|DualResolverTest
extends|extends
name|TestCase
block|{
specifier|private
name|ResolveData
name|_data
init|=
operator|new
name|ResolveData
argument_list|(
operator|new
name|Ivy
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testFromConf
parameter_list|()
throws|throws
name|Exception
block|{
name|Ivy
name|ivy
init|=
operator|new
name|Ivy
argument_list|()
decl_stmt|;
operator|new
name|XmlIvyConfigurationParser
argument_list|(
name|ivy
argument_list|)
operator|.
name|parse
argument_list|(
name|DualResolverTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"dualresolverconf.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|resolver
init|=
name|ivy
operator|.
name|getResolver
argument_list|(
literal|"dualok"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resolver
operator|instanceof
name|DualResolver
argument_list|)
expr_stmt|;
name|DualResolver
name|dual
init|=
operator|(
name|DualResolver
operator|)
name|resolver
decl_stmt|;
name|assertNotNull
argument_list|(
name|dual
operator|.
name|getIvyResolver
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ivy"
argument_list|,
name|dual
operator|.
name|getIvyResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dual
operator|.
name|getArtifactResolver
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artifact"
argument_list|,
name|dual
operator|.
name|getArtifactResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|resolver
operator|=
name|ivy
operator|.
name|getResolver
argument_list|(
literal|"dualnotenough"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resolver
operator|instanceof
name|DualResolver
argument_list|)
expr_stmt|;
name|dual
operator|=
operator|(
name|DualResolver
operator|)
name|resolver
expr_stmt|;
name|assertNotNull
argument_list|(
name|dual
operator|.
name|getIvyResolver
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dual
operator|.
name|getArtifactResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFromBadConf
parameter_list|()
throws|throws
name|Exception
block|{
name|Ivy
name|ivy
init|=
operator|new
name|Ivy
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|XmlIvyConfigurationParser
argument_list|(
name|ivy
argument_list|)
operator|.
name|parse
argument_list|(
name|DualResolverTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"dualresolverconf-bad.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"bad dual resolver configuration should raise exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ok -> bad conf has raised an exception
block|}
block|}
specifier|public
name|void
name|testBad
parameter_list|()
throws|throws
name|Exception
block|{
name|DualResolver
name|dual
init|=
operator|new
name|DualResolver
argument_list|()
decl_stmt|;
name|dual
operator|.
name|setIvyResolver
argument_list|(
operator|new
name|IBiblioResolver
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"rev"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|dual
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|_data
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"bad dual resolver configuration should raise exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ok -> should have raised an exception
block|}
block|}
specifier|public
name|void
name|testResolve
parameter_list|()
throws|throws
name|Exception
block|{
name|DualResolver
name|dual
init|=
operator|new
name|DualResolver
argument_list|()
decl_stmt|;
name|MockResolver
name|ivyResolver
init|=
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"ivy"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|MockResolver
name|artifactResolver
init|=
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"artifact"
argument_list|,
literal|false
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|dual
operator|.
name|setIvyResolver
argument_list|(
name|ivyResolver
argument_list|)
expr_stmt|;
name|dual
operator|.
name|setArtifactResolver
argument_list|(
name|artifactResolver
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"rev"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|dual
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|_data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dual
argument_list|,
name|rmr
operator|.
name|getArtifactResolver
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
argument_list|,
name|ivyResolver
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|artifactResolver
operator|.
name|askedDeps
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResolveFromArtifact
parameter_list|()
throws|throws
name|Exception
block|{
name|DualResolver
name|dual
init|=
operator|new
name|DualResolver
argument_list|()
decl_stmt|;
name|MockResolver
name|ivyResolver
init|=
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"ivy"
argument_list|,
literal|false
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|MockResolver
name|artifactResolver
init|=
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"artifact"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|dual
operator|.
name|setIvyResolver
argument_list|(
name|ivyResolver
argument_list|)
expr_stmt|;
name|dual
operator|.
name|setArtifactResolver
argument_list|(
name|artifactResolver
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"rev"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|dual
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|_data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artifactResolver
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
argument_list|,
name|ivyResolver
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
argument_list|,
name|artifactResolver
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResolveFail
parameter_list|()
throws|throws
name|Exception
block|{
name|DualResolver
name|dual
init|=
operator|new
name|DualResolver
argument_list|()
decl_stmt|;
name|MockResolver
name|ivyResolver
init|=
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"ivy"
argument_list|,
literal|false
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|MockResolver
name|artifactResolver
init|=
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
literal|"artifact"
argument_list|,
literal|false
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|dual
operator|.
name|setIvyResolver
argument_list|(
name|ivyResolver
argument_list|)
expr_stmt|;
name|dual
operator|.
name|setArtifactResolver
argument_list|(
name|artifactResolver
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"rev"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|dual
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|_data
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
argument_list|,
name|ivyResolver
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
argument_list|,
name|artifactResolver
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

