begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|SearchEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
operator|.
name|SortEngine
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|RepositoryManagementEngineTest
extends|extends
name|TestCase
block|{
specifier|private
name|RepositoryManagementEngine
name|repository
decl_stmt|;
specifier|private
name|TestFixture
name|fixture
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|=
operator|new
name|TestFixture
argument_list|()
expr_stmt|;
name|IvySettings
name|settings
init|=
name|fixture
operator|.
name|getSettings
argument_list|()
decl_stmt|;
name|repository
operator|=
operator|new
name|RepositoryManagementEngine
argument_list|(
name|settings
argument_list|,
operator|new
name|SearchEngine
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|ResolveEngine
argument_list|(
name|settings
argument_list|,
operator|new
name|EventManager
argument_list|()
argument_list|,
operator|new
name|SortEngine
argument_list|(
name|settings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|clean
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|addMD
argument_list|(
literal|"o1#A;1"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"o1#A;2"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"o1#A;3"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"o1#B;1"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"o1#B;2->o1#A;2"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"o2#C;1->{o1#B;1 o1#A;1}"
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|repository
operator|.
name|load
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|repository
operator|.
name|getModuleIdsNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|repository
operator|.
name|getRevisionsNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOrphans
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|addMD
argument_list|(
literal|"o1#A;1"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"o1#A;2"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"o1#A;3"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"o1#B;1"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"o1#B;2->o1#A;2"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"o2#C;1->{o1#B;1 o1#A;1}"
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|repository
operator|.
name|load
argument_list|()
expr_stmt|;
name|repository
operator|.
name|analyze
argument_list|()
expr_stmt|;
name|TestHelper
operator|.
name|assertModuleRevisionIds
argument_list|(
literal|"o1#A;3 o1#B;2 o2#C;1"
argument_list|,
name|repository
operator|.
name|getOrphans
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

