begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|BasicResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|ResourceDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|MockResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|DefaultMessageLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @see DefaultResolutionCacheManager  */
end_comment

begin_class
specifier|public
class|class
name|DefaultRepositoryCacheManagerTest
block|{
specifier|private
name|DefaultRepositoryCacheManager
name|cacheManager
decl_stmt|;
specifier|private
name|Artifact
name|artifact
decl_stmt|;
specifier|private
name|ArtifactOrigin
name|origin
decl_stmt|;
specifier|private
name|Ivy
name|ivy
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"ivycache"
argument_list|,
literal|".dir"
argument_list|)
decl_stmt|;
name|ivy
operator|=
operator|new
name|Ivy
argument_list|()
expr_stmt|;
name|ivy
operator|.
name|configureDefault
argument_list|()
expr_stmt|;
name|ivy
operator|.
name|getLoggerEngine
argument_list|()
operator|.
name|setDefaultLogger
argument_list|(
operator|new
name|DefaultMessageLogger
argument_list|(
name|Message
operator|.
name|MSG_DEBUG
argument_list|)
argument_list|)
expr_stmt|;
name|IvyContext
operator|.
name|pushNewContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|ivy
argument_list|)
expr_stmt|;
name|IvySettings
name|settings
init|=
name|ivy
operator|.
name|getSettings
argument_list|()
decl_stmt|;
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// we want to use the file as a directory, so we delete the file itself
name|cacheManager
operator|=
operator|new
name|DefaultRepositoryCacheManager
argument_list|()
expr_stmt|;
name|cacheManager
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|cacheManager
operator|.
name|setBasedir
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createArtifact
argument_list|(
literal|"org"
argument_list|,
literal|"module"
argument_list|,
literal|"rev"
argument_list|,
literal|"name"
argument_list|,
literal|"type"
argument_list|,
literal|"ext"
argument_list|)
expr_stmt|;
name|Artifact
name|originArtifact
init|=
name|createArtifact
argument_list|(
literal|"org"
argument_list|,
literal|"module"
argument_list|,
literal|"rev"
argument_list|,
literal|"name"
argument_list|,
literal|"pom.original"
argument_list|,
literal|"pom"
argument_list|)
decl_stmt|;
name|origin
operator|=
operator|new
name|ArtifactOrigin
argument_list|(
name|originArtifact
argument_list|,
literal|true
argument_list|,
literal|"file:/some/where.pom"
argument_list|)
expr_stmt|;
name|cacheManager
operator|.
name|saveArtifactOrigin
argument_list|(
name|originArtifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|cacheManager
operator|.
name|saveArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|IvyContext
operator|.
name|popContext
argument_list|()
expr_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|()
decl_stmt|;
name|del
operator|.
name|setProject
argument_list|(
operator|new
name|Project
argument_list|()
argument_list|)
expr_stmt|;
name|del
operator|.
name|setDir
argument_list|(
name|cacheManager
operator|.
name|getRepositoryCacheRoot
argument_list|()
argument_list|)
expr_stmt|;
name|del
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArtifactOrigin
parameter_list|()
block|{
name|ArtifactOrigin
name|found
init|=
name|cacheManager
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|origin
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pom"
argument_list|,
name|found
operator|.
name|getArtifact
argument_list|()
operator|.
name|getExt
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createArtifact
argument_list|(
literal|"org"
argument_list|,
literal|"module"
argument_list|,
literal|"rev"
argument_list|,
literal|"name"
argument_list|,
literal|"type2"
argument_list|,
literal|"ext"
argument_list|)
expr_stmt|;
name|found
operator|=
name|cacheManager
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArtifactOrigin
operator|.
name|isUnknown
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUniqueness
parameter_list|()
block|{
name|cacheManager
operator|.
name|saveArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createArtifact
argument_list|(
literal|"org1"
argument_list|,
literal|"module"
argument_list|,
literal|"rev"
argument_list|,
literal|"name"
argument_list|,
literal|"type"
argument_list|,
literal|"ext"
argument_list|)
expr_stmt|;
name|ArtifactOrigin
name|found
init|=
name|cacheManager
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ArtifactOrigin
operator|.
name|isUnknown
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createArtifact
argument_list|(
literal|"org"
argument_list|,
literal|"module1"
argument_list|,
literal|"rev"
argument_list|,
literal|"name"
argument_list|,
literal|"type"
argument_list|,
literal|"ext"
argument_list|)
expr_stmt|;
name|found
operator|=
name|cacheManager
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArtifactOrigin
operator|.
name|isUnknown
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createArtifact
argument_list|(
literal|"org"
argument_list|,
literal|"module"
argument_list|,
literal|"rev1"
argument_list|,
literal|"name"
argument_list|,
literal|"type"
argument_list|,
literal|"ext"
argument_list|)
expr_stmt|;
name|found
operator|=
name|cacheManager
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArtifactOrigin
operator|.
name|isUnknown
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createArtifact
argument_list|(
literal|"org"
argument_list|,
literal|"module"
argument_list|,
literal|"rev"
argument_list|,
literal|"name1"
argument_list|,
literal|"type"
argument_list|,
literal|"ext"
argument_list|)
expr_stmt|;
name|found
operator|=
name|cacheManager
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArtifactOrigin
operator|.
name|isUnknown
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createArtifact
argument_list|(
literal|"org"
argument_list|,
literal|"module"
argument_list|,
literal|"rev"
argument_list|,
literal|"name"
argument_list|,
literal|"type1"
argument_list|,
literal|"ext"
argument_list|)
expr_stmt|;
name|found
operator|=
name|cacheManager
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArtifactOrigin
operator|.
name|isUnknown
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
name|artifact
operator|=
name|createArtifact
argument_list|(
literal|"org"
argument_list|,
literal|"module"
argument_list|,
literal|"rev"
argument_list|,
literal|"name"
argument_list|,
literal|"type"
argument_list|,
literal|"ext1"
argument_list|)
expr_stmt|;
name|found
operator|=
name|cacheManager
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ArtifactOrigin
operator|.
name|isUnknown
argument_list|(
name|found
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testLatestIntegrationIsCachedPerResolver
parameter_list|()
throws|throws
name|Exception
block|{
comment|// given a module org#module
name|ModuleId
name|mi
init|=
operator|new
name|ModuleId
argument_list|(
literal|"org"
argument_list|,
literal|"module"
argument_list|)
decl_stmt|;
comment|// and a latest.integration mrid/dd
name|ModuleRevisionId
name|mridLatest
init|=
operator|new
name|ModuleRevisionId
argument_list|(
name|mi
argument_list|,
literal|"trunk"
argument_list|,
literal|"latest.integration"
argument_list|)
decl_stmt|;
name|DependencyDescriptor
name|ddLatest
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|mridLatest
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// and some random options
name|CacheMetadataOptions
name|options
init|=
operator|new
name|CacheMetadataOptions
argument_list|()
operator|.
name|setCheckTTL
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// setup resolver1 to download the static content so we can call cacheModuleDescriptor
name|MockResolver
name|resolver
init|=
operator|new
name|MockResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"resolver1"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|ivy
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|getSettings
argument_list|()
operator|.
name|addResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|ResourceDownloader
name|downloader
init|=
operator|new
name|ResourceDownloader
argument_list|()
block|{
specifier|public
name|void
name|download
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|content
init|=
literal|"<ivy-module version=\"2.0\"><info organisation=\"org\" module=\"module\" status=\"integration\" revision=\"1.1\" branch=\"trunk\"/></ivy-module>"
decl_stmt|;
name|dest
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|pw
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ModuleDescriptorWriter
name|writer
init|=
operator|new
name|ModuleDescriptorWriter
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|ResolvedResource
name|originalMdResource
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|,
name|File
name|src
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|md
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// latest.integration will resolve to 1.1 in resolver1
name|ModuleRevisionId
name|mrid11
init|=
operator|new
name|ModuleRevisionId
argument_list|(
name|mi
argument_list|,
literal|"trunk"
argument_list|,
literal|"1.1"
argument_list|)
decl_stmt|;
name|DefaultArtifact
name|artifact11
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|mrid11
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|"module-1.1.ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DependencyDescriptor
name|dd11
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|mrid11
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BasicResource
name|resource11
init|=
operator|new
name|BasicResource
argument_list|(
literal|"/module-1-1.ivy"
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResolvedResource
name|mdRef11
init|=
operator|new
name|ResolvedResource
argument_list|(
name|resource11
argument_list|,
literal|"1.1"
argument_list|)
decl_stmt|;
comment|// tell the cache about 1.1
name|ResolvedModuleRevision
name|rmr11
init|=
name|cacheManager
operator|.
name|cacheModuleDescriptor
argument_list|(
name|resolver
argument_list|,
name|mdRef11
argument_list|,
name|dd11
argument_list|,
name|artifact11
argument_list|,
name|downloader
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|cacheManager
operator|.
name|originalToCachedModuleDescriptor
argument_list|(
name|resolver
argument_list|,
name|mdRef11
argument_list|,
name|artifact11
argument_list|,
name|rmr11
argument_list|,
name|writer
argument_list|)
expr_stmt|;
comment|// and use the new overload that passes in resolver name
name|cacheManager
operator|.
name|saveResolvedRevision
argument_list|(
literal|"resolver1"
argument_list|,
name|mridLatest
argument_list|,
literal|"1.1"
argument_list|)
expr_stmt|;
name|ResolvedModuleRevision
name|rmrFromCache
init|=
name|cacheManager
operator|.
name|findModuleInCache
argument_list|(
name|ddLatest
argument_list|,
name|mridLatest
argument_list|,
name|options
argument_list|,
literal|"resolver1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rmr11
argument_list|,
name|rmrFromCache
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that the {@link ArtifactOrigin#getLocation()} and {@link ArtifactOrigin#setLocation(String)} values      * are treated as {@link URL} while saving and retrieving the artifact origin information      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testArtificationOriginalLocation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Artifact
name|simpleArtifact
init|=
name|createArtifact
argument_list|(
literal|"org"
argument_list|,
literal|"dummy"
argument_list|,
literal|"1.0.0"
argument_list|,
literal|"hello"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
decl_stmt|;
specifier|final
name|URL
name|location
init|=
operator|new
name|File
argument_list|(
literal|"dummylocation"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
specifier|final
name|ArtifactOrigin
name|originatedFrom
init|=
operator|new
name|ArtifactOrigin
argument_list|(
name|simpleArtifact
argument_list|,
literal|true
argument_list|,
name|location
operator|.
name|toExternalForm
argument_list|()
argument_list|)
decl_stmt|;
name|cacheManager
operator|.
name|saveArtifactOrigin
argument_list|(
name|simpleArtifact
argument_list|,
name|originatedFrom
argument_list|)
expr_stmt|;
specifier|final
name|ArtifactOrigin
name|restored
init|=
name|cacheManager
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|simpleArtifact
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Location of artifact origin wasn't expected to be null"
argument_list|,
name|restored
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected artifact origin location"
argument_list|,
name|location
argument_list|,
operator|new
name|URL
argument_list|(
name|restored
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|DefaultArtifact
name|createArtifact
parameter_list|(
name|String
name|org
parameter_list|,
name|String
name|module
parameter_list|,
name|String
name|rev
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
name|ModuleId
name|mid
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|module
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|mrid
init|=
operator|new
name|ModuleRevisionId
argument_list|(
name|mid
argument_list|,
name|rev
argument_list|)
decl_stmt|;
return|return
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
return|;
block|}
block|}
end_class

end_unit

