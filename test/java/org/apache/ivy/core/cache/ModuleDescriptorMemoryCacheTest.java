begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ParserSettings
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|ModuleDescriptorMemoryCacheTest
extends|extends
name|TestCase
block|{
name|ModuleDescriptorMemoryCache
name|cache
init|=
operator|new
name|ModuleDescriptorMemoryCache
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ParserSettings
name|ivySettings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|IvySettings
name|ivySettings2
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|File
name|url1
init|=
operator|new
name|File
argument_list|(
literal|"file://cached/file.txt"
argument_list|)
decl_stmt|;
empty_stmt|;
name|File
name|url2
init|=
operator|new
name|File
argument_list|(
literal|"file://cached/file2.txt"
argument_list|)
decl_stmt|;
empty_stmt|;
name|File
name|url3
init|=
operator|new
name|File
argument_list|(
literal|"file://cached/file3.txt"
argument_list|)
decl_stmt|;
empty_stmt|;
name|ModuleRevisionId
name|mrid1
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"name"
argument_list|,
literal|"rev"
argument_list|)
decl_stmt|;
name|ModuleDescriptor
name|md1
init|=
name|DefaultModuleDescriptor
operator|.
name|newDefaultInstance
argument_list|(
name|mrid1
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|mrid2
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"name"
argument_list|,
literal|"rev2"
argument_list|)
decl_stmt|;
name|ModuleDescriptor
name|md2
init|=
name|DefaultModuleDescriptor
operator|.
name|newDefaultInstance
argument_list|(
name|mrid2
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|mrid3
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"name"
argument_list|,
literal|"rev3"
argument_list|)
decl_stmt|;
name|ModuleDescriptor
name|md3
init|=
name|DefaultModuleDescriptor
operator|.
name|newDefaultInstance
argument_list|(
name|mrid3
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testUseModuleDescriptorProviderWhenModuleNotCached
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorProviderMock
name|providerMock
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock
argument_list|)
argument_list|)
expr_stmt|;
name|providerMock
operator|.
name|assertCalled
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCacheResultOfModuleDescriptorProvider
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorProviderMock
name|providerMock
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock2
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testValidationClearInvalidatedCache
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorProviderMock
name|providerMock
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock2
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
empty_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|true
argument_list|,
name|providerMock2
argument_list|)
argument_list|)
expr_stmt|;
name|providerMock2
operator|.
name|assertCalled
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testValidationDontClearvalidatedCache
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorProviderMock
name|providerMock
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock2
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|true
argument_list|,
name|providerMock
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSizeIsLimitied
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorProviderMock
name|providerMock
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock1b
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock2
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md2
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock3
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md3
argument_list|)
decl_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|url2
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|url3
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock3
argument_list|)
expr_stmt|;
comment|// adding 1
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock1b
argument_list|)
expr_stmt|;
comment|// and one has been removed
name|providerMock1b
operator|.
name|assertCalled
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testLastRecentlyUsedIsFlushedWhenSizeExceed
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorProviderMock
name|providerMock
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock2
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md2
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock2b
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock3
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md3
argument_list|)
decl_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|url2
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|url3
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock3
argument_list|)
expr_stmt|;
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// and one has been removed
name|cache
operator|.
name|get
argument_list|(
name|url2
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock2b
argument_list|)
expr_stmt|;
name|providerMock2b
operator|.
name|assertCalled
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testVariableChangeInvalidateEntry
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorProviderMock
name|providerMock
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock2
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings2
argument_list|,
literal|false
argument_list|,
name|providerMock
argument_list|)
argument_list|)
expr_stmt|;
name|ivySettings2
operator|.
name|getVariables
argument_list|()
operator|.
name|setVariable
argument_list|(
literal|"val"
argument_list|,
literal|"changedVal"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings2
argument_list|,
literal|false
argument_list|,
name|providerMock2
argument_list|)
argument_list|)
expr_stmt|;
name|providerMock2
operator|.
name|assertCalled
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testGetStaleDontReadFromCache
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorProviderMock
name|providerMock
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock2
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|md2
argument_list|,
name|cache
operator|.
name|getStale
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock2
argument_list|)
argument_list|)
expr_stmt|;
name|providerMock2
operator|.
name|assertCalled
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testGetStaleStoreResultInCache
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorProviderMock
name|providerMock
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock2
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|getStale
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testASizeOf0MeansNoCache
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|cache
operator|=
operator|new
name|ModuleDescriptorMemoryCache
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|ModuleDescriptorProviderMock
name|providerMock2
init|=
operator|new
name|ModuleDescriptorProviderMock
argument_list|(
name|md1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|md1
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|url1
argument_list|,
name|ivySettings
argument_list|,
literal|false
argument_list|,
name|providerMock2
argument_list|)
argument_list|)
expr_stmt|;
name|providerMock2
operator|.
name|assertCalled
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ModuleDescriptorProviderMock
implements|implements
name|ModuleDescriptorProvider
block|{
specifier|private
name|boolean
name|called
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|ModuleDescriptor
name|result
decl_stmt|;
specifier|public
name|ModuleDescriptorProviderMock
parameter_list|(
name|ModuleDescriptor
name|result
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
specifier|public
name|ModuleDescriptor
name|provideModule
parameter_list|(
name|ParserSettings
name|ivySettings
parameter_list|,
name|File
name|descriptorFile
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
if|if
condition|(
name|ivySettings
operator|!=
literal|null
condition|)
block|{
name|ivySettings
operator|.
name|substitute
argument_list|(
literal|"${val}"
argument_list|)
expr_stmt|;
block|}
name|called
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|assertCalled
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|called
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

