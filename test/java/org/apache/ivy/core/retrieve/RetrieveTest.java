begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|retrieve
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|IvyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|IvyListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|retrieve
operator|.
name|EndRetrieveArtifactEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|retrieve
operator|.
name|EndRetrieveEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|retrieve
operator|.
name|StartRetrieveArtifactEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|retrieve
operator|.
name|StartRetrieveEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|DefaultMessageLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|MockMessageLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|RetrieveTest
block|{
specifier|private
name|Ivy
name|ivy
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ivy
operator|=
name|Ivy
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|ivy
operator|.
name|configure
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/ivysettings.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|TestHelper
operator|.
name|createCache
argument_list|()
expr_stmt|;
name|Message
operator|.
name|setDefaultLogger
argument_list|(
operator|new
name|DefaultMessageLogger
argument_list|(
name|Message
operator|.
name|MSG_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|TestHelper
operator|.
name|cleanCache
argument_list|()
expr_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|()
decl_stmt|;
name|del
operator|.
name|setProject
argument_list|(
operator|new
name|Project
argument_list|()
argument_list|)
expr_stmt|;
name|del
operator|.
name|setDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/retrieve"
argument_list|)
argument_list|)
expr_stmt|;
name|del
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveSimple
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mod1.1 depends on mod1.2
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org1/mod1.1/ivys/ivy-1.0.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"build/test/retrieve/[module]/[conf]/[artifact]-[revision].[ext]"
decl_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|getRetrieveOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|=
literal|"build/test/retrieve/[module]/[conf]/[type]s/[artifact]-[revision].[ext]"
expr_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|getRetrieveOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveSameFileConflict
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mod1.1 depends on mod1.2
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org1/mod1.4/ivys/ivy-1.0.1.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"build/test/retrieve/[module]/[artifact]-[revision].[ext]"
decl_stmt|;
name|MockMessageLogger
name|mockLogger
init|=
operator|new
name|MockMessageLogger
argument_list|()
decl_stmt|;
name|Message
operator|.
name|setDefaultLogger
argument_list|(
name|mockLogger
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|getRetrieveOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.2"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|mockLogger
operator|.
name|assertLogDoesntContain
argument_list|(
literal|"conflict on"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveDifferentArtifactsOfSameModuleToSameFile
parameter_list|()
throws|throws
name|Exception
block|{
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org2/mod2.2/ivys/ivy-0.5.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"build/test/retrieve/[module]/[module].[ext]"
decl_stmt|;
name|MockMessageLogger
name|mockLogger
init|=
operator|new
name|MockMessageLogger
argument_list|()
decl_stmt|;
name|Message
operator|.
name|setDefaultLogger
argument_list|(
name|mockLogger
argument_list|)
expr_stmt|;
try|try
block|{
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|getRetrieveOptions
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// expected!
block|}
name|mockLogger
operator|.
name|assertLogDoesntContain
argument_list|(
literal|"multiple artifacts"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvent
parameter_list|()
throws|throws
name|Exception
block|{
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org1/mod1.1/ivys/ivy-1.0.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
name|events
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ivy
operator|.
name|getEventManager
argument_list|()
operator|.
name|addIvyListener
argument_list|(
operator|new
name|IvyListener
argument_list|()
block|{
specifier|public
name|void
name|progress
parameter_list|(
name|IvyEvent
name|event
parameter_list|)
block|{
name|events
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|String
name|pattern
init|=
literal|"build/test/retrieve/[module]/[conf]/[artifact]-[revision].[ext]"
decl_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|getRetrieveOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|StartRetrieveEvent
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|StartRetrieveArtifactEvent
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|EndRetrieveArtifactEvent
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|instanceof
name|EndRetrieveEvent
argument_list|)
expr_stmt|;
name|EndRetrieveEvent
name|ev
init|=
operator|(
name|EndRetrieveEvent
operator|)
name|events
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ev
operator|.
name|getNbCopied
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ev
operator|.
name|getNbUpToDate
argument_list|()
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|getRetrieveOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|StartRetrieveEvent
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|EndRetrieveEvent
argument_list|)
expr_stmt|;
name|ev
operator|=
operator|(
name|EndRetrieveEvent
operator|)
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ev
operator|.
name|getNbCopied
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ev
operator|.
name|getNbUpToDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveOverwrite
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mod1.1 depends on mod1.2
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org1/mod1.1/ivys/ivy-1.0.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"build/test/retrieve/[module]/[conf]/[artifact]-[revision].[ext]"
decl_stmt|;
comment|// we create a fake old file to see if it is overwritten
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
decl_stmt|;
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|getRetrieveOptions
argument_list|()
operator|.
name|setOverwriteMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org1/mod1.2/jars/mod1.2-2.0.jar"
argument_list|)
operator|.
name|lastModified
argument_list|()
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveWithSymlinks
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mod1.1 depends on mod1.2
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org1/mod1.1/ivys/ivy-1.0.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|RetrieveOptions
name|options
init|=
name|getRetrieveOptions
argument_list|()
operator|.
name|setMakeSymlinks
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|pattern
init|=
literal|"build/test/retrieve/[module]/[conf]/[artifact]-[revision].[ext]"
decl_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertLink
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|pattern
operator|=
literal|"build/test/retrieve/[module]/[conf]/[type]s/[artifact]-[revision].[ext]"
expr_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertLink
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveWithSymlinksMass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// mod1.1 depends on mod1.2
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org1/mod1.1/ivys/ivy-1.0.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|RetrieveOptions
name|options
init|=
name|getRetrieveOptions
argument_list|()
operator|.
name|setMakeSymlinksInMass
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|pattern
init|=
literal|"build/test/retrieve/[module]/[conf]/[artifact]-[revision].[ext]"
decl_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertLink
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|pattern
operator|=
literal|"build/test/retrieve/[module]/[conf]/[type]s/[artifact]-[revision].[ext]"
expr_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertLink
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertLink
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if the OS is known to support symlink, check that the file is a symlink,
comment|// otherwise just check the file exist.
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The file "
operator|+
name|filename
operator|+
literal|" doesn't exist"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|os
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|equals
argument_list|(
literal|"Linux"
argument_list|)
operator|||
name|os
operator|.
name|equals
argument_list|(
literal|"Solaris"
argument_list|)
operator|||
name|os
operator|.
name|equals
argument_list|(
literal|"FreeBSD"
argument_list|)
operator|||
name|os
operator|.
name|equals
argument_list|(
literal|"Mac OS X"
argument_list|)
condition|)
block|{
comment|// these OS should support symlink, so check that the file is actually a symlink.
comment|// this is done be checking that the canonical path is different from the absolute
comment|// path.
name|File
name|absFile
init|=
name|file
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|File
name|canFile
init|=
name|file
operator|.
name|getCanonicalFile
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"The file "
operator|+
name|filename
operator|+
literal|" isn't a symlink"
argument_list|,
name|absFile
operator|.
name|equals
argument_list|(
name|canFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveWithVariable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mod1.1 depends on mod1.2
name|ivy
operator|.
name|setVariable
argument_list|(
literal|"retrieve.dir"
argument_list|,
literal|"retrieve"
argument_list|)
expr_stmt|;
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org1/mod1.1/ivys/ivy-1.0.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"build/test/${retrieve.dir}/[module]/[conf]/[artifact]-[revision].[ext]"
decl_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|getRetrieveOptions
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|=
name|IvyPatternHelper
operator|.
name|substituteVariable
argument_list|(
name|pattern
argument_list|,
literal|"retrieve.dir"
argument_list|,
literal|"retrieve"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|=
literal|"build/test/${retrieve.dir}/[module]/[conf]/[type]s/[artifact]-[revision].[ext]"
expr_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|getRetrieveOptions
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|=
name|IvyPatternHelper
operator|.
name|substituteVariable
argument_list|(
name|pattern
argument_list|,
literal|"retrieve.dir"
argument_list|,
literal|"retrieve"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveReport
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mod1.1 depends on mod1.2
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org20/mod20.1/ivys/ivy-1.2.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|md
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
name|RetrieveOptions
name|options
init|=
name|getRetrieveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setConfs
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"A"
block|}
argument_list|)
expr_stmt|;
name|Map
name|artifactsToCopy
init|=
name|ivy
operator|.
name|getRetrieveEngine
argument_list|()
operator|.
name|determineArtifactsToCopy
argument_list|(
name|mrid
argument_list|,
literal|"build/test/retrieve/[module]/[conf]/[artifact]-[revision].[ext]"
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|artifactsToCopy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|setConfs
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"B"
block|}
argument_list|)
expr_stmt|;
name|artifactsToCopy
operator|=
name|ivy
operator|.
name|getRetrieveEngine
argument_list|()
operator|.
name|determineArtifactsToCopy
argument_list|(
name|mrid
argument_list|,
literal|"build/test/retrieve/[module]/[conf]/[artifact]-[revision].[ext]"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|artifactsToCopy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|setConfs
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"A"
block|,
literal|"B"
block|}
argument_list|)
expr_stmt|;
name|artifactsToCopy
operator|=
name|ivy
operator|.
name|getRetrieveEngine
argument_list|()
operator|.
name|determineArtifactsToCopy
argument_list|(
name|mrid
argument_list|,
literal|"build/test/retrieve/[module]/[conf]/[artifact]-[revision].[ext]"
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|artifactsToCopy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnpack
parameter_list|()
throws|throws
name|Exception
block|{
name|ResolveOptions
name|roptions
init|=
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|File
argument_list|(
literal|"test/repositories/1/packaging/module1/ivys/ivy-1.0.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
comment|// normal resolve, the file goes in the cache
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
name|url
argument_list|,
name|roptions
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|report
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"build/test/retrieve/[organization]/[module]/[conf]/[type]s/[artifact]-[revision](.[ext])"
decl_stmt|;
name|RetrieveOptions
name|options
init|=
name|getRetrieveOptions
argument_list|()
decl_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
literal|"build/test/retrieve/packaging/module2/default/jars/module2-1.0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dest
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dest
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|File
index|[]
name|jarContents
init|=
name|dest
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|jarContents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|dest
argument_list|,
literal|"META-INF"
argument_list|)
argument_list|,
name|jarContents
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|dest
argument_list|,
literal|"test.txt"
argument_list|)
argument_list|,
name|jarContents
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|dest
argument_list|,
literal|"META-INF/MANIFEST.MF"
argument_list|)
argument_list|,
name|jarContents
index|[
literal|0
index|]
operator|.
name|listFiles
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnpackSync
parameter_list|()
throws|throws
name|Exception
block|{
name|ResolveOptions
name|roptions
init|=
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|File
argument_list|(
literal|"test/repositories/1/packaging/module1/ivys/ivy-1.0.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
comment|// normal resolve, the file goes in the cache
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
name|url
argument_list|,
name|roptions
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|report
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"build/test/retrieve/[organization]/[module]/[conf]/[type]s/[artifact]-[revision](.[ext])"
decl_stmt|;
name|RetrieveOptions
name|options
init|=
name|getRetrieveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
literal|"build/test/retrieve/packaging/module2/default/jars/module2-1.0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dest
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dest
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|File
index|[]
name|jarContents
init|=
name|dest
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|jarContents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|dest
argument_list|,
literal|"META-INF"
argument_list|)
argument_list|,
name|jarContents
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|dest
argument_list|,
literal|"test.txt"
argument_list|)
argument_list|,
name|jarContents
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|dest
argument_list|,
literal|"META-INF/MANIFEST.MF"
argument_list|)
argument_list|,
name|jarContents
index|[
literal|0
index|]
operator|.
name|listFiles
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that the {@link RetrieveEngine} retrieves artifacts with the correct extension if the artifact is unpacked      *      * @throws Exception      * @see<a href="https://issues.apache.org/jira/browse/IVY-1478">IVY-1478</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testUnpackExt
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ResolveOptions
name|roptions
init|=
name|getResolveOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
decl_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|File
argument_list|(
literal|"test/repositories/1/packaging/module10/ivys/ivy-1.0.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
comment|// normal resolve, the file goes in the cache
specifier|final
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
name|url
argument_list|,
name|roptions
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Resolution report has errors"
argument_list|,
name|report
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Module descriptor from report was null"
argument_list|,
name|md
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pattern
init|=
literal|"build/test/retrieve/[organization]/[module]/[conf]/[type]s/[artifact]-[revision](.[ext])"
decl_stmt|;
specifier|final
name|RetrieveOptions
name|options
init|=
name|getRetrieveOptions
argument_list|()
decl_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|options
argument_list|)
expr_stmt|;
specifier|final
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
literal|"build/test/retrieve/packaging/module9/default/jars/module9-1.0.jar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Retrieved artifact is missing at "
operator|+
name|dest
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dest
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Retrieved artifact at "
operator|+
name|dest
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is not a file"
argument_list|,
name|dest
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|RetrieveOptions
name|getRetrieveOptions
parameter_list|()
block|{
return|return
operator|new
name|RetrieveOptions
argument_list|()
return|;
block|}
specifier|private
name|ResolveOptions
name|getResolveOptions
parameter_list|(
name|String
index|[]
name|confs
parameter_list|)
block|{
return|return
operator|new
name|ResolveOptions
argument_list|()
operator|.
name|setConfs
argument_list|(
name|confs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

