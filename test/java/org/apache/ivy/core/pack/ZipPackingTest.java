begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|pack
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|DefaultMessageLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Mkdir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ZipPackingTest
block|{
specifier|private
specifier|static
specifier|final
name|Project
name|PROJECT
init|=
name|TestHelper
operator|.
name|newProject
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
name|PROJECT
operator|.
name|resolveFile
argument_list|(
literal|"build/test/pack"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Mkdir
name|mkdir
init|=
operator|new
name|Mkdir
argument_list|()
decl_stmt|;
name|mkdir
operator|.
name|setProject
argument_list|(
name|PROJECT
argument_list|)
expr_stmt|;
name|mkdir
operator|.
name|setDir
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
name|mkdir
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Message
operator|.
name|setDefaultLogger
argument_list|(
operator|new
name|DefaultMessageLogger
argument_list|(
name|Message
operator|.
name|MSG_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|()
decl_stmt|;
name|del
operator|.
name|setProject
argument_list|(
name|PROJECT
argument_list|)
expr_stmt|;
name|del
operator|.
name|setDir
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
name|del
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|zipPackingExtractsArchive
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|zip
init|=
operator|new
name|FileInputStream
argument_list|(
name|PROJECT
operator|.
name|resolveFile
argument_list|(
literal|"test/zip/test.zip"
argument_list|)
argument_list|)
init|)
block|{
operator|new
name|ZipPacking
argument_list|()
operator|.
name|unpack
argument_list|(
name|zip
argument_list|,
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expecting file a"
argument_list|,
name|FileUtil
operator|.
name|resolveFile
argument_list|(
name|TEST_DIR
argument_list|,
literal|"a"
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting directory b"
argument_list|,
name|FileUtil
operator|.
name|resolveFile
argument_list|(
name|TEST_DIR
argument_list|,
literal|"b"
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting file b/c"
argument_list|,
name|FileUtil
operator|.
name|resolveFile
argument_list|(
name|TEST_DIR
argument_list|,
literal|"b/c"
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting directory d"
argument_list|,
name|FileUtil
operator|.
name|resolveFile
argument_list|(
name|TEST_DIR
argument_list|,
literal|"d"
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Not expecting file e"
argument_list|,
name|PROJECT
operator|.
name|resolveFile
argument_list|(
literal|"build/test/e"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

