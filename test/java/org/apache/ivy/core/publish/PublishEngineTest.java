begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|publish
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
operator|.
name|SortEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|FileSystemResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_class
specifier|public
class|class
name|PublishEngineTest
extends|extends
name|TestCase
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtil
operator|.
name|forceDelete
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/publish"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtil
operator|.
name|forceDelete
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/publish"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAtomicity
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
specifier|final
name|PublishEngine
name|engine
init|=
operator|new
name|PublishEngine
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|counter
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|}
decl_stmt|;
specifier|final
name|DefaultModuleDescriptor
name|md
init|=
name|DefaultModuleDescriptor
operator|.
name|newDefaultInstance
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
literal|"#A;1.0"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FileSystemResolver
name|resolver
init|=
operator|new
name|FileSystemResolver
argument_list|()
block|{
specifier|public
name|void
name|publish
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|src
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|publish
argument_list|(
name|artifact
argument_list|,
name|src
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|PublishEngineTest
operator|.
name|this
init|)
block|{
name|counter
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
name|sleepSilently
argument_list|(
literal|50
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|PublishEngineTest
operator|.
name|this
init|)
block|{
name|counter
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addIvyPattern
argument_list|(
literal|"build/test/publish/repo/[module]/[revision]/[artifact].[ext]"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
literal|"build/test/publish/repo/[module]/[revision]/[artifact].[ext]"
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org1/mod1.1/jars/mod1.1-1.0.jar"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
literal|"build/test/publish/module/A.jar"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|md
argument_list|,
operator|new
name|File
argument_list|(
literal|"build/test/publish/module/ivy.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|resolveAndAssertNotFound
argument_list|(
name|settings
argument_list|,
name|resolver
argument_list|,
literal|"#A;latest.integration"
argument_list|,
literal|"before publishing"
argument_list|)
expr_stmt|;
comment|// run publish asynchronously
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|engine
operator|.
name|publish
argument_list|(
name|md
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"build/test/publish/module/[artifact].[ext]"
block|}
argument_list|)
argument_list|,
name|resolver
argument_list|,
operator|new
name|PublishOptions
argument_list|()
operator|.
name|setSrcIvyPattern
argument_list|(
literal|"build/test/publish/module/[artifact].[ext]"
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|PublishEngineTest
operator|.
name|this
init|)
block|{
name|counter
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|sleepSilently
argument_list|(
literal|5
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|counter
index|[
literal|0
index|]
operator|==
literal|5
condition|)
block|{
break|break;
block|}
if|else if
condition|(
name|counter
index|[
literal|0
index|]
operator|<
literal|4
condition|)
block|{
name|resolveAndAssertNotFound
argument_list|(
name|settings
argument_list|,
name|resolver
argument_list|,
literal|"#A;latest.integration"
argument_list|,
literal|"after "
operator|+
operator|(
name|counter
index|[
literal|0
index|]
operator|/
literal|2
operator|)
operator|+
literal|" artifacts published"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|resolveAndAssertFound
argument_list|(
name|settings
argument_list|,
name|resolver
argument_list|,
literal|"#A;1.0"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|resolveAndAssertNotFound
parameter_list|(
name|IvySettings
name|settings
parameter_list|,
name|FileSystemResolver
name|resolver
parameter_list|,
name|String
name|module
parameter_list|,
name|String
name|context
parameter_list|)
throws|throws
name|ParseException
block|{
name|ResolvedModuleRevision
name|rmr
init|=
name|resolveModule
argument_list|(
name|settings
argument_list|,
name|resolver
argument_list|,
name|module
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"module found "
operator|+
name|context
operator|+
literal|". module="
operator|+
name|rmr
argument_list|,
name|rmr
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|resolveAndAssertFound
parameter_list|(
name|IvySettings
name|settings
parameter_list|,
name|FileSystemResolver
name|resolver
parameter_list|,
name|String
name|module
parameter_list|)
throws|throws
name|ParseException
block|{
name|ResolvedModuleRevision
name|rmr
init|=
name|resolveModule
argument_list|(
name|settings
argument_list|,
name|resolver
argument_list|,
name|module
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|module
argument_list|,
name|rmr
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ResolvedModuleRevision
name|resolveModule
parameter_list|(
name|IvySettings
name|settings
parameter_list|,
name|FileSystemResolver
name|resolver
parameter_list|,
name|String
name|module
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|resolver
operator|.
name|getDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
name|module
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
operator|new
name|ResolveData
argument_list|(
operator|new
name|ResolveEngine
argument_list|(
name|settings
argument_list|,
operator|new
name|EventManager
argument_list|()
argument_list|,
operator|new
name|SortEngine
argument_list|(
name|settings
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ResolveOptions
argument_list|()
operator|.
name|setCache
argument_list|(
operator|new
name|CacheManager
argument_list|(
name|settings
argument_list|,
operator|new
name|File
argument_list|(
literal|"build/test/publish/cache"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|sleepSilently
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
end_class

end_unit

