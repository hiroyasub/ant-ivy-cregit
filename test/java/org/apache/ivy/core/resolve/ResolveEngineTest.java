begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ArtifactOrigin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|DefaultResolutionCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|FileSystemResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|CacheCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|ResolveEngineTest
block|{
specifier|private
name|Ivy
name|ivy
decl_stmt|;
specifier|private
name|File
name|cache
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cache
operator|=
operator|new
name|File
argument_list|(
literal|"build/cache"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"ivy.cache.dir"
argument_list|,
name|cache
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|createCache
argument_list|()
expr_stmt|;
name|ivy
operator|=
name|Ivy
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|ivy
operator|.
name|configure
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/ivysettings.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|CacheCleaner
operator|.
name|deleteDir
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInlineResolveWithNonExistingModule
parameter_list|()
throws|throws
name|Exception
block|{
name|ResolveEngine
name|engine
init|=
operator|new
name|ResolveEngine
argument_list|(
name|ivy
operator|.
name|getSettings
argument_list|()
argument_list|,
name|ivy
operator|.
name|getEventManager
argument_list|()
argument_list|,
name|ivy
operator|.
name|getSortEngine
argument_list|()
argument_list|)
decl_stmt|;
name|ResolveOptions
name|options
init|=
operator|new
name|ResolveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setConfs
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mRevId
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1XX"
argument_list|,
literal|"mod1.0XX"
argument_list|,
literal|"1.0XX"
argument_list|)
decl_stmt|;
name|ResolveReport
name|report
init|=
name|engine
operator|.
name|resolve
argument_list|(
name|mRevId
argument_list|,
name|options
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The ResolveReport may never be null"
argument_list|,
name|report
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocateThenDownload
parameter_list|()
block|{
name|ResolveEngine
name|engine
init|=
operator|new
name|ResolveEngine
argument_list|(
name|ivy
operator|.
name|getSettings
argument_list|()
argument_list|,
name|ivy
operator|.
name|getEventManager
argument_list|()
argument_list|,
name|ivy
operator|.
name|getSortEngine
argument_list|()
argument_list|)
decl_stmt|;
name|testLocateThenDownload
argument_list|(
name|engine
argument_list|,
name|DefaultArtifact
operator|.
name|newIvyArtifact
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
literal|"org1#mod1.1;1.0"
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org1/mod1.1/ivys/ivy-1.0.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|testLocateThenDownload
argument_list|(
name|engine
argument_list|,
operator|new
name|DefaultArtifact
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
literal|"org1#mod1.1;1.0"
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
literal|"test/repositories/1/org1/mod1.1/jars/mod1.1-1.0.jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|wontWriteResolvedDependenciesOutsideOfCache
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultResolutionCacheManager
name|orig
init|=
operator|(
name|DefaultResolutionCacheManager
operator|)
name|ivy
operator|.
name|getSettings
argument_list|()
operator|.
name|getResolutionCacheManager
argument_list|()
decl_stmt|;
name|DefaultResolutionCacheManager
name|fake
init|=
operator|new
name|DefaultResolutionCacheManager
argument_list|()
block|{
block|{
name|setBasedir
argument_list|(
name|orig
operator|.
name|getBasedir
argument_list|()
argument_list|)
expr_stmt|;
name|setSettings
argument_list|(
name|ivy
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|getResolvedIvyPropertiesInCache
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getBasedir
argument_list|()
argument_list|,
literal|"../foo.properties"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ivy
operator|.
name|getSettings
argument_list|()
operator|.
name|setResolutionCacheManager
argument_list|(
name|fake
argument_list|)
expr_stmt|;
name|ResolveEngine
name|engine
init|=
operator|new
name|ResolveEngine
argument_list|(
name|ivy
operator|.
name|getSettings
argument_list|()
argument_list|,
name|ivy
operator|.
name|getEventManager
argument_list|()
argument_list|,
name|ivy
operator|.
name|getSortEngine
argument_list|()
argument_list|)
decl_stmt|;
name|ResolveOptions
name|options
init|=
operator|new
name|ResolveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setConfs
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mRevId
init|=
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
literal|"org1#mod1.1;1.0"
argument_list|)
decl_stmt|;
try|try
block|{
name|engine
operator|.
name|resolve
argument_list|(
name|mRevId
argument_list|,
name|options
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|/**      * Tests that setting the dictator resolver on the resolve engine doesn't change the      * dependency resolver set in the Ivy settings. See IVY-1618 for details.      */
annotation|@
name|Test
specifier|public
name|void
name|testSetDictatorResolver
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Ivy
name|current
init|=
name|Ivy
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|current
operator|.
name|configure
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/repositories/ivysettings.xml"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|FileSystemResolver
name|settingsResolver
init|=
operator|new
name|FileSystemResolver
argument_list|()
decl_stmt|;
name|settingsResolver
operator|.
name|setName
argument_list|(
literal|"resolver-1"
argument_list|)
expr_stmt|;
name|current
operator|.
name|getSettings
argument_list|()
operator|.
name|setDictatorResolver
argument_list|(
name|settingsResolver
argument_list|)
expr_stmt|;
specifier|final
name|ResolveEngine
name|engine
init|=
operator|new
name|ResolveEngine
argument_list|(
name|current
operator|.
name|getSettings
argument_list|()
argument_list|,
name|current
operator|.
name|getEventManager
argument_list|()
argument_list|,
name|current
operator|.
name|getSortEngine
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FileSystemResolver
name|engineResolver
init|=
operator|new
name|FileSystemResolver
argument_list|()
decl_stmt|;
name|engineResolver
operator|.
name|setName
argument_list|(
literal|"resolver-2"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setDictatorResolver
argument_list|(
name|engineResolver
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Resolver is null on engine"
argument_list|,
name|engine
operator|.
name|getDictatorResolver
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
literal|"Unexpected resolver on engine"
argument_list|,
name|engineResolver
argument_list|,
name|engine
operator|.
name|getDictatorResolver
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ModuleRevisionId
name|dummy
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"1.2.3"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Resolver is null on Ivy settings"
argument_list|,
name|current
operator|.
name|getSettings
argument_list|()
operator|.
name|getResolver
argument_list|(
name|dummy
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
literal|"Unexpected resolver on Ivy settings"
argument_list|,
name|settingsResolver
argument_list|,
name|current
operator|.
name|getSettings
argument_list|()
operator|.
name|getResolver
argument_list|(
name|dummy
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testLocateThenDownload
parameter_list|(
name|ResolveEngine
name|engine
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|File
name|artifactFile
parameter_list|)
block|{
name|ArtifactOrigin
name|origin
init|=
name|engine
operator|.
name|locate
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|origin
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|origin
operator|.
name|isLocal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artifactFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|origin
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactDownloadReport
name|r
init|=
name|engine
operator|.
name|download
argument_list|(
name|origin
argument_list|,
operator|new
name|DownloadOptions
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|,
name|r
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|r
operator|.
name|getLocalFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|getLocalFile
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createCache
parameter_list|()
block|{
name|cache
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

