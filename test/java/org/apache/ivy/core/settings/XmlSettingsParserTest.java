begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|DefaultRepositoryCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ResolutionCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|LatestRevisionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|LatestStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|LatestTimeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|lock
operator|.
name|AbstractLockStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|lock
operator|.
name|LockStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParserRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParserRegistryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|report
operator|.
name|ReportOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|ChainResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|FileSystemResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|IBiblioResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|MockResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|URLResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|packager
operator|.
name|PackagerResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|ChainVersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|MockVersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test the parsing of Ivy settings file through the {@link XmlSettingsParser}  */
end_comment

begin_class
specifier|public
class|class
name|XmlSettingsParserTest
block|{
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expExc
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-test.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|defaultCache
init|=
name|settings
operator|.
name|getDefaultCache
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|defaultCache
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mycache"
argument_list|,
name|defaultCache
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|settings
operator|.
name|isCheckUpToDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|settings
operator|.
name|doValidate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[module]/ivys/ivy-[revision].xml"
argument_list|,
name|settings
operator|.
name|getDefaultCacheIvyPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[module]/[type]s/[artifact]-[revision].[ext]"
argument_list|,
name|settings
operator|.
name|getDefaultCacheArtifactPattern
argument_list|()
argument_list|)
expr_stmt|;
name|LatestStrategy
name|latest
init|=
name|settings
operator|.
name|getLatestStrategy
argument_list|(
literal|"mylatest-revision"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|latest
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latest
operator|instanceof
name|LatestRevisionStrategy
argument_list|)
expr_stmt|;
name|LatestRevisionStrategy
name|l
init|=
operator|(
name|LatestRevisionStrategy
operator|)
name|latest
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|,
name|l
operator|.
name|getSpecialMeanings
argument_list|()
operator|.
name|get
argument_list|(
literal|"pre"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|4
argument_list|)
argument_list|,
name|l
operator|.
name|getSpecialMeanings
argument_list|()
operator|.
name|get
argument_list|(
literal|"qa"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|defaultResolver
init|=
name|settings
operator|.
name|getDefaultResolver
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|defaultResolver
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"libraries"
argument_list|,
name|defaultResolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|defaultResolver
operator|instanceof
name|FileSystemResolver
argument_list|)
expr_stmt|;
name|FileSystemResolver
name|fsres
init|=
operator|(
name|FileSystemResolver
operator|)
name|defaultResolver
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ivyPatterns
init|=
name|fsres
operator|.
name|getIvyPatterns
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ivyPatterns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivyPatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"lib/[organisation]/[module]/ivys/ivy-[revision].xml"
argument_list|,
name|ivyPatterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|LatestStrategy
name|strategy
init|=
name|fsres
operator|.
name|getLatestStrategy
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strategy
operator|instanceof
name|LatestRevisionStrategy
argument_list|)
expr_stmt|;
name|DependencyResolver
name|internal
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|internal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|internal
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|ChainResolver
name|chain
init|=
operator|(
name|ChainResolver
operator|)
name|internal
decl_stmt|;
name|List
argument_list|<
name|DependencyResolver
argument_list|>
name|subresolvers
init|=
name|chain
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystemResolver
name|fsInt1
init|=
operator|(
name|FileSystemResolver
operator|)
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"int1"
argument_list|,
name|fsInt1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fsInt1
operator|.
name|getIvyPatterns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"sharedrep/[organisation]/[module]/ivys/ivy-[revision].xml"
argument_list|,
name|fsInt1
operator|.
name|getIvyPatterns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int2"
argument_list|,
name|subresolvers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|strategy
operator|=
name|fsInt1
operator|.
name|getLatestStrategy
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strategy
operator|instanceof
name|LatestTimeStrategy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"libraries"
argument_list|,
name|settings
operator|.
name|getResolver
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"unknown"
argument_list|,
literal|"lib"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"internal"
argument_list|,
name|settings
operator|.
name|getResolver
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"apache"
argument_list|,
literal|"ant"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int2"
argument_list|,
name|settings
operator|.
name|getResolver
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"apache"
argument_list|,
literal|"ivy"
argument_list|,
literal|"2.0"
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int1"
argument_list|,
name|settings
operator|.
name|getResolver
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"apache"
argument_list|,
literal|"ivy"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int1"
argument_list|,
name|settings
operator|.
name|getResolver
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"apache"
argument_list|,
literal|"ivyde"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypedef
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-typedef.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|mock
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"mock3"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mock
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mock
operator|instanceof
name|MockResolver
argument_list|)
expr_stmt|;
name|DependencyResolver
name|internal
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|internal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|internal
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|ChainResolver
name|chain
init|=
operator|(
name|ChainResolver
operator|)
name|internal
decl_stmt|;
name|List
argument_list|<
name|DependencyResolver
argument_list|>
name|subresolvers
init|=
name|chain
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock1"
argument_list|,
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock2"
argument_list|,
name|subresolvers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|MockResolver
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subresolvers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|MockResolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatuses
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-status.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bronze"
argument_list|,
name|settings
operator|.
name|getStatusManager
argument_list|()
operator|.
name|getDefaultStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|settings
operator|.
name|getStatusManager
argument_list|()
operator|.
name|getPriority
argument_list|(
literal|"gold"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|settings
operator|.
name|getStatusManager
argument_list|()
operator|.
name|getPriority
argument_list|(
literal|"silver"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|settings
operator|.
name|getStatusManager
argument_list|()
operator|.
name|getPriority
argument_list|(
literal|"bronze"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|settings
operator|.
name|getStatusManager
argument_list|()
operator|.
name|isIntegration
argument_list|(
literal|"gold"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|settings
operator|.
name|getStatusManager
argument_list|()
operator|.
name|isIntegration
argument_list|(
literal|"silver"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|settings
operator|.
name|getStatusManager
argument_list|()
operator|.
name|isIntegration
argument_list|(
literal|"bronze"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConflictManager
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-conflict-manager.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"latest-time"
argument_list|,
name|settings
operator|.
name|getConflictManager
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"apache"
argument_list|,
literal|"ivyde"
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all"
argument_list|,
name|settings
operator|.
name|getConflictManager
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"apache"
argument_list|,
literal|"ant"
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveMode
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-resolveMode.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dynamic"
argument_list|,
name|settings
operator|.
name|getDefaultResolveMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dynamic"
argument_list|,
name|settings
operator|.
name|getResolveMode
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dynamic"
argument_list|,
name|settings
operator|.
name|getResolveMode
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"apache"
argument_list|,
literal|"ivyde"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|settings
operator|.
name|getResolveMode
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"apache"
argument_list|,
literal|"ant"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtraModuleAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-extra-module-attribute.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|settings
operator|.
name|getResolveMode
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"apache"
argument_list|,
literal|"ivy"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCache
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-cache.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"repository"
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
argument_list|,
name|settings
operator|.
name|getDefaultRepositoryCacheBasedir
argument_list|()
operator|.
name|getCanonicalFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"resolution"
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
argument_list|,
name|settings
operator|.
name|getDefaultResolutionCacheBasedir
argument_list|()
operator|.
name|getCanonicalFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artifact-lock"
argument_list|,
name|settings
operator|.
name|getDefaultLockStrategy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[module]/ivys/ivy-[revision].xml"
argument_list|,
name|settings
operator|.
name|getDefaultCacheIvyPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[module]/[type]s/[artifact]-[revision].[ext]"
argument_list|,
name|settings
operator|.
name|getDefaultCacheArtifactPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|settings
operator|.
name|isDefaultUseOrigin
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultRepositoryCacheManager
name|c
init|=
operator|(
name|DefaultRepositoryCacheManager
operator|)
name|settings
operator|.
name|getRepositoryCacheManager
argument_list|(
literal|"mycache"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mycache"
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|c
operator|.
name|getDefaultTTL
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|c
operator|.
name|getTTL
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"apache"
argument_list|,
literal|"ivy"
argument_list|,
literal|"latest.integration"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
operator|*
literal|60
operator|*
literal|1000
operator|+
literal|20
operator|*
literal|1000
argument_list|,
comment|// 10m 20s
name|c
operator|.
name|getTTL
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
literal|3600
operator|*
literal|1000
argument_list|,
comment|// 5h
name|c
operator|.
name|getTTL
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org2"
argument_list|,
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
operator|*
literal|3600
operator|*
literal|1000
argument_list|,
comment|// 2d 12h = 60h
name|c
operator|.
name|getTTL
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org3"
argument_list|,
literal|"A"
argument_list|,
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"mycache"
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
argument_list|,
name|c
operator|.
name|getBasedir
argument_list|()
operator|.
name|getCanonicalFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|c
operator|.
name|isUseOrigin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no-lock"
argument_list|,
name|c
operator|.
name|getLockStrategy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[module]/ivy-[revision].xml"
argument_list|,
name|c
operator|.
name|getIvyPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[module]/[artifact]-[revision].[ext]"
argument_list|,
name|c
operator|.
name|getArtifactPattern
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultRepositoryCacheManager
name|c2
init|=
operator|(
name|DefaultRepositoryCacheManager
operator|)
name|settings
operator|.
name|getRepositoryCacheManager
argument_list|(
literal|"mycache2"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mycache2"
argument_list|,
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"repository"
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
argument_list|,
name|c2
operator|.
name|getBasedir
argument_list|()
operator|.
name|getCanonicalFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artifact-lock"
argument_list|,
name|c2
operator|.
name|getLockStrategy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[module]/ivys/ivy-[revision].xml"
argument_list|,
name|c2
operator|.
name|getIvyPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[module]/[type]s/[artifact]-[revision].[ext]"
argument_list|,
name|c2
operator|.
name|getArtifactPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|c2
operator|.
name|isUseOrigin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|settings
operator|.
name|getResolver
argument_list|(
literal|"A"
argument_list|)
operator|.
name|getRepositoryCacheManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|settings
operator|.
name|getResolver
argument_list|(
literal|"B"
argument_list|)
operator|.
name|getRepositoryCacheManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test of resolver referencing a non existent cache.      *      * @throws Exception if something goes wrong      */
annotation|@
name|Test
specifier|public
name|void
name|testInvalidCache
parameter_list|()
throws|throws
name|Exception
block|{
name|expExc
operator|.
name|expect
argument_list|(
name|ParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expExc
operator|.
name|expectMessage
argument_list|(
literal|"mycache"
argument_list|)
expr_stmt|;
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-cache-invalid.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionMatchers1
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-vmatcher1.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|VersionMatcher
name|mock
init|=
name|settings
operator|.
name|getVersionMatcher
argument_list|(
literal|"vmock"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mock
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mock
operator|instanceof
name|MockVersionMatcher
argument_list|)
expr_stmt|;
name|VersionMatcher
name|v
init|=
name|settings
operator|.
name|getVersionMatcher
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|v
operator|instanceof
name|ChainVersionMatcher
argument_list|)
expr_stmt|;
name|ChainVersionMatcher
name|chain
init|=
operator|(
name|ChainVersionMatcher
operator|)
name|v
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|chain
operator|.
name|getMatchers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chain
operator|.
name|getMatchers
argument_list|()
operator|.
name|contains
argument_list|(
name|mock
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chain
operator|.
name|getMatchers
argument_list|()
operator|.
name|contains
argument_list|(
name|settings
operator|.
name|getVersionMatcher
argument_list|(
literal|"exact"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chain
operator|.
name|getMatchers
argument_list|()
operator|.
name|contains
argument_list|(
name|settings
operator|.
name|getVersionMatcher
argument_list|(
literal|"latest"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionMatchers2
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-vmatcher2.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|VersionMatcher
name|mock
init|=
name|settings
operator|.
name|getVersionMatcher
argument_list|(
literal|"vmock"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mock
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mock
operator|instanceof
name|MockVersionMatcher
argument_list|)
expr_stmt|;
name|VersionMatcher
name|v
init|=
name|settings
operator|.
name|getVersionMatcher
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|v
operator|instanceof
name|ChainVersionMatcher
argument_list|)
expr_stmt|;
name|ChainVersionMatcher
name|chain
init|=
operator|(
name|ChainVersionMatcher
operator|)
name|v
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|chain
operator|.
name|getMatchers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chain
operator|.
name|getMatchers
argument_list|()
operator|.
name|contains
argument_list|(
name|mock
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRef
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-ref.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|internal
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"internal"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|internal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|internal
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|ChainResolver
name|chain
init|=
operator|(
name|ChainResolver
operator|)
name|internal
decl_stmt|;
name|List
argument_list|<
name|DependencyResolver
argument_list|>
name|subresolvers
init|=
name|chain
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystemResolver
name|fsInt1
init|=
operator|(
name|FileSystemResolver
operator|)
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"fs"
argument_list|,
name|fsInt1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ivyPatterns
init|=
name|fsInt1
operator|.
name|getIvyPatterns
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ivyPatterns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivyPatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"sharedrep/[organisation]/[module]/ivys/ivy-[revision].xml"
argument_list|,
name|ivyPatterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|external
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"external"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|external
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|external
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|chain
operator|=
operator|(
name|ChainResolver
operator|)
name|external
expr_stmt|;
name|subresolvers
operator|=
name|chain
operator|.
name|getResolvers
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystemResolver
name|fsInt2
init|=
operator|(
name|FileSystemResolver
operator|)
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"fs"
argument_list|,
name|fsInt2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ivyPatterns
operator|=
name|fsInt2
operator|.
name|getIvyPatterns
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|ivyPatterns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivyPatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"sharedrep/[organisation]/[module]/ivys/ivy-[revision].xml"
argument_list|,
name|ivyPatterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMacro
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-macro.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|def
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|def
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|ChainResolver
name|chain
init|=
operator|(
name|ChainResolver
operator|)
name|def
decl_stmt|;
name|List
argument_list|<
name|DependencyResolver
argument_list|>
name|subresolvers
init|=
name|chain
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystemResolver
name|fsInt1
init|=
operator|(
name|FileSystemResolver
operator|)
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"default-fs1"
argument_list|,
name|fsInt1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ivyPatterns
init|=
name|fsInt1
operator|.
name|getIvyPatterns
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ivyPatterns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivyPatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"path/to/myrep/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]"
argument_list|,
name|ivyPatterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystemResolver
name|fsInt2
init|=
operator|(
name|FileSystemResolver
operator|)
name|subresolvers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"default-fs2"
argument_list|,
name|fsInt2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ivyPatterns
operator|=
name|fsInt2
operator|.
name|getIvyPatterns
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|ivyPatterns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivyPatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"path/to/secondrep/[organisation]/[module]/[type]s/ivy-[revision].xml"
argument_list|,
name|ivyPatterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|other
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"other"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|other
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|chain
operator|=
operator|(
name|ChainResolver
operator|)
name|other
expr_stmt|;
name|subresolvers
operator|=
name|chain
operator|.
name|getResolvers
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fsInt2
operator|=
operator|(
name|FileSystemResolver
operator|)
name|subresolvers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"other-fs2"
argument_list|,
name|fsInt2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ivyPatterns
operator|=
name|fsInt2
operator|.
name|getIvyPatterns
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|ivyPatterns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivyPatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"path/to/secondrep/[module]/[type]s/ivy-[revision].xml"
argument_list|,
name|ivyPatterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for IVY-319.      *      * @throws Exception if something goes wrong      * @see<a href="https://issues.apache.org/jira/browse/IVY-319">IVY-319</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testMacroAndRef
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-macro+ref.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|shared
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"shared"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|shared
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|shared
operator|instanceof
name|FileSystemResolver
argument_list|)
expr_stmt|;
name|DependencyResolver
name|mychain
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"mychain"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mychain
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mychain
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|ChainResolver
name|chain
init|=
operator|(
name|ChainResolver
operator|)
name|mychain
decl_stmt|;
name|List
argument_list|<
name|DependencyResolver
argument_list|>
name|subresolvers
init|=
name|chain
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|shared
operator|=
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shared"
argument_list|,
name|shared
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|shared
operator|instanceof
name|FileSystemResolver
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for IVY-860.      *      * @throws Exception if something goes wrong      * @see<a href="https://issues.apache.org/jira/browse/IVY-860">IVY-860</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testMacroAndRef2
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-macro+ref2.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|macrores
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"macroresolver"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|macrores
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|macrores
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|DependencyResolver
name|testResolver
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testResolver
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testResolver
operator|instanceof
name|IBiblioResolver
argument_list|)
expr_stmt|;
name|ChainResolver
name|chain
init|=
operator|(
name|ChainResolver
operator|)
name|macrores
decl_stmt|;
name|List
argument_list|<
name|DependencyResolver
argument_list|>
name|subresolvers
init|=
name|chain
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testResolver
argument_list|,
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesMissingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-properties-missing-file.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no error must have been thrown, check that the parsing didn't stop...
name|DependencyResolver
name|defaultResolver
init|=
name|settings
operator|.
name|getDefaultResolver
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|defaultResolver
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"libraries"
argument_list|,
name|defaultResolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInclude
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-include.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|def
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|def
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|ChainResolver
name|chain
init|=
operator|(
name|ChainResolver
operator|)
name|def
decl_stmt|;
name|List
argument_list|<
name|DependencyResolver
argument_list|>
name|subresolvers
init|=
name|chain
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystemResolver
name|fsInt1
init|=
operator|(
name|FileSystemResolver
operator|)
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"default-fs1"
argument_list|,
name|fsInt1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ivyPatterns
init|=
name|fsInt1
operator|.
name|getIvyPatterns
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ivyPatterns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivyPatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"path/to/myrep/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]"
argument_list|,
name|ivyPatterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|inc
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"includeworks"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inc
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|chain
operator|=
operator|(
name|ChainResolver
operator|)
name|inc
expr_stmt|;
name|subresolvers
operator|=
name|chain
operator|.
name|getResolvers
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fsInt1
operator|=
operator|(
name|FileSystemResolver
operator|)
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"includeworks-fs1"
argument_list|,
name|fsInt1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ivyPatterns
operator|=
name|fsInt1
operator|.
name|getIvyPatterns
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|ivyPatterns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivyPatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"included/myrep/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]"
argument_list|,
name|ivyPatterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// properties defined in included file should be available to including file (IVY-780)
name|assertEquals
argument_list|(
literal|"myvalue"
argument_list|,
name|settings
operator|.
name|getVariable
argument_list|(
literal|"ivy.test.prop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncludeAbsoluteFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// WARNING : this test will only work if the test are launched from the project root
comment|// directory
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-include-absolute-file.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|inc
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"includeworks"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inc
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Exception
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testIncludeMissingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-include-missing-file.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncludeSpecialCharInName
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-include-special.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|def
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|def
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|ChainResolver
name|chain
init|=
operator|(
name|ChainResolver
operator|)
name|def
decl_stmt|;
name|List
argument_list|<
name|DependencyResolver
argument_list|>
name|subresolvers
init|=
name|chain
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FileSystemResolver
name|fsInt1
init|=
operator|(
name|FileSystemResolver
operator|)
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"default-fs1"
argument_list|,
name|fsInt1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ivyPatterns
init|=
name|fsInt1
operator|.
name|getIvyPatterns
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ivyPatterns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivyPatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"path/to/myrep/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]"
argument_list|,
name|ivyPatterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|inc
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"includeworks"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inc
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|chain
operator|=
operator|(
name|ChainResolver
operator|)
name|inc
expr_stmt|;
name|subresolvers
operator|=
name|chain
operator|.
name|getResolvers
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|subresolvers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subresolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fsInt1
operator|=
operator|(
name|FileSystemResolver
operator|)
name|subresolvers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"includeworks-fs1"
argument_list|,
name|fsInt1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ivyPatterns
operator|=
name|fsInt1
operator|.
name|getIvyPatterns
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|ivyPatterns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivyPatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"included/myrep/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]"
argument_list|,
name|ivyPatterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// properties defined in included file should be available to including file (IVY-780)
name|assertEquals
argument_list|(
literal|"myvalue"
argument_list|,
name|settings
operator|.
name|getVariable
argument_list|(
literal|"ivy.test.prop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRelativePropertiesFile
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParser
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivyconf-properties-relative-to-ivyconf.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertLocationEquals
argument_list|(
literal|"lib"
argument_list|,
name|settings
operator|.
name|getVariable
argument_list|(
literal|"libraries.dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParser
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-parser.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ModuleDescriptorParserRegistryTest
operator|.
name|MyParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getParsers
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutputter
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-outputter.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// System.out.println(Arrays.asList(ivy.getReportOutputters()));
name|ReportOutputter
name|testOutputter
init|=
name|settings
operator|.
name|getReportOutputter
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testOutputter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testOutputter
operator|instanceof
name|MyOutputter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockingStrategies
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-lock-strategies.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|LockStrategy
name|lockStrategy
init|=
name|settings
operator|.
name|getLockStrategy
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|lockStrategy
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lockStrategy
operator|instanceof
name|MyLockStrategy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFileAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|File
name|basedir
init|=
operator|new
name|File
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|settings
operator|.
name|setBaseDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-packager.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|r
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"packager"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|PackagerResolver
argument_list|)
expr_stmt|;
name|PackagerResolver
name|packager
init|=
operator|(
name|PackagerResolver
operator|)
name|r
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
literal|"packager/build"
argument_list|)
argument_list|,
name|packager
operator|.
name|getBuildRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
literal|"packager/cache"
argument_list|)
argument_list|,
name|packager
operator|.
name|getResourceCache
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBaseDirVariables
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|settings
operator|.
name|setBaseDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/base/dir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/base/dir"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|settings
operator|.
name|getVariable
argument_list|(
literal|"basedir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/base/dir"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|settings
operator|.
name|getVariable
argument_list|(
literal|"ivy.basedir"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
operator|new
name|IvySettings
argument_list|()
expr_stmt|;
name|settings
operator|.
name|setVariable
argument_list|(
literal|"basedir"
argument_list|,
operator|new
name|File
argument_list|(
literal|"other/base/dir"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setBaseDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/base/dir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"other/base/dir"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|settings
operator|.
name|getVariable
argument_list|(
literal|"basedir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/base/dir"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|settings
operator|.
name|getVariable
argument_list|(
literal|"ivy.basedir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for IVY-1495.      *<code>&lt;ttl&gt;</code> containing the<code>matcher</code> attribute,      * in an ivy settings file, must work as expected.      *      * @throws Exception if something goes wrong      * @see<a href="https://issues.apache.org/jira/browse/IVY-1495">IVY-1495</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testCacheTTLMatcherAttribute
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|settings
operator|.
name|setBaseDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/base/dir"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-cache-ttl-matcher.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify ttl
specifier|final
name|DefaultRepositoryCacheManager
name|cacheManager
init|=
operator|(
name|DefaultRepositoryCacheManager
operator|)
name|settings
operator|.
name|getRepositoryCacheManager
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing cache manager 'foo'"
argument_list|,
name|cacheManager
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected default ttl on cache manager"
argument_list|,
literal|30000
argument_list|,
name|cacheManager
operator|.
name|getDefaultTTL
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ModuleRevisionId
name|module1
init|=
operator|new
name|ModuleRevisionId
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|module1SpecificTTL
init|=
name|cacheManager
operator|.
name|getTTL
argument_list|(
name|module1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected ttl for module "
operator|+
name|module1
operator|+
literal|" on cache manager"
argument_list|,
literal|60000
argument_list|,
name|module1SpecificTTL
argument_list|)
expr_stmt|;
specifier|final
name|ModuleRevisionId
name|module2
init|=
operator|new
name|ModuleRevisionId
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"food"
argument_list|,
literal|"*"
argument_list|)
argument_list|,
literal|"1.2.4"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|module2SpecificTTL
init|=
name|cacheManager
operator|.
name|getTTL
argument_list|(
name|module2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected ttl for module "
operator|+
name|module2
operator|+
literal|" on cache manager"
argument_list|,
literal|60000
argument_list|,
name|module2SpecificTTL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that the<code>timeout-constraint</code> elements in a Ivy settings file are parsed correctly      *      * @throws Exception if something goes wrong      */
annotation|@
name|Test
specifier|public
name|void
name|testTimeoutConstraints
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|settings
operator|.
name|setBaseDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/base/dir"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-timeout-constraints.xml"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TimeoutConstraint
name|timeout1
init|=
name|settings
operator|.
name|getTimeoutConstraint
argument_list|(
literal|"test-timeout-1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"test-timeout-1 timeout constraint is missing"
argument_list|,
name|timeout1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected connection timeout "
operator|+
name|timeout1
operator|.
name|getConnectionTimeout
argument_list|()
operator|+
literal|" on time constraint test-timeout-1"
argument_list|,
literal|100
argument_list|,
name|timeout1
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected read timeout "
operator|+
name|timeout1
operator|.
name|getReadTimeout
argument_list|()
operator|+
literal|" on time constraint test-timeout-1"
argument_list|,
literal|500
argument_list|,
name|timeout1
operator|.
name|getReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TimeoutConstraint
name|timeout2
init|=
name|settings
operator|.
name|getTimeoutConstraint
argument_list|(
literal|"test-timeout-2"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"test-timeout-2 timeout constraint is missing"
argument_list|,
name|timeout2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected connection timeout "
operator|+
name|timeout2
operator|.
name|getConnectionTimeout
argument_list|()
operator|+
literal|" on time constraint test-timeout-2"
argument_list|,
operator|-
literal|1
argument_list|,
name|timeout2
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected read timeout "
operator|+
name|timeout2
operator|.
name|getReadTimeout
argument_list|()
operator|+
literal|" on time constraint test-timeout-2"
argument_list|,
literal|20
argument_list|,
name|timeout2
operator|.
name|getReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TimeoutConstraint
name|timeout3
init|=
name|settings
operator|.
name|getTimeoutConstraint
argument_list|(
literal|"test-timeout-3"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"test-timeout-3 timeout constraint is missing"
argument_list|,
name|timeout3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected connection timeout "
operator|+
name|timeout3
operator|.
name|getConnectionTimeout
argument_list|()
operator|+
literal|" on time constraint test-timeout-3"
argument_list|,
literal|400
argument_list|,
name|timeout3
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected read timeout "
operator|+
name|timeout3
operator|.
name|getReadTimeout
argument_list|()
operator|+
literal|" on time constraint test-timeout-3"
argument_list|,
operator|-
literal|1
argument_list|,
name|timeout3
operator|.
name|getReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TimeoutConstraint
name|timeout4
init|=
name|settings
operator|.
name|getTimeoutConstraint
argument_list|(
literal|"test-timeout-4"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"test-timeout-4 timeout constraint is missing"
argument_list|,
name|timeout4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected connection timeout "
operator|+
name|timeout4
operator|.
name|getConnectionTimeout
argument_list|()
operator|+
literal|" on time constraint test-timeout-4"
argument_list|,
operator|-
literal|1
argument_list|,
name|timeout4
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected read timeout "
operator|+
name|timeout4
operator|.
name|getReadTimeout
argument_list|()
operator|+
literal|" on time constraint test-timeout-4"
argument_list|,
operator|-
literal|1
argument_list|,
name|timeout4
operator|.
name|getReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that timeout constraints referenced by resolvers, in an ivy settings file, are      * processed correctly and the corresponding resolvers use the right timeout constraints      *      * @throws Exception if something goes wrong      */
annotation|@
name|Test
specifier|public
name|void
name|testResolverTimeoutConstraintRefs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|settings
operator|.
name|setBaseDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/base/dir"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|XmlSettingsParser
name|parser
init|=
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|XmlSettingsParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-timeout-constraints.xml"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|URLResolver
name|resolver1
init|=
operator|(
name|URLResolver
operator|)
name|settings
operator|.
name|getResolver
argument_list|(
literal|"urlresolver-1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing resolver urlresolver-1"
argument_list|,
name|resolver1
argument_list|)
expr_stmt|;
specifier|final
name|TimeoutConstraint
name|resolver1Timeouts
init|=
name|resolver1
operator|.
name|getTimeoutConstraint
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Timeout constraint missing on resolver "
operator|+
name|resolver1
operator|.
name|getName
argument_list|()
argument_list|,
name|resolver1Timeouts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected connection timeout "
operator|+
name|resolver1Timeouts
operator|.
name|getConnectionTimeout
argument_list|()
operator|+
literal|" on resolver "
operator|+
name|resolver1
operator|.
name|getName
argument_list|()
argument_list|,
literal|400
argument_list|,
name|resolver1Timeouts
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected read timeout "
operator|+
name|resolver1Timeouts
operator|.
name|getReadTimeout
argument_list|()
operator|+
literal|" on resolver "
operator|+
name|resolver1
operator|.
name|getName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|resolver1Timeouts
operator|.
name|getReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IBiblioResolver
name|resolver2
init|=
operator|(
name|IBiblioResolver
operator|)
name|settings
operator|.
name|getResolver
argument_list|(
literal|"ibiblio-resolver"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing resolver ibiblio-resolver"
argument_list|,
name|resolver2
argument_list|)
expr_stmt|;
specifier|final
name|TimeoutConstraint
name|resolver2Timeouts
init|=
name|resolver2
operator|.
name|getTimeoutConstraint
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Timeout constraint missing on resolver "
operator|+
name|resolver2
operator|.
name|getName
argument_list|()
argument_list|,
name|resolver2Timeouts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected connection timeout "
operator|+
name|resolver2Timeouts
operator|.
name|getConnectionTimeout
argument_list|()
operator|+
literal|" on resolver "
operator|+
name|resolver2
operator|.
name|getName
argument_list|()
argument_list|,
literal|100
argument_list|,
name|resolver2Timeouts
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected read timeout "
operator|+
name|resolver2Timeouts
operator|.
name|getReadTimeout
argument_list|()
operator|+
literal|" on resolver "
operator|+
name|resolver2
operator|.
name|getName
argument_list|()
argument_list|,
literal|500
argument_list|,
name|resolver2Timeouts
operator|.
name|getReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FileSystemResolver
name|resolver3
init|=
operator|(
name|FileSystemResolver
operator|)
name|settings
operator|.
name|getResolver
argument_list|(
literal|"fs"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing resolver fs"
argument_list|,
name|resolver3
argument_list|)
expr_stmt|;
specifier|final
name|TimeoutConstraint
name|resolver3Timeouts
init|=
name|resolver3
operator|.
name|getTimeoutConstraint
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"No timeout was expected on resolver "
operator|+
name|resolver3
operator|.
name|getName
argument_list|()
argument_list|,
name|resolver3Timeouts
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|MyOutputter
implements|implements
name|ReportOutputter
block|{
specifier|public
name|void
name|output
parameter_list|(
name|ResolveReport
name|report
parameter_list|,
name|ResolutionCacheManager
name|cacheMgr
parameter_list|,
name|ResolveOptions
name|options
parameter_list|)
block|{
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"test"
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MyLockStrategy
extends|extends
name|AbstractLockStrategy
block|{
specifier|public
name|boolean
name|lockArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|artifactFileToDownload
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|unlockArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|artifactFileToDownload
parameter_list|)
block|{
block|}
block|}
specifier|private
name|void
name|assertLocationEquals
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
operator|new
name|File
argument_list|(
name|expected
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|pattern
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

