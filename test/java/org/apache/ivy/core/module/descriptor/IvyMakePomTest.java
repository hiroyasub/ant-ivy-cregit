begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
operator|.
name|IvyMakePom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|TestXmlHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * Tests {@link IvyMakePom}  */
end_comment

begin_class
specifier|public
class|class
name|IvyMakePomTest
block|{
specifier|private
name|Project
name|project
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|workdir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|project
operator|=
name|TestHelper
operator|.
name|newProject
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests that a Ivy file containing a<code>classifier</code> extra-attribute in its dependency, when converted to a      * POM file through {@link IvyMakePom}, retains the<code>classifier</code> in the generated POM      *      * @throws Exception      * @see<a href="https://issues.apache.org/jira/browse/IVY-1528">IVY-1528</a> for more details      */
annotation|@
name|Test
specifier|public
name|void
name|testClassifier
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|File
name|ivyFile
init|=
operator|new
name|File
argument_list|(
name|IvyMakePomTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivy-to-pom-classifier.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ivyFile
operator|+
literal|" is either missing or not a file"
argument_list|,
name|ivyFile
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IvyMakePom
name|makepom
init|=
operator|new
name|IvyMakePom
argument_list|()
decl_stmt|;
name|makepom
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
specifier|final
name|File
name|generatedPomFile
init|=
name|workdir
operator|.
name|newFile
argument_list|(
literal|"test-ivy-to-pom-classifier.pom"
argument_list|)
decl_stmt|;
name|makepom
operator|.
name|setPomFile
argument_list|(
name|generatedPomFile
argument_list|)
expr_stmt|;
name|makepom
operator|.
name|setIvyFile
argument_list|(
name|ivyFile
argument_list|)
expr_stmt|;
comment|// run the task
name|makepom
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// read the generated pom
specifier|final
name|NodeList
name|dependencies
init|=
operator|(
name|NodeList
operator|)
name|TestXmlHelper
operator|.
name|evaluateXPathExpr
argument_list|(
name|generatedPomFile
argument_list|,
literal|"/project/dependencies/dependency"
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Dependencies element wasn't found in the generated POM file"
argument_list|,
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of dependencies in the generated POM file"
argument_list|,
literal|2
argument_list|,
name|dependencies
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|expectedPomArtifactIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedPomArtifactIds
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|expectedPomArtifactIds
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencies
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|PomDependency
name|pomDependency
init|=
name|PomDependency
operator|.
name|parse
argument_list|(
name|dependencies
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Dependency generated was null"
argument_list|,
name|pomDependency
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected dependency "
operator|+
name|pomDependency
argument_list|,
name|expectedPomArtifactIds
operator|.
name|contains
argument_list|(
name|pomDependency
operator|.
name|artifactId
argument_list|)
argument_list|)
expr_stmt|;
comment|// we no longer expect this, so remove it
name|expectedPomArtifactIds
operator|.
name|remove
argument_list|(
name|pomDependency
operator|.
name|artifactId
argument_list|)
expr_stmt|;
if|if
condition|(
name|pomDependency
operator|.
name|artifactId
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected group id for generated dependency "
operator|+
name|pomDependency
argument_list|,
literal|"org"
argument_list|,
name|pomDependency
operator|.
name|groupId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected version for generated dependency "
operator|+
name|pomDependency
argument_list|,
literal|"1.2.3"
argument_list|,
name|pomDependency
operator|.
name|version
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Classifier was expected to be absent for dependency "
operator|+
name|pomDependency
argument_list|,
name|pomDependency
operator|.
name|classifier
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pomDependency
operator|.
name|artifactId
operator|.
name|equals
argument_list|(
literal|"bar"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected group id for generated dependency "
operator|+
name|pomDependency
argument_list|,
literal|"apache"
argument_list|,
name|pomDependency
operator|.
name|groupId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected version for generated dependency "
operator|+
name|pomDependency
argument_list|,
literal|"2.0.0"
argument_list|,
name|pomDependency
operator|.
name|version
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected classifier for dependency "
operator|+
name|pomDependency
argument_list|,
literal|"class1"
argument_list|,
name|pomDependency
operator|.
name|classifier
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Some expected dependencies "
operator|+
name|expectedPomArtifactIds
operator|+
literal|" were not found in the generated POM file"
argument_list|,
name|expectedPomArtifactIds
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|PomDependency
block|{
specifier|private
specifier|final
name|String
name|groupId
decl_stmt|;
specifier|private
specifier|final
name|String
name|artifactId
decl_stmt|;
specifier|private
specifier|final
name|String
name|version
decl_stmt|;
specifier|private
specifier|final
name|String
name|scope
decl_stmt|;
specifier|private
specifier|final
name|String
name|classifier
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|final
name|boolean
name|optional
decl_stmt|;
specifier|private
name|PomDependency
parameter_list|(
specifier|final
name|String
name|groupId
parameter_list|,
specifier|final
name|String
name|artifactId
parameter_list|,
specifier|final
name|String
name|version
parameter_list|,
specifier|final
name|String
name|scope
parameter_list|,
specifier|final
name|String
name|classifier
parameter_list|)
block|{
name|this
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|scope
argument_list|,
name|classifier
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PomDependency
parameter_list|(
specifier|final
name|String
name|groupId
parameter_list|,
specifier|final
name|String
name|artifactId
parameter_list|,
specifier|final
name|String
name|version
parameter_list|,
specifier|final
name|String
name|scope
parameter_list|,
specifier|final
name|String
name|classifier
parameter_list|,
specifier|final
name|boolean
name|optional
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
name|this
operator|.
name|artifactId
operator|=
name|artifactId
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|classifier
operator|=
name|classifier
expr_stmt|;
name|this
operator|.
name|optional
operator|=
name|optional
expr_stmt|;
block|}
specifier|static
name|PomDependency
name|parse
parameter_list|(
specifier|final
name|Node
name|dependencyNode
parameter_list|)
block|{
if|if
condition|(
name|dependencyNode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|NodeList
name|children
init|=
name|dependencyNode
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|PomDependency
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|String
name|groupId
init|=
literal|null
decl_stmt|;
name|String
name|artifactId
init|=
literal|null
decl_stmt|;
name|String
name|version
init|=
literal|null
decl_stmt|;
name|String
name|scope
init|=
literal|null
decl_stmt|;
name|String
name|classifier
init|=
literal|null
decl_stmt|;
name|String
name|optional
init|=
literal|null
decl_stmt|;
name|Node
name|nextChild
init|=
name|children
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|nextChild
operator|!=
literal|null
condition|)
block|{
name|nextChild
operator|=
name|skipIfTextNode
argument_list|(
name|nextChild
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextChild
operator|==
literal|null
condition|)
block|{
break|break;
block|}
specifier|final
name|String
name|nodeName
init|=
name|nextChild
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|nodeName
condition|)
block|{
case|case
literal|"groupId"
case|:
name|groupId
operator|=
name|nextChild
operator|.
name|getTextContent
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"artifactId"
case|:
name|artifactId
operator|=
name|nextChild
operator|.
name|getTextContent
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"version"
case|:
name|version
operator|=
name|nextChild
operator|.
name|getTextContent
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"classifier"
case|:
name|classifier
operator|=
name|nextChild
operator|.
name|getTextContent
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"scope"
case|:
name|scope
operator|=
name|nextChild
operator|.
name|getTextContent
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"optional"
case|:
name|optional
operator|=
name|nextChild
operator|.
name|getTextContent
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected child element "
operator|+
name|nextChild
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" under dependency element"
argument_list|)
throw|;
block|}
comment|// move to next sibling
name|nextChild
operator|=
name|nextChild
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|PomDependency
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|scope
argument_list|,
name|classifier
argument_list|,
name|optional
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|optional
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Node
name|skipIfTextNode
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
return|return
name|node
operator|.
name|getNextSibling
argument_list|()
return|;
block|}
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"PomDependency{groupId='%s', artifactId='%s', version='%s', scope='%s', classifier='%s'}"
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|scope
argument_list|,
name|classifier
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

