begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ModuleIdTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testModuleId
parameter_list|()
block|{
name|String
name|org
init|=
literal|"apache"
decl_stmt|;
name|String
name|name
init|=
literal|"some-new-module"
decl_stmt|;
name|ModuleId
name|moduleId
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|org
argument_list|,
name|moduleId
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|moduleId
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModuleIdIllegalArgumentException1
parameter_list|()
block|{
name|String
name|name
init|=
literal|"some-new-module"
decl_stmt|;
try|try
block|{
operator|new
name|ModuleId
argument_list|(
literal|null
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|fail
argument_list|(
literal|"A null should be allowed for argument 'org'."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testModuleIdIllegalArgumentException2
parameter_list|()
block|{
name|String
name|org
init|=
literal|"apache"
decl_stmt|;
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsObjectTrue
parameter_list|()
block|{
name|String
name|org
init|=
literal|"apache"
decl_stmt|;
name|String
name|name
init|=
literal|"some-new-module"
decl_stmt|;
name|ModuleId
name|moduleId
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|ModuleId
name|moduleId2
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|moduleId
operator|.
name|equals
argument_list|(
name|moduleId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moduleId
operator|.
name|equals
argument_list|(
name|moduleId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moduleId2
operator|.
name|equals
argument_list|(
name|moduleId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsObjectFalse
parameter_list|()
block|{
name|String
name|org
init|=
literal|"apache"
decl_stmt|;
name|String
name|name
init|=
literal|"some-new-module"
decl_stmt|;
name|ModuleId
name|moduleId
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|ModuleId
name|moduleId2
init|=
operator|new
name|ModuleId
argument_list|(
literal|null
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|moduleId
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moduleId
operator|.
name|equals
argument_list|(
name|moduleId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|moduleId2
operator|.
name|equals
argument_list|(
name|moduleId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodeToString
parameter_list|()
block|{
name|String
name|org
init|=
literal|"apache"
decl_stmt|;
name|String
name|name
init|=
literal|"some-new-module"
decl_stmt|;
name|ModuleId
name|moduleId
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|org
operator|+
name|ModuleId
operator|.
name|ENCODE_SEPARATOR
operator|+
name|name
argument_list|,
name|moduleId
operator|.
name|encodeToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecode
parameter_list|()
block|{
name|String
name|org
init|=
literal|"apache"
decl_stmt|;
name|String
name|name
init|=
literal|"some-new-module"
decl_stmt|;
name|ModuleId
name|moduleId
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|ModuleId
name|moduleId2
init|=
name|ModuleId
operator|.
name|decode
argument_list|(
name|moduleId
operator|.
name|encodeToString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|moduleId
argument_list|,
name|moduleId2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCompareToNullObject
parameter_list|()
block|{
name|String
name|org
init|=
literal|"apache"
decl_stmt|;
name|String
name|name
init|=
literal|"some-new-module"
decl_stmt|;
name|ModuleId
name|moduleId
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|moduleId
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareToEqual
parameter_list|()
block|{
name|String
name|org
init|=
literal|"apache"
decl_stmt|;
name|String
name|name
init|=
literal|"some-new-module"
decl_stmt|;
name|ModuleId
name|moduleId
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|moduleId
operator|.
name|compareTo
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareToLessThan
parameter_list|()
block|{
name|String
name|org
init|=
literal|"apache"
decl_stmt|;
name|String
name|name
init|=
literal|"some-new-module"
decl_stmt|;
name|ModuleId
name|moduleId
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|String
name|name2
init|=
literal|"the-new-module"
decl_stmt|;
name|ModuleId
name|moduleId2
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name2
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|moduleId
operator|+
literal|"\n"
operator|+
name|moduleId2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moduleId
operator|.
name|compareTo
argument_list|(
name|moduleId2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareToGreaterThan
parameter_list|()
block|{
name|String
name|org
init|=
literal|"apache"
decl_stmt|;
name|String
name|name
init|=
literal|"some-new-module"
decl_stmt|;
name|ModuleId
name|moduleId
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|String
name|name2
init|=
literal|"the-new-module"
decl_stmt|;
name|ModuleId
name|moduleId2
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|name2
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|moduleId
operator|+
literal|"\n"
operator|+
name|moduleId2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|moduleId2
operator|.
name|compareTo
argument_list|(
name|moduleId
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

