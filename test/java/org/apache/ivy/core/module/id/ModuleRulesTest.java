begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|ExactPatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|MapMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|NoFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ModuleRulesTest
block|{
specifier|private
name|ModuleRules
name|rules
decl_stmt|;
specifier|private
name|Object
index|[]
name|rule
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|rules
operator|=
operator|new
name|ModuleRules
argument_list|()
expr_stmt|;
name|rule
operator|=
operator|new
name|Object
index|[
literal|10
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rule
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rule
index|[
name|i
index|]
operator|=
literal|"RULE_"
operator|+
name|i
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRule
parameter_list|()
throws|throws
name|Exception
block|{
comment|// fixture
name|rules
operator|.
name|defineRule
argument_list|(
name|mapMatcher
argument_list|()
operator|.
name|organization
argument_list|(
literal|"apache"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|rule
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|rules
operator|.
name|defineRule
argument_list|(
name|mapMatcher
argument_list|()
operator|.
name|organization
argument_list|(
literal|"other"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|rule
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test
name|assertRule
argument_list|(
name|rule
index|[
literal|0
index|]
argument_list|,
literal|"apache#module1;1.5"
argument_list|)
expr_stmt|;
name|assertRule
argument_list|(
name|rule
index|[
literal|0
index|]
argument_list|,
literal|"apache#module2;3.0"
argument_list|)
expr_stmt|;
name|assertRule
argument_list|(
name|rule
index|[
literal|1
index|]
argument_list|,
literal|"other#module2;1.5"
argument_list|)
expr_stmt|;
name|assertRule
argument_list|(
literal|null
argument_list|,
literal|"unknown#module1;1.5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRuleWithFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// fixture
name|rules
operator|.
name|defineRule
argument_list|(
name|mapMatcher
argument_list|()
operator|.
name|organization
argument_list|(
literal|"apache"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|rule
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|rules
operator|.
name|defineRule
argument_list|(
name|mapMatcher
argument_list|()
operator|.
name|module
argument_list|(
literal|"module1"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|rule
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|rules
operator|.
name|defineRule
argument_list|(
name|mapMatcher
argument_list|()
operator|.
name|module
argument_list|(
literal|"module2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|rule
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// test
name|assertRule
argument_list|(
name|rule
index|[
literal|0
index|]
argument_list|,
literal|"apache#module1;1.5"
argument_list|,
name|acceptAll
argument_list|()
argument_list|)
expr_stmt|;
name|assertRule
argument_list|(
name|rule
index|[
literal|1
index|]
argument_list|,
literal|"apache#module1;1.5"
argument_list|,
name|acceptSecond
argument_list|()
argument_list|)
expr_stmt|;
name|assertModuleIdRule
argument_list|(
name|rule
index|[
literal|1
index|]
argument_list|,
literal|"apache#module1"
argument_list|,
name|acceptSecond
argument_list|()
argument_list|)
expr_stmt|;
name|assertRule
argument_list|(
literal|null
argument_list|,
literal|"apache#module1;1.5"
argument_list|,
name|acceptNone
argument_list|()
argument_list|)
expr_stmt|;
name|assertRule
argument_list|(
name|rule
index|[
literal|2
index|]
argument_list|,
literal|"apache#module2;1.5"
argument_list|,
name|acceptSecond
argument_list|()
argument_list|)
expr_stmt|;
name|assertRule
argument_list|(
literal|null
argument_list|,
literal|"unknown#module4;1.5"
argument_list|,
name|acceptAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test helpers
specifier|private
name|Filter
name|acceptNone
parameter_list|()
block|{
return|return
operator|new
name|Filter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AcceptNone"
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Filter
name|acceptSecond
parameter_list|()
block|{
return|return
operator|new
name|Filter
argument_list|()
block|{
specifier|private
name|int
name|cpt
decl_stmt|;
specifier|public
name|boolean
name|accept
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|++
name|cpt
operator|==
literal|2
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AcceptSecond"
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Filter
name|acceptAll
parameter_list|()
block|{
return|return
name|NoFilter
operator|.
name|INSTANCE
return|;
block|}
specifier|private
name|void
name|assertRule
parameter_list|(
name|Object
name|rule
parameter_list|,
name|String
name|mrid
parameter_list|)
block|{
name|Object
name|ruleFound
init|=
name|rules
operator|.
name|getRule
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
name|mrid
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexcepted rule for "
operator|+
name|mrid
argument_list|,
name|rule
argument_list|,
name|ruleFound
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertRule
parameter_list|(
name|Object
name|rule
parameter_list|,
name|String
name|mrid
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|Object
name|ruleFound
init|=
name|rules
operator|.
name|getRule
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
name|mrid
argument_list|)
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexcepted rule for "
operator|+
name|mrid
operator|+
literal|" filtered by "
operator|+
name|filter
argument_list|,
name|rule
argument_list|,
name|ruleFound
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertModuleIdRule
parameter_list|(
name|Object
name|rule
parameter_list|,
name|String
name|mid
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|Object
name|ruleFound
init|=
name|rules
operator|.
name|getRule
argument_list|(
name|ModuleId
operator|.
name|parse
argument_list|(
name|mid
argument_list|)
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unexcepted rule for "
operator|+
name|mid
operator|+
literal|" filtered by "
operator|+
name|filter
argument_list|,
name|rule
argument_list|,
name|ruleFound
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MridMatcherBuilder
name|mapMatcher
parameter_list|()
block|{
return|return
operator|new
name|MridMatcherBuilder
argument_list|()
return|;
block|}
specifier|public
class|class
name|MridMatcherBuilder
block|{
specifier|private
name|Map
name|attributes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|PatternMatcher
name|matcher
init|=
name|ExactPatternMatcher
operator|.
name|INSTANCE
decl_stmt|;
specifier|public
name|MridMatcherBuilder
name|organization
parameter_list|(
name|String
name|org
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|org
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MridMatcherBuilder
name|module
parameter_list|(
name|String
name|mod
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|mod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MapMatcher
name|build
parameter_list|()
block|{
return|return
operator|new
name|MapMatcher
argument_list|(
name|attributes
argument_list|,
name|matcher
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

