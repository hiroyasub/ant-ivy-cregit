begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|status
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|status
operator|.
name|StatusManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|LatestVersionMatcherTest
block|{
specifier|private
specifier|final
name|LatestVersionMatcher
name|vm
init|=
operator|new
name|LatestVersionMatcher
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|IvyContext
operator|.
name|pushNewContext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|IvyContext
operator|.
name|popContext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNeedModuleDescriptorStandardStatus
parameter_list|()
block|{
name|assertNeed
argument_list|(
literal|"latest.release"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNeed
argument_list|(
literal|"latest.milestone"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNeed
argument_list|(
literal|"latest.integration"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNeedModuleDescriptorCustomStatus
parameter_list|()
block|{
name|StatusManager
operator|.
name|getCurrent
argument_list|()
operator|.
name|addStatus
argument_list|(
operator|new
name|Status
argument_list|(
literal|"release"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|StatusManager
operator|.
name|getCurrent
argument_list|()
operator|.
name|addStatus
argument_list|(
operator|new
name|Status
argument_list|(
literal|"snapshot"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNeed
argument_list|(
literal|"latest.release"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNeed
argument_list|(
literal|"latest.snapshot"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcceptForStandardStatus
parameter_list|()
block|{
name|assertAccept
argument_list|(
literal|"latest.release"
argument_list|,
literal|"release"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertAccept
argument_list|(
literal|"latest.release"
argument_list|,
literal|"milestone"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertAccept
argument_list|(
literal|"latest.release"
argument_list|,
literal|"integration"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcceptForSameBranches
parameter_list|()
block|{
name|assertAccept
argument_list|(
literal|"latest.release"
argument_list|,
literal|"trunk"
argument_list|,
literal|"release"
argument_list|,
literal|"trunk"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertAccept
argument_list|(
literal|"latest.release"
argument_list|,
literal|"trunk"
argument_list|,
literal|"milestone"
argument_list|,
literal|"trunk"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertAccept
argument_list|(
literal|"latest.release"
argument_list|,
literal|"trunk"
argument_list|,
literal|"integration"
argument_list|,
literal|"trunk"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcceptForDifferentBranches
parameter_list|()
block|{
name|assertAccept
argument_list|(
literal|"latest.release"
argument_list|,
literal|"trunk"
argument_list|,
literal|"release"
argument_list|,
literal|"feature"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertAccept
argument_list|(
literal|"latest.release"
argument_list|,
literal|"trunk"
argument_list|,
literal|"milestone"
argument_list|,
literal|"feature"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertAccept
argument_list|(
literal|"latest.release"
argument_list|,
literal|"trunk"
argument_list|,
literal|"integration"
argument_list|,
literal|"feature"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// assertion helper methods
specifier|private
name|void
name|assertNeed
parameter_list|(
name|String
name|askedVersion
parameter_list|,
name|boolean
name|b
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|b
argument_list|,
name|vm
operator|.
name|needModuleDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"name"
argument_list|,
name|askedVersion
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|assertNeed
parameter_list|(
name|String
name|askedVersion
parameter_list|,
name|String
name|askedBranch
parameter_list|,
name|boolean
name|b
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|b
argument_list|,
name|vm
operator|.
name|needModuleDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"name"
argument_list|,
name|askedBranch
argument_list|,
name|askedVersion
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertAccept
parameter_list|(
name|String
name|askedVersion
parameter_list|,
name|String
name|foundStatus
parameter_list|,
name|boolean
name|b
parameter_list|)
block|{
name|ModuleRevisionId
name|askedMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"name"
argument_list|,
name|askedVersion
argument_list|)
decl_stmt|;
name|DefaultModuleDescriptor
name|foundMD
init|=
name|DefaultModuleDescriptor
operator|.
name|newDefaultInstance
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"name"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|foundMD
operator|.
name|setStatus
argument_list|(
name|foundStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|vm
operator|.
name|accept
argument_list|(
name|askedMrid
argument_list|,
name|foundMD
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertAccept
parameter_list|(
name|String
name|askedVersion
parameter_list|,
name|String
name|askedBranch
parameter_list|,
name|String
name|foundStatus
parameter_list|,
name|String
name|foundBranch
parameter_list|,
name|boolean
name|b
parameter_list|)
block|{
name|ModuleRevisionId
name|askedMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"name"
argument_list|,
name|askedBranch
argument_list|,
name|askedVersion
argument_list|)
decl_stmt|;
name|DefaultModuleDescriptor
name|foundMD
init|=
name|DefaultModuleDescriptor
operator|.
name|newDefaultInstance
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"name"
argument_list|,
name|foundBranch
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|foundMD
operator|.
name|setStatus
argument_list|(
name|foundStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|vm
operator|.
name|accept
argument_list|(
name|askedMrid
argument_list|,
name|foundMD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

