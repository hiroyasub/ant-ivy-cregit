begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|DefaultRepositoryCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultIncludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ArtifactId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|DownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|NamedTimeoutConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|TimeoutConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
operator|.
name|SortEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|ExactPatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests URLResolver. Http tests are based upon ibiblio site.  */
end_comment

begin_class
specifier|public
class|class
name|URLResolverTest
extends|extends
name|AbstractDependencyResolverTest
block|{
comment|// remote.test
specifier|private
name|IvySettings
name|settings
decl_stmt|;
specifier|private
name|ResolveEngine
name|engine
decl_stmt|;
specifier|private
name|ResolveData
name|data
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|settings
operator|=
operator|new
name|IvySettings
argument_list|()
expr_stmt|;
name|engine
operator|=
operator|new
name|ResolveEngine
argument_list|(
name|settings
argument_list|,
operator|new
name|EventManager
argument_list|()
argument_list|,
operator|new
name|SortEngine
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ResolveData
argument_list|(
name|engine
argument_list|,
operator|new
name|ResolveOptions
argument_list|()
argument_list|)
expr_stmt|;
name|TestHelper
operator|.
name|createCache
argument_list|()
expr_stmt|;
name|settings
operator|.
name|setDefaultCache
argument_list|(
name|TestHelper
operator|.
name|cache
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|TestHelper
operator|.
name|cleanCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFile
parameter_list|()
throws|throws
name|Exception
block|{
name|URLResolver
name|resolver
init|=
operator|new
name|URLResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|String
name|rootpath
init|=
operator|new
name|File
argument_list|(
literal|"test/repositories/1"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|addIvyPattern
argument_list|(
name|rootpath
operator|+
literal|"/[organisation]/[module]/ivys/ivy-[revision].xml"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|rootpath
operator|+
literal|"/[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|mrid
argument_list|,
literal|false
argument_list|)
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mrid
argument_list|,
name|rmr
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|pubdate
init|=
operator|new
name|GregorianCalendar
argument_list|(
literal|2004
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pubdate
argument_list|,
name|rmr
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
expr_stmt|;
comment|// test to ask to download
name|DefaultArtifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
name|pubdate
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
decl_stmt|;
name|DownloadReport
name|report
init|=
name|resolver
operator|.
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
name|artifact
block|}
argument_list|,
name|downloadOptions
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|report
operator|.
name|getArtifactsReports
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ArtifactDownloadReport
name|ar
init|=
name|report
operator|.
name|getArtifactReport
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artifact
argument_list|,
name|ar
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|,
name|ar
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// test to ask to download again, should use cache
name|report
operator|=
name|resolver
operator|.
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
name|artifact
block|}
argument_list|,
name|downloadOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|report
operator|.
name|getArtifactsReports
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ar
operator|=
name|report
operator|.
name|getArtifactReport
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artifact
argument_list|,
name|ar
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|,
name|ar
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLatestFile
parameter_list|()
throws|throws
name|Exception
block|{
name|URLResolver
name|resolver
init|=
operator|new
name|URLResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|String
name|rootpath
init|=
operator|new
name|File
argument_list|(
literal|"test/repositories/1"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|addIvyPattern
argument_list|(
name|rootpath
operator|+
literal|"[organisation]/[module]/ivys/ivy-[revision].xml"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|rootpath
operator|+
literal|"[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"2.0"
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"latest.integration"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mrid
argument_list|,
name|rmr
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|pubdate
init|=
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pubdate
argument_list|,
name|rmr
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLatestFileWithOpaqueURL
parameter_list|()
throws|throws
name|Exception
block|{
name|URLResolver
name|resolver
init|=
operator|new
name|URLResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|String
name|rootpath
init|=
operator|new
name|File
argument_list|(
literal|"test/repositories/1"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|addIvyPattern
argument_list|(
name|rootpath
operator|+
literal|"/[organisation]/[module]/ivys/ivy-[revision].xml"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|rootpath
operator|+
literal|"/[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"2.0"
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"latest.integration"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mrid
argument_list|,
name|rmr
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|pubdate
init|=
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pubdate
argument_list|,
name|rmr
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIBiblio
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ibiblioRoot
init|=
name|IBiblioHelper
operator|.
name|getIBiblioMirror
argument_list|()
decl_stmt|;
if|if
condition|(
name|ibiblioRoot
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|URLResolver
name|resolver
init|=
operator|new
name|URLResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|ibiblioRoot
operator|+
literal|"/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"apache"
argument_list|,
literal|"commons-fileupload"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|mrid
argument_list|,
literal|false
argument_list|)
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mrid
argument_list|,
name|rmr
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultArtifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
name|rmr
operator|.
name|getPublicationDate
argument_list|()
argument_list|,
literal|"commons-fileupload"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
decl_stmt|;
name|DownloadReport
name|report
init|=
name|resolver
operator|.
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
name|artifact
block|}
argument_list|,
name|downloadOptions
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|report
operator|.
name|getArtifactsReports
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ArtifactDownloadReport
name|ar
init|=
name|report
operator|.
name|getArtifactReport
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artifact
argument_list|,
name|ar
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|,
name|ar
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// test to ask to download again, should use cache
name|report
operator|=
name|resolver
operator|.
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
name|artifact
block|}
argument_list|,
name|downloadOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|report
operator|.
name|getArtifactsReports
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ar
operator|=
name|report
operator|.
name|getArtifactReport
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artifact
argument_list|,
name|ar
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|,
name|ar
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIBiblioArtifacts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ibiblioRoot
init|=
name|IBiblioHelper
operator|.
name|getIBiblioMirror
argument_list|()
decl_stmt|;
if|if
condition|(
name|ibiblioRoot
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|URLResolver
name|resolver
init|=
operator|new
name|URLResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|ibiblioRoot
operator|+
literal|"/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"apache"
argument_list|,
literal|"nanning"
argument_list|,
literal|"0.9"
argument_list|)
decl_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|mrid
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dd
operator|.
name|addIncludeRule
argument_list|(
literal|"default"
argument_list|,
operator|new
name|DefaultIncludeRule
argument_list|(
operator|new
name|ArtifactId
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
literal|"nanning-profiler"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|,
name|ExactPatternMatcher
operator|.
name|INSTANCE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addIncludeRule
argument_list|(
literal|"default"
argument_list|,
operator|new
name|DefaultIncludeRule
argument_list|(
operator|new
name|ArtifactId
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
literal|"nanning-trace"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|,
name|ExactPatternMatcher
operator|.
name|INSTANCE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mrid
argument_list|,
name|rmr
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultArtifact
name|profiler
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
name|rmr
operator|.
name|getPublicationDate
argument_list|()
argument_list|,
literal|"nanning-profiler"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
decl_stmt|;
name|DefaultArtifact
name|trace
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
name|rmr
operator|.
name|getPublicationDate
argument_list|()
argument_list|,
literal|"nanning-trace"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
decl_stmt|;
name|DownloadReport
name|report
init|=
name|resolver
operator|.
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
name|profiler
block|,
name|trace
block|}
argument_list|,
name|downloadOptions
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|report
operator|.
name|getArtifactsReports
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ArtifactDownloadReport
name|ar
init|=
name|report
operator|.
name|getArtifactReport
argument_list|(
name|profiler
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|profiler
argument_list|,
name|ar
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|,
name|ar
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
name|ar
operator|=
name|report
operator|.
name|getArtifactReport
argument_list|(
name|trace
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|trace
argument_list|,
name|ar
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|,
name|ar
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// test to ask to download again, should use cache
name|report
operator|=
name|resolver
operator|.
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
name|profiler
block|,
name|trace
block|}
argument_list|,
name|downloadOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|report
operator|.
name|getArtifactsReports
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ar
operator|=
name|report
operator|.
name|getArtifactReport
argument_list|(
name|profiler
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|profiler
argument_list|,
name|ar
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|,
name|ar
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
name|ar
operator|=
name|report
operator|.
name|getArtifactReport
argument_list|(
name|trace
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|trace
argument_list|,
name|ar
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|,
name|ar
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLatestIBiblio
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ibiblioRoot
init|=
name|IBiblioHelper
operator|.
name|getIBiblioMirror
argument_list|()
decl_stmt|;
if|if
condition|(
name|ibiblioRoot
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|URLResolver
name|resolver
init|=
operator|new
name|URLResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|ibiblioRoot
operator|+
literal|"/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"objectweb"
argument_list|,
literal|"asm"
argument_list|,
literal|"1.4+"
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|mrid
argument_list|,
literal|false
argument_list|)
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.4.3"
argument_list|,
name|rmr
operator|.
name|getId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionRangeIBiblio
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ibiblioRoot
init|=
name|IBiblioHelper
operator|.
name|getIBiblioMirror
argument_list|()
decl_stmt|;
if|if
condition|(
name|ibiblioRoot
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|URLResolver
name|resolver
init|=
operator|new
name|URLResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setAlwaysCheckExactRevision
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addIvyPattern
argument_list|(
name|ibiblioRoot
operator|+
literal|"/[module]/poms/[module]-[revision].pom"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|ibiblioRoot
operator|+
literal|"/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"asm"
argument_list|,
literal|"asm"
argument_list|,
literal|"[1.4,1.5]"
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|mrid
argument_list|,
literal|false
argument_list|)
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.4.4"
argument_list|,
name|rmr
operator|.
name|getId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknown
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ibiblioRoot
init|=
name|IBiblioHelper
operator|.
name|getIBiblioMirror
argument_list|()
decl_stmt|;
if|if
condition|(
name|ibiblioRoot
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|URLResolver
name|resolver
init|=
operator|new
name|URLResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addIvyPattern
argument_list|(
name|ibiblioRoot
operator|+
literal|"/[module]/ivys/ivy-[revision].xml"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|ibiblioRoot
operator|+
literal|"/maven/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|getDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"unknown"
argument_list|,
literal|"unknown"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDownloadWithUseOriginIsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|URLResolver
name|resolver
init|=
operator|new
name|URLResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|String
name|rootpath
init|=
operator|new
name|File
argument_list|(
literal|"test/repositories/1"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|addIvyPattern
argument_list|(
name|rootpath
operator|+
literal|"/[organisation]/[module]/ivys/ivy-[revision].xml"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|rootpath
operator|+
literal|"/[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DefaultRepositoryCacheManager
operator|)
name|resolver
operator|.
name|getRepositoryCacheManager
argument_list|()
operator|)
operator|.
name|setUseOrigin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|mrid
argument_list|,
literal|false
argument_list|)
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mrid
argument_list|,
name|rmr
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|pubdate
init|=
operator|new
name|GregorianCalendar
argument_list|(
literal|2004
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pubdate
argument_list|,
name|rmr
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
expr_stmt|;
comment|// test to ask to download
name|DefaultArtifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
name|pubdate
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
decl_stmt|;
name|DownloadReport
name|report
init|=
name|resolver
operator|.
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
name|artifact
block|}
argument_list|,
operator|new
name|DownloadOptions
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|report
operator|.
name|getArtifactsReports
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ArtifactDownloadReport
name|ar
init|=
name|report
operator|.
name|getArtifactReport
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artifact
argument_list|,
name|ar
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|,
name|ar
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that the timeout constraint set on the URL resolver is used correctly by the resolver      *      * @throws Exception if something goes wrong      */
annotation|@
name|Test
specifier|public
name|void
name|testTimeoutConstraint
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NamedTimeoutConstraint
name|highTimeout
init|=
operator|new
name|NamedTimeoutConstraint
argument_list|(
literal|"test-high-timeout"
argument_list|)
decl_stmt|;
name|highTimeout
operator|.
name|setConnectionTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addConfigured
argument_list|(
name|highTimeout
argument_list|)
expr_stmt|;
specifier|final
name|NamedTimeoutConstraint
name|extremelyLowTimeout
init|=
operator|new
name|NamedTimeoutConstraint
argument_list|(
literal|"test-extremely-low-timeout"
argument_list|)
decl_stmt|;
name|extremelyLowTimeout
operator|.
name|setConnectionTimeout
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|extremelyLowTimeout
operator|.
name|setReadTimeout
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addConfigured
argument_list|(
name|extremelyLowTimeout
argument_list|)
expr_stmt|;
comment|// setup a HTTP backed repo
comment|// TODO: Right now the port is hard coded, but we need to find a "available" port to which can be bind to.
comment|// Else this can lead to occasional bind failures
specifier|final
name|InetSocketAddress
name|fastServerBindAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|12345
argument_list|)
decl_stmt|;
specifier|final
name|String
name|contextRoot
init|=
literal|"/testTimeouts"
decl_stmt|;
specifier|final
name|Path
name|repoRoot
init|=
operator|new
name|File
argument_list|(
literal|"test/repositories/1"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|repoRoot
operator|+
literal|" is not a directory"
argument_list|,
name|Files
operator|.
name|isDirectory
argument_list|(
name|repoRoot
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DependencyDescriptor
name|dependency
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"2.0"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|AutoCloseable
name|httpServer
init|=
name|TestHelper
operator|.
name|createHttpServerBackedRepository
argument_list|(
name|fastServerBindAddr
argument_list|,
name|contextRoot
argument_list|,
name|repoRoot
argument_list|)
init|)
block|{
specifier|final
name|String
name|ivyPattern
init|=
literal|"http://"
operator|+
name|fastServerBindAddr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|fastServerBindAddr
operator|.
name|getPort
argument_list|()
operator|+
literal|"/testTimeouts/[organisation]/[module]/ivys/ivy-[revision].xml"
decl_stmt|;
specifier|final
name|String
name|artifactPattern
init|=
literal|"http://"
operator|+
name|fastServerBindAddr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|fastServerBindAddr
operator|.
name|getPort
argument_list|()
operator|+
literal|"/testTimeouts/[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
decl_stmt|;
comment|// first use a resolver with a high timeout to make sure it can actually fetch the resources
specifier|final
name|URLResolver
name|highTimeoutResolver
init|=
operator|new
name|URLResolver
argument_list|()
decl_stmt|;
name|highTimeoutResolver
operator|.
name|setName
argument_list|(
literal|"high-timeout-resolver"
argument_list|)
expr_stmt|;
name|highTimeoutResolver
operator|.
name|setAllownomd
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|highTimeoutResolver
operator|.
name|setTimeoutConstraint
argument_list|(
literal|"test-high-timeout"
argument_list|)
expr_stmt|;
name|highTimeoutResolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|highTimeoutResolver
operator|.
name|setIvyPatterns
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|ivyPattern
argument_list|)
argument_list|)
expr_stmt|;
name|highTimeoutResolver
operator|.
name|setArtifactPatterns
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifactPattern
argument_list|)
argument_list|)
expr_stmt|;
name|highTimeoutResolver
operator|.
name|validate
argument_list|()
expr_stmt|;
specifier|final
name|TimeoutConstraint
name|resolverTimeoutConstraint
init|=
name|highTimeoutResolver
operator|.
name|getTimeoutConstraint
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Timeout constraint is missing on resolver "
operator|+
name|highTimeoutResolver
operator|.
name|getName
argument_list|()
argument_list|,
name|resolverTimeoutConstraint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected connection timeout on resolver"
argument_list|,
literal|60000
argument_list|,
name|resolverTimeoutConstraint
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected read timeout on resolver"
argument_list|,
operator|-
literal|1
argument_list|,
name|resolverTimeoutConstraint
operator|.
name|getReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
comment|// do the fetch (expected to work fine)
specifier|final
name|ResolvedModuleRevision
name|resolvedModule
init|=
name|highTimeoutResolver
operator|.
name|getDependency
argument_list|(
name|dependency
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Dependency wasn't resolved by resolver "
operator|+
name|highTimeoutResolver
operator|.
name|getName
argument_list|()
argument_list|,
name|resolvedModule
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected dependency resolved by resolver "
operator|+
name|highTimeoutResolver
operator|.
name|getName
argument_list|()
argument_list|,
name|dependency
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|resolvedModule
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now test this whole fetch using a resolver with a very low connection timeout and by starting the repo server
comment|// with a delay so that the connection request can timeout
comment|// clean the cache before testing to ensure the resource isn't fetched from cache
name|settings
operator|.
name|getDefaultRepositoryCacheManager
argument_list|()
operator|.
name|clean
argument_list|()
expr_stmt|;
name|settings
operator|.
name|getResolutionCacheManager
argument_list|()
operator|.
name|clean
argument_list|()
expr_stmt|;
specifier|final
name|InetSocketAddress
name|slowServerAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|23456
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ivyPattern
init|=
literal|"http://"
operator|+
name|slowServerAddr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|slowServerAddr
operator|.
name|getPort
argument_list|()
operator|+
literal|"/testTimeouts/[organisation]/[module]/ivys/ivy-[revision].xml"
decl_stmt|;
specifier|final
name|String
name|artifactPattern
init|=
literal|"http://"
operator|+
name|slowServerAddr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|slowServerAddr
operator|.
name|getPort
argument_list|()
operator|+
literal|"/testTimeouts/[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
decl_stmt|;
specifier|final
name|URLResolver
name|lowTimeoutResolver
init|=
operator|new
name|URLResolver
argument_list|()
decl_stmt|;
name|lowTimeoutResolver
operator|.
name|setAllownomd
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lowTimeoutResolver
operator|.
name|setName
argument_list|(
literal|"low-timeout-resolver"
argument_list|)
expr_stmt|;
name|lowTimeoutResolver
operator|.
name|setTimeoutConstraint
argument_list|(
literal|"test-extremely-low-timeout"
argument_list|)
expr_stmt|;
name|lowTimeoutResolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|lowTimeoutResolver
operator|.
name|setIvyPatterns
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|ivyPattern
argument_list|)
argument_list|)
expr_stmt|;
name|lowTimeoutResolver
operator|.
name|setArtifactPatterns
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifactPattern
argument_list|)
argument_list|)
expr_stmt|;
name|lowTimeoutResolver
operator|.
name|validate
argument_list|()
expr_stmt|;
specifier|final
name|TimeoutConstraint
name|lowTimeoutConstraint
init|=
name|lowTimeoutResolver
operator|.
name|getTimeoutConstraint
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Timeout constraint is missing on resolver "
operator|+
name|lowTimeoutResolver
operator|.
name|getName
argument_list|()
argument_list|,
name|lowTimeoutConstraint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected connection timeout on resolver"
argument_list|,
literal|10
argument_list|,
name|lowTimeoutConstraint
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected read timeout on resolver"
argument_list|,
literal|20
argument_list|,
name|lowTimeoutConstraint
operator|.
name|getReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
specifier|final
name|long
name|serverStartupDelayInMillis
init|=
literal|500
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|AutoCloseable
argument_list|>
name|httpServer
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|ServerManager
argument_list|(
name|slowServerAddr
argument_list|,
name|contextRoot
argument_list|,
name|repoRoot
argument_list|,
name|serverStartupDelayInMillis
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// do the fetch (resolution *isn't* expected to return resolved module)
specifier|final
name|ResolvedModuleRevision
name|resolvedModuleFromLowTimeouts
init|=
name|lowTimeoutResolver
operator|.
name|getDependency
argument_list|(
name|dependency
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Dependency wasn't expected to be resolved by resolver "
operator|+
name|lowTimeoutResolver
operator|.
name|getName
argument_list|()
argument_list|,
name|resolvedModuleFromLowTimeouts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
comment|// stop the server
name|httpServer
operator|.
name|get
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
comment|// TODO: Better log it too. But I don't see usage of loggers in test cases currently. So need to get to this later
block|}
try|try
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
comment|// TODO: Better log it too. But I don't see usage of loggers in test cases currently. So need to get to this later
block|}
block|}
block|}
specifier|private
specifier|final
class|class
name|ServerManager
implements|implements
name|Callable
argument_list|<
name|AutoCloseable
argument_list|>
block|{
specifier|private
specifier|final
name|InetSocketAddress
name|serverBindAddress
decl_stmt|;
specifier|private
specifier|final
name|long
name|startupDelayInMillis
decl_stmt|;
specifier|private
specifier|final
name|String
name|contextRoot
decl_stmt|;
specifier|private
specifier|final
name|Path
name|localRepoRoot
decl_stmt|;
name|ServerManager
parameter_list|(
specifier|final
name|InetSocketAddress
name|serverBindAddress
parameter_list|,
specifier|final
name|String
name|contextRoot
parameter_list|,
specifier|final
name|Path
name|localRepoRoot
parameter_list|,
specifier|final
name|long
name|startupDelayInMillis
parameter_list|)
block|{
name|this
operator|.
name|serverBindAddress
operator|=
name|serverBindAddress
expr_stmt|;
name|this
operator|.
name|contextRoot
operator|=
name|contextRoot
expr_stmt|;
name|this
operator|.
name|localRepoRoot
operator|=
name|localRepoRoot
expr_stmt|;
name|this
operator|.
name|startupDelayInMillis
operator|=
name|startupDelayInMillis
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AutoCloseable
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|startupDelayInMillis
operator|<=
literal|0
condition|)
block|{
return|return
name|TestHelper
operator|.
name|createHttpServerBackedRepository
argument_list|(
name|serverBindAddress
argument_list|,
name|contextRoot
argument_list|,
name|localRepoRoot
argument_list|)
return|;
block|}
comment|// wait for the specified amount of startup delay
name|Thread
operator|.
name|sleep
argument_list|(
name|startupDelayInMillis
argument_list|)
expr_stmt|;
comment|// start the server
return|return
name|TestHelper
operator|.
name|createHttpServerBackedRepository
argument_list|(
name|serverBindAddress
argument_list|,
name|contextRoot
argument_list|,
name|localRepoRoot
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

