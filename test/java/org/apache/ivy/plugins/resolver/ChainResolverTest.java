begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|DownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|XmlSettingsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
operator|.
name|SortEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|LatestRevisionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|LatestTimeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|MockMessageLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests ChainResolver  */
end_comment

begin_class
specifier|public
class|class
name|ChainResolverTest
extends|extends
name|AbstractDependencyResolverTest
block|{
specifier|private
name|IvySettings
name|settings
decl_stmt|;
specifier|private
name|ResolveEngine
name|engine
decl_stmt|;
specifier|private
name|ResolveData
name|data
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|settings
operator|=
operator|new
name|IvySettings
argument_list|()
expr_stmt|;
name|engine
operator|=
operator|new
name|ResolveEngine
argument_list|(
name|settings
argument_list|,
operator|new
name|EventManager
argument_list|()
argument_list|,
operator|new
name|SortEngine
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|TestHelper
operator|.
name|createCache
argument_list|()
expr_stmt|;
name|data
operator|=
operator|new
name|ResolveData
argument_list|(
name|engine
argument_list|,
operator|new
name|ResolveOptions
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setDefaultCache
argument_list|(
name|TestHelper
operator|.
name|cache
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|TestHelper
operator|.
name|cleanCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderFromConf
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|XmlSettingsParser
argument_list|(
name|settings
argument_list|)
operator|.
name|parse
argument_list|(
name|ChainResolverTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"chainresolverconf.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyResolver
name|resolver
init|=
name|settings
operator|.
name|getResolver
argument_list|(
literal|"chain"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resolver
operator|instanceof
name|ChainResolver
argument_list|)
expr_stmt|;
name|ChainResolver
name|chain
init|=
operator|(
name|ChainResolver
operator|)
name|resolver
decl_stmt|;
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertResolversSizeAndNames
parameter_list|(
name|ChainResolver
name|chain
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|List
argument_list|<
name|DependencyResolver
argument_list|>
name|resolvers
init|=
name|chain
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|resolvers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resolvers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DependencyResolver
name|r
init|=
name|resolvers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testName
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"chain"
argument_list|,
name|chain
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"1"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"2"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"3"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
name|resolvers
operator|.
name|length
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"rev"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
argument_list|,
name|resolvers
index|[
literal|0
index|]
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
argument_list|,
name|resolvers
index|[
literal|1
index|]
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resolvers
index|[
literal|2
index|]
operator|.
name|askedDeps
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLatestTimeResolve
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setDefaultLatestStrategy
argument_list|(
operator|new
name|LatestTimeStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"1"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"2"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"3"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
comment|// younger -> should the one kept
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"4"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"5"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"6"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|18
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"7"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
name|resolvers
operator|.
name|length
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"latest.integration"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DependencyDescriptor
argument_list|>
name|ddAsList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|assertEquals
argument_list|(
name|ddAsList
argument_list|,
name|resolver
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLatestRevisionResolve
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setLatestStrategy
argument_list|(
operator|new
name|LatestRevisionStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"1"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"2"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"3"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"4"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"5"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
comment|// latest ->
comment|// should the
comment|// one kept
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"6"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|18
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"7"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
name|resolvers
operator|.
name|length
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"latest.integration"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DependencyDescriptor
argument_list|>
name|ddAsList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|assertEquals
argument_list|(
name|ddAsList
argument_list|,
name|resolver
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setLatestStrategy
argument_list|(
operator|new
name|LatestRevisionStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"1"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"2"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
block|,
comment|// latest -> but default
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"3"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"4"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"5"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
comment|// latest -> should be the one kept
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"6"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"7"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
name|resolvers
operator|.
name|length
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DependencyDescriptor
argument_list|>
name|ddAsList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|ddAsList
argument_list|,
name|resolvers
index|[
name|i
index|]
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
name|resolvers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|resolvers
index|[
name|i
index|]
operator|.
name|askedDeps
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLatestWithDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setLatestStrategy
argument_list|(
operator|new
name|LatestRevisionStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"1"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"2"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
block|,
comment|// latest
comment|// ->
comment|// but
comment|// default
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"3"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"4"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"5"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
comment|// latest ->
comment|// should the
comment|// one kept
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"6"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|18
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"7"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
name|resolvers
operator|.
name|length
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"latest.integration"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DependencyDescriptor
argument_list|>
name|ddAsList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|assertEquals
argument_list|(
name|ddAsList
argument_list|,
name|resolver
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFixedWithDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setLatestStrategy
argument_list|(
operator|new
name|LatestRevisionStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"1"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"2"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
block|,
comment|// default
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"3"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"4"
argument_list|,
literal|true
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
comment|// not default -> should be the one kept
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"5"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
name|resolvers
operator|.
name|length
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DependencyDescriptor
argument_list|>
name|ddAsList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DependencyDescriptor
index|[]
block|{
name|dd
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"invalid asked dependencies for "
operator|+
name|resolvers
index|[
name|i
index|]
argument_list|,
name|ddAsList
argument_list|,
name|resolvers
index|[
name|i
index|]
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|4
init|;
name|i
operator|<
name|resolvers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"invalid asked dependencies for "
operator|+
name|resolvers
index|[
name|i
index|]
argument_list|,
name|resolvers
index|[
name|i
index|]
operator|.
name|askedDeps
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFixedWithDefaultAndRealResolver
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test case for IVY-206
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// no ivy pattern for first resolver: will only find a 'default' module
name|FileSystemResolver
name|resolver
init|=
operator|new
name|FileSystemResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|settings
operator|.
name|getBaseDir
argument_list|()
operator|+
literal|"/test/repositories/1/[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
comment|// second resolver has an ivy pattern and will thus find the real module, which should be
comment|// kept
name|resolver
operator|=
operator|new
name|FileSystemResolver
argument_list|()
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addIvyPattern
argument_list|(
name|settings
operator|.
name|getBaseDir
argument_list|()
operator|+
literal|"/test/repositories/1/[organisation]/[module]/ivys/ivy-[revision].xml"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|settings
operator|.
name|getBaseDir
argument_list|()
operator|+
literal|"/test/repositories/1/[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addResolver
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUseCache
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// resolve dependency twice
name|chainToPutDefaultModuleInCache
argument_list|()
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"1"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// should not have asked any dependency, should have hit the cache
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|resolvers
index|[
literal|0
index|]
operator|.
name|askedDeps
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReturnFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setReturnFirst
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"1"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"2"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"3"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
comment|// younger -> should the one kept
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"4"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"5"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|22
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"6"
argument_list|,
literal|true
argument_list|,
operator|new
name|GregorianCalendar
argument_list|(
literal|2005
argument_list|,
literal|1
argument_list|,
literal|18
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"7"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
name|resolvers
operator|.
name|length
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"latest.integration"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|resolvers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|resolvers
index|[
name|i
index|]
operator|.
name|askedDeps
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReturnFirstWithDefaultAndCacheAndRealResolver
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test case for IVY-389
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// 1 ---- we first do a first resolve which puts a default file in cache
name|chainToPutDefaultModuleInCache
argument_list|()
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// 2 ---- now we ask to resolve dependencies with a chain in return first mode with check
comment|// modified = false, in which the first resolver is not able to find the module, but the
comment|// second is
name|ChainResolver
name|chain
init|=
name|returnFirstChain
argument_list|()
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
comment|// the module returned should be the default one found in cache since check modified is
comment|// false
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReturnFirstWithCheckModifiedAndDefaultAndCacheAndRealResolver
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test case for IVY-207
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// 1 ---- we first do a first resolve which puts a default file in cache
name|chainToPutDefaultModuleInCache
argument_list|()
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// 2 ---- now we ask to resolve dependencies with a chain in return first mode, in which the
comment|// first resolver is not able to find the module, but the second is
name|ChainResolver
name|chain
init|=
name|returnFirstChain
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setCheckmodified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ChainResolver
name|returnFirstChain
parameter_list|()
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setReturnFirst
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// no pattern for first resolver: will not find the module
name|FileSystemResolver
name|resolver
init|=
operator|new
name|FileSystemResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
comment|// second resolver will find the real module, which should be kept
name|resolver
operator|=
operator|new
name|FileSystemResolver
argument_list|()
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addIvyPattern
argument_list|(
name|settings
operator|.
name|getBaseDir
argument_list|()
operator|+
literal|"/test/repositories/1/[organisation]/[module]/ivys/ivy-[revision].xml"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|settings
operator|.
name|getBaseDir
argument_list|()
operator|+
literal|"/test/repositories/1/[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addResolver
argument_list|(
name|chain
argument_list|)
expr_stmt|;
return|return
name|chain
return|;
block|}
specifier|private
name|ChainResolver
name|chainToPutDefaultModuleInCache
parameter_list|()
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// no ivy pattern for resolver: will only find a 'default' module
name|FileSystemResolver
name|resolver
init|=
operator|new
name|FileSystemResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"old"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|settings
operator|.
name|getBaseDir
argument_list|()
operator|+
literal|"/test/repositories/1/[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addResolver
argument_list|(
name|chain
argument_list|)
expr_stmt|;
return|return
name|chain
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDual
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setDual
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockResolver
index|[]
name|resolvers
init|=
operator|new
name|MockResolver
index|[]
block|{
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"1"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"2"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
name|MockResolver
operator|.
name|buildMockResolver
argument_list|(
name|settings
argument_list|,
literal|"3"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|MockResolver
name|resolver
range|:
name|resolvers
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
name|assertResolversSizeAndNames
argument_list|(
name|chain
argument_list|,
name|resolvers
operator|.
name|length
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"org"
argument_list|,
literal|"mod"
argument_list|,
literal|"rev"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|chain
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"chain"
argument_list|,
name|rmr
operator|.
name|getArtifactResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDownloadWithDual
parameter_list|()
throws|throws
name|Exception
block|{
name|ChainResolver
name|chain
init|=
operator|new
name|ChainResolver
argument_list|()
decl_stmt|;
name|chain
operator|.
name|setName
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setDual
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// first resolver has only an artifact pattern which don't lead to anything: it won't find
comment|// the module
name|FileSystemResolver
name|resolver
init|=
operator|new
name|FileSystemResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|settings
operator|.
name|getBaseDir
argument_list|()
operator|+
literal|"/test/repositories/nowhere/[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|resolver
operator|=
operator|new
name|FileSystemResolver
argument_list|()
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addIvyPattern
argument_list|(
name|settings
operator|.
name|getBaseDir
argument_list|()
operator|+
literal|"/test/repositories/1/[organisation]/[module]/ivys/ivy-[revision].xml"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addArtifactPattern
argument_list|(
name|settings
operator|.
name|getBaseDir
argument_list|()
operator|+
literal|"/test/repositories/1/[organisation]/[module]/[type]s/[artifact]-[revision].[type]"
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addResolver
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|MockMessageLogger
name|mockLogger
init|=
operator|new
name|MockMessageLogger
argument_list|()
decl_stmt|;
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getIvy
argument_list|()
operator|.
name|getLoggerEngine
argument_list|()
operator|.
name|setDefaultLogger
argument_list|(
name|mockLogger
argument_list|)
expr_stmt|;
name|DownloadReport
name|report
init|=
name|chain
operator|.
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
operator|new
name|DefaultArtifact
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
literal|"org1#mod1.1;1.0"
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
block|}
argument_list|,
operator|new
name|DownloadOptions
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|report
operator|.
name|getArtifactsReports
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|,
name|report
operator|.
name|getArtifactsReports
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
name|mockLogger
operator|.
name|assertLogDoesntContain
argument_list|(
literal|"[FAILED     ] org1#mod1.1;1.0!mod1.1.jar"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

