begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ExcludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ExtraInfoHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|ConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|FixedConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|NoConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|ExactPatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|GlobPatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|AbstractModuleDescriptorParserTester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|FileSystemResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|DefaultMessageLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
operator|.
name|Visibility
operator|.
name|PRIVATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
operator|.
name|Visibility
operator|.
name|PUBLIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|XmlModuleDescriptorParserTest
extends|extends
name|AbstractModuleDescriptorParserTester
block|{
specifier|private
name|IvySettings
name|settings
init|=
literal|null
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expExc
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Message
operator|.
name|setDefaultLogger
argument_list|(
operator|new
name|DefaultMessageLogger
argument_list|(
name|Message
operator|.
name|MSG_WARN
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|settings
operator|=
operator|new
name|IvySettings
argument_list|()
expr_stmt|;
comment|// prevent test from polluting local cache
name|settings
operator|.
name|setDefaultCache
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/cache"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-simple.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jar"
argument_list|,
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|md
operator|.
name|getDependencies
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaces
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-namespaces.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|md
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|mrid
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myval"
argument_list|,
name|mrid
operator|.
name|getExtraAttribute
argument_list|(
literal|"e:myextra"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"e:myextra"
argument_list|,
literal|"myval"
argument_list|)
argument_list|,
name|mrid
operator|.
name|getQualifiedExtraAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myval"
argument_list|,
name|mrid
operator|.
name|getExtraAttribute
argument_list|(
literal|"myextra"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"myextra"
argument_list|,
literal|"myval"
argument_list|)
argument_list|,
name|mrid
operator|.
name|getExtraAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://ant.apache.org/ivy/extra"
argument_list|,
name|md
operator|.
name|getExtraAttributesNamespaces
argument_list|()
operator|.
name|get
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyDependencies
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-empty-dependencies.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myrev"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jar"
argument_list|,
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|md
operator|.
name|getDependencies
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBad
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|expExc
operator|.
name|expect
argument_list|(
name|ParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expExc
operator|.
name|expectMessage
argument_list|(
literal|"'modul'"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|XMLHelper
operator|.
name|canUseSchemaValidation
argument_list|()
argument_list|)
expr_stmt|;
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-bad.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadOrg
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|expExc
operator|.
name|expect
argument_list|(
name|ParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expExc
operator|.
name|expectMessage
argument_list|(
literal|"organization"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|XMLHelper
operator|.
name|canUseSchemaValidation
argument_list|()
argument_list|)
expr_stmt|;
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-bad-org.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadConfs
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|expExc
operator|.
name|expect
argument_list|(
name|ParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expExc
operator|.
name|expectMessage
argument_list|(
literal|"invalidConf"
argument_list|)
expr_stmt|;
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-bad-confs.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCyclicConfs2
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|expExc
operator|.
name|expect
argument_list|(
name|ParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expExc
operator|.
name|expectMessage
argument_list|(
literal|"A => B => A"
argument_list|)
expr_stmt|;
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-cyclic-confs1.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCyclicConfs3
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|expExc
operator|.
name|expect
argument_list|(
name|ParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expExc
operator|.
name|expectMessage
argument_list|(
literal|"A => C => B => A"
argument_list|)
expr_stmt|;
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-cyclic-confs2.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoValidate
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-novalidate.xml"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test must fail because of bad version.      *      * @throws IOException if something goes wrong      * @throws ParseException if something goes wrong      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBadVersion
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-bad-version.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFull
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myrev"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|pubdate
init|=
operator|new
name|GregorianCalendar
argument_list|(
literal|2004
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pubdate
argument_list|,
name|md
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
expr_stmt|;
name|License
index|[]
name|licenses
init|=
name|md
operator|.
name|getLicenses
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|licenses
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MyLicense"
argument_list|,
name|licenses
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.my.org/mymodule/mylicense.html"
argument_list|,
name|licenses
index|[
literal|0
index|]
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.my.org/mymodule/"
argument_list|,
name|md
operator|.
name|getHomePage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This module is<b>great</b> !<br/>\n\t"
operator|+
literal|"You can use it especially with myconf1 and myconf2, "
operator|+
literal|"and myconf4 is not too bad too."
argument_list|,
name|md
operator|.
name|getDescription
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\r\n"
argument_list|,
literal|"\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|md
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ExtraInfoHolder
name|someExtraElement
init|=
name|md
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"e:someExtra"
argument_list|,
name|someExtraElement
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"56576"
argument_list|,
name|someExtraElement
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|someExtraElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
index|[]
name|confs
init|=
name|md
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|confs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|confs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertConf
argument_list|(
name|md
argument_list|,
literal|"myconf1"
argument_list|,
literal|"desc 1"
argument_list|,
name|PUBLIC
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertConf
argument_list|(
name|md
argument_list|,
literal|"myconf2"
argument_list|,
literal|"desc 2"
argument_list|,
name|PUBLIC
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertConf
argument_list|(
name|md
argument_list|,
literal|"myconf3"
argument_list|,
literal|"desc 3"
argument_list|,
name|PRIVATE
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertConf
argument_list|(
name|md
argument_list|,
literal|"myconf4"
argument_list|,
literal|"desc 4"
argument_list|,
name|PUBLIC
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|,
literal|"myconf2"
block|}
argument_list|)
expr_stmt|;
name|assertConf
argument_list|(
name|md
argument_list|,
literal|"myoldconf"
argument_list|,
literal|"my old desc"
argument_list|,
name|PUBLIC
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArtifacts
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myartifact1"
block|,
literal|"myartifact2"
block|,
literal|"myartifact3"
block|,
literal|"myartifact4"
block|}
argument_list|)
expr_stmt|;
name|assertArtifacts
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"myconf2"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myartifact1"
block|,
literal|"myartifact3"
block|}
argument_list|)
expr_stmt|;
name|assertArtifacts
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"myconf3"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myartifact1"
block|,
literal|"myartifact3"
block|,
literal|"myartifact4"
block|}
argument_list|)
expr_stmt|;
name|assertArtifacts
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"myconf4"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myartifact1"
block|}
argument_list|)
expr_stmt|;
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// no conf def => equivalent to *->*
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|,
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dd
operator|.
name|isChanging
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dd
operator|.
name|isTransitive
argument_list|()
argument_list|)
expr_stmt|;
comment|// changing = true
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule3"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dd
operator|.
name|isChanging
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dd
operator|.
name|isTransitive
argument_list|()
argument_list|)
expr_stmt|;
comment|// conf="myconf1" => equivalent to myconf1->myconf1
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"yourmodule1"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"trunk"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getBranch
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.1"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"branch1"
argument_list|,
name|dd
operator|.
name|getDynamicConstraintDependencyRevisionId
argument_list|()
operator|.
name|getBranch
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1+"
argument_list|,
name|dd
operator|.
name|getDynamicConstraintDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg#yourmodule1#branch1;1+"
argument_list|,
name|dd
operator|.
name|getDynamicConstraintDependencyRevisionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|,
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// conf="myconf1->yourconf1"
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"yourmodule2"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2+"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"yourconf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|,
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// conf="myconf1->yourconf1, yourconf2"
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"yourmodule3"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3.1"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yourconf1"
argument_list|,
literal|"yourconf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|,
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// conf="myconf1, myconf2->yourconf1, yourconf2"
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"yourmodule4"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4.1"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"myconf1"
argument_list|,
literal|"myconf2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yourconf1"
argument_list|,
literal|"yourconf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yourconf1"
argument_list|,
literal|"yourconf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|,
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// conf="myconf1->yourconf1;myconf2->yourconf1, yourconf2"
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"yourmodule5"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5.1"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"myconf1"
argument_list|,
literal|"myconf2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"yourconf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yourconf1"
argument_list|,
literal|"yourconf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|,
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// conf="*->@"
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"yourmodule11"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"11.1"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"*"
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"myconf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"myconf3"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"myconf4"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"yourmodule6"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"latest.integration"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"myconf1"
argument_list|,
literal|"myconf2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"yourconf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yourconf1"
argument_list|,
literal|"yourconf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|,
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"yourmodule7"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"7.1"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"myconf1"
argument_list|,
literal|"myconf2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"yourconf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yourconf1"
argument_list|,
literal|"yourconf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"myconf2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|,
literal|"myconf2"
block|,
literal|"myconf3"
block|,
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"yourmodule8"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8.1"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDependencyArtifacts
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"yourartifact8-1"
block|,
literal|"yourartifact8-2"
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifacts
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"yourartifact8-1"
block|,
literal|"yourartifact8-2"
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifacts
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf3"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"yourartifact8-1"
block|,
literal|"yourartifact8-2"
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifacts
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"yourartifact8-1"
block|,
literal|"yourartifact8-2"
block|}
argument_list|)
expr_stmt|;
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"yourmodule9"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"9.1"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"myconf1"
argument_list|,
literal|"myconf2"
argument_list|,
literal|"myconf3"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDependencyArtifacts
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"yourartifact9-1"
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifacts
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"yourartifact9-1"
block|,
literal|"yourartifact9-2"
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifacts
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf3"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"yourartifact9-2"
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifacts
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertDependencyArtifactExcludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertDependencyArtifactExcludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertDependencyArtifactExcludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf3"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|assertDependencyArtifactExcludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"yourmodule10"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10.1"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"*"
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"your.*"
block|,
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"your.*"
block|,
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf3"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"your.*"
block|,
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifactIncludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"your.*"
block|,
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifactExcludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf1"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"toexclude"
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifactExcludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"toexclude"
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifactExcludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf3"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"toexclude"
block|}
argument_list|)
expr_stmt|;
name|assertDependencyArtifactExcludeRules
argument_list|(
name|dd
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myconf4"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"toexclude"
block|}
argument_list|)
expr_stmt|;
name|ConflictManager
name|cm
init|=
name|md
operator|.
name|getConflictManager
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"yourorg"
argument_list|,
literal|"yourmodule1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cm
operator|instanceof
name|NoConflictManager
argument_list|)
expr_stmt|;
name|cm
operator|=
name|md
operator|.
name|getConflictManager
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"yourorg"
argument_list|,
literal|"yourmodule2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cm
operator|instanceof
name|NoConflictManager
argument_list|)
expr_stmt|;
name|cm
operator|=
name|md
operator|.
name|getConflictManager
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"theirorg"
argument_list|,
literal|"theirmodule1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cm
operator|instanceof
name|FixedConflictManager
argument_list|)
expr_stmt|;
name|FixedConflictManager
name|fcm
init|=
operator|(
name|FixedConflictManager
operator|)
name|cm
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fcm
operator|.
name|getRevs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fcm
operator|.
name|getRevs
argument_list|()
operator|.
name|contains
argument_list|(
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fcm
operator|.
name|getRevs
argument_list|()
operator|.
name|contains
argument_list|(
literal|"1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|=
name|md
operator|.
name|getConflictManager
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"theirorg"
argument_list|,
literal|"theirmodule2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
literal|"yourorg#yourmodule1#BRANCH;1.0"
argument_list|)
argument_list|,
name|md
operator|.
name|mediate
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
literal|"yourorg#yourmodule1;2.0"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|ExcludeRule
index|[]
name|rules
init|=
name|md
operator|.
name|getAllExcludeRules
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|rules
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rules
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GlobPatternMatcher
operator|.
name|INSTANCE
argument_list|,
name|rules
index|[
literal|0
index|]
operator|.
name|getMatcher
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExactPatternMatcher
operator|.
name|INSTANCE
argument_list|,
name|rules
index|[
literal|1
index|]
operator|.
name|getMatcher
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"myconf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|rules
index|[
literal|0
index|]
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"myconf1"
argument_list|,
literal|"myconf2"
argument_list|,
literal|"myconf3"
argument_list|,
literal|"myconf4"
argument_list|,
literal|"myoldconf"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|rules
index|[
literal|1
index|]
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFullNoValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test.xml"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|md
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ExtraInfoHolder
name|someExtraElement
init|=
name|md
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"e:someExtra"
argument_list|,
name|someExtraElement
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"56576"
argument_list|,
name|someExtraElement
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|someExtraElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|someExtraElement
operator|.
name|getNestedExtraInfoHolder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtraInfos
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-extrainfo.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|md
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ExtraInfoHolder
name|firstExtraInfoElement
init|=
name|md
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"e:someExtra"
argument_list|,
name|firstExtraInfoElement
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"56576"
argument_list|,
name|firstExtraInfoElement
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|firstExtraInfoElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|firstExtraInfoElement
operator|.
name|getNestedExtraInfoHolder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ExtraInfoHolder
name|secondExtraInfoElement
init|=
name|md
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"e:someExtraWithAttributes"
argument_list|,
name|secondExtraInfoElement
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|secondExtraInfoElement
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|secondExtraInfoElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|secondExtraInfoElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"attr1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|secondExtraInfoElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"attr2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|secondExtraInfoElement
operator|.
name|getNestedExtraInfoHolder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtraInfosNested
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-extrainfo-nested.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|md
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ExtraInfoHolder
name|someExtraElement
init|=
name|md
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"e:someExtra"
argument_list|,
name|someExtraElement
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"56576"
argument_list|,
name|someExtraElement
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|someExtraElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|someExtraElement
operator|.
name|getNestedExtraInfoHolder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ExtraInfoHolder
name|someExtraElementWithAttributes
init|=
name|md
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"e:someExtraWithAttributes"
argument_list|,
name|someExtraElementWithAttributes
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|someExtraElementWithAttributes
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|someExtraElementWithAttributes
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|someExtraElementWithAttributes
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"attr1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|someExtraElementWithAttributes
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"attr2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|someExtraElementWithAttributes
operator|.
name|getNestedExtraInfoHolder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ExtraInfoHolder
name|anotherExtraInfoElement
init|=
name|someExtraElementWithAttributes
operator|.
name|getNestedExtraInfoHolder
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"e:anotherExtraInfo"
argument_list|,
name|anotherExtraInfoElement
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|anotherExtraInfoElement
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|anotherExtraInfoElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foobar"
argument_list|,
name|anotherExtraInfoElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"myattribute"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|anotherExtraInfoElement
operator|.
name|getNestedExtraInfoHolder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ExtraInfoHolder
name|yetAnotherExtraInfoElement
init|=
name|anotherExtraInfoElement
operator|.
name|getNestedExtraInfoHolder
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"e:yetAnotherExtraInfo"
argument_list|,
name|yetAnotherExtraInfoElement
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|yetAnotherExtraInfoElement
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|yetAnotherExtraInfoElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|yetAnotherExtraInfoElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"anAttribute"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|yetAnotherExtraInfoElement
operator|.
name|getNestedExtraInfoHolder
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBug60
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-bug60.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myrev"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|pubdate
init|=
operator|new
name|GregorianCalendar
argument_list|(
literal|2004
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pubdate
argument_list|,
name|md
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertArtifacts
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myartifact1"
block|,
literal|"myartifact2"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoArtifact
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-noartifact.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|md
operator|.
name|getDependencies
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoPublication
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-nopublication.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myrev"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|pubdate
init|=
operator|new
name|GregorianCalendar
argument_list|(
literal|2004
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|pubdate
argument_list|,
name|md
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|md
operator|.
name|getDependencies
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArtifactsDefaults
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-artifacts-defaults.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArtifactEquals
argument_list|(
literal|"mymodule"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
name|artifacts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertArtifactEquals
argument_list|(
literal|"myartifact"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
name|artifacts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertArtifactEquals
argument_list|(
literal|"mymodule"
argument_list|,
literal|"dll"
argument_list|,
literal|"dll"
argument_list|,
name|artifacts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertArtifactEquals
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|name
operator|+
literal|"/"
operator|+
name|type
operator|+
literal|"/"
operator|+
name|ext
argument_list|,
name|artifact
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getType
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getExt
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultConfWithDefaultConfMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-defaultconf-withdefaultconfmapping.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// no conf def => defaults to defaultConf: default
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs def: *->*
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultConf
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-defaultconf.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// no conf def => defaults to defaultConf: default
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs def: *->*
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultConf2
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-defaultconf2.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// no conf def => defaults to defaultConf: *->default
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs def: test: should not use default conf for the right side (use of
comment|// defaultconfmapping is required for that) => test->test
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPublicationDefaultConf
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-publication-defaultconf.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
name|artifacts
operator|=
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
name|artifacts
operator|=
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"other"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultConfMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-defaultconfmapping.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// no conf def => defaults to defaultConf: *->default
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs def: test: should use default conf mapping for the right side => test->default
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtraAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-extra-attributes.xml"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"infoextravalue"
argument_list|,
name|md
operator|.
name|getAttribute
argument_list|(
literal|"infoextra"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"infoextravalue"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"infoextra"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"confextravalue"
argument_list|,
name|md
operator|.
name|getConfiguration
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getAttribute
argument_list|(
literal|"confextra"
argument_list|)
argument_list|)
expr_stmt|;
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getArtifacts
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
name|Artifact
name|art
init|=
name|artifacts
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"art1"
argument_list|,
name|art
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artextravalue"
argument_list|,
name|art
operator|.
name|getAttribute
argument_list|(
literal|"artextra"
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"depextravalue"
argument_list|,
name|dd
operator|.
name|getAttribute
argument_list|(
literal|"depextra"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"depextravalue"
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"depextra"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportConfigurations1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// import configurations
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-configurations-import1.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
comment|// should have imported configurations
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"conf1"
argument_list|,
name|PUBLIC
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|(
literal|"conf2"
argument_list|,
name|PRIVATE
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// no conf def => defaults to defaultConf: *->*
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs def: conf1->*
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"conf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportConfigurations2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// import configurations and add another one
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-configurations-import2.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
comment|// should have imported configurations and added the one defined in the file itself
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"conf1"
argument_list|,
name|PUBLIC
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|(
literal|"conf2"
argument_list|,
name|PRIVATE
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|(
literal|"conf3"
argument_list|,
name|PUBLIC
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// no conf def => defaults to defaultConf: *->*
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs def: conf2,conf3->*
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"conf2"
argument_list|,
literal|"conf3"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportConfigurations3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// import configurations and default mapping
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-configurations-import3.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
comment|// should have imported configurations
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"conf1"
argument_list|,
name|PUBLIC
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|(
literal|"conf2"
argument_list|,
name|PRIVATE
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// no conf def => defaults to defaultConf defined in imported file: *->@
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"conf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"conf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs def: conf1->*
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"conf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportConfigurations5
parameter_list|()
throws|throws
name|Exception
block|{
comment|// import configurations
name|settings
operator|.
name|setVariable
argument_list|(
literal|"base.dir"
argument_list|,
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-configurations-import5.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
comment|// should have imported configurations
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"conf1"
argument_list|,
name|PUBLIC
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|(
literal|"conf2"
argument_list|,
name|PRIVATE
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// no conf def => defaults to defaultConf: *->*
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs def: conf1->*
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"conf1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtendOtherConfigs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// import configurations and default mapping
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-configextendsothers1.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
comment|// has an 'all-public' configuration
name|Configuration
name|allPublic
init|=
name|md
operator|.
name|getConfiguration
argument_list|(
literal|"all-public"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|allPublic
argument_list|)
expr_stmt|;
comment|// 'all-public' extends all other public configurations
name|String
index|[]
name|allPublicExt
init|=
name|allPublic
operator|.
name|getExtends
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"default"
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|allPublicExt
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportConfigurationsWithExtendOtherConfigs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// import configurations and default mapping
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-configextendsothers2.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
comment|// has an 'all-public' configuration
name|Configuration
name|allPublic
init|=
name|md
operator|.
name|getConfiguration
argument_list|(
literal|"all-public"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|allPublic
argument_list|)
expr_stmt|;
comment|// 'all-public' extends all other public configurations
name|String
index|[]
name|allPublicExt
init|=
name|allPublic
operator|.
name|getExtends
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"default"
argument_list|,
literal|"test"
argument_list|,
literal|"extra"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|allPublicExt
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportConfigurationsWithMappingOverride
parameter_list|()
throws|throws
name|Exception
block|{
comment|// import configurations and default mapping
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-configurations-import4.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
comment|// has 2 dependencies
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// confs dep1: conf1->A;conf2->B (mappingoverride = true)
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"conf1"
argument_list|,
literal|"conf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs dep2: conf2->B
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"conf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"conf2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportConfigurationsWithWildcardAndMappingOverride
parameter_list|()
throws|throws
name|Exception
block|{
comment|// import configurations and default mapping
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-configextendsothers3.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
comment|// has 2 dependencies
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// confs dep1: all-public->all-public (mappingoverride = true)
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"all-public"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"all-public"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"all-public"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs dep2: extra->extra;all-public->all-public (mappingoverride = true)
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"extra"
argument_list|,
literal|"all-public"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"extra"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"extra"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"all-public"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"all-public"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultConfMappingWithSelectors
parameter_list|()
throws|throws
name|Exception
block|{
comment|// import configurations and default mapping
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-defaultconfmapping-withselectors.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
comment|// has 3 dependencies
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|dependencies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// confs dep1: *->default1,default3
name|DependencyDescriptor
name|dd
init|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"default1"
argument_list|,
literal|"default3"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs dep2: test->default2,default3
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"default2"
argument_list|,
literal|"default3"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// confs dep3: *->default4
name|dd
operator|=
name|getDependency
argument_list|(
name|dependencies
argument_list|,
literal|"mymodule3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default4"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
literal|"bla"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for IVY-442: expect parser failure.      *      * @throws Exception if something goes wrong      * @see<a href="https://issues.apache.org/jira/browse/IVY-442">IVY-442</a>      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWithNonExistingConfigInDependency
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-incorrectconf1.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for parser failure.      *      * @throws Exception if something goes wrong      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWithNonExistingConfigInPublications
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-incorrectconf2.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for IVY-441: expect parser failure.      *      * @throws Exception if something goes wrong      * @see<a href="https://issues.apache.org/jira/browse/IVY-441">IVY-441</a>      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWithExistingConfigsInPublicationsSeparatedBySemiColon
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-incorrectconf3.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtendsAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
operator|.
name|setDefaultLogger
argument_list|(
operator|new
name|DefaultMessageLogger
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
comment|// default extends type is 'all' when no extendsType attribute is specified.
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-extends-all.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myrev"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent description was merged.
name|assertEquals
argument_list|(
literal|"Parent module description."
argument_list|,
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent and child configurations were merged together.
specifier|final
name|Configuration
index|[]
name|expectedConfs
init|=
block|{
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"conf1"
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"conf2"
argument_list|)
block|}
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedConfs
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify parent and child dependencies were merged together.
name|DependencyDescriptor
index|[]
name|deps
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|deps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deps
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
index|[
literal|0
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|dep
init|=
name|deps
index|[
literal|0
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule1"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|dep
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"conf1"
argument_list|,
literal|"conf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
index|[
literal|1
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dep
operator|=
name|deps
index|[
literal|1
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule2"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dep
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify only child publications are present
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getAllArtifacts
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jar"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtendsDependencies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// descriptor specifies that only parent dependencies should be included
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-extends-dependencies.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent description was ignored.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent configurations were ignored.
specifier|final
name|Configuration
index|[]
name|expectedConfs
init|=
block|{
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
block|}
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedConfs
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify parent dependencies were merged.
name|DependencyDescriptor
index|[]
name|deps
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|deps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deps
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
index|[
literal|0
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|dep
init|=
name|deps
index|[
literal|0
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule1"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|dep
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
index|[
literal|1
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dep
operator|=
name|deps
index|[
literal|1
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule2"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dep
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify only child publications are present
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getAllArtifacts
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jar"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtendsConfigurations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// descriptor specifies that only parent configurations should be included
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-extends-configurations.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent description was ignored.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent and child configurations were merged together.
specifier|final
name|Configuration
index|[]
name|expectedConfs
init|=
block|{
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"conf1"
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"conf2"
argument_list|)
block|}
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedConfs
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify parent dependencies were ignored.
name|DependencyDescriptor
index|[]
name|deps
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|deps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deps
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"conf1"
argument_list|,
literal|"conf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
index|[
literal|0
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|dep
init|=
name|deps
index|[
literal|0
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule2"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dep
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify only child publications are present
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getAllArtifacts
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jar"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtendsDescription
parameter_list|()
throws|throws
name|Exception
block|{
comment|// descriptor specifies that only parent description should be included
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-extends-description.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent description was merged.
name|assertEquals
argument_list|(
literal|"Parent module description."
argument_list|,
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent configurations were ignored.
specifier|final
name|Configuration
index|[]
name|expectedConfs
init|=
block|{
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
block|}
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedConfs
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify parent dependencies were ignored.
name|DependencyDescriptor
index|[]
name|deps
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|deps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deps
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
index|[
literal|0
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|dep
init|=
name|deps
index|[
literal|0
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule2"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dep
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify only child publications are present
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getAllArtifacts
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jar"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtendsDescriptionWithOverride
parameter_list|()
throws|throws
name|Exception
block|{
comment|// descriptor specifies that only parent description should be included
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-extends-description-override.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// child description should always be preferred, even if extendType="description"
name|assertEquals
argument_list|(
literal|"Child description overrides parent."
argument_list|,
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent configurations were ignored.
specifier|final
name|Configuration
index|[]
name|expectedConfs
init|=
block|{
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
block|}
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedConfs
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify parent dependencies were ignored.
name|DependencyDescriptor
index|[]
name|deps
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|deps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deps
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
index|[
literal|0
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|dep
init|=
name|deps
index|[
literal|0
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule2"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dep
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify only child publications are present
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getAllArtifacts
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jar"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtendsMixed
parameter_list|()
throws|throws
name|Exception
block|{
comment|// descriptor specifies that parent configurations and dependencies should be included
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-extends-mixed.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent description was ignored.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent and child configurations were merged together.
specifier|final
name|Configuration
index|[]
name|expectedConfs
init|=
block|{
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"conf1"
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"conf2"
argument_list|)
block|}
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedConfs
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify parent and child dependencies were merged together.
name|DependencyDescriptor
index|[]
name|deps
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|deps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deps
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
index|[
literal|0
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|dep
init|=
name|deps
index|[
literal|0
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule1"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|dep
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"conf1"
argument_list|,
literal|"conf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
index|[
literal|1
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dep
operator|=
name|deps
index|[
literal|1
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule2"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dep
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify only child publications are present
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getAllArtifacts
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jar"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtendsCached
parameter_list|()
throws|throws
name|Exception
block|{
comment|// configure a resolver to serve the parent descriptor, so that parse succeeds.
name|File
name|resolveRoot
init|=
operator|new
name|File
argument_list|(
literal|"build/tmp/xmlModuleDescriptorTest"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resolveRoot
operator|.
name|exists
argument_list|()
operator|||
name|resolveRoot
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-extends-parent.xml"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|resolveRoot
argument_list|,
literal|"myorg/myparent/ivy.xml"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystemResolver
name|resolver
init|=
operator|new
name|FileSystemResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setName
argument_list|(
literal|"testExtendsCached"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addIvyPattern
argument_list|(
name|resolveRoot
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/[organisation]/[module]/[artifact].[ext]"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setDefaultResolver
argument_list|(
literal|"testExtendsCached"
argument_list|)
expr_stmt|;
comment|// descriptor extends a module without a location="..." attribute, so resolver lookup
comment|// must be performed.
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-extends-cached.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myrev"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"integration"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent description was merged.
name|assertEquals
argument_list|(
literal|"Parent module description."
argument_list|,
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the parent and child configurations were merged together.
specifier|final
name|Configuration
index|[]
name|expectedConfs
init|=
block|{
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"conf1"
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"conf2"
argument_list|)
block|}
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedConfs
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify parent and child dependencies were merged together.
name|DependencyDescriptor
index|[]
name|deps
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|deps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|deps
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
index|[
literal|0
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|dep
init|=
name|deps
index|[
literal|0
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule1"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1.0"
argument_list|,
name|dep
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"conf1"
argument_list|,
literal|"conf2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|deps
index|[
literal|1
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dep
operator|=
name|deps
index|[
literal|1
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myorg"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule2"
argument_list|,
name|dep
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|dep
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify only child publications are present
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getAllArtifacts
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mymodule"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jar"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that when the<code>location</code> attribute of the<code>extends</code> element of      * a module descriptor file, includes an {@link File#isAbsolute() absolute path} with      * characters that {@link java.net.URI} considers as encoded characters (for example,      *<code>%2F</code>) then the module descriptor and the location of the parent descriptor      * are resolved and parsed correctly.      *      * @throws Exception if something goes wrong      * @see<a href="https://issues.apache.org/jira/browse/IVY-1562">IVY-1562</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testExtendsAbsoluteLocation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|URL
name|ivyXML
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"foo%2Fbar/hello/test-ivy-extends-absolute.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Ivy xml file is missing"
argument_list|,
name|ivyXML
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|parentIvyXML
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"foo%2Fbar/parent-ivy.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Parent Ivy xml file is missing"
argument_list|,
name|parentIvyXML
argument_list|)
expr_stmt|;
comment|// the ivy xml references a parent ivy xml via extends "location" and expects the parent
comment|// ivy to be present at a location under java.io.tmpdir, so we copy over the parent ivy
comment|// file over there
specifier|final
name|Path
name|targetDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|,
literal|"foo%2Fbar"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|targetDir
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|parentIvyXMLPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|targetDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"parent-ivy.xml"
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|parentIvyXML
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|parentIvyXMLPath
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Parent ivy xml file wasn't copied"
argument_list|,
name|Files
operator|.
name|isRegularFile
argument_list|(
name|parentIvyXMLPath
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// now start parsing the Ivy xml
specifier|final
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|ivyXML
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Parsed module descriptor is null"
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected org for the parsed module descriptor"
argument_list|,
literal|"myorg"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected module name for the parsed module descriptor"
argument_list|,
literal|"mymodule"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected revision for the parsed module descriptor"
argument_list|,
literal|"1.0.0"
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
index|[]
name|confs
init|=
name|md
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No configurations found in module descriptor"
argument_list|,
name|confs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of configurations found in module descriptor"
argument_list|,
literal|3
argument_list|,
name|confs
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|expectedConfs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"parent-conf1"
argument_list|,
literal|"parent-conf2"
argument_list|,
literal|"conf2"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Configuration
name|conf
range|:
name|confs
control|)
block|{
name|assertNotNull
argument_list|(
literal|"One of the configurations was null in module descriptor"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected configuration "
operator|+
name|conf
operator|.
name|getName
argument_list|()
operator|+
literal|" found in parsed module descriptor"
argument_list|,
name|expectedConfs
operator|.
name|remove
argument_list|(
name|conf
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Missing configurations "
operator|+
name|expectedConfs
operator|+
literal|" from the parsed module descriptor"
argument_list|,
name|expectedConfs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// clean up the copied over file
name|Files
operator|.
name|delete
argument_list|(
name|parentIvyXMLPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

