begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|m2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests {@link MavenVersionRangeParser}  */
end_comment

begin_class
specifier|public
class|class
name|MavenVersionRangeParserTest
block|{
comment|/**      * Tests the {@link MavenVersionRangeParser#rangeAccepts(String, String)} works correctly when the range      * and the value being compared are the same exact values      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testExactValue
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Exact value was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
literal|"3"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exact value was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
literal|"1.0"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exact value was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
literal|"2.1.4"
argument_list|,
literal|"2.1.4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the {@link MavenVersionRangeParser#rangeAccepts(String, String)} works correctly when a range of the form      * {@code (,1.0]} is used to compare against some value.      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testLessThanEqualBoundRange
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|range
init|=
literal|"(,5.0]"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"<= range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"<= range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"3.41.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"<= range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"5.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"<= range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"<= range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"<= range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"5.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"<= range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"5.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"<= range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the {@link MavenVersionRangeParser#rangeAccepts(String, String)} works correctly when a range of the form      * {@code (,1.0)} is used to compare against some value.      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testLessThanBoundRange
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|range
init|=
literal|"(,23.0.1)"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"'<' range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'<' range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"3.41.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'<' range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"5.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'<' range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'<' range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"23.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"'<' range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"23.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"'<' range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"24"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"'<' range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"26.2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the {@link MavenVersionRangeParser#rangeAccepts(String, String)} works correctly when a range of the form      * {@code [1.0]} is used to compare against some value.      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testEqualsBoundRange
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|range
init|=
literal|"[1.0]"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"1.0.1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the {@link MavenVersionRangeParser#rangeAccepts(String, String)} works correctly when a range of the form      * {@code [1.0,)} is used to compare against some value.      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testGreaterThanEqualBoundRange
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|range
init|=
literal|"[7.0,)"
decl_stmt|;
name|assertTrue
argument_list|(
literal|">= range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|">= range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"7.41.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|">= range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"7.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|">= range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|">= range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"8.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|">= range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"5.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|">= range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"5.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|">= range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|">= range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the {@link MavenVersionRangeParser#rangeAccepts(String, String)} works correctly when a range of the form      * {@code (1.0,)} is used to compare against some value.      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testGreaterThanBoundRange
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|range
init|=
literal|"(11.0,)"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"'>' range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'>' range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"42.121.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'>' range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"12.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"'>' range was expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"50"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"'>' range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"10.9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"'>' range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"'>' range wasn't expected to match"
argument_list|,
name|MavenVersionRangeParser
operator|.
name|rangeAccepts
argument_list|(
name|range
argument_list|,
literal|"11.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

