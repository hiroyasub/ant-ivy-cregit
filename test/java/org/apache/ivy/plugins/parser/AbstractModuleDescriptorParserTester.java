begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
operator|.
name|Visibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyArtifactDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ExcludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|IncludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractModuleDescriptorParserTester
block|{
specifier|protected
name|DependencyDescriptor
name|getDependency
parameter_list|(
name|DependencyDescriptor
index|[]
name|dependencies
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|DependencyDescriptor
name|dependency
range|:
name|dependencies
control|)
block|{
name|assertNotNull
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dependency
operator|.
name|getDependencyId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|dependency
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|dependency
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|assertArtifacts
parameter_list|(
name|Artifact
index|[]
name|artifacts
parameter_list|,
name|String
index|[]
name|artifactsNames
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artifactsNames
operator|.
name|length
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|artifactsName
range|:
name|artifactsNames
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|artifacts
control|)
block|{
name|assertNotNull
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|artifactsName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"artifact not found: "
operator|+
name|artifactsName
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertDependencyArtifacts
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|String
index|[]
name|artifactsNames
parameter_list|)
block|{
name|DependencyArtifactDescriptor
index|[]
name|dads
init|=
name|dd
operator|.
name|getDependencyArtifacts
argument_list|(
name|confs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dads
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artifactsNames
operator|.
name|length
argument_list|,
name|dads
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|artifactsName
range|:
name|artifactsNames
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DependencyArtifactDescriptor
name|dad
range|:
name|dads
control|)
block|{
name|assertNotNull
argument_list|(
name|dad
argument_list|)
expr_stmt|;
if|if
condition|(
name|dad
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|artifactsName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"dependency artifact not found: "
operator|+
name|artifactsName
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertDependencyArtifactIncludeRules
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|String
index|[]
name|artifactsNames
parameter_list|)
block|{
name|IncludeRule
index|[]
name|dads
init|=
name|dd
operator|.
name|getIncludeRules
argument_list|(
name|confs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dads
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artifactsNames
operator|.
name|length
argument_list|,
name|dads
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|artifactsName
range|:
name|artifactsNames
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|IncludeRule
name|dad
range|:
name|dads
control|)
block|{
name|assertNotNull
argument_list|(
name|dad
argument_list|)
expr_stmt|;
if|if
condition|(
name|dad
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|artifactsName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"dependency include not found: "
operator|+
name|artifactsName
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertDependencyArtifactExcludeRules
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|String
index|[]
name|artifactsNames
parameter_list|)
block|{
name|ExcludeRule
index|[]
name|rules
init|=
name|dd
operator|.
name|getExcludeRules
argument_list|(
name|confs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rules
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artifactsNames
operator|.
name|length
argument_list|,
name|rules
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|artifactsName
range|:
name|artifactsNames
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ExcludeRule
name|rule
range|:
name|rules
control|)
block|{
name|assertNotNull
argument_list|(
name|rule
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|artifactsName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"dependency exclude not found: "
operator|+
name|artifactsName
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertDependencyModulesExcludes
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|String
index|[]
name|moduleNames
parameter_list|)
block|{
name|ExcludeRule
index|[]
name|rules
init|=
name|dd
operator|.
name|getExcludeRules
argument_list|(
name|confs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rules
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|moduleNames
operator|.
name|length
argument_list|,
name|rules
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|moduleName
range|:
name|moduleNames
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ExcludeRule
name|rule
range|:
name|rules
control|)
block|{
name|assertNotNull
argument_list|(
name|rule
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|.
name|getId
argument_list|()
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|moduleName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"dependency module exclude not found: "
operator|+
name|moduleName
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertConf
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|Visibility
name|visibility
parameter_list|,
name|String
index|[]
name|exts
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|md
operator|.
name|getConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"configuration not found: "
operator|+
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|conf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|desc
argument_list|,
name|conf
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|visibility
argument_list|,
name|conf
operator|.
name|getVisibility
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|exts
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|conf
operator|.
name|getExtends
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

