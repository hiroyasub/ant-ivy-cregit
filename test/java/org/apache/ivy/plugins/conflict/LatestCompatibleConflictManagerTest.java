begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ConfigurationResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_class
specifier|public
class|class
name|LatestCompatibleConflictManagerTest
extends|extends
name|TestCase
block|{
specifier|private
name|TestFixture
name|fixture
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|=
operator|new
name|TestFixture
argument_list|()
expr_stmt|;
name|LatestCompatibleConflictManager
name|cm
init|=
operator|new
name|LatestCompatibleConflictManager
argument_list|()
decl_stmt|;
name|fixture
operator|.
name|getSettings
argument_list|()
operator|.
name|addConfigured
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|fixture
operator|.
name|getSettings
argument_list|()
operator|.
name|setDefaultConflictManager
argument_list|(
name|cm
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|clean
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testInitFromSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|Ivy
name|ivy
init|=
operator|new
name|Ivy
argument_list|()
decl_stmt|;
name|ivy
operator|.
name|configure
argument_list|(
name|LatestCompatibleConflictManagerTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-latest-compatible.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|ConflictManager
name|cm
init|=
name|ivy
operator|.
name|getSettings
argument_list|()
operator|.
name|getDefaultConflictManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cm
operator|instanceof
name|LatestCompatibleConflictManager
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompatibilityResolve1
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|addMD
argument_list|(
literal|"#A;1-> { #B;1.4 #C;[2.0,2.5] }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1.4->#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;2.5->#D;[1.0,1.6]"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.6"
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|resolveAndAssert
argument_list|(
literal|"#A;1"
argument_list|,
literal|"#B;1.4, #C;2.5, #D;1.5"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompatibilityResolve2
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|addMD
argument_list|(
literal|"#A;2-> { #B;[1.0,1.5] #C;[2.0,2.5] }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1.4->#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1.5->#D;2.0"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;2.5->#D;[1.0,1.6]"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.6"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;2.0"
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|resolveAndAssert
argument_list|(
literal|"#A;2"
argument_list|,
literal|"#B;1.4, #C;2.5, #D;1.5"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompatibilityResolve3
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|addMD
argument_list|(
literal|"#A;3-> { #B;[2.0,2.5] #C;[3.0,3.5] }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;2.3-> { #D;1.5 #E;1.0 }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;2.4-> { #D;1.5 #E;2.0 }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;2.5-> { #D;2.0 }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;2.5-> { #D;2.0 }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;3.4-> { #D;[1.0,1.6] #E;1.0 }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;3.5-> { #D;[1.0,1.6] #E;1.9 }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.6"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;2.0"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#E;1.0"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#E;1.9"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#E;2.0"
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|resolveAndAssert
argument_list|(
literal|"#A;3"
argument_list|,
literal|"#B;2.3, #C;3.4, #D;1.5, #E;1.0"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompatibilityResolve4
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|addMD
argument_list|(
literal|"#A;4-> { #B;[1.0,1.5] #C;[2.0,2.5] #F;[1.0,1.1] }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1.4->#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1.5->#D;2.0"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;2.5->#D;[1.0,1.6]"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#F;1.0->#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#F;1.1->#D;1.6"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.6"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;2.0"
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|resolveAndAssert
argument_list|(
literal|"#A;4"
argument_list|,
literal|"#B;1.4, #C;2.5, #D;1.5, #F;1.0"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompatibilityResolve5
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|addMD
argument_list|(
literal|"#A;5->{ #B;[1.0,1.5] #C;2.6 }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1.3->{ }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1.4->#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1.5->#D;2.0"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;2.6->#D;1.6"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.6"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;2.0"
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|resolveAndAssert
argument_list|(
literal|"#A;5"
argument_list|,
literal|"#B;1.3, #C;2.6, #D;1.6"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompatibilityResolve6
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|addMD
argument_list|(
literal|"#A;1-> { #C;[2.0,2.5] #B;1.4 }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1.4->#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;2.5->#D;[1.0,1.6]"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.6"
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|resolveAndAssert
argument_list|(
literal|"#A;1"
argument_list|,
literal|"#B;1.4, #C;2.5, #D;1.5"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompatibilityResolveCircularDependency1
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|addMD
argument_list|(
literal|"#A;6->{ #B;[3.0,3.5] #C;4.6 }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;3.4->#D;2.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;3.5->#D;3.0"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;4.6->#D;2.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;3.0->#B;3.5"
argument_list|)
comment|// circular dependency
operator|.
name|addMD
argument_list|(
literal|"#D;2.5->#B;3.4"
argument_list|)
comment|// circular dependency
operator|.
name|addMD
argument_list|(
literal|"#D;2.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;3.0"
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|resolveAndAssert
argument_list|(
literal|"#A;6"
argument_list|,
literal|"#B;3.4, #C;4.6, #D;2.5"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompatibilityResolveCircularDependency2
parameter_list|()
throws|throws
name|Exception
block|{
name|fixture
operator|.
name|addMD
argument_list|(
literal|"#A;1->#C;2"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;1->#B;1"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;2->#B;2"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;3->#B;3"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1->#C;latest.integration"
argument_list|)
comment|// circular dependency
operator|.
name|addMD
argument_list|(
literal|"#B;2->#C;latest.integration"
argument_list|)
comment|// circular dependency
operator|.
name|addMD
argument_list|(
literal|"#B;3->#C;latest.integration"
argument_list|)
comment|// circular dependency
operator|.
name|init
argument_list|()
expr_stmt|;
name|resolveAndAssert
argument_list|(
literal|"#A;1"
argument_list|,
literal|"#B;2, #C;2"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompatibilityResolveCircularDependency3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// same as 2, but A depends on B
name|fixture
operator|.
name|addMD
argument_list|(
literal|"#A;1->#B;2"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;1->#B;1"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;2->#B;2"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;3->#B;3"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1->#C;latest.integration"
argument_list|)
comment|// circular dependency
operator|.
name|addMD
argument_list|(
literal|"#B;2->#C;latest.integration"
argument_list|)
comment|// circular dependency
operator|.
name|addMD
argument_list|(
literal|"#B;3->#C;latest.integration"
argument_list|)
comment|// circular dependency
operator|.
name|init
argument_list|()
expr_stmt|;
name|resolveAndAssert
argument_list|(
literal|"#A;1"
argument_list|,
literal|"#B;2, #C;2"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConflict
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|fixture
operator|.
name|addMD
argument_list|(
literal|"#A;conflict-> { #B;[1.5,1.6] #C;2.5 }"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1.5->#D;2.0"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#B;1.6->#D;2.0"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#C;2.5->#D;[1.0,1.6]"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.5"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;1.6"
argument_list|)
operator|.
name|addMD
argument_list|(
literal|"#D;2.0"
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|fixture
operator|.
name|resolve
argument_list|(
literal|"#A;conflict"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Resolve should have failed with a conflict"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StrictConflictException
name|e
parameter_list|)
block|{
comment|// this is expected
block|}
block|}
specifier|private
name|void
name|resolveAndAssert
parameter_list|(
name|String
name|mrid
parameter_list|,
name|String
name|expectedModuleSet
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ResolveReport
name|report
init|=
name|fixture
operator|.
name|resolve
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|report
operator|.
name|hasError
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigurationResolveReport
name|defaultReport
init|=
name|report
operator|.
name|getConfigurationReport
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|TestHelper
operator|.
name|assertModuleRevisionIds
argument_list|(
name|expectedModuleSet
argument_list|,
name|defaultReport
operator|.
name|getModuleRevisionIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

