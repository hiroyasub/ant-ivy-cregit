begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_class
specifier|public
class|class
name|RegexpConflictManagerTest
extends|extends
name|TestCase
block|{
specifier|private
name|Ivy
name|ivy
decl_stmt|;
specifier|private
name|File
name|_cache
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ivy
operator|=
operator|new
name|Ivy
argument_list|()
expr_stmt|;
name|ivy
operator|.
name|configure
argument_list|(
name|RegexpConflictManagerTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-regexp-test.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|_cache
operator|=
operator|new
name|File
argument_list|(
literal|"build/cache"
argument_list|)
expr_stmt|;
name|_cache
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtil
operator|.
name|forceDelete
argument_list|(
name|_cache
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNoApiConflictResolve
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ivy
operator|.
name|resolve
argument_list|(
name|RegexpConflictManagerTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivy-no-regexp-conflict.xml"
argument_list|)
argument_list|,
name|getResolveOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StrictConflictException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected conflict: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testConflictResolve
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ivy
operator|.
name|resolve
argument_list|(
name|RegexpConflictManagerTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivy-conflict.xml"
argument_list|)
argument_list|,
name|getResolveOptions
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Resolve should have failed with a conflict"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StrictConflictException
name|e
parameter_list|)
block|{
comment|// this is expected
name|assertTrue
argument_list|(
literal|"bad exception message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"org1#mod1.2;2.0.0:2.0 (needed by [apache#resolve-noconflict;1.0])"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bad exception message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"conflicts with"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bad exception message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"org1#mod1.2;2.1.0:2.1 (needed by [apache#resolve-noconflict;1.0])"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ResolveOptions
name|getResolveOptions
parameter_list|()
block|{
return|return
operator|new
name|ResolveOptions
argument_list|()
operator|.
name|setValidate
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

