begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|trigger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|resolve
operator|.
name|StartResolveEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|MockMessageLogger
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|LogTriggerTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|private
name|StartResolveEvent
name|ev
decl_stmt|;
specifier|private
name|LogTrigger
name|trigger
decl_stmt|;
specifier|private
name|File
name|testDir
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|ev
operator|=
operator|new
name|StartResolveEvent
argument_list|(
name|DefaultModuleDescriptor
operator|.
name|newBasicInstance
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
literal|"o#A;1"
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"c"
block|}
argument_list|)
expr_stmt|;
name|trigger
operator|=
operator|new
name|LogTrigger
argument_list|()
expr_stmt|;
name|trigger
operator|.
name|setEvent
argument_list|(
name|ev
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|testDir
operator|=
operator|new
name|File
argument_list|(
literal|"build/test/trigger"
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtil
operator|.
name|forceDelete
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|trigger
operator|.
name|setMessage
argument_list|(
literal|"msg: ${organisation} ${module} ${revision}"
argument_list|)
expr_stmt|;
name|MockMessageLogger
name|mockLogger
init|=
operator|new
name|MockMessageLogger
argument_list|()
decl_stmt|;
name|Message
operator|.
name|setDefaultLogger
argument_list|(
name|mockLogger
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|progress
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|mockLogger
operator|.
name|assertLogInfoContains
argument_list|(
literal|"msg: o A 1"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFile
parameter_list|()
throws|throws
name|Exception
block|{
name|trigger
operator|.
name|setMessage
argument_list|(
literal|"msg: ${organisation} ${module} ${revision}"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"test.log"
argument_list|)
decl_stmt|;
name|trigger
operator|.
name|setFile
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|progress
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"msg: o A 1"
operator|+
name|LINE_SEPARATOR
argument_list|,
name|FileUtil
operator|.
name|readEntirely
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|progress
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"msg: o A 1"
operator|+
name|LINE_SEPARATOR
operator|+
literal|"msg: o A 1"
operator|+
name|LINE_SEPARATOR
argument_list|,
name|FileUtil
operator|.
name|readEntirely
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFileNoAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|trigger
operator|.
name|setMessage
argument_list|(
literal|"msg: ${organisation} ${module} ${revision}"
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
literal|"test.log"
argument_list|)
decl_stmt|;
name|trigger
operator|.
name|setFile
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|setAppend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|progress
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|progress
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"msg: o A 1"
operator|+
name|LINE_SEPARATOR
argument_list|,
name|FileUtil
operator|.
name|readEntirely
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

