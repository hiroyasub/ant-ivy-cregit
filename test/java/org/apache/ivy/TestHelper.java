begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_class
specifier|public
class|class
name|TestHelper
block|{
specifier|public
specifier|static
name|File
name|getArchiveFileInCache
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|File
name|cache
parameter_list|,
name|String
name|organisation
parameter_list|,
name|String
name|module
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
return|return
name|getArchiveFileInCache
argument_list|(
name|ivy
operator|.
name|getCacheManager
argument_list|(
name|cache
argument_list|)
argument_list|,
name|organisation
argument_list|,
name|module
argument_list|,
name|revision
argument_list|,
name|artifact
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|File
name|getArchiveFileInCache
parameter_list|(
name|CacheManager
name|cacheManager
parameter_list|,
name|String
name|organisation
parameter_list|,
name|String
name|module
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
return|return
name|cacheManager
operator|.
name|getArchiveFileInCache
argument_list|(
operator|new
name|DefaultArtifact
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
name|revision
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
name|artifact
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Assertion utility methods to test if a collection of {@link ModuleRevisionId} matches a given      * expected set of mrids.      *<p>      * Expected mrids is given as a String of comma separated string representations of      * {@link ModuleRevisionId}.      *       * @param expectedMrids      *            the expected set of mrids      * @param mrids      *            the3 mrids to test      */
specifier|public
specifier|static
name|void
name|assertModuleRevisionIds
parameter_list|(
name|String
name|expectedMrids
parameter_list|,
name|Collection
comment|/*<ModuleRevisionId> */
name|mrids
parameter_list|)
block|{
name|Collection
name|expected
init|=
name|parseMrids
argument_list|(
name|expectedMrids
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|mrids
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a Set of {@link ModuleRevisionId} corresponding to the given comma separated list of      * their text representation.      *       * @param mrids      *            the text representation of the {@link ModuleRevisionId}      * @return a collection of {@link ModuleRevisionId}      */
specifier|public
specifier|static
name|Collection
name|parseMrids
parameter_list|(
name|String
name|mrids
parameter_list|)
block|{
name|String
index|[]
name|m
init|=
name|mrids
operator|.
name|split
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
name|Collection
name|c
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|.
name|add
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
name|m
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
comment|/**      * Returns an array of {@link ModuleRevisionId} corresponding to the given comma separated list of      * their text representation.      *       * @param mrids      *            the text representation of the {@link ModuleRevisionId}      * @return an array of {@link ModuleRevisionId}      */
specifier|public
specifier|static
name|ModuleRevisionId
index|[]
name|parseMridsToArray
parameter_list|(
name|String
name|mrids
parameter_list|)
block|{
name|Collection
name|parsedMrids
init|=
name|parseMrids
argument_list|(
name|mrids
argument_list|)
decl_stmt|;
return|return
operator|(
name|ModuleRevisionId
index|[]
operator|)
name|parsedMrids
operator|.
name|toArray
argument_list|(
operator|new
name|ModuleRevisionId
index|[
name|parsedMrids
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

