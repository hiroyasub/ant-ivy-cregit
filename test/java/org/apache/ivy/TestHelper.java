begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|Authenticator
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|Authenticator
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|Authenticator
operator|.
name|Retry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|Authenticator
operator|.
name|Success
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|BasicAuthenticator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpExchange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|DefaultRepositoryCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
operator|.
name|SortEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|FileSystemResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|DefaultLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Authenticator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TestHelper
block|{
specifier|public
specifier|static
name|DefaultArtifact
name|newArtifact
parameter_list|(
name|String
name|organisation
parameter_list|,
name|String
name|module
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
return|return
operator|new
name|DefaultArtifact
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
name|revision
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
name|artifact
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|File
name|getArchiveFileInCache
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|String
name|mrid
parameter_list|,
name|String
name|artifactName
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
name|DefaultArtifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
name|mrid
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
name|artifactName
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
decl_stmt|;
return|return
name|getRepositoryCacheManager
argument_list|(
name|ivy
argument_list|,
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
operator|.
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|File
name|getArchiveFileInCache
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|String
name|organisation
parameter_list|,
name|String
name|module
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|artifactName
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
name|DefaultArtifact
name|artifact
init|=
name|newArtifact
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
name|revision
argument_list|,
name|artifactName
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
decl_stmt|;
return|return
name|getRepositoryCacheManager
argument_list|(
name|ivy
argument_list|,
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
operator|.
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DefaultRepositoryCacheManager
name|getRepositoryCacheManager
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|ModuleRevisionId
name|id
parameter_list|)
block|{
comment|// WARN: this doesn't work if the resolver registered is a compound resolver (chain
comment|// or dual) and a sub resolver doesn't use the same cache manager as the parent
return|return
operator|(
name|DefaultRepositoryCacheManager
operator|)
name|ivy
operator|.
name|getSettings
argument_list|()
operator|.
name|getResolver
argument_list|(
name|id
argument_list|)
operator|.
name|getRepositoryCacheManager
argument_list|()
return|;
block|}
comment|/**      * Assertion utility methods to test if a collection of {@link ModuleRevisionId} matches a      * given expected set of mrids.      *<p>      * Expected mrids is given as a String of comma separated string representations of      * {@link ModuleRevisionId}.      *      * @param expectedMrids      *            the expected set of mrids      * @param mrids      *            the3 mrids to test      */
specifier|public
specifier|static
name|void
name|assertModuleRevisionIds
parameter_list|(
name|String
name|expectedMrids
parameter_list|,
name|Collection
argument_list|<
name|ModuleRevisionId
argument_list|>
name|mrids
parameter_list|)
block|{
name|Collection
argument_list|<
name|ModuleRevisionId
argument_list|>
name|expected
init|=
name|parseMrids
argument_list|(
name|expectedMrids
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|mrids
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a Set of {@link ModuleRevisionId} corresponding to the given comma separated list of      * their text representation.      *      * @param mrids      *            the text representation of the {@link ModuleRevisionId}      * @return a collection of {@link ModuleRevisionId}      */
specifier|public
specifier|static
name|Collection
argument_list|<
name|ModuleRevisionId
argument_list|>
name|parseMrids
parameter_list|(
name|String
name|mrids
parameter_list|)
block|{
name|Collection
argument_list|<
name|ModuleRevisionId
argument_list|>
name|c
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|mrids
operator|.
name|split
argument_list|(
literal|",?\\s+"
argument_list|)
control|)
block|{
name|c
operator|.
name|add
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
comment|/**      * Returns an array of {@link ModuleRevisionId} corresponding to the given comma separated list      * of their text representation.      *      * @param mrids      *            the text representation of the {@link ModuleRevisionId}      * @return an array of {@link ModuleRevisionId}      */
specifier|public
specifier|static
name|ModuleRevisionId
index|[]
name|parseMridsToArray
parameter_list|(
name|String
name|mrids
parameter_list|)
block|{
name|Collection
argument_list|<
name|ModuleRevisionId
argument_list|>
name|parsedMrids
init|=
name|parseMrids
argument_list|(
name|mrids
argument_list|)
decl_stmt|;
return|return
name|parsedMrids
operator|.
name|toArray
argument_list|(
operator|new
name|ModuleRevisionId
index|[
name|parsedMrids
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Parses a string representation of a module descriptor in micro ivy format.      *<p>      * Examples:      *</p>      *<pre>      * #A;1      *</pre>      *<hr>      *<pre>      * #A;2-&gt; #B;[1.0,1.5]      *</pre>      *<hr>      *<pre>      * #A;3-&gt; { #B;[1.0,1.5] #C;[2.0,2.5] }      *</pre>      *      * @param microIvy      *            the micro ivy description of the module descriptor      * @return the parsed module descriptor      */
specifier|public
specifier|static
name|ModuleDescriptor
name|parseMicroIvyDescriptor
parameter_list|(
name|String
name|microIvy
parameter_list|)
block|{
name|Pattern
name|mridPattern
init|=
name|ModuleRevisionId
operator|.
name|NON_CAPTURING_PATTERN
decl_stmt|;
name|Matcher
name|m
init|=
name|mridPattern
operator|.
name|matcher
argument_list|(
name|microIvy
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|DefaultModuleDescriptor
operator|.
name|newBasicInstance
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
name|microIvy
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
return|;
block|}
name|Pattern
name|oneDependencyPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(%s)\\s*->\\s*(%s)"
argument_list|,
name|mridPattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|mridPattern
operator|.
name|pattern
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|m
operator|=
name|oneDependencyPattern
operator|.
name|matcher
argument_list|(
name|microIvy
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|DefaultModuleDescriptor
name|md
init|=
name|DefaultModuleDescriptor
operator|.
name|newBasicInstance
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|md
operator|.
name|addDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|md
return|;
block|}
name|String
name|p
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(%s)\\s*->\\s*\\{\\s*((?:%s,?\\s+)*%s)?\\s*\\}"
argument_list|,
name|mridPattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|mridPattern
operator|.
name|pattern
argument_list|()
argument_list|,
name|mridPattern
operator|.
name|pattern
argument_list|()
argument_list|)
decl_stmt|;
name|Pattern
name|multipleDependenciesPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|m
operator|=
name|multipleDependenciesPattern
operator|.
name|matcher
argument_list|(
name|microIvy
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|DefaultModuleDescriptor
name|md
init|=
name|DefaultModuleDescriptor
operator|.
name|newBasicInstance
argument_list|(
name|ModuleRevisionId
operator|.
name|parse
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|mrids
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|mrids
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ModuleRevisionId
name|dep
range|:
name|parseMrids
argument_list|(
name|mrids
argument_list|)
control|)
block|{
name|md
operator|.
name|addDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|dep
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|md
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid micro ivy format: "
operator|+
name|microIvy
argument_list|)
throw|;
block|}
comment|/**      * Parses a collection of module descriptors in the micro ivy format, separated by double      * semicolons.      *      * @param microIvy      *            the text representation of the collection of module descriptors      * @return the collection of module descriptors parsed      */
specifier|public
specifier|static
name|Collection
argument_list|<
name|ModuleDescriptor
argument_list|>
name|parseMicroIvyDescriptors
parameter_list|(
name|String
name|microIvy
parameter_list|)
block|{
name|Collection
argument_list|<
name|ModuleDescriptor
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|md
range|:
name|microIvy
operator|.
name|split
argument_list|(
literal|"\\s*;;\\s*"
argument_list|)
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|parseMicroIvyDescriptor
argument_list|(
name|md
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/**      * Fills a repository with a set of module, using empty files for published artifacts.      *      * @param resolver      *            the resolver to use to publish the modules      * @param mds      *            the descriptors of the modules to put in the repository      * @throws IOException      *             if an IO problem occurs while filling the repository      */
specifier|public
specifier|static
name|void
name|fillRepository
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|,
name|Collection
argument_list|<
name|ModuleDescriptor
argument_list|>
name|mds
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"ivy"
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|ModuleDescriptor
name|md
range|:
name|mds
control|)
block|{
name|boolean
name|overwrite
init|=
literal|false
decl_stmt|;
name|resolver
operator|.
name|beginPublishTransaction
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
name|boolean
name|published
init|=
literal|false
decl_stmt|;
try|try
block|{
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|md
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|publish
argument_list|(
name|md
operator|.
name|getMetadataArtifact
argument_list|()
argument_list|,
name|tmp
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tmp
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|md
operator|.
name|getAllArtifacts
argument_list|()
control|)
block|{
name|resolver
operator|.
name|publish
argument_list|(
name|artifact
argument_list|,
name|tmp
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
name|resolver
operator|.
name|commitPublishTransaction
argument_list|()
expr_stmt|;
name|published
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|published
condition|)
block|{
name|resolver
operator|.
name|abortPublishTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|tmp
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * A file system resolver which can be used with the      * {@link #fillRepository(DependencyResolver, Collection)} method to create a test case of      * module descriptor.      *<p>      * When finished you should call {@link #cleanTestRepository()}      *</p>      *      * @return FileSystemResolver      */
specifier|public
specifier|static
name|FileSystemResolver
name|newTestRepository
parameter_list|()
block|{
name|FileSystemResolver
name|testRepository
init|=
operator|new
name|FileSystemResolver
argument_list|()
decl_stmt|;
name|testRepository
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|String
name|testRepoDir
init|=
operator|new
name|File
argument_list|(
literal|"build/test/test-repo"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|testRepository
operator|.
name|addIvyPattern
argument_list|(
name|testRepoDir
operator|+
literal|"/[organisation]/[module]/[revision]/[artifact].[ext]"
argument_list|)
expr_stmt|;
name|testRepository
operator|.
name|addArtifactPattern
argument_list|(
name|testRepoDir
operator|+
literal|"/[organisation]/[module]/[revision]/[artifact].[ext]"
argument_list|)
expr_stmt|;
return|return
name|testRepository
return|;
block|}
comment|/**      * Cleans up the test repository.      *      * @see #newTestRepository()      */
specifier|public
specifier|static
name|void
name|cleanTestRepository
parameter_list|()
block|{
name|FileUtil
operator|.
name|forceDelete
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/test-repo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Cleans up the test repository and cache.      *      * @see #newTestRepository()      */
specifier|public
specifier|static
name|void
name|cleanTest
parameter_list|()
block|{
name|cleanTestRepository
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|forceDelete
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/cache"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Init a test resolver as default, useful combined with      * {@link #fillRepository(DependencyResolver, Collection)}.      *      * @param settings      *            the settings to initialize      * @return test settings      */
specifier|public
specifier|static
name|IvySettings
name|loadTestSettings
parameter_list|(
name|IvySettings
name|settings
parameter_list|)
block|{
name|settings
operator|.
name|setDefaultCache
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/cache"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addResolver
argument_list|(
name|newTestRepository
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setDefaultResolver
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
return|return
name|settings
return|;
block|}
comment|/**      * Create basic resolve data using the given settings      *      * @param settings      *            the settings to use to create the resolve data      * @return basic resolve data useful for testing      */
specifier|public
specifier|static
name|ResolveData
name|newResolveData
parameter_list|(
name|IvySettings
name|settings
parameter_list|)
block|{
return|return
operator|new
name|ResolveData
argument_list|(
operator|new
name|ResolveEngine
argument_list|(
name|settings
argument_list|,
operator|new
name|EventManager
argument_list|()
argument_list|,
operator|new
name|SortEngine
argument_list|(
name|settings
argument_list|)
argument_list|)
argument_list|,
name|newResolveOptions
argument_list|(
name|settings
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Create basic resolve options using the given settings      *      * @param settings      *            the settings to use to create the resolve options      * @return the basic resolve options, useful for testing      */
specifier|public
specifier|static
name|ResolveOptions
name|newResolveOptions
parameter_list|(
name|IvySettings
name|settings
parameter_list|)
block|{
return|return
operator|new
name|ResolveOptions
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Project
name|newProject
parameter_list|()
block|{
name|Project
name|project
init|=
operator|new
name|Project
argument_list|()
decl_stmt|;
name|DefaultLogger
name|logger
init|=
operator|new
name|DefaultLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|setMessageOutputLevel
argument_list|(
name|Project
operator|.
name|MSG_INFO
argument_list|)
expr_stmt|;
name|logger
operator|.
name|setOutputPrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|logger
operator|.
name|setErrorPrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|project
operator|.
name|addBuildListener
argument_list|(
name|logger
argument_list|)
expr_stmt|;
return|return
name|project
return|;
block|}
specifier|public
specifier|static
name|File
name|cache
init|=
operator|new
name|File
argument_list|(
literal|"build/cache"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|createCache
parameter_list|()
block|{
name|cache
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|cleanCache
parameter_list|()
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|()
decl_stmt|;
name|del
operator|.
name|setProject
argument_list|(
operator|new
name|Project
argument_list|()
argument_list|)
expr_stmt|;
name|del
operator|.
name|setDir
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|del
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
comment|/**      * The {@link Authenticator} doesn't have API to get hold of the current system level      * {@link Authenticator}. This method does a best-effort attempt to try and get hold of the      * current {@link Authenticator} in a way that's specific to the implementation of this method.      * There's no guarantee that this method will return the current authenticator.      *      * @return Returns the currently setup system level {@link Authenticator}. In cases where this      * method isn't able to get the current authenticator, this method returns null      */
specifier|public
specifier|static
name|Authenticator
name|getCurrentAuthenticator
parameter_list|()
block|{
comment|// we use reflection to try and get hold of the "current" authenticator
comment|// since there's no getter available on the Authenticator.
try|try
block|{
name|Field
name|f
init|=
name|Authenticator
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"theAuthenticator"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Authenticator
operator|)
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore and return null
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Creates a HTTP server, backed by a local file system, which can be used as a repository to      * serve Ivy module descriptors and artifacts.      * NOTE: This is supposed to be used only in test cases and only a limited functionality is      * added in the handler(s) backing the server      *      * @param serverAddress           The address to which the server will be bound      * @param webAppContext           The context root of the application which will be handling      *                                the requests to the server      * @param localFilesystemRepoRoot The path to the root directory containing the module      *                                descriptors and artifacts      * @return AutoCloseable      * @throws IOException if something goes wrong      */
specifier|public
specifier|static
name|AutoCloseable
name|createHttpServerBackedRepository
parameter_list|(
specifier|final
name|InetSocketAddress
name|serverAddress
parameter_list|,
specifier|final
name|String
name|webAppContext
parameter_list|,
specifier|final
name|Path
name|localFilesystemRepoRoot
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LocalFileRepoOverHttp
name|handler
init|=
operator|new
name|LocalFileRepoOverHttp
argument_list|(
name|webAppContext
argument_list|,
name|localFilesystemRepoRoot
argument_list|)
decl_stmt|;
specifier|final
name|HttpServer
name|server
init|=
name|HttpServer
operator|.
name|create
argument_list|(
name|serverAddress
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// setup the handler
name|server
operator|.
name|createContext
argument_list|(
name|webAppContext
argument_list|,
name|handler
argument_list|)
expr_stmt|;
comment|// start the server
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
operator|new
name|AutoCloseable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|delaySeconds
init|=
literal|0
decl_stmt|;
name|server
operator|.
name|stop
argument_list|(
name|delaySeconds
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * Creates a HTTP server, backed by a local file system, which can be used as a repository to      * serve Ivy module descriptors and artifacts. The context within the server will be backed by      * {@code BASIC} authentication mechanism with {@code realm} as the realm and      * {@code validCredentials} as the credentials that the server will recognize. The server will      * allow access to resources, only if the credentials that are provided by the request, belong      * to these credentials.      *<p>      * NOTE: This is supposed to be used only in test cases and only a limited functionality is      * added in the handler(s) backing the server      *      * @param serverAddress           The address to which the server will be bound      * @param webAppContext           The context root of the application which will be handling      *                                the requests to the server      * @param localFilesystemRepoRoot The path to the root directory containing the module      *                                descriptors and artifacts      * @param realm                   The realm to use for the {@code BASIC} auth mechanism      * @param validCredentials        A {@link Map} of valid credentials, the key being the user      *                                name and the value being the password, that the server will      *                                use during the authentication process of the incoming requests      * @return AutoCloseable      * @throws IOException if something goes wrong      */
specifier|public
specifier|static
name|AutoCloseable
name|createBasicAuthHttpServerBackedRepo
parameter_list|(
specifier|final
name|InetSocketAddress
name|serverAddress
parameter_list|,
specifier|final
name|String
name|webAppContext
parameter_list|,
specifier|final
name|Path
name|localFilesystemRepoRoot
parameter_list|,
specifier|final
name|String
name|realm
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|validCredentials
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LocalFileRepoOverHttp
name|handler
init|=
operator|new
name|LocalFileRepoOverHttp
argument_list|(
name|webAppContext
argument_list|,
name|localFilesystemRepoRoot
argument_list|)
decl_stmt|;
specifier|final
name|HttpServer
name|server
init|=
name|HttpServer
operator|.
name|create
argument_list|(
name|serverAddress
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// setup the handler
specifier|final
name|HttpContext
name|context
init|=
name|server
operator|.
name|createContext
argument_list|(
name|webAppContext
argument_list|,
name|handler
argument_list|)
decl_stmt|;
comment|// setup basic auth on this context
specifier|final
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|Authenticator
name|authenticator
init|=
operator|new
name|BasicAuthenticator
argument_list|(
name|realm
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|checkCredentials
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|pass
parameter_list|)
block|{
if|if
condition|(
name|validCredentials
operator|==
literal|null
operator|||
operator|!
name|validCredentials
operator|.
name|containsKey
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|expectedPass
init|=
name|validCredentials
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
name|expectedPass
operator|!=
literal|null
operator|&&
name|expectedPass
operator|.
name|equals
argument_list|(
name|pass
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|context
operator|.
name|setAuthenticator
argument_list|(
name|authenticator
argument_list|)
expr_stmt|;
comment|// setup a auth filter backed by the authenticator
name|context
operator|.
name|getFilters
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AuthFilter
argument_list|(
name|authenticator
argument_list|)
argument_list|)
expr_stmt|;
comment|// start the server
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
operator|new
name|AutoCloseable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|delaySeconds
init|=
literal|0
decl_stmt|;
name|server
operator|.
name|stop
argument_list|(
name|delaySeconds
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|AuthFilter
extends|extends
name|Filter
block|{
specifier|private
specifier|final
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|Authenticator
name|authenticator
decl_stmt|;
name|AuthFilter
parameter_list|(
specifier|final
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|Authenticator
name|authenticator
parameter_list|)
block|{
name|this
operator|.
name|authenticator
operator|=
name|authenticator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
specifier|final
name|HttpExchange
name|httpExchange
parameter_list|,
specifier|final
name|Chain
name|chain
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|authenticator
operator|==
literal|null
condition|)
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|httpExchange
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Result
name|authResult
init|=
name|this
operator|.
name|authenticator
operator|.
name|authenticate
argument_list|(
name|httpExchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|authResult
operator|instanceof
name|Success
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|final
name|Success
name|success
init|=
operator|(
name|Success
operator|)
name|authResult
decl_stmt|;
comment|// auth succeeded - move to next filter
name|chain
operator|.
name|doFilter
argument_list|(
name|httpExchange
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|authResult
operator|instanceof
name|Retry
condition|)
block|{
specifier|final
name|Retry
name|retry
init|=
operator|(
name|Retry
operator|)
name|authResult
decl_stmt|;
name|this
operator|.
name|drainInput
argument_list|(
name|httpExchange
argument_list|)
expr_stmt|;
comment|// send auth retry (401)
name|httpExchange
operator|.
name|sendResponseHeaders
argument_list|(
name|retry
operator|.
name|getResponseCode
argument_list|()
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|authResult
operator|instanceof
name|Failure
condition|)
block|{
specifier|final
name|Failure
name|failure
init|=
operator|(
name|Failure
operator|)
name|authResult
decl_stmt|;
name|this
operator|.
name|drainInput
argument_list|(
name|httpExchange
argument_list|)
expr_stmt|;
comment|// send auth failure (401)
name|httpExchange
operator|.
name|sendResponseHeaders
argument_list|(
name|failure
operator|.
name|getResponseCode
argument_list|()
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|drainInput
parameter_list|(
specifier|final
name|HttpExchange
name|httpExchange
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|httpExchange
operator|.
name|getRequestBody
argument_list|()
init|)
block|{
specifier|final
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
while|while
condition|(
name|is
operator|.
name|read
argument_list|(
name|content
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// ignore the content
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"AuthFilter"
return|;
block|}
block|}
block|}
end_class

end_unit

