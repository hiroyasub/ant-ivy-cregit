begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpExchange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * A {@link HttpHandler} that can be used in tests to serve local file system based resources over  * HTTP NOTE: This handler reads the complete file contents, all into memory while serving it and  * thus isn't suitable with very large files. Use this handler only in test cases where the files  * to serve are reasonably small in size  */
end_comment

begin_class
specifier|final
class|class
name|LocalFileRepoOverHttp
implements|implements
name|HttpHandler
block|{
specifier|private
specifier|final
name|String
name|webContextRoot
decl_stmt|;
specifier|private
specifier|final
name|Path
name|localFileRepoRoot
decl_stmt|;
name|LocalFileRepoOverHttp
parameter_list|(
specifier|final
name|String
name|webContextRoot
parameter_list|,
specifier|final
name|Path
name|localFileRepoRoot
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|localFileRepoRoot
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|localFileRepoRoot
operator|+
literal|" is either missing or not a directory"
argument_list|)
throw|;
block|}
name|this
operator|.
name|webContextRoot
operator|=
name|webContextRoot
expr_stmt|;
name|this
operator|.
name|localFileRepoRoot
operator|=
name|localFileRepoRoot
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
specifier|final
name|HttpExchange
name|httpExchange
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|URI
name|requestURI
init|=
name|httpExchange
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|"Handling "
operator|+
name|httpExchange
operator|.
name|getRequestMethod
argument_list|()
operator|+
literal|" request "
operator|+
name|requestURI
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|artifactURI
decl_stmt|;
try|try
block|{
name|artifactURI
operator|=
operator|new
name|URI
argument_list|(
name|webContextRoot
argument_list|)
operator|.
name|relativize
argument_list|(
name|requestURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|localFilePath
init|=
name|localFileRepoRoot
operator|.
name|resolve
argument_list|(
name|artifactURI
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpExchange
operator|.
name|getRequestMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"HEAD"
argument_list|)
condition|)
block|{
specifier|final
name|boolean
name|available
init|=
name|this
operator|.
name|isPresent
argument_list|(
name|localFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|available
condition|)
block|{
name|httpExchange
operator|.
name|sendResponseHeaders
argument_list|(
literal|404
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|httpExchange
operator|.
name|sendResponseHeaders
argument_list|(
literal|200
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|httpExchange
operator|.
name|getRequestMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"GET"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot handle "
operator|+
name|httpExchange
operator|.
name|getRequestMethod
argument_list|()
operator|+
literal|" HTTP method"
argument_list|)
throw|;
block|}
specifier|final
name|OutputStream
name|responseStream
init|=
name|httpExchange
operator|.
name|getResponseBody
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|final
name|int
name|numBytes
init|=
name|this
operator|.
name|serve
argument_list|(
name|httpExchange
argument_list|,
name|localFilePath
argument_list|,
name|responseStream
argument_list|)
decl_stmt|;
name|responseStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|isPresent
parameter_list|(
specifier|final
name|Path
name|localFile
parameter_list|)
block|{
return|return
name|Files
operator|.
name|isRegularFile
argument_list|(
name|localFile
argument_list|)
return|;
block|}
specifier|private
name|int
name|serve
parameter_list|(
specifier|final
name|HttpExchange
name|httpExchange
parameter_list|,
specifier|final
name|Path
name|localFile
parameter_list|,
specifier|final
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isRegularFile
argument_list|(
name|localFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No such file at path "
operator|+
name|localFile
argument_list|)
throw|;
block|}
name|Message
operator|.
name|debug
argument_list|(
literal|"Serving contents of "
operator|+
name|localFile
operator|+
literal|" for request "
operator|+
name|httpExchange
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|localFile
argument_list|)
decl_stmt|;
name|httpExchange
operator|.
name|sendResponseHeaders
argument_list|(
literal|200
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
operator|.
name|length
return|;
block|}
block|}
end_class

end_unit

