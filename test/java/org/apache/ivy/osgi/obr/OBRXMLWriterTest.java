begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|obr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|obr
operator|.
name|xml
operator|.
name|OBRXMLParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|obr
operator|.
name|xml
operator|.
name|OBRXMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
operator|.
name|BundleRepoDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
operator|.
name|ModuleDescriptorWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|OBRXMLWriterTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Version
name|BUNDLE_VERSION
init|=
operator|new
name|Version
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BUNDLE_1
init|=
literal|"org.apache.ivy.test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BUNDLE_2
init|=
literal|"org.apache.ivy.test2"
decl_stmt|;
specifier|public
name|void
name|testWriteWithSource
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|bundles
init|=
operator|new
name|ArrayList
argument_list|<
name|BundleInfo
argument_list|>
argument_list|()
decl_stmt|;
name|BundleInfo
name|bundle
init|=
operator|new
name|BundleInfo
argument_list|(
name|BUNDLE_1
argument_list|,
name|BUNDLE_VERSION
argument_list|)
decl_stmt|;
name|bundle
operator|.
name|addArtifact
argument_list|(
operator|new
name|BundleArtifact
argument_list|(
literal|false
argument_list|,
operator|new
name|URI
argument_list|(
literal|"file:///test.jar"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|addArtifact
argument_list|(
operator|new
name|BundleArtifact
argument_list|(
literal|true
argument_list|,
operator|new
name|URI
argument_list|(
literal|"file:///test-sources.jar"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|bundles
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|bundle
operator|=
operator|new
name|BundleInfo
argument_list|(
name|BUNDLE_2
argument_list|,
name|BUNDLE_VERSION
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|addArtifact
argument_list|(
operator|new
name|BundleArtifact
argument_list|(
literal|false
argument_list|,
operator|new
name|URI
argument_list|(
literal|"file:///test2.jar"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|bundles
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
literal|"build/test-files"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|obrFile
init|=
operator|new
name|File
argument_list|(
literal|"build/test-files/obr-sources.xml"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|obrFile
argument_list|)
decl_stmt|;
try|try
block|{
name|ContentHandler
name|hanlder
init|=
name|OBRXMLWriter
operator|.
name|newHandler
argument_list|(
name|out
argument_list|,
literal|"UTF-8"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|OBRXMLWriter
operator|.
name|writeBundles
argument_list|(
name|bundles
argument_list|,
name|hanlder
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|obrFile
argument_list|)
decl_stmt|;
name|BundleRepoDescriptor
name|repo
decl_stmt|;
try|try
block|{
name|repo
operator|=
name|OBRXMLParser
operator|.
name|parse
argument_list|(
operator|new
name|URI
argument_list|(
literal|"file:///test"
argument_list|)
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|CollectionUtils
operator|.
name|toList
argument_list|(
name|repo
operator|.
name|getModules
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleDescriptorWrapper
name|bundle1
init|=
name|repo
operator|.
name|findModule
argument_list|(
name|BUNDLE_1
argument_list|,
name|BUNDLE_VERSION
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bundle1
argument_list|)
expr_stmt|;
name|Artifact
index|[]
name|artifacts
init|=
name|bundle1
operator|.
name|getModuleDescriptor
argument_list|()
operator|.
name|getAllArtifacts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|artifacts
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifacts
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"jar"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"source"
argument_list|,
name|artifacts
index|[
literal|1
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"jar"
argument_list|,
name|artifacts
index|[
literal|1
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"source"
argument_list|,
name|artifacts
index|[
literal|0
index|]
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ModuleDescriptorWrapper
name|bundle2
init|=
name|repo
operator|.
name|findModule
argument_list|(
name|BUNDLE_2
argument_list|,
name|BUNDLE_VERSION
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bundle2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bundle2
operator|.
name|getModuleDescriptor
argument_list|()
operator|.
name|getAllArtifacts
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

