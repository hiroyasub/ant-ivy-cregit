begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|runners
operator|.
name|Enclosed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Enclosed
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ManifestHeaderTest
block|{
specifier|public
specifier|static
class|class
name|SingleTests
block|{
annotation|@
name|Test
specifier|public
name|void
name|testNormal
parameter_list|()
throws|throws
name|Exception
block|{
name|ManifestHeaderElement
name|simpleValue
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|simpleValue
operator|.
name|addValue
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|ManifestHeaderValue
name|header
init|=
operator|new
name|ManifestHeaderValue
argument_list|()
decl_stmt|;
name|header
operator|.
name|addElement
argument_list|(
name|simpleValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|header
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|simplePackage
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|simplePackage
operator|.
name|addValue
argument_list|(
literal|"simple.package"
argument_list|)
expr_stmt|;
name|header
operator|.
name|addElement
argument_list|(
name|simplePackage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|header
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value,simple.package"
argument_list|)
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|doubleValue
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|doubleValue
operator|.
name|addValue
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|doubleValue
operator|.
name|addValue
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|ManifestHeaderValue
name|headerDouble
init|=
operator|new
name|ManifestHeaderValue
argument_list|()
decl_stmt|;
name|headerDouble
operator|.
name|addElement
argument_list|(
name|doubleValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|headerDouble
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value1;value2"
argument_list|)
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|versionValue
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|versionValue
operator|.
name|addValue
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|versionValue
operator|.
name|addValue
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|versionValue
operator|.
name|addAttribute
argument_list|(
literal|"version"
argument_list|,
literal|"1.2.3"
argument_list|)
expr_stmt|;
name|ManifestHeaderValue
name|headerVersion
init|=
operator|new
name|ManifestHeaderValue
argument_list|()
decl_stmt|;
name|headerVersion
operator|.
name|addElement
argument_list|(
name|versionValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|headerVersion
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value1;value2;version=1.2.3"
argument_list|)
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|optionValue1
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|optionValue1
operator|.
name|addValue
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|optionValue1
operator|.
name|addDirective
argument_list|(
literal|"resolution"
argument_list|,
literal|"optional"
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|optionValue2
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|optionValue2
operator|.
name|addValue
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|optionValue2
operator|.
name|addValue
argument_list|(
literal|"value3"
argument_list|)
expr_stmt|;
name|optionValue2
operator|.
name|addDirective
argument_list|(
literal|"resolution"
argument_list|,
literal|"mandatory"
argument_list|)
expr_stmt|;
name|optionValue2
operator|.
name|addAttribute
argument_list|(
literal|"version"
argument_list|,
literal|"1.2.3"
argument_list|)
expr_stmt|;
name|ManifestHeaderValue
name|headerOption
init|=
operator|new
name|ManifestHeaderValue
argument_list|()
decl_stmt|;
name|headerOption
operator|.
name|addElement
argument_list|(
name|optionValue1
argument_list|)
expr_stmt|;
name|headerOption
operator|.
name|addElement
argument_list|(
name|optionValue2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|headerOption
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value1;resolution:=optional,value2;value3;resolution:=mandatory;version=1.2.3"
argument_list|)
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|quoteValue
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|quoteValue
operator|.
name|addValue
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|quoteValue
operator|.
name|addAttribute
argument_list|(
literal|"att"
argument_list|,
literal|"value2;value3"
argument_list|)
expr_stmt|;
name|ManifestHeaderValue
name|headerQuote
init|=
operator|new
name|ManifestHeaderValue
argument_list|()
decl_stmt|;
name|headerQuote
operator|.
name|addElement
argument_list|(
name|quoteValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|headerQuote
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value1;att='value2;value3'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpaceInValue
parameter_list|()
throws|throws
name|Exception
block|{
name|ManifestHeaderValue
name|value
init|=
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"glassfish javax.servlet.3.1.0.b33"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"glassfish javax.servlet.3.1.0.b33"
argument_list|,
name|value
operator|.
name|getSingleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
specifier|static
class|class
name|IllegalOptionTests
block|{
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expExc
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"Illegal token at {1} in {0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"value1="
block|,
literal|6
block|}
block|,
block|{
literal|"value1;version=1;value2"
block|,
literal|22
block|}
block|,
block|{
literal|"value1;version="
block|,
literal|14
block|}
block|,
block|{
literal|"value1;version:"
block|,
literal|14
block|}
block|,
block|{
literal|"value1;version:="
block|,
literal|15
block|}
block|,
block|{
literal|"value1;=1"
block|,
literal|7
block|}
block|,
block|{
literal|"value1;att=''value"
block|,
literal|13
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
specifier|public
name|String
name|value
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|1
argument_list|)
specifier|public
name|int
name|offset
decl_stmt|;
comment|/**          * Expected failure when the parameter is illegal          */
annotation|@
name|Test
specifier|public
name|void
name|testSyntaxError
parameter_list|()
throws|throws
name|ParseException
block|{
name|expExc
operator|.
name|expect
argument_list|(
name|ParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expExc
operator|.
name|expect
argument_list|(
name|hasProperty
argument_list|(
literal|"errorOffset"
argument_list|,
name|is
argument_list|(
name|offset
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|ManifestHeaderValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
specifier|static
class|class
name|OptionNormalisationTests
block|{
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"Value {1} is normalised to {0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"value1;att=value2;att2=other"
block|,
literal|"value1;att='value2';att2=other"
block|}
block|,
block|{
literal|"value1;att=value2;att2=other"
block|,
literal|"value1;att=  'value2'  ;att2=other"
block|}
block|,
block|{
literal|"value1;att=value2;att2=other"
block|,
literal|"value1;att=   value2 \t ;att2=other"
block|}
block|,
block|{
literal|"value1;att:=value2;att2=other"
block|,
literal|"value1;att:=  'value2'  ;att2=other"
block|}
block|,
block|{
literal|"value1;att=value2;att2=other"
block|,
literal|"value1;att=\"value2\";att2=other"
block|}
block|,
block|{
literal|"value1;value2"
block|,
literal|"value2;value1"
block|}
block|,
block|{
literal|"value1,value2"
block|,
literal|"value2,value1"
block|}
block|,
block|{
literal|"value1;resolution:=mandatory;color:=red"
block|,
literal|"value1;color:=red;resolution:=mandatory"
block|}
block|,
block|{
literal|"value1;version=1.2.3;color=red"
block|,
literal|"value1;color=red;version=1.2.3"
block|}
block|,
block|{
literal|"value1;version=1.2.3;color:=red"
block|,
literal|"value1;color:=red;version=1.2.3"
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
specifier|public
name|String
name|value
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|1
argument_list|)
specifier|public
name|String
name|normalised
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testNormalisation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|new
name|ManifestHeaderValue
argument_list|(
name|normalised
argument_list|)
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

