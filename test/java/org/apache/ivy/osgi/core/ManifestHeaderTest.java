begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|ManifestHeaderTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testNormal
parameter_list|()
throws|throws
name|Exception
block|{
name|ManifestHeaderElement
name|simpleValue
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|simpleValue
operator|.
name|addValue
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|ManifestHeaderValue
name|header
init|=
operator|new
name|ManifestHeaderValue
argument_list|()
decl_stmt|;
name|header
operator|.
name|addElement
argument_list|(
name|simpleValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|header
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|simplePackage
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|simplePackage
operator|.
name|addValue
argument_list|(
literal|"simple.package"
argument_list|)
expr_stmt|;
name|header
operator|.
name|addElement
argument_list|(
name|simplePackage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|header
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value,simple.package"
argument_list|)
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|doubleValue
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|doubleValue
operator|.
name|addValue
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|doubleValue
operator|.
name|addValue
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|ManifestHeaderValue
name|headerDouble
init|=
operator|new
name|ManifestHeaderValue
argument_list|()
decl_stmt|;
name|headerDouble
operator|.
name|addElement
argument_list|(
name|doubleValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|headerDouble
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value1;value2"
argument_list|)
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|versionValue
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|versionValue
operator|.
name|addValue
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|versionValue
operator|.
name|addValue
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|versionValue
operator|.
name|addAttribute
argument_list|(
literal|"version"
argument_list|,
literal|"1.2.3"
argument_list|)
expr_stmt|;
name|ManifestHeaderValue
name|headerVersion
init|=
operator|new
name|ManifestHeaderValue
argument_list|()
decl_stmt|;
name|headerVersion
operator|.
name|addElement
argument_list|(
name|versionValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|headerVersion
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value1;value2;version=1.2.3"
argument_list|)
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|optionValue1
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|optionValue1
operator|.
name|addValue
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|optionValue1
operator|.
name|addDirective
argument_list|(
literal|"resolution"
argument_list|,
literal|"optional"
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|optionValue2
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|optionValue2
operator|.
name|addValue
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|optionValue2
operator|.
name|addValue
argument_list|(
literal|"value3"
argument_list|)
expr_stmt|;
name|optionValue2
operator|.
name|addDirective
argument_list|(
literal|"resolution"
argument_list|,
literal|"mandatory"
argument_list|)
expr_stmt|;
name|optionValue2
operator|.
name|addAttribute
argument_list|(
literal|"version"
argument_list|,
literal|"1.2.3"
argument_list|)
expr_stmt|;
name|ManifestHeaderValue
name|headerOption
init|=
operator|new
name|ManifestHeaderValue
argument_list|()
decl_stmt|;
name|headerOption
operator|.
name|addElement
argument_list|(
name|optionValue1
argument_list|)
expr_stmt|;
name|headerOption
operator|.
name|addElement
argument_list|(
name|optionValue2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|headerOption
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value1;resolution:=optional,value2;value3;resolution:=mandatory;version=1.2.3"
argument_list|)
argument_list|)
expr_stmt|;
name|ManifestHeaderElement
name|quoteValue
init|=
operator|new
name|ManifestHeaderElement
argument_list|()
decl_stmt|;
name|quoteValue
operator|.
name|addValue
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|quoteValue
operator|.
name|addAttribute
argument_list|(
literal|"att"
argument_list|,
literal|"value2;value3"
argument_list|)
expr_stmt|;
name|ManifestHeaderValue
name|headerQuote
init|=
operator|new
name|ManifestHeaderValue
argument_list|()
decl_stmt|;
name|headerQuote
operator|.
name|addElement
argument_list|(
name|quoteValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|headerQuote
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"value1;att='value2;value3'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|genericTestEquals
parameter_list|(
name|String
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|new
name|ManifestHeaderValue
argument_list|(
name|v1
argument_list|)
argument_list|,
operator|new
name|ManifestHeaderValue
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSpaceAndQuote
parameter_list|()
throws|throws
name|Exception
block|{
name|genericTestEquals
argument_list|(
literal|"value1;att=value2;att2=other"
argument_list|,
literal|"value1;att='value2';att2=other"
argument_list|)
expr_stmt|;
name|genericTestEquals
argument_list|(
literal|"value1;att=value2;att2=other"
argument_list|,
literal|"value1;att=  'value2'  ;att2=other"
argument_list|)
expr_stmt|;
name|genericTestEquals
argument_list|(
literal|"value1;att=value2;att2=other"
argument_list|,
literal|"value1;att=   value2 \t ;att2=other"
argument_list|)
expr_stmt|;
name|genericTestEquals
argument_list|(
literal|"value1;att:=value2;att2=other"
argument_list|,
literal|"value1;att:=  'value2'  ;att2=other"
argument_list|)
expr_stmt|;
name|genericTestEquals
argument_list|(
literal|"value1;att=value2;att2=other"
argument_list|,
literal|"value1;att=\"value2\";att2=other"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReflexivity
parameter_list|()
throws|throws
name|Exception
block|{
name|genericTestEquals
argument_list|(
literal|"value1;value2"
argument_list|,
literal|"value2;value1"
argument_list|)
expr_stmt|;
name|genericTestEquals
argument_list|(
literal|"value1,value2"
argument_list|,
literal|"value2,value1"
argument_list|)
expr_stmt|;
name|genericTestEquals
argument_list|(
literal|"value1;resolution:=mandatory;color:=red"
argument_list|,
literal|"value1;color:=red;resolution:=mandatory"
argument_list|)
expr_stmt|;
name|genericTestEquals
argument_list|(
literal|"value1;version=1.2.3;color=red"
argument_list|,
literal|"value1;color=red;version=1.2.3"
argument_list|)
expr_stmt|;
name|genericTestEquals
argument_list|(
literal|"value1;version=1.2.3;color:=red"
argument_list|,
literal|"value1;color:=red;version=1.2.3"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSyntaxError
parameter_list|()
throws|throws
name|Exception
block|{
name|genericTestSyntaxError
argument_list|(
literal|"value1="
argument_list|)
expr_stmt|;
name|genericTestSyntaxError
argument_list|(
literal|"value1;version=1;value2"
argument_list|)
expr_stmt|;
name|genericTestSyntaxError
argument_list|(
literal|"value1;version="
argument_list|)
expr_stmt|;
name|genericTestSyntaxError
argument_list|(
literal|"value1;version:"
argument_list|)
expr_stmt|;
name|genericTestSyntaxError
argument_list|(
literal|"value1;version:="
argument_list|)
expr_stmt|;
name|genericTestSyntaxError
argument_list|(
literal|"value1;=1"
argument_list|)
expr_stmt|;
name|genericTestSyntaxError
argument_list|(
literal|"value1;att=''value"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|genericTestSyntaxError
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
operator|new
name|ManifestHeaderValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Syntax error not detected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// error detected: OK
name|ManifestHeaderValue
operator|.
name|writeParseException
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|value
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSpaceInValue
parameter_list|()
throws|throws
name|Exception
block|{
name|ManifestHeaderValue
name|value
init|=
operator|new
name|ManifestHeaderValue
argument_list|(
literal|"glassfish javax.servlet.3.1.0.b33"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"glassfish javax.servlet.3.1.0.b33"
argument_list|,
name|value
operator|.
name|getSingleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

