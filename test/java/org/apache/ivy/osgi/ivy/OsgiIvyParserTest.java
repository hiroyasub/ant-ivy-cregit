begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|ivy
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|ivy
operator|.
name|OsgiIvyParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParserRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|OsgiIvyParserTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|IvySettings
name|settings
init|=
operator|new
name|IvySettings
argument_list|()
decl_stmt|;
name|settings
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
literal|"java/test-ivy/include/ivysettings.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|URLResource
name|includingResource
init|=
operator|new
name|URLResource
argument_list|(
operator|new
name|File
argument_list|(
literal|"java/test-ivy/include/ivy.xml"
argument_list|)
operator|.
name|toURL
argument_list|()
argument_list|)
decl_stmt|;
name|ModuleDescriptorParser
name|includingParser
init|=
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getParser
argument_list|(
name|includingResource
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|includingParser
operator|instanceof
name|OsgiIvyParser
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|includingMd
init|=
name|includingParser
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|includingResource
operator|.
name|getURL
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|includingMd
argument_list|)
expr_stmt|;
name|URLResource
name|resultResource
init|=
operator|new
name|URLResource
argument_list|(
operator|new
name|File
argument_list|(
literal|"java/test-ivy/include/ivy-result.xml"
argument_list|)
operator|.
name|toURL
argument_list|()
argument_list|)
decl_stmt|;
name|ModuleDescriptorParser
name|resultParser
init|=
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getParser
argument_list|(
name|resultResource
argument_list|)
decl_stmt|;
name|ModuleDescriptor
name|resultMd
init|=
name|resultParser
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|resultResource
operator|.
name|getURL
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultMd
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|includingMd
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultMd
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|,
name|includingMd
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultMd
operator|.
name|getDescription
argument_list|()
argument_list|,
name|includingMd
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultMd
operator|.
name|getHomePage
argument_list|()
argument_list|,
name|includingMd
operator|.
name|getHomePage
argument_list|()
argument_list|)
expr_stmt|;
comment|// assertEquals(resultMd.getLastModified(), includingMd.getLastModified());
name|assertEquals
argument_list|(
name|resultMd
operator|.
name|getStatus
argument_list|()
argument_list|,
name|includingMd
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultMd
operator|.
name|getExtraInfo
argument_list|()
argument_list|,
name|includingMd
operator|.
name|getExtraInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|resultMd
operator|.
name|getLicenses
argument_list|()
argument_list|,
name|includingMd
operator|.
name|getLicenses
argument_list|()
argument_list|)
expr_stmt|;
name|assertSetEquals
argument_list|(
name|resultMd
operator|.
name|getConfigurations
argument_list|()
argument_list|,
name|includingMd
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|resultMd
operator|.
name|getAllArtifacts
argument_list|()
argument_list|,
name|includingMd
operator|.
name|getAllArtifacts
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultMd
operator|.
name|getDependencies
argument_list|()
operator|.
name|length
argument_list|,
name|includingMd
operator|.
name|getDependencies
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultMd
operator|.
name|getDependencies
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|resultMd
operator|.
name|getDependencies
argument_list|()
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|includingMd
operator|.
name|getDependencies
argument_list|()
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|resultMd
operator|.
name|getDependencies
argument_list|()
index|[
name|i
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|,
name|includingMd
operator|.
name|getDependencies
argument_list|()
index|[
name|i
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|>
name|void
name|assertSetEquals
parameter_list|(
name|T1
index|[]
name|expected
parameter_list|,
name|T2
index|[]
name|actual
parameter_list|)
block|{
name|assertSetEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|>
name|void
name|assertSetEquals
parameter_list|(
name|List
argument_list|<
name|T1
argument_list|>
name|expected
parameter_list|,
name|List
argument_list|<
name|T2
argument_list|>
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|T1
argument_list|>
argument_list|(
name|expected
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<
name|T2
argument_list|>
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

