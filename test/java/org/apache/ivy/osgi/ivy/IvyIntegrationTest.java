begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|IvyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|AbstractModuleDescriptorParserTester
import|;
end_import

begin_class
specifier|public
class|class
name|IvyIntegrationTest
extends|extends
name|AbstractModuleDescriptorParserTester
block|{
specifier|private
name|URL
name|getTestResource
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|MalformedURLException
block|{
return|return
operator|new
name|File
argument_list|(
literal|"test/test-ivy/"
operator|+
name|resource
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
specifier|public
name|void
name|testAcmeResolveAlpha
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Ivy
name|ivy
init|=
name|Ivy
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|ivy
operator|.
name|configure
argument_list|(
name|getTestResource
argument_list|(
literal|"acme-ivysettings.xml"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ModuleRevisionId
name|mrid
init|=
operator|new
name|ModuleRevisionId
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"com.acme"
argument_list|,
literal|"alpha"
argument_list|)
argument_list|,
literal|"1.0+"
argument_list|)
decl_stmt|;
comment|// final ModuleRevisionId mrid = new ModuleRevisionId(new ModuleId("com.acme", "delta"),
comment|// "4+");
comment|// final ModuleRevisionId mrid = new ModuleRevisionId(new ModuleId("com.acme", "echo"),
comment|// "5+");
specifier|final
name|ResolveOptions
name|options
init|=
operator|new
name|ResolveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setConfs
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
name|mrid
argument_list|,
name|options
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|report
operator|.
name|getDependencies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[]
block|{
literal|"com.acme#alpha;1.0.0.20080101"
block|,
literal|"com.acme#bravo;2.0.0.20080202"
block|,
literal|"com.acme#charlie;3.0.0.20080303"
block|,
literal|"com.acme#delta;4.0.0"
block|,
literal|"com.acme#echo;5.0.0"
block|}
decl_stmt|;
specifier|final
name|Set
comment|/*<String> */
name|nodeNames
init|=
operator|new
name|HashSet
comment|/*<String> */
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|names
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
name|itNode
init|=
operator|(
operator|(
name|Collection
comment|/*<IvyNode> */
operator|)
name|report
operator|.
name|getDependencies
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itNode
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IvyNode
name|node
init|=
operator|(
name|IvyNode
operator|)
name|itNode
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|" Contains: "
operator|+
name|node
argument_list|,
name|nodeNames
operator|.
name|contains
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

