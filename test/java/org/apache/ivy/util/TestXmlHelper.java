begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_comment
comment|/**  * An utility class to help with XML file parsing and XML content handling  */
end_comment

begin_class
specifier|public
class|class
name|TestXmlHelper
block|{
comment|/**      * Evaluates the passed {@link XPathExpression} against the {@link Document} created out of the      * passed<code>xmlFile</code> and returns the result of the evaluation.      *      * @param xmlFile         The XML file to parse      * @param xPathExpression The XPath expression to evaluate      * @param returnType      The expected return type of the {@link XPathExpression#evaluate(Object, QName) evaluation}      * @return                The result      * @throws Exception if something goes wrong      */
specifier|public
specifier|static
name|Object
name|evaluateXPathExpr
parameter_list|(
specifier|final
name|File
name|xmlFile
parameter_list|,
specifier|final
name|XPathExpression
name|xPathExpression
parameter_list|,
specifier|final
name|QName
name|returnType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|xmlFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"XML file cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|xmlFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|xmlFile
operator|+
literal|" is either missing or not a file"
argument_list|)
throw|;
block|}
if|if
condition|(
name|xPathExpression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"XPath expression cannot be null"
argument_list|)
throw|;
block|}
specifier|final
name|DocumentBuilder
name|documentBuilder
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Document
name|document
init|=
name|documentBuilder
operator|.
name|parse
argument_list|(
name|xmlFile
argument_list|)
decl_stmt|;
return|return
name|xPathExpression
operator|.
name|evaluate
argument_list|(
name|document
argument_list|,
name|returnType
argument_list|)
return|;
block|}
comment|/**      * Evaluates the passed<code>xpathExpression</code> against the {@link Document} created out of      * the passed<code>xmlFile</code> and returns the result of the evaluation. This is the same as      * calling {@link #evaluateXPathExpr(File, XPathExpression, QName)}, with      *<code>XPathFactory.newInstance().newXPath().compile(xpathExpression)</code> as the      * {@link XPathExpression} parameter      *      * @param xmlFile         The XML file to parse      * @param xpathExpression The XPath expression to evaluate      * @param returnType      The expected return type of the {@link XPathExpression#evaluate(Object, QName) evaluation}      * @return                The result      * @throws Exception if something goes wrong      */
specifier|public
specifier|static
name|Object
name|evaluateXPathExpr
parameter_list|(
specifier|final
name|File
name|xmlFile
parameter_list|,
specifier|final
name|String
name|xpathExpression
parameter_list|,
specifier|final
name|QName
name|returnType
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|evaluateXPathExpr
argument_list|(
name|xmlFile
argument_list|,
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
operator|.
name|compile
argument_list|(
name|xpathExpression
argument_list|)
argument_list|,
name|returnType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

