begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
specifier|public
class|class
name|MessageLoggerEngineTest
block|{
comment|/**      * Tests the issue reported in IVY-1628 and verifies that the {@link MessageLogger#sumupProblems()}      * doesn't run into {@link java.util.ConcurrentModificationException} when multiple threads are      * using the logger      */
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentSumupProblems
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MessageLoggerEngine
name|engine
init|=
operator|new
name|MessageLoggerEngine
argument_list|()
decl_stmt|;
specifier|final
name|LoggingTask
name|loggingTask
init|=
operator|new
name|LoggingTask
argument_list|(
name|engine
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|Void
argument_list|>
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|executor
operator|.
name|submit
argument_list|(
name|loggingTask
argument_list|)
expr_stmt|;
comment|// keep invoking sumupProblems in this thread while the other thread is logging
comment|// error and warn messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|engine
operator|.
name|sumupProblems
argument_list|()
expr_stmt|;
block|}
name|loggingTask
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|loggingTask
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|LoggingTask
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|MessageLoggerEngine
name|engine
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|stop
decl_stmt|;
specifier|private
name|LoggingTask
parameter_list|(
specifier|final
name|MessageLoggerEngine
name|engine
parameter_list|)
block|{
name|this
operator|.
name|engine
operator|=
name|engine
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
do|do
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|stop
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|engine
operator|.
name|error
argument_list|(
literal|"Dummy error"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|engine
operator|.
name|warn
argument_list|(
literal|"Dummy warn"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
do|while
condition|(
operator|!
name|stop
condition|)
do|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

