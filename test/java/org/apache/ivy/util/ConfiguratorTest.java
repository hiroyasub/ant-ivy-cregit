begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ConfiguratorTest
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
class|class
name|FileTester
block|{
specifier|private
name|File
name|file
decl_stmt|;
specifier|public
name|void
name|setFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|City
block|{
specifier|private
name|List
name|_housings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
name|_streets
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|String
name|_name
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|_name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|List
name|getHousings
parameter_list|()
block|{
return|return
name|_housings
return|;
block|}
specifier|public
name|List
name|getStreets
parameter_list|()
block|{
return|return
name|_streets
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Housing
name|h
parameter_list|)
block|{
name|_housings
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Street
name|s
parameter_list|)
block|{
name|_streets
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Street
block|{
specifier|private
name|Class
name|_clazz
decl_stmt|;
specifier|private
name|List
name|_trees
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
name|_walkers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|List
name|getTrees
parameter_list|()
block|{
return|return
name|_trees
return|;
block|}
specifier|public
name|void
name|addConfiguredTree
parameter_list|(
name|Tree
name|tree
parameter_list|)
block|{
name|_trees
operator|.
name|add
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getWalkers
parameter_list|()
block|{
return|return
name|_walkers
return|;
block|}
specifier|public
name|void
name|addConfiguredWalker
parameter_list|(
name|Map
name|walkerAttributes
parameter_list|)
block|{
name|_walkers
operator|.
name|add
argument_list|(
operator|new
name|Person
argument_list|(
operator|(
name|String
operator|)
name|walkerAttributes
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class
name|getClazz
parameter_list|()
block|{
return|return
name|_clazz
return|;
block|}
specifier|public
name|void
name|setClazz
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|_clazz
operator|=
name|clazz
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|Housing
block|{
specifier|private
name|List
name|_rooms
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|_isEmpty
decl_stmt|;
specifier|private
name|Person
name|_proprietary
decl_stmt|;
specifier|public
name|List
name|getRooms
parameter_list|()
block|{
return|return
name|_rooms
return|;
block|}
specifier|public
name|void
name|addRoom
parameter_list|(
name|Room
name|r
parameter_list|)
block|{
name|_rooms
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|_isEmpty
return|;
block|}
specifier|public
name|void
name|setEmpty
parameter_list|(
name|boolean
name|isEmpty
parameter_list|)
block|{
name|_isEmpty
operator|=
name|isEmpty
expr_stmt|;
block|}
specifier|public
name|Person
name|getProprietary
parameter_list|()
block|{
return|return
name|_proprietary
return|;
block|}
specifier|public
name|void
name|setProprietary
parameter_list|(
name|Person
name|proprietary
parameter_list|)
block|{
name|_proprietary
operator|=
name|proprietary
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|House
extends|extends
name|Housing
block|{     }
specifier|public
specifier|static
class|class
name|Tree
block|{
specifier|private
name|short
name|_age
decl_stmt|;
specifier|public
name|short
name|getAge
parameter_list|()
block|{
return|return
name|_age
return|;
block|}
specifier|public
name|void
name|setAge
parameter_list|(
name|short
name|age
parameter_list|)
block|{
name|_age
operator|=
name|age
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Flat
extends|extends
name|Housing
block|{
specifier|private
name|int
name|_stage
decl_stmt|;
specifier|public
name|int
name|getStage
parameter_list|()
block|{
return|return
name|_stage
return|;
block|}
specifier|public
name|void
name|setStage
parameter_list|(
name|int
name|stage
parameter_list|)
block|{
name|_stage
operator|=
name|stage
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Room
block|{
specifier|private
name|short
name|_surface
decl_stmt|;
specifier|public
name|short
name|getSurface
parameter_list|()
block|{
return|return
name|_surface
return|;
block|}
specifier|public
name|void
name|setSurface
parameter_list|(
name|short
name|surface
parameter_list|)
block|{
name|_surface
operator|=
name|surface
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Person
block|{
specifier|private
name|String
name|_name
decl_stmt|;
specifier|public
name|Person
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|_name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
block|}
specifier|private
name|Configurator
name|_conf
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|_conf
operator|=
operator|new
name|Configurator
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testSetRoot
parameter_list|()
block|{
name|City
name|city
init|=
operator|new
name|City
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|city
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|city
argument_list|,
name|_conf
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStringAttribute
parameter_list|()
block|{
name|City
name|city
init|=
operator|new
name|City
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|city
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
literal|"bordeaux"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bordeaux"
argument_list|,
name|city
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIntAttribute
parameter_list|()
block|{
name|Flat
name|flat
init|=
operator|new
name|Flat
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|flat
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"stage"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|flat
operator|.
name|getStage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBooleanAttribute
parameter_list|()
block|{
name|Housing
name|housing
init|=
operator|new
name|House
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|housing
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"empty"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|housing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"empty"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|housing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"empty"
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|housing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"empty"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|housing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"empty"
argument_list|,
literal|"on"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|housing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"empty"
argument_list|,
literal|"off"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|housing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClassAttribute
parameter_list|()
block|{
name|Street
name|street
init|=
operator|new
name|Street
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|street
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"clazz"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|street
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPersonAttribute
parameter_list|()
block|{
name|Housing
name|housing
init|=
operator|new
name|House
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|housing
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"proprietary"
argument_list|,
literal|"jean"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jean"
argument_list|,
name|housing
operator|.
name|getProprietary
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddRoom
parameter_list|()
block|{
name|Housing
name|housing
init|=
operator|new
name|House
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|housing
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"room"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|housing
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"surface"
argument_list|,
literal|"24"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|24
argument_list|,
operator|(
operator|(
name|Room
operator|)
name|housing
operator|.
name|getRooms
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSurface
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|housing
argument_list|,
name|_conf
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddConfiguredTree
parameter_list|()
block|{
name|Street
name|street
init|=
operator|new
name|Street
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|street
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"tree"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|street
operator|.
name|getTrees
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"age"
argument_list|,
literal|"400"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|street
operator|.
name|getTrees
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
operator|(
operator|(
name|Tree
operator|)
name|street
operator|.
name|getTrees
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getAge
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|street
argument_list|,
name|_conf
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddConfiguredWalker
parameter_list|()
block|{
name|Street
name|street
init|=
operator|new
name|Street
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|street
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"walker"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|street
operator|.
name|getWalkers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
literal|"xavier"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|street
operator|.
name|getWalkers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xavier"
argument_list|,
operator|(
operator|(
name|Person
operator|)
name|street
operator|.
name|getWalkers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|street
argument_list|,
name|_conf
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddWithTypeDef
parameter_list|()
throws|throws
name|Exception
block|{
name|City
name|city
init|=
operator|new
name|City
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|typeDef
argument_list|(
literal|"house"
argument_list|,
name|House
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|typeDef
argument_list|(
literal|"flat"
argument_list|,
name|Flat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|typeDef
argument_list|(
literal|"street"
argument_list|,
name|Street
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|city
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"house"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|House
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"flat"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|Flat
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"street"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|city
operator|.
name|getStreets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|city
argument_list|,
name|_conf
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNested
parameter_list|()
throws|throws
name|Exception
block|{
name|City
name|city
init|=
operator|new
name|City
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|typeDef
argument_list|(
literal|"house"
argument_list|,
name|House
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|city
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"house"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"room"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"surface"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"room"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"surface"
argument_list|,
literal|"25"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|city
argument_list|,
name|_conf
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|Housing
operator|)
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
operator|(
operator|(
name|Room
operator|)
operator|(
operator|(
name|Housing
operator|)
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSurface
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
operator|(
operator|(
name|Room
operator|)
operator|(
operator|(
name|Housing
operator|)
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getSurface
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMacro
parameter_list|()
throws|throws
name|Exception
block|{
name|City
name|city
init|=
operator|new
name|City
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|typeDef
argument_list|(
literal|"house"
argument_list|,
name|House
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startMacroDef
argument_list|(
literal|"castle"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|addMacroAttribute
argument_list|(
literal|"surface"
argument_list|,
literal|"40"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|addMacroElement
argument_list|(
literal|"addroom"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"house"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"room"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"surface"
argument_list|,
literal|"@{surface}"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"room"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"surface"
argument_list|,
literal|"@{surface}"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"addroom"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|endMacroDef
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|city
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"castle"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"surface"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"castle"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"addroom"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|startCreateChild
argument_list|(
literal|"room"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"surface"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|_conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|city
argument_list|,
name|_conf
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// first castle : 2 default rooms of 10 of surface
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|Housing
operator|)
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
operator|(
name|Room
operator|)
operator|(
operator|(
name|Housing
operator|)
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSurface
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
operator|(
name|Room
operator|)
operator|(
operator|(
name|Housing
operator|)
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getSurface
argument_list|()
argument_list|)
expr_stmt|;
comment|// second castle : 2 default rooms of default surface 40, + one addroom of surface 20
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|Housing
operator|)
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
operator|(
operator|(
name|Room
operator|)
operator|(
operator|(
name|Housing
operator|)
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSurface
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
operator|(
operator|(
name|Room
operator|)
operator|(
operator|(
name|Housing
operator|)
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getSurface
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
operator|(
operator|(
name|Room
operator|)
operator|(
operator|(
name|Housing
operator|)
name|city
operator|.
name|getHousings
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getSurface
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFileAttribute
parameter_list|()
block|{
name|FileTester
name|root
init|=
operator|new
name|FileTester
argument_list|()
decl_stmt|;
name|_conf
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|_conf
operator|.
name|setAttribute
argument_list|(
literal|"file"
argument_list|,
literal|"path/to/file.txt"
argument_list|)
expr_stmt|;
name|String
name|filePath
init|=
name|root
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|filePath
operator|=
name|filePath
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"path/to/file.txt"
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

