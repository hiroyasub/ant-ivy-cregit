begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|MockMessageLogger
extends|extends
name|AbstractMessageLogger
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|endProgress
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rawLogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|progressCalls
decl_stmt|;
specifier|public
name|void
name|doEndProgress
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|endProgress
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|String
name|msg
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|logs
operator|.
name|add
argument_list|(
name|level
operator|+
literal|" "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doProgress
parameter_list|()
block|{
name|progressCalls
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|rawlog
parameter_list|(
name|String
name|msg
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|rawLogs
operator|.
name|add
argument_list|(
name|level
operator|+
literal|" "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getEndProgress
parameter_list|()
block|{
return|return
name|endProgress
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLogs
parameter_list|()
block|{
return|return
name|logs
return|;
block|}
specifier|public
name|int
name|getProgressCalls
parameter_list|()
block|{
return|return
name|progressCalls
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRawLogs
parameter_list|()
block|{
return|return
name|rawLogs
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clearProblems
argument_list|()
expr_stmt|;
name|logs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rawLogs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|endProgress
operator|.
name|clear
argument_list|()
expr_stmt|;
name|progressCalls
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|assertLogContains
parameter_list|(
name|String
name|message
parameter_list|)
block|{
for|for
control|(
name|String
name|log
range|:
name|logs
control|)
block|{
if|if
condition|(
name|log
operator|.
name|contains
argument_list|(
name|message
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"logs do not contain expected message: expected='"
operator|+
name|message
operator|+
literal|"' logs='\n"
operator|+
name|join
argument_list|(
name|logs
argument_list|)
operator|+
literal|"'"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|assertLogDoesntContain
parameter_list|(
name|String
name|message
parameter_list|)
block|{
for|for
control|(
name|String
name|log
range|:
name|logs
control|)
block|{
if|if
condition|(
name|log
operator|.
name|contains
argument_list|(
name|message
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"logs contain unexpected message: '"
operator|+
name|message
operator|+
literal|"' logs='\n"
operator|+
name|join
argument_list|(
name|logs
argument_list|)
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|assertLogVerboseContains
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|assertLogContains
argument_list|(
name|Message
operator|.
name|MSG_VERBOSE
operator|+
literal|" "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertLogInfoContains
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|assertLogContains
argument_list|(
name|Message
operator|.
name|MSG_INFO
operator|+
literal|" "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertLogWarningContains
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|Message
operator|.
name|sumupProblems
argument_list|()
expr_stmt|;
name|assertLogContains
argument_list|(
name|Message
operator|.
name|MSG_WARN
operator|+
literal|" \t"
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertLogErrorContains
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|Message
operator|.
name|sumupProblems
argument_list|()
expr_stmt|;
name|assertLogContains
argument_list|(
name|Message
operator|.
name|MSG_ERR
operator|+
literal|" "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|join
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|logs
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|log
range|:
name|logs
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|log
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

