begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|IvyCleanCacheTest
block|{
specifier|private
name|IvyCleanCache
name|cleanCache
decl_stmt|;
specifier|private
name|File
name|cacheDir
decl_stmt|;
specifier|private
name|File
name|repoCache2
decl_stmt|;
specifier|private
name|File
name|repoCache
decl_stmt|;
specifier|private
name|File
name|resolutionCache
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expExc
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Project
name|p
init|=
name|TestHelper
operator|.
name|newProject
argument_list|()
decl_stmt|;
name|cacheDir
operator|=
operator|new
name|File
argument_list|(
literal|"build/cache"
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"cache"
argument_list|,
name|cacheDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|cleanCache
operator|=
operator|new
name|IvyCleanCache
argument_list|()
expr_stmt|;
name|cleanCache
operator|.
name|setProject
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|IvyConfigure
name|settings
init|=
operator|new
name|IvyConfigure
argument_list|()
decl_stmt|;
name|settings
operator|.
name|setProject
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setUrl
argument_list|(
name|IvyCleanCacheTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"ivysettings-cleancache.xml"
argument_list|)
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|perform
argument_list|()
expr_stmt|;
name|resolutionCache
operator|=
operator|new
name|File
argument_list|(
name|cacheDir
argument_list|,
literal|"resolution"
argument_list|)
expr_stmt|;
name|repoCache
operator|=
operator|new
name|File
argument_list|(
name|cacheDir
argument_list|,
literal|"repository"
argument_list|)
expr_stmt|;
name|repoCache2
operator|=
operator|new
name|File
argument_list|(
name|cacheDir
argument_list|,
literal|"repository2"
argument_list|)
expr_stmt|;
name|resolutionCache
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|repoCache
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|repoCache2
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanAll
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanCache
operator|.
name|perform
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|resolutionCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|repoCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|repoCache2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolutionOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanCache
operator|.
name|setCache
argument_list|(
name|IvyCleanCache
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|cleanCache
operator|.
name|perform
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|resolutionCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repoCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repoCache2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRepositoryOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanCache
operator|.
name|setResolution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cleanCache
operator|.
name|perform
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|resolutionCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|repoCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|repoCache2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneRepositoryOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanCache
operator|.
name|setResolution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cleanCache
operator|.
name|setCache
argument_list|(
literal|"mycache"
argument_list|)
expr_stmt|;
name|cleanCache
operator|.
name|perform
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|resolutionCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|repoCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|repoCache2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownCache
parameter_list|()
throws|throws
name|Exception
block|{
name|expExc
operator|.
name|expect
argument_list|(
name|BuildException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expExc
operator|.
name|expectMessage
argument_list|(
literal|"unknown cache 'yourcache'"
argument_list|)
expr_stmt|;
name|cleanCache
operator|.
name|setResolution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cleanCache
operator|.
name|setCache
argument_list|(
literal|"yourcache"
argument_list|)
expr_stmt|;
name|cleanCache
operator|.
name|perform
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"clean cache should have raised an exception with unknown cache"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

