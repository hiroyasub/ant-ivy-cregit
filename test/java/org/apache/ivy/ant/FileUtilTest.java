begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests {@link FileUtil}  *  * @author Jaikiran Pai  */
end_comment

begin_class
specifier|public
class|class
name|FileUtilTest
block|{
comment|/**      * Tests that {@link FileUtil#normalize(String)} works as expected for some basic file paths      */
annotation|@
name|Test
specifier|public
name|void
name|testSimpleNormalize
parameter_list|()
block|{
specifier|final
name|File
name|ivySettingsFile
init|=
operator|new
name|File
argument_list|(
literal|"test/repositories/ivysettings.xml"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|normalizedIvySettingsFile
init|=
name|FileUtil
operator|.
name|normalize
argument_list|(
name|ivySettingsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected normalization of file path "
operator|+
name|ivySettingsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|ivySettingsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|normalizedIvySettingsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|normalizedIvySettingsFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" isn't a file"
argument_list|,
name|normalizedIvySettingsFile
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that {@link FileUtil#normalize(String)} works as expected when passed a path that starts with      * {@link File#listRoots() filesystem roots}      */
annotation|@
name|Test
specifier|public
name|void
name|testNormalizeOfFileSystemRootPath
parameter_list|()
block|{
for|for
control|(
specifier|final
name|File
name|fileSystemRoot
range|:
name|File
operator|.
name|listRoots
argument_list|()
control|)
block|{
specifier|final
name|File
name|normalized
init|=
name|FileUtil
operator|.
name|normalize
argument_list|(
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Normalized path was null for "
operator|+
name|fileSystemRoot
argument_list|,
name|normalized
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected normalized path for "
operator|+
name|fileSystemRoot
argument_list|,
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
argument_list|,
name|normalized
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// use . and .. characters in the path to test out the normalize method
specifier|final
name|String
name|pathOne
init|=
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
operator|+
literal|"."
operator|+
name|File
operator|.
name|separator
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected normalization of "
operator|+
name|pathOne
argument_list|,
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtil
operator|.
name|normalize
argument_list|(
name|pathOne
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pathTwo
init|=
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
operator|+
literal|"."
operator|+
name|File
operator|.
name|separator
operator|+
literal|"foo-bar"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected normalization of "
operator|+
name|pathTwo
argument_list|,
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
operator|+
literal|"foo-bar"
argument_list|,
name|FileUtil
operator|.
name|normalize
argument_list|(
name|pathTwo
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pathThree
init|=
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
operator|+
literal|"foo-bar"
operator|+
name|File
operator|.
name|separator
operator|+
literal|".."
operator|+
name|File
operator|.
name|separator
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected normalization of "
operator|+
name|pathThree
argument_list|,
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtil
operator|.
name|normalize
argument_list|(
name|pathThree
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// append some additional file separator characters to the file system root and normalize it
specifier|final
name|String
name|pathFour
init|=
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|File
operator|.
name|separator
operator|+
name|File
operator|.
name|separator
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected normalization of "
operator|+
name|pathFour
argument_list|,
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
argument_list|,
name|FileUtil
operator|.
name|normalize
argument_list|(
name|pathFour
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pathFive
init|=
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|File
operator|.
name|separator
operator|+
literal|"abcd"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected normalization of path "
operator|+
name|pathFive
argument_list|,
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
operator|+
literal|"abcd"
argument_list|,
name|FileUtil
operator|.
name|normalize
argument_list|(
name|pathFive
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pathSix
init|=
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|File
operator|.
name|separator
operator|+
literal|"1234"
operator|+
name|File
operator|.
name|separator
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected normalization of path "
operator|+
name|pathSix
argument_list|,
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
operator|+
literal|"1234"
argument_list|,
name|FileUtil
operator|.
name|normalize
argument_list|(
name|pathSix
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pathSeven
init|=
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
operator|+
literal|"helloworld"
operator|+
name|File
operator|.
name|separator
operator|+
literal|".."
operator|+
name|File
operator|.
name|separator
operator|+
name|File
operator|.
name|separator
operator|+
name|File
operator|.
name|separator
operator|+
literal|"helloworld"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected normalization of path "
operator|+
name|pathSeven
argument_list|,
name|fileSystemRoot
operator|.
name|getPath
argument_list|()
operator|+
literal|"helloworld"
argument_list|,
name|FileUtil
operator|.
name|normalize
argument_list|(
name|pathSeven
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

