begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|CacheCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|FileSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|IvyRetrieveTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|IVY_RETRIEVE_PATTERN
init|=
literal|"build/test/lib/[organisation]/[module]/ivy-[revision].xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RETRIEVE_PATTERN
init|=
literal|"build/test/lib/[conf]/[artifact]-[revision].[type]"
decl_stmt|;
specifier|private
name|File
name|cache
decl_stmt|;
specifier|private
name|IvyRetrieve
name|retrieve
decl_stmt|;
specifier|private
name|Project
name|project
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|createCache
argument_list|()
expr_stmt|;
name|CacheCleaner
operator|.
name|deleteDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/lib"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|=
name|TestHelper
operator|.
name|newProject
argument_list|()
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.settings.file"
argument_list|,
literal|"test/repositories/ivysettings.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|=
operator|new
name|IvyRetrieve
argument_list|()
expr_stmt|;
name|retrieve
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"ivy.cache.dir"
argument_list|,
name|cache
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setPattern
argument_list|(
name|RETRIEVE_PATTERN
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createCache
parameter_list|()
block|{
name|cache
operator|=
operator|new
name|File
argument_list|(
literal|"build/cache"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|CacheCleaner
operator|.
name|deleteDir
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|CacheCleaner
operator|.
name|deleteDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/lib"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
block|{
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/org/apache/ivy/ant/ivy-simple.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveFileSetToNonEmptyDirectory
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|File
argument_list|(
literal|"build/test/lib"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
literal|"build/test/lib/foo.txt"
argument_list|)
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
comment|// make sure the retrieve dir is not empty
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/org/apache/ivy/ant/ivy-simple.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setSetId
argument_list|(
literal|"testId"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|FileSet
name|fileSet
init|=
name|project
operator|.
name|getReference
argument_list|(
literal|"testId"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fileSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fileSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveEmptyFileSetToNonEmptyDirectory
parameter_list|()
throws|throws
name|IOException
block|{
operator|new
name|File
argument_list|(
literal|"build/test/lib"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
literal|"build/test/lib/foo.txt"
argument_list|)
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
comment|// make sure the retrieve dir is not empty
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/org/apache/ivy/ant/ivy-simple.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setType
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
comment|// make sure we don't retrieve anything
name|retrieve
operator|.
name|setSetId
argument_list|(
literal|"setId"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setPathId
argument_list|(
literal|"pathId"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|FileSet
name|fileSet
init|=
name|project
operator|.
name|getReference
argument_list|(
literal|"setId"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fileSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fileSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|project
operator|.
name|getReference
argument_list|(
literal|"pathId"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetrievePrivateWithWildcard
parameter_list|()
block|{
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/org/apache/ivy/ant/ivy-381.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setConf
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"1.1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"public"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org3"
argument_list|,
literal|"mod3.2"
argument_list|,
literal|"1.4"
argument_list|,
literal|"mod3.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"private"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for IVY-992.      *      * @see<a href="https://issues.apache.org/jira/browse/IVY-992">IVY-992</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testValidateInIvySettings
parameter_list|()
block|{
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/org/apache/ivy/ant/ivy-latest-extra.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|getSettings
argument_list|()
operator|.
name|setValidate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.2"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInline
parameter_list|()
block|{
comment|// we first resolve another ivy file
name|IvyResolve
name|resolve
init|=
operator|new
name|IvyResolve
argument_list|()
decl_stmt|;
name|resolve
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/java/org/apache/ivy/ant/ivy-latest.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|getArchiveFileInCache
argument_list|(
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.2"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// then we resolve a dependency directly
name|retrieve
operator|.
name|setOrganisation
argument_list|(
literal|"org1"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setModule
argument_list|(
literal|"mod1.2"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setRevision
argument_list|(
literal|"2.0"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setInline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithConf
parameter_list|()
block|{
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/repositories/1/org6/mod6.2/ivys/ivy-0.4.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSync
parameter_list|()
throws|throws
name|Exception
block|{
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/repositories/1/org6/mod6.2/ivys/ivy-0.4.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|File
index|[]
name|old
init|=
operator|new
name|File
index|[]
block|{
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"unknown"
argument_list|)
argument_list|)
block|,
comment|// unknown configuration
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"unknown"
argument_list|,
literal|"unknown"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
block|,
comment|// unknown type
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"unknown"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
block|,
comment|// unknown artifact
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"unknown"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
block|,
comment|// unknown revision
block|}
decl_stmt|;
for|for
control|(
name|File
name|of
range|:
name|old
control|)
block|{
name|touch
argument_list|(
name|of
argument_list|)
expr_stmt|;
block|}
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|of
range|:
name|old
control|)
block|{
name|assertFalse
argument_list|(
name|of
operator|+
literal|" should have been deleted by sync"
argument_list|,
name|of
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/lib/unknown"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// even conf directory should
comment|// have been deleted
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncWithIgnoreList
parameter_list|()
throws|throws
name|Exception
block|{
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/repositories/1/org6/mod6.2/ivys/ivy-0.4.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
literal|"build/test/lib/.svn"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
literal|"build/test/lib/.svn/test.txt"
argument_list|)
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/lib/.svn/test.txt"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/lib/.svn/test.txt"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithAPreviousResolve
parameter_list|()
block|{
comment|// first we do a resolve in another project
name|Project
name|project
init|=
name|TestHelper
operator|.
name|newProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.settings.file"
argument_list|,
literal|"test/repositories/ivysettings.xml"
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/org/apache/ivy/ant/ivy-simple.xml"
argument_list|)
expr_stmt|;
name|IvyResolve
name|resolve
init|=
operator|new
name|IvyResolve
argument_list|()
decl_stmt|;
name|resolve
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// then we do a retrieve with the correct module information
name|retrieve
operator|.
name|setOrganisation
argument_list|(
literal|"apache"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setModule
argument_list|(
literal|"resolve-simple"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setConf
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithAPreviousResolveAndResolveId
parameter_list|()
block|{
comment|// first we do a resolve in another project
name|Project
name|project
init|=
name|TestHelper
operator|.
name|newProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.settings.file"
argument_list|,
literal|"test/repositories/ivysettings.xml"
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/org/apache/ivy/ant/ivy-simple.xml"
argument_list|)
expr_stmt|;
name|IvyResolve
name|resolve
init|=
operator|new
name|IvyResolve
argument_list|()
decl_stmt|;
name|resolve
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setResolveId
argument_list|(
literal|"testWithAPreviousResolveAndResolveId"
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// then we do a retrieve with the correct module information
name|retrieve
operator|.
name|setOrganisation
argument_list|(
literal|"apache"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setModule
argument_list|(
literal|"resolve-simple"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setConf
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setResolveId
argument_list|(
literal|"testWithAPreviousResolveAndResolveId"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for IVY-304.      *      * @see<a href="https://issues.apache.org/jira/browse/IVY-304">IVY-304</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testUseOrigin
parameter_list|()
block|{
comment|// first we do a resolve with useOrigin=true in another project
name|Project
name|project
init|=
name|TestHelper
operator|.
name|newProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|init
argument_list|()
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.settings.file"
argument_list|,
literal|"test/repositories/ivysettings.xml"
argument_list|)
expr_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/org/apache/ivy/ant/ivy-simple.xml"
argument_list|)
expr_stmt|;
name|IvyResolve
name|resolve
init|=
operator|new
name|IvyResolve
argument_list|()
decl_stmt|;
name|resolve
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setUseOrigin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// then we do a retrieve with the correct module information and useOrigin=false
name|retrieve
operator|.
name|setOrganisation
argument_list|(
literal|"apache"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setModule
argument_list|(
literal|"resolve-simple"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setConf
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setUseOrigin
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUseOriginWithIvyPattern
parameter_list|()
block|{
comment|// mod2.5 depends on virtual mod2.3 which depends on mod2.1 which depends on mod1.1 which
comment|// depends on mod1.2
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/repositories/1/org2/mod2.5/ivys/ivy-0.6.1.xml"
argument_list|)
expr_stmt|;
name|String
name|ivyPattern
init|=
name|IVY_RETRIEVE_PATTERN
decl_stmt|;
name|retrieve
operator|.
name|setIvypattern
argument_list|(
name|ivyPattern
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setUseOrigin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org2"
argument_list|,
literal|"mod2.3"
argument_list|,
literal|"0.4.1"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org2"
argument_list|,
literal|"mod2.1"
argument_list|,
literal|"0.3"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"1.0"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for IVY-631.      *      * @see<a href="https://issues.apache.org/jira/browse/IVY-631">IVY-631</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveWithOriginalNamePattern
parameter_list|()
block|{
name|retrieve
operator|.
name|setFile
argument_list|(
operator|new
name|File
argument_list|(
literal|"test/java/org/apache/ivy/ant/ivy-631.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setConf
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setPattern
argument_list|(
literal|"build/test/lib/[conf]/[originalname].[ext]"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/lib/default/mod1.2-2.2.jar"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieve without previous resolve must fail.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BuildException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFailureWithoutAPreviousResolve
parameter_list|()
block|{
name|retrieve
operator|.
name|setOrganisation
argument_list|(
literal|"apache"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setModule
argument_list|(
literal|"resolve-simple"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setConf
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test must fail with default haltonfailure setting.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BuildException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFailure
parameter_list|()
block|{
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/org/apache/ivy/ant/ivy-failure.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHaltOnFailure
parameter_list|()
block|{
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/org/apache/ivy/ant/ivy-failure.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setHaltonfailure
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomIvyPattern
parameter_list|()
block|{
comment|// mod2.5 depends on virtual mod2.3 which depends on mod2.1 which depends on mod1.1 which
comment|// depends on mod1.2
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/repositories/1/org2/mod2.5/ivys/ivy-0.6.1.xml"
argument_list|)
expr_stmt|;
name|String
name|ivyPattern
init|=
name|IVY_RETRIEVE_PATTERN
decl_stmt|;
name|retrieve
operator|.
name|setIvypattern
argument_list|(
name|ivyPattern
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org2"
argument_list|,
literal|"mod2.3"
argument_list|,
literal|"0.4.1"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org2"
argument_list|,
literal|"mod2.1"
argument_list|,
literal|"0.3"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.1"
argument_list|,
literal|"1.0"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.0"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomIvyPatternWithConf
parameter_list|()
block|{
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/repositories/1/org6/mod6.2/ivys/ivy-0.4.xml"
argument_list|)
expr_stmt|;
name|String
name|ivyPattern
init|=
literal|"build/test/lib/[conf]/[organisation]/[module]/ivy-[revision].xml"
decl_stmt|;
name|retrieve
operator|.
name|setIvypattern
argument_list|(
name|ivyPattern
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.1"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncWithIvyPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/repositories/1/org6/mod6.2/ivys/ivy-0.4.xml"
argument_list|)
expr_stmt|;
name|String
name|ivyPattern
init|=
literal|"build/test/lib/[conf]/[organisation]/[module]/ivy-[revision].xml"
decl_stmt|;
name|retrieve
operator|.
name|setIvypattern
argument_list|(
name|ivyPattern
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setSync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|File
index|[]
name|old
init|=
operator|new
name|File
index|[]
block|{
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|,
literal|"unknown"
argument_list|)
argument_list|)
block|,
comment|// unknown configuration
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|RETRIEVE_PATTERN
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"unknown"
argument_list|,
literal|"unknown"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
block|,
comment|// unknown type
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
literal|"unk"
argument_list|)
argument_list|)
block|,
comment|// unknown conf for ivy
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"unknown"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
block|,
comment|// unknown organisation for ivy
block|}
decl_stmt|;
for|for
control|(
name|File
name|of
range|:
name|old
control|)
block|{
name|touch
argument_list|(
name|of
argument_list|)
expr_stmt|;
block|}
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org6"
argument_list|,
literal|"mod6.1"
argument_list|,
literal|"0.4"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|ivyPattern
argument_list|,
literal|"org1"
argument_list|,
literal|"mod1.2"
argument_list|,
literal|"2.1"
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
literal|"extension"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|of
range|:
name|old
control|)
block|{
name|assertFalse
argument_list|(
name|of
operator|+
literal|" should have been deleted by sync"
argument_list|,
name|of
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/lib/unknown"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/lib/unk"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|File
argument_list|(
literal|"build/test/lib/default/unknown"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for IVY-315.      *      * @see<a href="https://issues.apache.org/jira/browse/IVY-315">IVY-315</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testDoubleRetrieveWithDifferentConfigurations
parameter_list|()
block|{
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.dep.file"
argument_list|,
literal|"test/java/org/apache/ivy/ant/ivy-doubleretrieve.xml"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setConf
argument_list|(
literal|"compile"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
name|retrieve
operator|=
operator|new
name|IvyRetrieve
argument_list|()
expr_stmt|;
name|retrieve
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setPattern
argument_list|(
name|RETRIEVE_PATTERN
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|setConf
argument_list|(
literal|"compile,unittest"
argument_list|)
expr_stmt|;
name|retrieve
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
comment|// creates an empty file, creating parent directories if necessary
specifier|private
name|void
name|touch
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
specifier|private
name|File
name|getArchiveFileInCache
parameter_list|(
name|String
name|organisation
parameter_list|,
name|String
name|module
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
return|return
name|TestHelper
operator|.
name|getArchiveFileInCache
argument_list|(
name|retrieve
operator|.
name|getIvyInstance
argument_list|()
argument_list|,
name|organisation
argument_list|,
name|module
argument_list|,
name|revision
argument_list|,
name|artifact
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
return|;
block|}
block|}
end_class

end_unit

