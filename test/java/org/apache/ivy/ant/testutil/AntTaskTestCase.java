begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
operator|.
name|testutil
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|TestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|AntTaskTestCase
extends|extends
name|TestCase
block|{
specifier|private
name|AntTestListener
name|antTestListener
decl_stmt|;
specifier|public
name|Project
name|configureProject
parameter_list|()
block|{
name|Project
name|project
init|=
name|TestHelper
operator|.
name|newProject
argument_list|()
decl_stmt|;
name|antTestListener
operator|=
operator|new
name|AntTestListener
argument_list|(
name|Project
operator|.
name|MSG_INFO
argument_list|)
expr_stmt|;
name|project
operator|.
name|addBuildListener
argument_list|(
name|antTestListener
argument_list|)
expr_stmt|;
return|return
name|project
return|;
block|}
specifier|public
name|void
name|assertLogContaining
parameter_list|(
name|String
name|substring
parameter_list|)
block|{
name|checkAntListener
argument_list|()
expr_stmt|;
name|String
name|realLog
init|=
name|antTestListener
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expecting log to contain \""
operator|+
name|substring
operator|+
literal|"\" log was \""
operator|+
name|realLog
operator|+
literal|"\""
argument_list|,
name|realLog
operator|.
name|contains
argument_list|(
name|substring
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertLogNotContaining
parameter_list|(
name|String
name|substring
parameter_list|)
block|{
name|checkAntListener
argument_list|()
expr_stmt|;
name|String
name|realLog
init|=
name|antTestListener
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"expecting log to contain \""
operator|+
name|substring
operator|+
literal|"\" log was \""
operator|+
name|realLog
operator|+
literal|"\""
argument_list|,
name|realLog
operator|.
name|contains
argument_list|(
name|substring
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkAntListener
parameter_list|()
block|{
if|if
condition|(
name|antTestListener
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Project is not properly configure, please invoke configureProject method first"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

