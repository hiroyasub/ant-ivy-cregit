begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Delete
import|;
end_import

begin_class
specifier|public
class|class
name|IvyRepositoryReportTest
extends|extends
name|TestCase
block|{
specifier|private
name|File
name|cache
decl_stmt|;
specifier|private
name|IvyRepositoryReport
name|report
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|createCache
argument_list|()
expr_stmt|;
name|Project
name|project
init|=
operator|new
name|Project
argument_list|()
decl_stmt|;
name|project
operator|.
name|setProperty
argument_list|(
literal|"ivy.settings.file"
argument_list|,
literal|"test/repositories/ivysettings-1.xml"
argument_list|)
expr_stmt|;
name|report
operator|=
operator|new
name|IvyRepositoryReport
argument_list|()
expr_stmt|;
name|report
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"ivy.cache.dir"
argument_list|,
name|cache
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createCache
parameter_list|()
block|{
name|cache
operator|=
operator|new
name|File
argument_list|(
literal|"build/cache"
argument_list|)
expr_stmt|;
name|cache
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanCache
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cleanCache
parameter_list|()
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|()
decl_stmt|;
name|del
operator|.
name|setProject
argument_list|(
operator|new
name|Project
argument_list|()
argument_list|)
expr_stmt|;
name|del
operator|.
name|setDir
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|del
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|report
operator|.
name|setOrganisation
argument_list|(
literal|"org1"
argument_list|)
expr_stmt|;
name|report
operator|.
name|setOutputname
argument_list|(
literal|"testsimple"
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTodir
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|report
operator|.
name|execute
argument_list|()
expr_stmt|;
name|File
name|reportFile
init|=
operator|new
name|File
argument_list|(
name|cache
argument_list|,
literal|"testsimple.xml"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reportFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|g
init|=
name|FileUtil
operator|.
name|readEntirely
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|reportFile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// check presence of the modules
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<module organisation=\"org1\" name=\"mod1.1\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<module organisation=\"org1\" name=\"mod1.2\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<module organisation=\"org1\" name=\"mod1.3\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<module organisation=\"org1\" name=\"mod1.4\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<module organisation=\"org1\" name=\"mod1.5\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<module organisation=\"org1\" name=\"mod1.6\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBranchBeforeModule
parameter_list|()
throws|throws
name|Exception
block|{
name|report
operator|.
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ivy.settings.file"
argument_list|,
literal|"test/repositories/IVY-716/ivysettings.xml"
argument_list|)
expr_stmt|;
name|report
operator|.
name|setOutputname
argument_list|(
literal|"testbranch"
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTodir
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|report
operator|.
name|execute
argument_list|()
expr_stmt|;
name|File
name|reportFile
init|=
operator|new
name|File
argument_list|(
name|cache
argument_list|,
literal|"testbranch.xml"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reportFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|g
init|=
name|FileUtil
operator|.
name|readEntirely
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|reportFile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// check presence of the modules
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<module organisation=\"org1\" name=\"mod1.1\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// check presence of the branches
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<revision name=\"1.0\" branch=\"branch1\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<revision name=\"1.0\" branch=\"branch2\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPatternWithoutOrganisation
parameter_list|()
throws|throws
name|Exception
block|{
name|report
operator|.
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"ivy.settings.file"
argument_list|,
literal|"test/repositories/IVY-729/ivysettings.xml"
argument_list|)
expr_stmt|;
name|report
operator|.
name|setOutputname
argument_list|(
literal|"test-no-org"
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTodir
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|report
operator|.
name|execute
argument_list|()
expr_stmt|;
name|File
name|reportFile
init|=
operator|new
name|File
argument_list|(
name|cache
argument_list|,
literal|"test-no-org.xml"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reportFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|g
init|=
name|FileUtil
operator|.
name|readEntirely
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|reportFile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// check presence of the modules
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<module organisation=\"null\" name=\"a\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<module organisation=\"null\" name=\"b\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|indexOf
argument_list|(
literal|"<module organisation=\"null\" name=\"c\""
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

