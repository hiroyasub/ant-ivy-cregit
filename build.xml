<project name="ivy" default="test" xmlns:ivy="antlib:fr.jayasoft.ivy.ant">
	<property environment="env"/>
	<property file="build.properties"/>

	<!-- try to load ivy here from local lib dir, in case the user has not already dropped
	      it into ant's lib dir (note that the latter copy will always take precedence).
	      We will not fail as long as local lib dir exists (it may be empty) and
	      ivy is in at least one of ant's lib dir or the local lib dir. -->
	  <path id="ivy.lib.path">
	    <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
	  </path>
	  <taskdef resource="fr/jayasoft/ivy/ant/antlib.xml"
	          uri="antlib:fr.jayasoft.ivy.ant" classpathref="ivy.lib.path"/>

	<target name="prepare">
	   <mkdir dir="${classes.build.dir}"/>
	   <mkdir dir="${test.build.dir}"/>
	   <mkdir dir="${artifacts.build.dir}"/>
	   <mkdir dir="${test.report.dir}"/>
	</target>
	
	<target name="clean">
	   <delete dir="${classes.build.dir}"/>
	   <delete dir="${test.build.dir}"/>
	   <delete dir="${artifacts.build.dir}"/>
	   <delete dir="${test.report.dir}"/>
	   <delete dir="${javadoc.build.dir}"/>
	   <delete dir="${doc.build.dir}"/>
	   <delete dir="${build.dir}"/>
	</target>
	
	<target name="clean-lib">
    <delete dir="${lib.dir}"/>
	</target>
	
	<target name="clean-examples" description="clean all examples">
		<subant target="clean" failonerror="false">
    		<fileset dir="src/example" includes="**/build.xml"/>
        </subant>		
	</target>
	
	<target name="clean-all" depends="clean, clean-lib, clean-examples"/>
	
	<target name="noresolve" description="use to skip dependency resolution">
		<property name="no.resolve" value="true"/>
	</target>
	
	<target name="offline" depends="noresolve" description="use to indicate no internet connection is available">
		<property name="offline" value="true" />
	</target>
	

	<target name="resolve" depends="prepare" unless="no.resolve">
		<ivy:retrieve/>
	</target>

	<target name="build" depends="resolve">
		<path id="build.classpath">
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
		</path>
		<javac 	srcdir="${src.dir}"
		        destdir="${classes.build.dir}"
		        classpathref="build.classpath"
				source="${ivy.minimum.javaversion}"
				target="${ivy.minimum.javaversion}"
		        debug="${debug.mode}"/>
	</target>

	<target name="jar" depends="build">
		<copy todir="${classes.build.dir}">
    		<fileset dir="${src.dir}">
      			<exclude name="**/*.java"/>
    		</fileset>
  		</copy>
  		<jar 	destfile="${artifacts.build.dir}/ivy.jar"
				basedir="${classes.build.dir}"/>
  		<jar 	destfile="${artifacts.build.dir}/ivy-core.jar"
				basedir="${classes.build.dir}"
  				excludes="fr/jayasoft/ivy/ant/*"/>
	</target>
	

	<target name="javadoc">
		<javadoc destdir="${javadoc.build.dir}">
			<fileset dir="${src.dir}"/>
		</javadoc>
	</target>

	<target name="init-tests-offline" if="offline">
 		    <fileset id="test.fileset" dir="${test.dir}">
 		    	<include name="**/*Test.java"/>
 		    	<contains text="junit"/>
 		    	<not><contains text="remote.test"/></not>
 		    </fileset>
	</target>
		
	<target name="init-tests-online" unless="offline">
 		    <fileset id="test.fileset" dir="${test.dir}">
 		    	<include name="**/*Test.java"/>
 		    	<contains text="junit"/>
 		    </fileset>
	</target>
	
	<target name="init-tests" depends="init-tests-offline, init-tests-online" >
		<property name="test.fileset.property" refid="test.fileset"/>
		<echo message="${test.fileset.property}"/>
	</target>
		
	<target name="test" depends="jar, init-tests">
		<path id="run.classpath">
			<path refid="build.classpath"/>
			<pathelement location="${artifacts.build.dir}/ivy.jar"/>
		</path>
		<javac 	srcdir="${test.dir}"
		        destdir="${test.build.dir}"
		        classpathref="run.classpath"
				source="${ivy.minimum.javaversion}"
				target="${ivy.minimum.javaversion}"
		        debug="${debug.mode}"/>
		<copy todir="${test.build.dir}">
    		<fileset dir="${test.dir}">
      			<exclude name="**/*.java"/>
    		</fileset>
  		</copy>
        <junit haltonfailure="on" 
        	   showoutput="no"
        	   printsummary="yes">
            <classpath>
                <path refid="run.classpath"/>
    			<pathelement path="${test.build.dir}"/>
            </classpath>
			<formatter type="xml"/>
			<batchtest todir="${test.report.dir}">
    		    <fileset refid="test.fileset" />
			</batchtest>
        </junit>
	</target>

	<target name="test-report" depends="test">
		<junitreport>
			<fileset dir="${test.report.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${test.report.dir}" />
		</junitreport>
	</target>
	
	<target name="get-dxml" description="download dxml doc file from web site">
		<get src="http://www.jayasoft.org/ivy/doc/dxml" dest="${dxml.doc.file}" verbose="true" /> 
	</target>
	
	<target name="get-dxml-raw" description="download raw dxml doc file from web site">
		<get src="http://www.jayasoft.org/ivy/doc/dxml/raw" dest="${raw.dxml.doc.file}" verbose="true" /> 
	</target>
	
	<target name="main-doc" description="generates doc from dxml file -- WARNING: this operation is very slow and requires ruby 1.8.2 or greater">
		<echo message="generating documentation"/>
		<echo message="this operation is very slow... be patient"/>
		<exec dir="${basedir}" executable="ruby">
			<arg line="${doc.src.dir}/dxml_to_html.rb"/>
		</exec>
	</target>
	
	<target name="install" depends="jar" if="env.ANT_HOME">
		<copy file="${artifacts.build.dir}/ivy.jar" todir="${env.ANT_HOME}/lib"/>
	</target>

</project>
