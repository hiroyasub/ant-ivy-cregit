begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTestFilter
block|{
comment|/**      * @return IFilter      */
specifier|public
specifier|abstract
name|IFilter
name|getIFilter
parameter_list|()
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|testFilterNull
parameter_list|()
block|{
name|getIFilter
argument_list|()
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterNullValues
parameter_list|()
block|{
name|getIFilter
argument_list|()
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterNullPrefix
parameter_list|()
block|{
name|getIFilter
argument_list|()
operator|.
name|filter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilter
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|getIFilter
argument_list|()
operator|.
name|filter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|,
literal|"nogood"
block|,
literal|"mustbe filtered"
block|}
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterWithNullValues
parameter_list|()
block|{
name|String
index|[]
name|result
init|=
name|getIFilter
argument_list|()
operator|.
name|filter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test"
block|,
literal|null
block|,
literal|"mustbe filtered"
block|}
argument_list|,
literal|"t"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

