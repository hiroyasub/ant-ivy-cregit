begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|console
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_class
specifier|public
class|class
name|Main
block|{
specifier|private
specifier|static
name|Collection
name|QUIT_COMMANDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"quit"
block|,
literal|"q"
block|,
literal|"exit"
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|HELP_COMMANDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"help"
block|,
literal|"h"
block|,
literal|"?"
block|}
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|a
parameter_list|)
throws|throws
name|Exception
block|{
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"> "
argument_list|)
expr_stmt|;
name|String
name|command
init|=
name|in
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|QUIT_COMMANDS
operator|.
name|contains
argument_list|(
name|command
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|HELP_COMMANDS
operator|.
name|contains
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|help
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|String
index|[]
name|split
init|=
name|command
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|error
argument_list|(
name|command
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
name|split
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|split
argument_list|,
literal|1
argument_list|,
name|args
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|Class
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
name|split
index|[
literal|0
index|]
operator|+
literal|".Main"
argument_list|)
decl_stmt|;
name|Method
name|m
init|=
name|cl
operator|.
name|getMethod
argument_list|(
literal|"main"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
index|[]
operator|.
expr|class
block|}
argument_list|)
decl_stmt|;
name|m
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|args
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|error
argument_list|(
name|command
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|help
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"available commands:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tquit: quit the console"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\thelp: displays this message"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tlist -dir<dir>: list files in given directory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tfind -dir<dir> -name<name>: list files with given name in given dir"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tsizewhere -dir<dir> -name<name>: compute total size of files with given name in given dir"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\thelp: displays this message"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|error
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"unknown command "
operator|+
name|command
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"type ? for help"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

