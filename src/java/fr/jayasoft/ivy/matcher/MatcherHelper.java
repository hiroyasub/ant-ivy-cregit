begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|matcher
package|;
end_package

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ArtifactId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_class
specifier|public
class|class
name|MatcherHelper
block|{
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|PatternMatcher
name|m
parameter_list|,
name|String
name|exp
parameter_list|,
name|String
name|str
parameter_list|)
block|{
return|return
name|m
operator|.
name|getMatcher
argument_list|(
name|exp
argument_list|)
operator|.
name|matches
argument_list|(
name|str
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|PatternMatcher
name|m
parameter_list|,
name|ModuleId
name|exp
parameter_list|,
name|ModuleId
name|mid
parameter_list|)
block|{
return|return
name|matches
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|mid
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|&&
name|matches
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getName
argument_list|()
argument_list|,
name|mid
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|PatternMatcher
name|m
parameter_list|,
name|ModuleRevisionId
name|exp
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
name|matches
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|mrid
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|&&
name|matches
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getName
argument_list|()
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|matches
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getRevision
argument_list|()
argument_list|,
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|PatternMatcher
name|m
parameter_list|,
name|ArtifactId
name|exp
parameter_list|,
name|ArtifactId
name|aid
parameter_list|)
block|{
return|return
name|matches
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|aid
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|&&
name|matches
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|aid
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|matches
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getName
argument_list|()
argument_list|,
name|aid
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|matches
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getExt
argument_list|()
argument_list|,
name|aid
operator|.
name|getExt
argument_list|()
argument_list|)
operator|&&
name|matches
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getType
argument_list|()
argument_list|,
name|aid
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isExact
parameter_list|(
name|PatternMatcher
name|m
parameter_list|,
name|ModuleRevisionId
name|exp
parameter_list|)
block|{
return|return
name|isExact
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|&&
name|isExact
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|isExact
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getRevision
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isExact
parameter_list|(
name|PatternMatcher
name|m
parameter_list|,
name|ModuleId
name|exp
parameter_list|)
block|{
return|return
name|isExact
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|&&
name|isExact
argument_list|(
name|m
argument_list|,
name|exp
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isExact
parameter_list|(
name|PatternMatcher
name|m
parameter_list|,
name|String
name|exp
parameter_list|)
block|{
return|return
name|m
operator|.
name|getMatcher
argument_list|(
name|exp
argument_list|)
operator|.
name|isExact
argument_list|()
return|;
block|}
block|}
end_class

end_unit

