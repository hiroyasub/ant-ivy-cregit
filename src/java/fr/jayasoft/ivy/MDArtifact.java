begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author x.hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|MDArtifact
extends|extends
name|AbstractArtifact
block|{
specifier|private
name|ModuleDescriptor
name|_md
decl_stmt|;
specifier|private
name|String
name|_name
decl_stmt|;
specifier|private
name|String
name|_type
decl_stmt|;
specifier|private
name|String
name|_ext
decl_stmt|;
specifier|private
name|List
name|_confs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|ArtifactRevisionId
name|_arid
decl_stmt|;
specifier|public
name|MDArtifact
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null module descriptor not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null name not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null type not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null ext not allowed"
argument_list|)
throw|;
block|}
name|_md
operator|=
name|md
expr_stmt|;
name|_name
operator|=
name|name
expr_stmt|;
name|_type
operator|=
name|type
expr_stmt|;
name|_ext
operator|=
name|ext
expr_stmt|;
block|}
specifier|public
name|ModuleRevisionId
name|getModuleRevisionId
parameter_list|()
block|{
return|return
name|_md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
return|;
block|}
specifier|public
name|Date
name|getPublicationDate
parameter_list|()
block|{
return|return
name|_md
operator|.
name|getResolvedPublicationDate
argument_list|()
return|;
block|}
specifier|public
name|ArtifactRevisionId
name|getId
parameter_list|()
block|{
if|if
condition|(
name|_arid
operator|==
literal|null
condition|)
block|{
name|_arid
operator|=
name|ArtifactRevisionId
operator|.
name|newInstance
argument_list|(
name|_md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|,
name|_name
argument_list|,
name|_type
argument_list|,
name|_ext
argument_list|)
expr_stmt|;
block|}
return|return
name|_arid
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|_type
return|;
block|}
specifier|public
name|String
name|getExt
parameter_list|()
block|{
return|return
name|_ext
return|;
block|}
specifier|public
name|String
index|[]
name|getConfigurations
parameter_list|()
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|_confs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|_confs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|addConfiguration
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
name|_confs
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

