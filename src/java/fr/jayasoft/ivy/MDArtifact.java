begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @author x.hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|MDArtifact
extends|extends
name|AbstractArtifact
block|{
specifier|public
specifier|static
name|Artifact
name|newIvyArtifact
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
return|return
operator|new
name|MDArtifact
argument_list|(
name|md
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
return|;
block|}
specifier|private
name|ModuleDescriptor
name|_md
decl_stmt|;
specifier|private
name|String
name|_name
decl_stmt|;
specifier|private
name|String
name|_type
decl_stmt|;
specifier|private
name|String
name|_ext
decl_stmt|;
specifier|private
name|List
name|_confs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|ArtifactRevisionId
name|_arid
decl_stmt|;
specifier|private
name|Map
name|_extraAttributes
init|=
literal|null
decl_stmt|;
specifier|private
name|URL
name|_url
decl_stmt|;
specifier|public
name|MDArtifact
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
name|this
argument_list|(
name|md
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|ext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MDArtifact
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|,
name|URL
name|url
parameter_list|,
name|Map
name|extraAttributes
parameter_list|)
block|{
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null module descriptor not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null name not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null type not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null ext not allowed"
argument_list|)
throw|;
block|}
name|_md
operator|=
name|md
expr_stmt|;
name|_name
operator|=
name|name
expr_stmt|;
name|_type
operator|=
name|type
expr_stmt|;
name|_ext
operator|=
name|ext
expr_stmt|;
name|_url
operator|=
name|url
expr_stmt|;
name|_extraAttributes
operator|=
name|extraAttributes
expr_stmt|;
block|}
specifier|public
name|ModuleRevisionId
name|getModuleRevisionId
parameter_list|()
block|{
return|return
name|_md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
return|;
block|}
specifier|public
name|Date
name|getPublicationDate
parameter_list|()
block|{
return|return
name|_md
operator|.
name|getResolvedPublicationDate
argument_list|()
return|;
block|}
specifier|public
name|ArtifactRevisionId
name|getId
parameter_list|()
block|{
if|if
condition|(
name|_arid
operator|==
literal|null
condition|)
block|{
name|_arid
operator|=
name|ArtifactRevisionId
operator|.
name|newInstance
argument_list|(
name|_md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|,
name|_name
argument_list|,
name|_type
argument_list|,
name|_ext
argument_list|,
name|_extraAttributes
argument_list|)
expr_stmt|;
block|}
return|return
name|_arid
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|_type
return|;
block|}
specifier|public
name|String
name|getExt
parameter_list|()
block|{
return|return
name|_ext
return|;
block|}
specifier|public
name|String
index|[]
name|getConfigurations
parameter_list|()
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|_confs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|_confs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|addConfiguration
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
name|_confs
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|URL
name|getUrl
parameter_list|()
block|{
return|return
name|_url
return|;
block|}
block|}
end_class

end_unit

