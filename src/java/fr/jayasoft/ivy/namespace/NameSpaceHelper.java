begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the licence found in LICENCE.TXT in the root directory of the project.  * Copyright Jayasoft 2005 - All rights reserved  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|namespace
package|;
end_package

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ArtifactId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultModuleRevision
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_class
specifier|public
class|class
name|NameSpaceHelper
block|{
specifier|public
specifier|static
name|DependencyDescriptor
name|toSystem
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|Namespace
name|ns
parameter_list|)
block|{
return|return
name|DefaultDependencyDescriptor
operator|.
name|transformInstance
argument_list|(
name|dd
argument_list|,
name|ns
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DependencyDescriptor
name|transform
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|NamespaceTransformer
name|t
parameter_list|)
block|{
return|return
name|DefaultDependencyDescriptor
operator|.
name|transformInstance
argument_list|(
name|dd
argument_list|,
name|t
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ModuleDescriptor
name|toSystem
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|Namespace
name|ns
parameter_list|)
block|{
return|return
name|DefaultModuleDescriptor
operator|.
name|transformInstance
argument_list|(
name|md
argument_list|,
name|ns
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ResolvedModuleRevision
name|toSystem
parameter_list|(
name|ResolvedModuleRevision
name|rmr
parameter_list|,
name|Namespace
name|ns
parameter_list|)
block|{
if|if
condition|(
name|ns
operator|.
name|getToSystemTransformer
argument_list|()
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|rmr
return|;
block|}
name|ModuleDescriptor
name|md
init|=
name|toSystem
argument_list|(
name|rmr
operator|.
name|getDescriptor
argument_list|()
argument_list|,
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|.
name|equals
argument_list|(
name|rmr
operator|.
name|getDescriptor
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|rmr
return|;
block|}
return|return
operator|new
name|DefaultModuleRevision
argument_list|(
name|rmr
operator|.
name|getResolver
argument_list|()
argument_list|,
name|md
argument_list|,
name|rmr
operator|.
name|isSearched
argument_list|()
argument_list|,
name|rmr
operator|.
name|isDownloaded
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Artifact
name|transform
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|NamespaceTransformer
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|artifact
return|;
block|}
name|ModuleRevisionId
name|mrid
init|=
name|t
operator|.
name|transform
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|equals
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
return|return
name|artifact
return|;
block|}
return|return
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
name|artifact
operator|.
name|getPublicationDate
argument_list|()
argument_list|,
name|artifact
operator|.
name|getName
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|,
name|artifact
operator|.
name|getExt
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ArtifactId
name|transform
parameter_list|(
name|ArtifactId
name|artifactId
parameter_list|,
name|NamespaceTransformer
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|artifactId
return|;
block|}
name|ModuleId
name|mid
init|=
name|transform
argument_list|(
name|artifactId
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|mid
operator|.
name|equals
argument_list|(
name|artifactId
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|artifactId
return|;
block|}
return|return
operator|new
name|ArtifactId
argument_list|(
name|mid
argument_list|,
name|artifactId
operator|.
name|getName
argument_list|()
argument_list|,
name|artifactId
operator|.
name|getType
argument_list|()
argument_list|,
name|artifactId
operator|.
name|getExt
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ModuleId
name|transform
parameter_list|(
name|ModuleId
name|mid
parameter_list|,
name|NamespaceTransformer
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|mid
return|;
block|}
return|return
name|t
operator|.
name|transform
argument_list|(
operator|new
name|ModuleRevisionId
argument_list|(
name|mid
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|getModuleId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

