begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|EventListenerList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|conflict
operator|.
name|LatestConflictManager
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|conflict
operator|.
name|NoConflictManager
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|conflict
operator|.
name|StrictConflictManager
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|filter
operator|.
name|FilterHelper
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|latest
operator|.
name|LatestLexicographicStrategy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|latest
operator|.
name|LatestRevisionStrategy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|latest
operator|.
name|LatestTimeStrategy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|ConfigurationResolveReport
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|DownloadReport
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|LogReportOutputter
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|ReportOutputter
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|XmlReportOutputter
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|TransferEvent
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|TransferListener
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
operator|.
name|CacheResolver
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
operator|.
name|ChainResolver
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
operator|.
name|DualResolver
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
operator|.
name|ModuleEntry
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
operator|.
name|OrganisationEntry
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
operator|.
name|RevisionEntry
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|url
operator|.
name|URLHandlerRegistry
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlIvyConfigurationParser
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlModuleDescriptorUpdater
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlReportParser
import|;
end_import

begin_comment
comment|/**  * Ivy is a free java based dependency manager.  *   * This class is the main class of Ivy, which offers mainly dependency resolution.  *   * Here is one typical usage:  * Ivy ivy = new Ivy();  * ivy.configure(new URL("ivyconf.xml"));  * ivy.resolve(new URL("ivy.xml"), null, new String[] {"*"}, null, null, true);  *    * @author x.hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|Ivy
implements|implements
name|TransferListener
block|{
specifier|public
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CACHE_ARTIFACT_PATTERN
init|=
literal|"[organisation]/[module]/[type]s/[artifact]-[revision].[ext]"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CACHE_IVY_PATTERN
init|=
literal|"[organisation]/[module]/ivy-[revision].xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CACHE_RESOLVED_IVY_PATTERN
init|=
literal|"resolved-[organisation]-[module]-[revision].xml"
decl_stmt|;
specifier|private
name|Map
name|_typeDefs
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|_resolversMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|DependencyResolver
name|_defaultResolver
decl_stmt|;
specifier|private
name|DependencyResolver
name|_dictatorResolver
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_defaultResolverName
decl_stmt|;
specifier|private
name|File
name|_defaultCache
decl_stmt|;
specifier|private
name|boolean
name|_checkUpToDate
init|=
literal|true
decl_stmt|;
specifier|private
name|Map
name|_moduleConfigurations
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
comment|// Map (ModuleId -> String resolverName)
specifier|private
name|Map
name|_conflictsManager
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String conflictManagerName -> ConflictManager)
specifier|private
name|Map
name|_latestStrategies
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String latestStrategyName -> LatestStrategy)
specifier|private
name|Map
name|_variables
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|ReportOutputter
index|[]
name|_reportOutputters
init|=
operator|new
name|ReportOutputter
index|[]
block|{
operator|new
name|LogReportOutputter
argument_list|()
block|,
operator|new
name|XmlReportOutputter
argument_list|()
block|}
decl_stmt|;
specifier|private
name|String
name|_cacheIvyPattern
init|=
name|DEFAULT_CACHE_IVY_PATTERN
decl_stmt|;
specifier|private
name|String
name|_cacheResolvedIvyPattern
init|=
name|DEFAULT_CACHE_RESOLVED_IVY_PATTERN
decl_stmt|;
specifier|private
name|String
name|_cacheArtifactPattern
init|=
name|DEFAULT_CACHE_ARTIFACT_PATTERN
decl_stmt|;
specifier|private
name|boolean
name|_validate
init|=
literal|true
decl_stmt|;
specifier|private
name|LatestStrategy
name|_defaultLatestStrategy
init|=
literal|null
decl_stmt|;
specifier|private
name|ConflictManager
name|_defaultConflictManager
init|=
literal|null
decl_stmt|;
specifier|private
name|List
name|_listingIgnore
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|_repositoriesConfigured
decl_stmt|;
specifier|private
name|boolean
name|_useRemoteConfig
init|=
literal|false
decl_stmt|;
specifier|public
name|Ivy
parameter_list|()
block|{
name|String
name|ivyTypeDefs
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"ivy.typedef.files"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ivyTypeDefs
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|files
init|=
name|ivyTypeDefs
operator|.
name|split
argument_list|(
literal|"\\,"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|typeDefs
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"typedefs file not found: "
operator|+
name|files
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"problem with typedef file: "
operator|+
name|files
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|typeDefs
argument_list|(
name|Ivy
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"typedef.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"impossible to load default type defs"
argument_list|)
expr_stmt|;
block|}
block|}
name|LatestLexicographicStrategy
name|latestLexicographicStrategy
init|=
operator|new
name|LatestLexicographicStrategy
argument_list|()
decl_stmt|;
name|LatestRevisionStrategy
name|latestRevisionStrategy
init|=
operator|new
name|LatestRevisionStrategy
argument_list|()
decl_stmt|;
name|LatestTimeStrategy
name|latestTimeStrategy
init|=
operator|new
name|LatestTimeStrategy
argument_list|()
decl_stmt|;
name|addLatestStrategy
argument_list|(
literal|"latest-revision"
argument_list|,
name|latestRevisionStrategy
argument_list|)
expr_stmt|;
name|addLatestStrategy
argument_list|(
literal|"latest-lexico"
argument_list|,
name|latestLexicographicStrategy
argument_list|)
expr_stmt|;
name|addLatestStrategy
argument_list|(
literal|"latest-time"
argument_list|,
name|latestTimeStrategy
argument_list|)
expr_stmt|;
name|addConflictManager
argument_list|(
literal|"latest-revision"
argument_list|,
operator|new
name|LatestConflictManager
argument_list|(
literal|"latest-revision"
argument_list|,
name|latestRevisionStrategy
argument_list|)
argument_list|)
expr_stmt|;
name|addConflictManager
argument_list|(
literal|"latest-time"
argument_list|,
operator|new
name|LatestConflictManager
argument_list|(
literal|"latest-time"
argument_list|,
name|latestTimeStrategy
argument_list|)
argument_list|)
expr_stmt|;
name|addConflictManager
argument_list|(
literal|"all"
argument_list|,
operator|new
name|NoConflictManager
argument_list|()
argument_list|)
expr_stmt|;
name|addConflictManager
argument_list|(
literal|"strict"
argument_list|,
operator|new
name|StrictConflictManager
argument_list|()
argument_list|)
expr_stmt|;
name|_listingIgnore
operator|.
name|add
argument_list|(
literal|".cvsignore"
argument_list|)
expr_stmt|;
name|_listingIgnore
operator|.
name|add
argument_list|(
literal|"CVS"
argument_list|)
expr_stmt|;
name|_listingIgnore
operator|.
name|add
argument_list|(
literal|".svn"
argument_list|)
expr_stmt|;
name|addTransferListener
argument_list|(
operator|new
name|TransferListener
argument_list|()
block|{
specifier|public
name|void
name|transferProgress
parameter_list|(
name|TransferEvent
name|evt
parameter_list|)
block|{
switch|switch
condition|(
name|evt
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|TransferEvent
operator|.
name|TRANSFER_PROGRESS
case|:
name|Message
operator|.
name|progress
argument_list|()
expr_stmt|;
break|break;
case|case
name|TransferEvent
operator|.
name|TRANSFER_COMPLETED
case|:
name|Message
operator|.
name|endProgress
argument_list|(
literal|" ("
operator|+
operator|(
name|evt
operator|.
name|getTotalLength
argument_list|()
operator|/
literal|1024
operator|)
operator|+
literal|"kB)"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Call this method to ask ivy to configure some variables using either a remote or a local properties file      */
specifier|public
name|void
name|configureRepositories
parameter_list|(
name|boolean
name|remote
parameter_list|)
block|{
if|if
condition|(
operator|!
name|_repositoriesConfigured
condition|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|boolean
name|configured
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|_useRemoteConfig
operator|&&
name|remote
condition|)
block|{
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://www.jayasoft.org/ivy/repository.properties"
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"configuring repositories with "
operator|+
name|url
argument_list|)
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|URLHandlerRegistry
operator|.
name|getDefault
argument_list|()
operator|.
name|openStream
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|configured
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"unable to use remote repository configuration: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|configured
condition|)
block|{
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|Ivy
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"repository.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"unable to use internal repository configuration: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|addAllVariables
argument_list|(
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_repositoriesConfigured
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|typeDefs
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|load
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|typeDefs
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|typeDefs
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|p
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|typeDef
argument_list|(
name|name
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"impossible to define resolver "
operator|+
name|name
operator|+
literal|": class not found: "
operator|+
name|p
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         CONFIGURATION
comment|/////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|configure
parameter_list|(
name|File
name|configurationFile
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Message
operator|.
name|info
argument_list|(
literal|":: configuring :: file = "
operator|+
name|configurationFile
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|setVariable
argument_list|(
literal|"ivy.conf.dir"
argument_list|,
operator|new
name|File
argument_list|(
name|configurationFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|setVariable
argument_list|(
literal|"ivy.conf.file"
argument_list|,
name|configurationFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|setVariable
argument_list|(
literal|"ivy.conf.url"
argument_list|,
name|configurationFile
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|XmlIvyConfigurationParser
argument_list|(
name|this
argument_list|)
operator|.
name|parse
argument_list|(
name|configurationFile
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"given file cannot be transformed to url: "
operator|+
name|configurationFile
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"configuration done ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|dumpConfig
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|configure
parameter_list|(
name|URL
name|configurationURL
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Message
operator|.
name|info
argument_list|(
literal|":: configuring :: url = "
operator|+
name|configurationURL
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|confURL
init|=
name|configurationURL
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|setVariable
argument_list|(
literal|"ivy.conf.url"
argument_list|,
name|confURL
argument_list|)
expr_stmt|;
name|int
name|slashIndex
init|=
name|confURL
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slashIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|setVariable
argument_list|(
literal|"ivy.conf.dir"
argument_list|,
name|confURL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slashIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"configuration url does not contain any slash (/): ivy.conf.dir variable not set"
argument_list|)
expr_stmt|;
block|}
operator|new
name|XmlIvyConfigurationParser
argument_list|(
name|this
argument_list|)
operator|.
name|parse
argument_list|(
name|configurationURL
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"configuration done ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|dumpConfig
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|dumpConfig
parameter_list|()
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tdefault cache: "
operator|+
name|getDefaultCache
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tdefault resolver: "
operator|+
name|getDefaultResolver
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tdefault latest strategy: "
operator|+
name|getDefaultLatestStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tdefault conflict manager: "
operator|+
name|getDefaultConflictManager
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tvalidate: "
operator|+
name|doValidate
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tcheck up2date: "
operator|+
name|isCheckUpToDate
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tcache ivy pattern: "
operator|+
name|getCacheIvyPattern
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tcache artifact pattern: "
operator|+
name|getCacheArtifactPattern
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t-- "
operator|+
name|_resolversMap
operator|.
name|size
argument_list|()
operator|+
literal|" resolvers:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_resolversMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|dumpConfig
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|_moduleConfigurations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tmodule configurations:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_moduleConfigurations
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleId
name|mid
init|=
operator|(
name|ModuleId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|res
init|=
operator|(
name|String
operator|)
name|_moduleConfigurations
operator|.
name|get
argument_list|(
name|mid
argument_list|)
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\t"
operator|+
name|mid
operator|+
literal|" -> "
operator|+
name|res
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|loadProperties
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
name|addAllVariables
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadProperties
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|addAllVariables
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setVariable
parameter_list|(
name|String
name|varName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"setting '"
operator|+
name|varName
operator|+
literal|"' to '"
operator|+
name|value
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|_variables
operator|.
name|put
argument_list|(
name|varName
argument_list|,
name|substitute
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAllVariables
parameter_list|(
name|Map
name|variables
parameter_list|)
block|{
name|addAllVariables
argument_list|(
name|variables
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAllVariables
parameter_list|(
name|Map
name|variables
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|variables
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|overwrite
operator|||
operator|!
name|_variables
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|variables
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|setVariable
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Substitute variables in the given string by their value found in the current       * set of variables      *       * @param str the string in which substitution should be made      * @return the string where all current ivy variables have been substituted by their value      */
specifier|public
name|String
name|substitute
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|IvyPatternHelper
operator|.
name|substituteVariables
argument_list|(
name|str
argument_list|,
name|getVariables
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the variables loaded in configuration file. Those variables      * may better be seen as ant properties       *       * @return      */
specifier|public
name|Map
name|getVariables
parameter_list|()
block|{
return|return
name|_variables
return|;
block|}
specifier|public
name|void
name|typeDef
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
name|_typeDefs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
name|getTypeDefs
parameter_list|()
block|{
return|return
name|_typeDefs
return|;
block|}
specifier|public
name|Class
name|getTypeDef
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Class
operator|)
name|_typeDefs
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|// methods which match ivy conf method signature specs
specifier|public
name|void
name|addConfigured
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|)
block|{
name|addResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addResolver
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null resolver"
argument_list|)
throw|;
block|}
if|if
condition|(
name|resolver
operator|instanceof
name|IvyAware
condition|)
block|{
operator|(
operator|(
name|IvyAware
operator|)
name|resolver
operator|)
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|_resolversMap
operator|.
name|put
argument_list|(
name|resolver
operator|.
name|getName
argument_list|()
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolver
operator|instanceof
name|ChainResolver
condition|)
block|{
name|List
name|subresolvers
init|=
operator|(
operator|(
name|ChainResolver
operator|)
name|resolver
operator|)
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|subresolvers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|dr
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|addResolver
argument_list|(
name|dr
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|resolver
operator|instanceof
name|DualResolver
condition|)
block|{
name|DependencyResolver
name|ivyResolver
init|=
operator|(
operator|(
name|DualResolver
operator|)
name|resolver
operator|)
operator|.
name|getIvyResolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|ivyResolver
operator|!=
literal|null
condition|)
block|{
name|addResolver
argument_list|(
name|ivyResolver
argument_list|)
expr_stmt|;
block|}
name|DependencyResolver
name|artifactResolver
init|=
operator|(
operator|(
name|DualResolver
operator|)
name|resolver
operator|)
operator|.
name|getArtifactResolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|artifactResolver
operator|!=
literal|null
condition|)
block|{
name|addResolver
argument_list|(
name|artifactResolver
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setDefaultCache
parameter_list|(
name|File
name|cacheDirectory
parameter_list|)
block|{
name|_defaultCache
operator|=
name|cacheDirectory
expr_stmt|;
block|}
specifier|public
name|void
name|setDefaultResolver
parameter_list|(
name|String
name|resolverName
parameter_list|)
block|{
name|checkResolverName
argument_list|(
name|resolverName
argument_list|)
expr_stmt|;
name|_defaultResolverName
operator|=
name|resolverName
expr_stmt|;
block|}
specifier|private
name|void
name|checkResolverName
parameter_list|(
name|String
name|resolverName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|_resolversMap
operator|.
name|containsKey
argument_list|(
name|resolverName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no resolver found called "
operator|+
name|resolverName
operator|+
literal|": check your configuration"
argument_list|)
throw|;
block|}
block|}
comment|/**      * regular expressions as explained in Pattern class may be used in ModuleId      * organisation and name      *       * @param moduleId      * @param resolverName      */
specifier|public
name|void
name|addModuleConfiguration
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
name|resolverName
parameter_list|)
block|{
name|checkResolverName
argument_list|(
name|resolverName
argument_list|)
expr_stmt|;
name|_moduleConfigurations
operator|.
name|put
argument_list|(
name|moduleId
argument_list|,
name|resolverName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|File
name|getDefaultCache
parameter_list|()
block|{
if|if
condition|(
name|_defaultCache
operator|==
literal|null
condition|)
block|{
name|_defaultCache
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|,
literal|".ivy-cache"
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"no default cache defined: set to "
operator|+
name|_defaultCache
argument_list|)
expr_stmt|;
block|}
return|return
name|_defaultCache
return|;
block|}
specifier|public
name|DependencyResolver
name|getResolver
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|)
block|{
if|if
condition|(
name|_dictatorResolver
operator|!=
literal|null
condition|)
block|{
return|return
name|_dictatorResolver
return|;
block|}
name|String
name|resolverName
init|=
name|getResolverName
argument_list|(
name|moduleId
argument_list|)
decl_stmt|;
return|return
name|getResolver
argument_list|(
name|resolverName
argument_list|)
return|;
block|}
specifier|public
name|DependencyResolver
name|getResolver
parameter_list|(
name|String
name|resolverName
parameter_list|)
block|{
if|if
condition|(
name|_dictatorResolver
operator|!=
literal|null
condition|)
block|{
return|return
name|_dictatorResolver
return|;
block|}
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|_resolversMap
operator|.
name|get
argument_list|(
name|resolverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"unknown resolver "
operator|+
name|resolverName
argument_list|)
expr_stmt|;
block|}
return|return
name|resolver
return|;
block|}
specifier|public
name|DependencyResolver
name|getDefaultResolver
parameter_list|()
block|{
if|if
condition|(
name|_dictatorResolver
operator|!=
literal|null
condition|)
block|{
return|return
name|_dictatorResolver
return|;
block|}
if|if
condition|(
name|_defaultResolver
operator|==
literal|null
condition|)
block|{
name|_defaultResolver
operator|=
operator|(
name|DependencyResolver
operator|)
name|_resolversMap
operator|.
name|get
argument_list|(
name|_defaultResolverName
argument_list|)
expr_stmt|;
block|}
return|return
name|_defaultResolver
return|;
block|}
specifier|public
name|String
name|getResolverName
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|_moduleConfigurations
operator|.
name|get
argument_list|(
name|moduleId
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|_moduleConfigurations
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleId
name|mid
init|=
operator|(
name|ModuleId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|Pattern
operator|.
name|compile
argument_list|(
name|mid
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|.
name|matcher
argument_list|(
name|moduleId
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
operator|&&
name|Pattern
operator|.
name|compile
argument_list|(
name|mid
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matcher
argument_list|(
name|moduleId
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|_moduleConfigurations
operator|.
name|get
argument_list|(
name|mid
argument_list|)
return|;
block|}
block|}
return|return
name|_defaultResolverName
return|;
block|}
specifier|public
name|void
name|addConfigured
parameter_list|(
name|ConflictManager
name|cm
parameter_list|)
block|{
name|addConflictManager
argument_list|(
name|cm
operator|.
name|getName
argument_list|()
argument_list|,
name|cm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ConflictManager
name|getConflictManager
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getDefaultConflictManager
argument_list|()
return|;
block|}
return|return
operator|(
name|ConflictManager
operator|)
name|_conflictsManager
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|addConflictManager
parameter_list|(
name|String
name|name
parameter_list|,
name|ConflictManager
name|cm
parameter_list|)
block|{
if|if
condition|(
name|cm
operator|instanceof
name|IvyAware
condition|)
block|{
operator|(
operator|(
name|IvyAware
operator|)
name|cm
operator|)
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|_conflictsManager
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|cm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfigured
parameter_list|(
name|LatestStrategy
name|latest
parameter_list|)
block|{
name|addLatestStrategy
argument_list|(
name|latest
operator|.
name|getName
argument_list|()
argument_list|,
name|latest
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LatestStrategy
name|getLatestStrategy
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getDefaultLatestStrategy
argument_list|()
return|;
block|}
return|return
operator|(
name|LatestStrategy
operator|)
name|_latestStrategies
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|addLatestStrategy
parameter_list|(
name|String
name|name
parameter_list|,
name|LatestStrategy
name|latest
parameter_list|)
block|{
if|if
condition|(
name|latest
operator|instanceof
name|IvyAware
condition|)
block|{
operator|(
operator|(
name|IvyAware
operator|)
name|latest
operator|)
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|_latestStrategies
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|latest
argument_list|)
expr_stmt|;
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         CHECK
comment|/////////////////////////////////////////////////////////////////////////
comment|/**      * Checks the given ivy file using current configuration to see if all dependencies      * are available, with good confs. If a resolver name is given, it also checks that the declared      * publications are available in the corresponding resolver.      * Note that the check is not performed recursively, i.e. if a dependency has itself dependencies      * badly described or not available, this check will not discover it.       */
specifier|public
name|boolean
name|check
parameter_list|(
name|URL
name|ivyFile
parameter_list|,
name|String
name|resolvername
parameter_list|)
block|{
try|try
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
comment|// parse ivy file
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|parseDescriptor
argument_list|(
name|this
argument_list|,
name|ivyFile
argument_list|,
name|doValidate
argument_list|()
argument_list|)
decl_stmt|;
comment|// check publications if possible
if|if
condition|(
name|resolvername
operator|!=
literal|null
condition|)
block|{
name|DependencyResolver
name|resolver
init|=
name|getResolver
argument_list|(
name|resolvername
argument_list|)
decl_stmt|;
name|String
index|[]
name|confs
init|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
name|Set
name|artifacts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|artifacts
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|artifacts
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|art
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|resolver
operator|.
name|exists
argument_list|(
name|art
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"declared publication not found: "
operator|+
name|art
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|// check dependencies
name|DependencyDescriptor
index|[]
name|dds
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|ResolveData
name|data
init|=
operator|new
name|ResolveData
argument_list|(
name|this
argument_list|,
name|getDefaultCache
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// check master confs
name|String
index|[]
name|masterConfs
init|=
name|dds
index|[
name|i
index|]
operator|.
name|getModuleConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|masterConfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
literal|"*"
operator|.
name|equals
argument_list|(
name|masterConfs
index|[
name|j
index|]
operator|.
name|trim
argument_list|()
argument_list|)
operator|&&
name|md
operator|.
name|getConfiguration
argument_list|(
name|masterConfs
index|[
name|j
index|]
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"dependency required in non existing conf for "
operator|+
name|ivyFile
operator|+
literal|" \n\tin "
operator|+
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|masterConfs
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// resolve
name|DependencyResolver
name|resolver
init|=
name|getResolver
argument_list|(
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyId
argument_list|()
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
name|dds
index|[
name|i
index|]
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmr
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"dependency not found in "
operator|+
name|ivyFile
operator|+
literal|":\n\t"
operator|+
name|dds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|depConfs
init|=
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyConfigurations
argument_list|(
name|md
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|depConfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|depConfs
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"dependency configuration is missing for "
operator|+
name|ivyFile
operator|+
literal|"\n\tin "
operator|+
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|depConfs
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
name|Artifact
index|[]
name|arts
init|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getArtifacts
argument_list|(
name|depConfs
index|[
name|j
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|arts
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|resolver
operator|.
name|exists
argument_list|(
name|arts
index|[
name|k
index|]
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"dependency artifact is missing for "
operator|+
name|ivyFile
operator|+
literal|"\n\t in "
operator|+
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|arts
index|[
name|k
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"parse problem on "
operator|+
name|ivyFile
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"io problem on "
operator|+
name|ivyFile
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"problem on "
operator|+
name|ivyFile
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         RESOLVE
comment|/////////////////////////////////////////////////////////////////////////
comment|/**      *       * @param ivySource the url to the descriptor of the module for which dependencies should be resolved      * @param revision the revision of the module for which dependencies should be resolved.      * This revision is considered as the resolved revision of the module, unless it is null.      * If it is null, then a default revision is given if necessary (no revision found in ivy file)      * @param confs the configurations for which dependencies should be resolved      * @param cache the directory where to place resolved dependencies      * @param date the date for which the dependencies should be resolved. All obtained artifacts       * should have a publication date which is before or equal to the given date      * @throws ParseException      * @throws IOException      * @throws NullPointerException if any parameter is null except cache or date      */
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|revision
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|revision
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|FilterHelper
operator|.
name|NO_FILTER
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|DependencyResolver
name|oldDictator
init|=
name|getDictatorResolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|useCacheOnly
condition|)
block|{
name|setDictatorResolver
argument_list|(
operator|new
name|CacheResolver
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ModuleDescriptor
name|md
init|=
name|XmlModuleDescriptorParser
operator|.
name|parseDescriptor
argument_list|(
name|this
argument_list|,
name|ivySource
argument_list|,
name|validate
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
comment|// ensure that a cache exists
name|cache
operator|=
name|getDefaultCache
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|revision
operator|==
literal|null
operator|&&
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
condition|)
block|{
name|revision
operator|=
literal|"working@"
operator|+
name|getLocalHostName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|setResolvedModuleRevisionId
argument_list|(
operator|new
name|ModuleRevisionId
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confs
operator|.
name|length
operator|==
literal|1
operator|&&
name|confs
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|confs
operator|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|":: resolving dependencies :: "
operator|+
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|"\tconfs: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|confs
argument_list|)
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tvalidate = "
operator|+
name|validate
argument_list|)
expr_stmt|;
name|ResolveReport
name|report
init|=
operator|new
name|ResolveReport
argument_list|(
name|md
argument_list|)
decl_stmt|;
comment|// resolve dependencies
name|IvyNode
index|[]
name|dependencies
init|=
name|getDependencies
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|report
argument_list|,
name|validate
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|":: downloading artifacts ::"
argument_list|)
expr_stmt|;
name|Map
name|resolvedRevisions
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (ModuleId dependency -> String revision)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//download artifacts required in all asked configurations
if|if
condition|(
operator|!
name|dependencies
index|[
name|i
index|]
operator|.
name|isCompletelyEvicted
argument_list|()
operator|&&
operator|!
name|dependencies
index|[
name|i
index|]
operator|.
name|hasProblem
argument_list|()
condition|)
block|{
name|DependencyResolver
name|resolver
init|=
name|dependencies
index|[
name|i
index|]
operator|.
name|getModuleRevision
argument_list|()
operator|.
name|getResolver
argument_list|()
decl_stmt|;
name|DownloadReport
name|dReport
init|=
name|resolver
operator|.
name|download
argument_list|(
name|dependencies
index|[
name|i
index|]
operator|.
name|getSelectedArtifacts
argument_list|(
name|artifactFilter
argument_list|)
argument_list|,
name|this
argument_list|,
name|cache
argument_list|)
decl_stmt|;
name|ArtifactDownloadReport
index|[]
name|adrs
init|=
name|dReport
operator|.
name|getArtifactsReports
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|adrs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"\t[NOT FOUND  ] "
operator|+
name|adrs
index|[
name|j
index|]
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|reportFailure
argument_list|(
name|adrs
index|[
name|j
index|]
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// update concerned reports
name|String
index|[]
name|dconfs
init|=
name|dependencies
index|[
name|i
index|]
operator|.
name|getRootModuleConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|dconfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// the report itself is responsible to take into account only
comment|// artifacts required in its corresponding configuration
comment|// (as described by the Dependency object)
if|if
condition|(
name|dependencies
index|[
name|i
index|]
operator|.
name|isEvicted
argument_list|(
name|dconfs
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|report
operator|.
name|getConfigurationReport
argument_list|(
name|dconfs
index|[
name|j
index|]
argument_list|)
operator|.
name|addDependency
argument_list|(
name|dependencies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|report
operator|.
name|getConfigurationReport
argument_list|(
name|dconfs
index|[
name|j
index|]
argument_list|)
operator|.
name|addDependency
argument_list|(
name|dependencies
index|[
name|i
index|]
argument_list|,
name|dReport
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update resolved dependencies map for resolved ivy file producing
name|resolvedRevisions
operator|.
name|put
argument_list|(
name|dependencies
index|[
name|i
index|]
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|dependencies
index|[
name|i
index|]
operator|.
name|getResolvedId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dependencies
index|[
name|i
index|]
operator|.
name|isCompletelyEvicted
argument_list|()
condition|)
block|{
comment|// dependencies has been evicted: it has not been added to the report yet
name|String
index|[]
name|dconfs
init|=
name|dependencies
index|[
name|i
index|]
operator|.
name|getRootModuleConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|dconfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|report
operator|.
name|getConfigurationReport
argument_list|(
name|dconfs
index|[
name|j
index|]
argument_list|)
operator|.
name|addDependency
argument_list|(
name|dependencies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// produce resolved ivy file in cache
name|File
name|ivyFileInCache
init|=
name|getResolvedIvyFileInCache
argument_list|(
name|cache
argument_list|,
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|XmlModuleDescriptorUpdater
operator|.
name|update
argument_list|(
name|ivySource
argument_list|,
name|ivyFileInCache
argument_list|,
name|resolvedRevisions
argument_list|,
literal|null
argument_list|,
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|ParseException
name|ex
init|=
operator|new
name|ParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tresolved ivy file produced in "
operator|+
name|ivyFileInCache
argument_list|)
expr_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|":: resolution report ::"
argument_list|)
expr_stmt|;
comment|// output report
name|report
operator|.
name|output
argument_list|(
name|getReportOutputters
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tresolve done ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|Message
operator|.
name|sumupProblems
argument_list|()
expr_stmt|;
return|return
name|report
return|;
block|}
finally|finally
block|{
name|setDictatorResolver
argument_list|(
name|oldDictator
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Download an artifact to the cache.      * Not used internally, useful especially for IDE plugins      * needing to download artifact one by one (for source or javadoc artifact,      * for instance).      *       * Downloaded artifact file can be accessed using getArchiveFileInCache method.      *       * It is possible to track the progression of the download using classical ivy       * progress monitoring feature (see addTransferListener).      *       * @param artifact the artifact to download      * @param cache the cache to use. If null, will use default cache      * @return a report concerning the download      */
specifier|public
name|ArtifactDownloadReport
name|download
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|cache
parameter_list|)
block|{
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|cache
operator|=
name|getDefaultCache
argument_list|()
expr_stmt|;
block|}
name|DependencyResolver
name|resolver
init|=
name|getResolver
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
decl_stmt|;
name|DownloadReport
name|r
init|=
name|resolver
operator|.
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
name|artifact
block|}
argument_list|,
name|this
argument_list|,
name|cache
argument_list|)
decl_stmt|;
return|return
name|r
operator|.
name|getArtifactReport
argument_list|(
name|artifact
argument_list|)
return|;
block|}
specifier|public
name|ReportOutputter
index|[]
name|getReportOutputters
parameter_list|()
block|{
return|return
name|_reportOutputters
return|;
block|}
comment|/**      * Resolve the dependencies of a module without downloading corresponding artifacts.      * The module to resolve is given by its ivy file URL. This method requires      * appropriate configuration of the ivy instance, especially resolvers.      *       * @param ivySource url of the ivy file to use for dependency resolving      * @param confs an array of configuration names to resolve - must not be null nor empty      * @param cache the cache to use - default cache is used if null      * @param date the date to which resolution must be done - may be null      * @return an array of the resolved dependencies      * @throws ParseException if a parsing problem occured in the ivy file      * @throws IOException if an IO problem was raised during ivy file parsing      */
specifier|public
name|IvyNode
index|[]
name|getDependencies
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|getDependencies
argument_list|(
name|XmlModuleDescriptorParser
operator|.
name|parseDescriptor
argument_list|(
name|this
argument_list|,
name|ivySource
argument_list|,
name|validate
argument_list|)
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
literal|null
argument_list|,
name|validate
argument_list|)
return|;
block|}
comment|/**      * Resolve the dependencies of a module without downloading corresponding artifacts.      * The module to resolve is given by its module descriptor.This method requires      * appropriate configuration of the ivy instance, especially resolvers.      *       * @param md the descriptor of the module for which we want to get dependencies - must not be null      * @param confs an array of configuration names to resolve - must not be null nor empty      * @param cache the cache to use - default cache is used if null      * @param date the date to which resolution must be done - may be null      * @param report a resolve report to fill during resolution - may be null      * @return an array of the resolved Dependencies      */
specifier|public
name|IvyNode
index|[]
name|getDependencies
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|ResolveReport
name|report
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"module descriptor must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
comment|// ensure that a cache exists
name|cache
operator|=
name|getDefaultCache
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|confs
operator|.
name|length
operator|==
literal|1
operator|&&
name|confs
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|confs
operator|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
name|Map
name|dependenciesMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Date
name|reportDate
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|configuration
init|=
name|md
operator|.
name|getConfiguration
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"asked configuration not found in "
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ConfigurationResolveReport
name|confReport
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|report
operator|!=
literal|null
condition|)
block|{
name|confReport
operator|=
name|report
operator|.
name|getConfigurationReport
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|confReport
operator|==
literal|null
condition|)
block|{
name|confReport
operator|=
operator|new
name|ConfigurationResolveReport
argument_list|(
name|this
argument_list|,
name|md
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|,
name|reportDate
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|report
operator|.
name|addReport
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
name|confReport
argument_list|)
expr_stmt|;
block|}
block|}
name|ResolveData
name|data
init|=
operator|new
name|ResolveData
argument_list|(
name|this
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|confReport
argument_list|,
name|validate
argument_list|,
name|dependenciesMap
argument_list|)
decl_stmt|;
name|IvyNode
name|node
init|=
operator|new
name|IvyNode
argument_list|(
name|data
argument_list|,
name|md
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|node
operator|.
name|setRootModuleConf
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|fetchDependencies
argument_list|(
name|node
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// prune and reverse sort fectched dependencies
name|Collection
name|dependencies
init|=
operator|new
name|HashSet
argument_list|(
name|dependenciesMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// use a Set to avoids duplicates
for|for
control|(
name|Iterator
name|iter
init|=
name|dependenciesMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|dep
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dep
operator|!=
literal|null
condition|)
block|{
name|dependencies
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
name|List
name|sortedDependencies
init|=
name|sortNodes
argument_list|(
name|dependencies
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|sortedDependencies
argument_list|)
expr_stmt|;
comment|// handle transitive eviction now:
comment|// if a module has been evicted then all its dependencies required
comment|// only by it should be evicted too. Since nodes are now sorted from the more dependent to
comment|// the less one, we can traverse the list and check only the direct parent and not all
comment|// the ancestors
for|for
control|(
name|ListIterator
name|iter
init|=
name|sortedDependencies
operator|.
name|listIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|node
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isCompletelyEvicted
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IvyNode
operator|.
name|Caller
index|[]
name|callers
init|=
name|node
operator|.
name|getCallers
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|boolean
name|allEvicted
init|=
name|callers
operator|.
name|length
operator|>
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|callers
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|callers
index|[
name|j
index|]
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
condition|)
block|{
comment|// the caller is the root module itself, it can't be evicted
name|allEvicted
operator|=
literal|false
expr_stmt|;
break|break;
block|}
else|else
block|{
name|IvyNode
name|callerNode
init|=
operator|(
name|IvyNode
operator|)
name|dependenciesMap
operator|.
name|get
argument_list|(
name|callers
index|[
name|j
index|]
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerNode
operator|!=
literal|null
operator|&&
operator|!
name|callerNode
operator|.
name|isEvicted
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|allEvicted
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|allEvicted
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"all callers are evicted for "
operator|+
name|node
operator|+
literal|": evicting too"
argument_list|)
expr_stmt|;
name|node
operator|.
name|markEvicted
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|IvyNode
index|[]
operator|)
name|sortedDependencies
operator|.
name|toArray
argument_list|(
operator|new
name|IvyNode
index|[
name|sortedDependencies
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|fetchDependencies
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
name|resolveConflict
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|loadData
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getRealNode
argument_list|()
expr_stmt|;
comment|// if data loading discarded the node, get the real one
name|resolveConflict
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isEvicted
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|node
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doFetchDependencies
argument_list|(
name|node
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|doFetchDependencies
argument_list|(
name|node
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|node
operator|.
name|isEvicted
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
condition|)
block|{
comment|// update selected nodes with confs asked in evicted one
name|IvyNode
operator|.
name|EvictionData
name|ed
init|=
name|node
operator|.
name|getEvictedData
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|ed
operator|.
name|getSelected
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|selected
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|fetchDependencies
argument_list|(
name|selected
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doFetchDependencies
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
name|Configuration
name|c
init|=
name|node
operator|.
name|getConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// we handle the case where the asked configuration extends others:
comment|// we have to first fetch the extended configurations
name|String
index|[]
name|extendedConfs
init|=
name|c
operator|.
name|getExtends
argument_list|()
decl_stmt|;
if|if
condition|(
name|extendedConfs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|node
operator|.
name|updateConfsToFetch
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|extendedConfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extendedConfs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fetchDependencies
argument_list|(
name|node
argument_list|,
name|extendedConfs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getDependencyDescriptor
argument_list|()
operator|==
literal|null
operator|||
name|node
operator|.
name|getDependencyDescriptor
argument_list|()
operator|.
name|isTransitive
argument_list|()
condition|)
block|{
name|Collection
name|dependencies
init|=
name|node
operator|.
name|getDependencies
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|dep
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dep
operator|.
name|isCircular
argument_list|()
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"circular dependency found ! "
operator|+
name|node
operator|.
name|getId
argument_list|()
operator|+
literal|" depends on "
operator|+
name|dep
operator|.
name|getId
argument_list|()
operator|+
literal|" which is already on the same branch of dependency"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
index|[]
name|confs
init|=
name|dep
operator|.
name|getRequiredConfigurations
argument_list|(
name|node
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fetchDependencies
argument_list|(
name|dep
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// if there are still confs to fetch (usually because they have
comment|// been updated when evicting another module), we fetch them now
name|confs
operator|=
name|dep
operator|.
name|getConfsToFetch
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fetchDependencies
argument_list|(
name|dep
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|resolveConflict
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|IvyNode
name|parent
parameter_list|)
block|{
name|resolveConflict
argument_list|(
name|node
argument_list|,
name|parent
argument_list|,
name|Collections
operator|.
name|EMPTY_SET
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|resolveConflict
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|IvyNode
name|parent
parameter_list|,
name|Collection
name|toevict
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
operator|||
name|node
operator|==
name|parent
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|parent
operator|.
name|getResolvedRevisions
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getResolvedId
argument_list|()
argument_list|)
condition|)
block|{
comment|// resolve conflict has already be done with node with the same id
comment|// => job already done
return|return;
block|}
name|Collection
name|conflicts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Collection
name|resolvedNodes
init|=
operator|new
name|HashSet
argument_list|(
name|parent
operator|.
name|getResolvedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedNodes
operator|.
name|removeAll
argument_list|(
name|toevict
argument_list|)
condition|)
block|{
comment|// parent.resolved(node.mid) is not up to date:
comment|// recompute resolved from all sub nodes
name|Collection
name|deps
init|=
name|parent
operator|.
name|getDependencies
argument_list|(
name|parent
operator|.
name|getRequiredConfigurations
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|deps
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|dep
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|dep
operator|.
name|getResolvedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|resolvedNodes
argument_list|)
expr_stmt|;
block|}
name|Collection
name|resolved
init|=
name|parent
operator|.
name|getConflictManager
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|)
operator|.
name|resolveConflicts
argument_list|(
name|parent
argument_list|,
name|conflicts
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolved
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|// node has been selected for the current parent
comment|// we update its eviction... but it can still be evicted by parent !
name|node
operator|.
name|markSelected
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"selecting "
operator|+
name|node
operator|+
literal|" in "
operator|+
name|parent
argument_list|)
expr_stmt|;
comment|// handle previously selected nodes that are now evicted by this new node
name|toevict
operator|=
name|resolvedNodes
expr_stmt|;
name|toevict
operator|.
name|removeAll
argument_list|(
name|resolved
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|toevict
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|te
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|te
operator|.
name|markEvicted
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|parent
argument_list|,
name|parent
operator|.
name|getConflictManager
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|)
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"evicting "
operator|+
name|te
operator|+
literal|" by "
operator|+
name|te
operator|.
name|getEvictedData
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// it's very important to update resolved BEFORE recompute parent call
comment|// to allow it to recompute its resolved collection with correct data
comment|// if necessary
name|parent
operator|.
name|setResolvedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
name|resolveConflict
argument_list|(
name|node
argument_list|,
name|parent
operator|.
name|getParent
argument_list|()
argument_list|,
name|toevict
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// node has been evicted for the current parent
comment|// it's time to update parent resolved with found resolved...
comment|// if they have not been recomputed, it does not change anything
name|parent
operator|.
name|setResolvedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
name|node
operator|.
name|markEvicted
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|parent
argument_list|,
name|parent
operator|.
name|getConflictManager
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|)
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"evicting "
operator|+
name|node
operator|+
literal|" by "
operator|+
name|node
operator|.
name|getEvictedData
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ResolvedModuleRevision
name|findModuleInCache
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|File
name|cache
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
comment|// first, check if it is in cache
if|if
condition|(
name|mrid
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
name|File
name|ivyFile
init|=
name|getIvyFileInCache
argument_list|(
name|cache
argument_list|,
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ivyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// found in cache !
try|try
block|{
name|ModuleDescriptor
name|depMD
init|=
name|XmlModuleDescriptorParser
operator|.
name|parseDescriptor
argument_list|(
name|this
argument_list|,
name|ivyFile
operator|.
name|toURL
argument_list|()
argument_list|,
name|validate
argument_list|)
decl_stmt|;
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|_resolversMap
operator|.
name|get
argument_list|(
name|depMD
operator|.
name|getResolverName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tresolver not found: "
operator|+
name|depMD
operator|.
name|getResolverName
argument_list|()
operator|+
literal|" => trying to use default one for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|resolver
operator|=
name|getDefaultResolver
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tfound ivy file in cache for "
operator|+
name|mrid
operator|+
literal|": "
operator|+
name|ivyFile
argument_list|)
expr_stmt|;
return|return
operator|new
name|DefaultModuleRevision
argument_list|(
name|resolver
argument_list|,
name|depMD
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tresolver not found: "
operator|+
name|depMD
operator|.
name|getResolverName
argument_list|()
operator|+
literal|" => cannot use cached ivy file for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// will try with resolver
name|Message
operator|.
name|debug
argument_list|(
literal|"\tproblem while parsing cached ivy file for: "
operator|+
name|mrid
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tno ivy file in cache for "
operator|+
name|mrid
operator|+
literal|": tried "
operator|+
name|ivyFile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         RETRIEVE
comment|/////////////////////////////////////////////////////////////////////////
comment|/**      * example of destFilePattern :      * - lib/[organisation]/[module]/[artifact]-[revision].[type]      * - lib/[artifact].[type] : flatten with no revision      * moduleId is used with confs and localCacheDirectory to determine      * an ivy report file, used as input for the copy      * If such a file does not exist for any conf (resolve has not been called before ?)      * then an IllegalStateException is thrown and nothing is copied.      */
specifier|public
name|void
name|retrieve
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
specifier|final
name|File
name|cache
parameter_list|,
name|String
name|destFilePattern
parameter_list|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|":: retrieving :: "
operator|+
name|moduleId
argument_list|)
expr_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|"\tconfs: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|confs
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|destFilePattern
operator|=
name|IvyPatternHelper
operator|.
name|substituteVariables
argument_list|(
name|destFilePattern
argument_list|,
name|getVariables
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// find what we must retrieve where
specifier|final
name|Map
name|artifactsToCopy
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Artifact source -> Set (String copyDestAbsolutePath)
specifier|final
name|Map
name|conflictsMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// String copyDestAbsolutePath -> Set (Artifact source)
specifier|final
name|Map
name|conflictsConfMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// String copyDestAbsolutePath -> Set (String conf)
name|XmlReportParser
name|parser
init|=
operator|new
name|XmlReportParser
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|conf
init|=
name|confs
index|[
name|i
index|]
decl_stmt|;
name|Artifact
index|[]
name|artifacts
init|=
name|parser
operator|.
name|getArtifacts
argument_list|(
name|moduleId
argument_list|,
name|conf
argument_list|,
name|cache
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|artifacts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Artifact
name|artifact
init|=
name|artifacts
index|[
name|j
index|]
decl_stmt|;
name|String
name|destFileName
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|destFilePattern
argument_list|,
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|,
name|artifact
operator|.
name|getName
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|,
name|artifact
operator|.
name|getExt
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Set
name|dest
init|=
operator|(
name|Set
operator|)
name|artifactsToCopy
operator|.
name|get
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|dest
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|artifactsToCopy
operator|.
name|put
argument_list|(
name|artifact
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
name|String
name|copyDest
init|=
operator|new
name|File
argument_list|(
name|destFileName
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|dest
operator|.
name|add
argument_list|(
name|copyDest
argument_list|)
expr_stmt|;
name|Set
name|conflicts
init|=
operator|(
name|Set
operator|)
name|conflictsMap
operator|.
name|get
argument_list|(
name|copyDest
argument_list|)
decl_stmt|;
name|Set
name|conflictsConf
init|=
operator|(
name|Set
operator|)
name|conflictsConfMap
operator|.
name|get
argument_list|(
name|copyDest
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicts
operator|==
literal|null
condition|)
block|{
name|conflicts
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|conflictsMap
operator|.
name|put
argument_list|(
name|copyDest
argument_list|,
name|conflicts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conflictsConf
operator|==
literal|null
condition|)
block|{
name|conflictsConf
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|conflictsConfMap
operator|.
name|put
argument_list|(
name|copyDest
argument_list|,
name|conflictsConf
argument_list|)
expr_stmt|;
block|}
name|conflicts
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|conflictsConf
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|// resolve conflicts if any
for|for
control|(
name|Iterator
name|iter
init|=
name|conflictsMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|copyDest
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|artifacts
init|=
operator|(
name|Set
operator|)
name|conflictsMap
operator|.
name|get
argument_list|(
name|copyDest
argument_list|)
decl_stmt|;
name|Set
name|conflictsConfs
init|=
operator|(
name|Set
operator|)
name|conflictsConfMap
operator|.
name|get
argument_list|(
name|copyDest
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifacts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|List
name|artifactsList
init|=
operator|new
name|ArrayList
argument_list|(
name|artifacts
argument_list|)
decl_stmt|;
comment|// conflicts battle is resolved by a sort using a conflict resolving policy comparator
comment|// which consider as greater a winning artifact
name|Collections
operator|.
name|sort
argument_list|(
name|artifactsList
argument_list|,
name|getConflictResolvingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// after the sort, the winning artifact is the greatest one, i.e. the last one
name|Message
operator|.
name|info
argument_list|(
literal|"\tconflict on "
operator|+
name|copyDest
operator|+
literal|" in "
operator|+
name|conflictsConfs
operator|+
literal|": "
operator|+
operator|(
operator|(
name|Artifact
operator|)
name|artifactsList
operator|.
name|get
argument_list|(
name|artifactsList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|" won"
argument_list|)
expr_stmt|;
comment|// we now iterate over the list beginning with the artifact preceding the winner,
comment|// and going backward to the least artifact
for|for
control|(
name|int
name|i
init|=
name|artifactsList
operator|.
name|size
argument_list|()
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Artifact
name|looser
init|=
operator|(
name|Artifact
operator|)
name|artifactsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\tremoving conflict looser artifact: "
operator|+
name|looser
argument_list|)
expr_stmt|;
comment|// for each loser, we remove the pair (loser - copyDest) in the artifactsToCopy map
name|Set
name|dest
init|=
operator|(
name|Set
operator|)
name|artifactsToCopy
operator|.
name|get
argument_list|(
name|looser
argument_list|)
decl_stmt|;
name|dest
operator|.
name|remove
argument_list|(
name|copyDest
argument_list|)
expr_stmt|;
if|if
condition|(
name|dest
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|artifactsToCopy
operator|.
name|remove
argument_list|(
name|looser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// do retrieve
name|int
name|targetsCopied
init|=
literal|0
decl_stmt|;
name|int
name|targetsUpToDate
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|artifactsToCopy
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|archive
init|=
name|getArchiveFileInCache
argument_list|(
name|cache
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|Set
name|dest
init|=
operator|(
name|Set
operator|)
name|artifactsToCopy
operator|.
name|get
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tretrieving "
operator|+
name|archive
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it2
init|=
name|dest
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|it2
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|_checkUpToDate
operator|||
operator|!
name|upToDate
argument_list|(
name|archive
argument_list|,
name|destFile
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\tto "
operator|+
name|destFile
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|archive
argument_list|,
name|destFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|targetsCopied
operator|++
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\tto "
operator|+
name|destFile
operator|+
literal|" [NOT REQUIRED]"
argument_list|)
expr_stmt|;
name|targetsUpToDate
operator|++
expr_stmt|;
block|}
block|}
block|}
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|targetsCopied
operator|+
literal|" artifacts copied, "
operator|+
name|targetsUpToDate
operator|+
literal|" already retrieved"
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tretrieve done ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|IllegalStateException
name|ise
init|=
operator|new
name|IllegalStateException
argument_list|(
literal|"problem during retrieve of "
operator|+
name|moduleId
argument_list|)
decl_stmt|;
name|ise
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ise
throw|;
block|}
block|}
specifier|private
name|boolean
name|upToDate
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|target
parameter_list|)
block|{
if|if
condition|(
operator|!
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|source
operator|.
name|lastModified
argument_list|()
operator|==
name|target
operator|.
name|lastModified
argument_list|()
return|;
block|}
comment|/**      * The returned comparator should consider greater the artifact which      * gains the conflict battle.      * This is used only during retrieve... prefer resolve conflict manager      * to resolve conflicts.      * @return      */
specifier|private
name|Comparator
name|getConflictResolvingPolicy
parameter_list|()
block|{
return|return
operator|new
name|Comparator
argument_list|()
block|{
comment|// younger conflict resolving policy
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Artifact
name|a1
init|=
operator|(
name|Artifact
operator|)
name|o1
decl_stmt|;
name|Artifact
name|a2
init|=
operator|(
name|Artifact
operator|)
name|o2
decl_stmt|;
if|if
condition|(
name|a1
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|after
argument_list|(
name|a2
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
condition|)
block|{
comment|// a1 is after a2<=> a1 is younger than a2<=> a1 wins the conflict battle
return|return
operator|+
literal|1
return|;
block|}
if|else if
condition|(
name|a1
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|before
argument_list|(
name|a2
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
condition|)
block|{
comment|// a1 is before a2<=> a2 is younger than a1<=> a2 wins the conflict battle
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
return|;
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         PUBLISH
comment|/////////////////////////////////////////////////////////////////////////
comment|/**      * delivers a resolved ivy file based upon last resolve call status and      * the given PublishingDependencyRevisionResolver.      * If resolve report file cannot be found in cache, then it throws       * an IllegalStateException (maybe resolve has not been called before ?)      * Moreover, the given PublishingDependencyRevisionResolver is used for each       * dependency to get its published information. This can particularly useful      * when the publish is made for a delivery, and when we wish to deliver each      * dependency which is still in integration. The PublishingDependencyRevisionResolver      * can then do the delivering work for the dependency and return the new (delivered)      * dependency info (with the delivered revision). Note that       * PublishingDependencyRevisionResolver is only called for each<b>direct</b> dependency.      *       * @param status the new status, null to keep the old one      * @throws ParseException      */
specifier|public
name|void
name|deliver
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|revision
parameter_list|,
name|File
name|cache
parameter_list|,
name|String
name|destIvyPattern
parameter_list|,
name|String
name|status
parameter_list|,
name|Date
name|pubdate
parameter_list|,
name|PublishingDependencyRevisionResolver
name|pdrResolver
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|Message
operator|.
name|info
argument_list|(
literal|":: delivering :: "
operator|+
name|mrid
operator|+
literal|" :: "
operator|+
name|revision
operator|+
literal|" :: "
operator|+
name|status
operator|+
literal|" :: "
operator|+
name|pubdate
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tvalidate = "
operator|+
name|validate
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|destIvyPattern
operator|=
name|substitute
argument_list|(
name|destIvyPattern
argument_list|)
expr_stmt|;
comment|// 1) find the resolved module descriptor in cache
name|File
name|ivyFile
init|=
name|getResolvedIvyFileInCache
argument_list|(
name|cache
argument_list|,
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ivyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ivy file not found in cache for "
operator|+
name|mrid
operator|+
literal|": please resolve dependencies before publishing ("
operator|+
name|ivyFile
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|ModuleDescriptor
name|md
init|=
literal|null
decl_stmt|;
name|URL
name|ivyFileURL
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ivyFileURL
operator|=
name|ivyFile
operator|.
name|toURL
argument_list|()
expr_stmt|;
name|md
operator|=
name|XmlModuleDescriptorParser
operator|.
name|parseDescriptor
argument_list|(
name|this
argument_list|,
name|ivyFileURL
argument_list|,
name|validate
argument_list|)
expr_stmt|;
name|md
operator|.
name|setResolvedModuleRevisionId
argument_list|(
operator|new
name|ModuleRevisionId
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|revision
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|setResolvedPublicationDate
argument_list|(
name|pubdate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"malformed url obtained for file "
operator|+
name|ivyFile
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad ivy file in cache for "
operator|+
name|mrid
operator|+
literal|": please clean and resolve again"
argument_list|)
throw|;
block|}
comment|// 2) use pdrResolver to resolve dependencies info
name|Map
name|resolvedDependencies
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (ModuleId -> String revision)
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DependencyResolver
name|resolver
init|=
name|getResolver
argument_list|(
name|dependencies
index|[
name|i
index|]
operator|.
name|getDependencyId
argument_list|()
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|dependency
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
name|dependencies
index|[
name|i
index|]
argument_list|,
operator|new
name|ResolveData
argument_list|(
name|this
argument_list|,
name|cache
argument_list|,
name|pubdate
argument_list|,
literal|null
argument_list|,
name|validate
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependency
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
name|resolver
operator|.
name|getName
argument_list|()
operator|+
literal|": unresolved dependency while publishing: "
operator|+
name|dependencies
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resolvedDependencies
operator|.
name|put
argument_list|(
name|dependencies
index|[
name|i
index|]
operator|.
name|getDependencyId
argument_list|()
argument_list|,
name|pdrResolver
operator|.
name|resolve
argument_list|(
name|md
argument_list|,
name|status
argument_list|,
name|dependency
operator|.
name|getDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 3) copy the source resolved ivy to the destination specified,
comment|//    updating status, revision and dependency revisions obtained by
comment|//    PublishingDependencyRevisionResolver
name|String
name|publishedIvy
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|destIvyPattern
argument_list|,
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|"\tdelivering ivy file to "
operator|+
name|publishedIvy
argument_list|)
expr_stmt|;
try|try
block|{
name|XmlModuleDescriptorUpdater
operator|.
name|update
argument_list|(
name|ivyFileURL
argument_list|,
operator|new
name|File
argument_list|(
name|publishedIvy
argument_list|)
argument_list|,
name|resolvedDependencies
argument_list|,
name|status
argument_list|,
name|revision
argument_list|,
name|pubdate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad ivy file in cache for "
operator|+
name|mrid
operator|+
literal|": please clean and resolve again"
argument_list|)
throw|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tdeliver done ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
block|}
comment|/**      *       * @param pubrevision       * @param resolverName the name of a resolver to use for publication      * @param srcArtifactPattern a pattern to find artifacts to publish with the given resolver      * @param srcIvyPattern a pattern to find ivy file to publish, null if ivy file should not be published      * @return a collection of missing artifacts (those that are not published)      * @throws ParseException      */
specifier|public
name|Collection
name|publish
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|pubrevision
parameter_list|,
name|File
name|cache
parameter_list|,
name|String
name|srcArtifactPattern
parameter_list|,
name|String
name|resolverName
parameter_list|,
name|String
name|srcIvyPattern
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|publish
argument_list|(
name|mrid
argument_list|,
name|pubrevision
argument_list|,
name|cache
argument_list|,
name|srcArtifactPattern
argument_list|,
name|resolverName
argument_list|,
name|srcIvyPattern
argument_list|,
name|validate
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      *       * @param pubrevision       * @param resolverName the name of a resolver to use for publication      * @param srcArtifactPattern a pattern to find artifacts to publish with the given resolver      * @param srcIvyPattern a pattern to find ivy file to publish, null if ivy file should not be published      * @return a collection of missing artifacts (those that are not published)      * @throws ParseException      */
specifier|public
name|Collection
name|publish
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|pubrevision
parameter_list|,
name|File
name|cache
parameter_list|,
name|String
name|srcArtifactPattern
parameter_list|,
name|String
name|resolverName
parameter_list|,
name|String
name|srcIvyPattern
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|Message
operator|.
name|info
argument_list|(
literal|":: publishing :: "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tvalidate = "
operator|+
name|validate
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|srcArtifactPattern
operator|=
name|substitute
argument_list|(
name|srcArtifactPattern
argument_list|)
expr_stmt|;
name|srcIvyPattern
operator|=
name|substitute
argument_list|(
name|srcIvyPattern
argument_list|)
expr_stmt|;
comment|// 1) find the resolved module descriptor in cache
name|File
name|ivyFile
init|=
name|getResolvedIvyFileInCache
argument_list|(
name|cache
argument_list|,
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ivyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ivy file not found in cache for "
operator|+
name|mrid
operator|+
literal|": please resolve dependencies before publishing ("
operator|+
name|ivyFile
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|DependencyResolver
name|resolver
init|=
name|getResolver
argument_list|(
name|resolverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown resolver "
operator|+
name|resolverName
argument_list|)
throw|;
block|}
name|ModuleDescriptor
name|md
init|=
literal|null
decl_stmt|;
name|URL
name|ivyFileURL
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ivyFileURL
operator|=
name|ivyFile
operator|.
name|toURL
argument_list|()
expr_stmt|;
name|md
operator|=
name|XmlModuleDescriptorParser
operator|.
name|parseDescriptor
argument_list|(
name|this
argument_list|,
name|ivyFileURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|md
operator|.
name|setResolvedModuleRevisionId
argument_list|(
operator|new
name|ModuleRevisionId
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|pubrevision
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"malformed url obtained for file "
operator|+
name|ivyFile
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad ivy file in cache for "
operator|+
name|mrid
operator|+
literal|": please clean cache and resolve again"
argument_list|)
throw|;
block|}
comment|// collect all declared artifacts of this module
name|Collection
name|missing
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Set
name|artifactsSet
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|String
index|[]
name|confs
init|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getArtifacts
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|artifacts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|artifactsSet
operator|.
name|add
argument_list|(
name|artifacts
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for each declared published artifact in this descriptor, do:
for|for
control|(
name|Iterator
name|iter
init|=
name|artifactsSet
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//   1) copy the artifact using src pattern and resolver
if|if
condition|(
operator|!
name|publish
argument_list|(
name|artifact
argument_list|,
name|srcArtifactPattern
argument_list|,
name|resolver
argument_list|,
name|overwrite
argument_list|)
condition|)
block|{
name|missing
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|srcIvyPattern
operator|!=
literal|null
condition|)
block|{
name|Artifact
name|artifact
init|=
operator|new
name|MDArtifact
argument_list|(
name|md
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|publish
argument_list|(
name|artifact
argument_list|,
name|srcIvyPattern
argument_list|,
name|resolver
argument_list|,
name|overwrite
argument_list|)
condition|)
block|{
name|missing
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tpublish done ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
return|return
name|missing
return|;
block|}
specifier|private
name|boolean
name|publish
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|String
name|srcArtifactPattern
parameter_list|,
name|DependencyResolver
name|resolver
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|src
init|=
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|srcArtifactPattern
argument_list|,
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|exists
argument_list|()
condition|)
block|{
name|resolver
operator|.
name|publish
argument_list|(
name|artifact
argument_list|,
name|src
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         SORT
comment|/////////////////////////////////////////////////////////////////////////
specifier|public
specifier|static
name|List
name|sortNodes
parameter_list|(
name|Collection
name|nodes
parameter_list|)
block|{
return|return
name|ModuleDescriptorSorter
operator|.
name|sortNodes
argument_list|(
name|nodes
argument_list|)
return|;
block|}
comment|/**      * Sorts the given ModuleDescriptors from the less dependent to the more dependent.      * This sort ensures that a ModuleDescriptor is always found in the list before all       * ModuleDescriptors depending directly on it.      * @param moduleDescriptors a Collection of ModuleDescriptor to sort      * @return a List of sorted ModuleDescriptors      */
specifier|public
specifier|static
name|List
name|sortModuleDescriptors
parameter_list|(
name|Collection
name|moduleDescriptors
parameter_list|)
block|{
return|return
name|ModuleDescriptorSorter
operator|.
name|sortModuleDescriptors
argument_list|(
name|moduleDescriptors
argument_list|)
return|;
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         CACHE
comment|/////////////////////////////////////////////////////////////////////////
specifier|public
name|File
name|getResolvedIvyFileInCache
parameter_list|(
name|File
name|cache
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|cache
argument_list|,
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|_cacheResolvedIvyPattern
argument_list|,
name|mrid
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|,
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|File
name|getIvyFileInCache
parameter_list|(
name|File
name|cache
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|cache
argument_list|,
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|_cacheIvyPattern
argument_list|,
name|mrid
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|,
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|File
name|getArchiveFileInCache
parameter_list|(
name|File
name|cache
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|cache
argument_list|,
name|getArchivePathInCache
argument_list|(
name|artifact
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|File
name|getArchiveFileInCache
parameter_list|(
name|File
name|cache
parameter_list|,
name|String
name|organisation
parameter_list|,
name|String
name|module
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|cache
argument_list|,
name|getArchivePathInCache
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
name|revision
argument_list|,
name|artifact
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getArchivePathInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|getArchivePathInCache
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|,
name|artifact
operator|.
name|getName
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|,
name|artifact
operator|.
name|getExt
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getArchivePathInCache
parameter_list|(
name|String
name|organisation
parameter_list|,
name|String
name|module
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
return|return
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|_cacheArtifactPattern
argument_list|,
name|organisation
argument_list|,
name|module
argument_list|,
name|revision
argument_list|,
name|artifact
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getLocalHostName
parameter_list|()
block|{
try|try
block|{
return|return
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
return|return
literal|"localhost"
return|;
block|}
block|}
specifier|public
name|OrganisationEntry
index|[]
name|listOrganisationEntries
parameter_list|()
block|{
name|List
name|entries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_resolversMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|entries
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
operator|.
name|listOrganisations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|OrganisationEntry
index|[]
operator|)
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|OrganisationEntry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|listOrganisations
parameter_list|()
block|{
name|Collection
name|orgs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_resolversMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|OrganisationEntry
index|[]
name|entries
init|=
name|resolver
operator|.
name|listOrganisations
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|entries
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|orgs
operator|.
name|add
argument_list|(
name|entries
index|[
name|i
index|]
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|orgs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|orgs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|ModuleEntry
index|[]
name|listModuleEntries
parameter_list|(
name|OrganisationEntry
name|org
parameter_list|)
block|{
name|List
name|entries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_resolversMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|entries
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
operator|.
name|listModules
argument_list|(
name|org
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ModuleEntry
index|[]
operator|)
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|ModuleEntry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|listModules
parameter_list|(
name|String
name|org
parameter_list|)
block|{
name|List
name|mods
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_resolversMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ModuleEntry
index|[]
name|entries
init|=
name|resolver
operator|.
name|listModules
argument_list|(
operator|new
name|OrganisationEntry
argument_list|(
name|resolver
argument_list|,
name|org
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|entries
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|mods
operator|.
name|add
argument_list|(
name|entries
index|[
name|i
index|]
operator|.
name|getModule
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|mods
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|mods
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|RevisionEntry
index|[]
name|listRevisionEntries
parameter_list|(
name|ModuleEntry
name|module
parameter_list|)
block|{
name|List
name|entries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_resolversMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|entries
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
operator|.
name|listRevisions
argument_list|(
name|module
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|RevisionEntry
index|[]
operator|)
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|RevisionEntry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|listRevisions
parameter_list|(
name|String
name|org
parameter_list|,
name|String
name|module
parameter_list|)
block|{
name|List
name|revs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_resolversMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|RevisionEntry
index|[]
name|entries
init|=
name|resolver
operator|.
name|listRevisions
argument_list|(
operator|new
name|ModuleEntry
argument_list|(
operator|new
name|OrganisationEntry
argument_list|(
name|resolver
argument_list|,
name|org
argument_list|)
argument_list|,
name|module
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|entries
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|revs
operator|.
name|add
argument_list|(
name|entries
index|[
name|i
index|]
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|revs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|revs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns true if the name should be ignored in listing      * @param name      * @return      */
specifier|public
name|boolean
name|listingIgnore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|_listingIgnore
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Filters the names list by removing all names that should be ignored      * as defined by the listing ignore list      * @param names      */
specifier|public
name|void
name|filterIgnore
parameter_list|(
name|Collection
name|names
parameter_list|)
block|{
name|names
operator|.
name|removeAll
argument_list|(
name|_listingIgnore
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCheckUpToDate
parameter_list|()
block|{
return|return
name|_checkUpToDate
return|;
block|}
specifier|public
name|void
name|setCheckUpToDate
parameter_list|(
name|boolean
name|checkUpToDate
parameter_list|)
block|{
name|_checkUpToDate
operator|=
name|checkUpToDate
expr_stmt|;
block|}
specifier|public
name|String
name|getCacheArtifactPattern
parameter_list|()
block|{
return|return
name|_cacheArtifactPattern
return|;
block|}
specifier|public
name|void
name|setCacheArtifactPattern
parameter_list|(
name|String
name|cacheArtifactPattern
parameter_list|)
block|{
name|_cacheArtifactPattern
operator|=
name|cacheArtifactPattern
expr_stmt|;
block|}
specifier|public
name|String
name|getCacheIvyPattern
parameter_list|()
block|{
return|return
name|_cacheIvyPattern
return|;
block|}
specifier|public
name|void
name|setCacheIvyPattern
parameter_list|(
name|String
name|cacheIvyPattern
parameter_list|)
block|{
name|_cacheIvyPattern
operator|=
name|cacheIvyPattern
expr_stmt|;
block|}
specifier|public
name|boolean
name|doValidate
parameter_list|()
block|{
return|return
name|_validate
return|;
block|}
specifier|public
name|void
name|setValidate
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
name|_validate
operator|=
name|validate
expr_stmt|;
block|}
specifier|public
name|String
name|getVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|_variables
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|val
operator|==
literal|null
condition|?
name|val
else|:
name|substitute
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|ConflictManager
name|getDefaultConflictManager
parameter_list|()
block|{
if|if
condition|(
name|_defaultConflictManager
operator|==
literal|null
condition|)
block|{
name|_defaultConflictManager
operator|=
operator|new
name|LatestConflictManager
argument_list|(
name|getDefaultLatestStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|_defaultConflictManager
return|;
block|}
specifier|public
name|void
name|setDefaultConflictManager
parameter_list|(
name|ConflictManager
name|defaultConflictManager
parameter_list|)
block|{
name|_defaultConflictManager
operator|=
name|defaultConflictManager
expr_stmt|;
block|}
specifier|public
name|LatestStrategy
name|getDefaultLatestStrategy
parameter_list|()
block|{
if|if
condition|(
name|_defaultLatestStrategy
operator|==
literal|null
condition|)
block|{
name|_defaultLatestStrategy
operator|=
operator|new
name|LatestRevisionStrategy
argument_list|()
expr_stmt|;
block|}
return|return
name|_defaultLatestStrategy
return|;
block|}
specifier|public
name|void
name|setDefaultLatestStrategy
parameter_list|(
name|LatestStrategy
name|defaultLatestStrategy
parameter_list|)
block|{
name|_defaultLatestStrategy
operator|=
name|defaultLatestStrategy
expr_stmt|;
block|}
specifier|private
name|EventListenerList
name|_listeners
init|=
operator|new
name|EventListenerList
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
block|{
name|_listeners
operator|.
name|add
argument_list|(
name|TransferListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
block|{
name|_listeners
operator|.
name|remove
argument_list|(
name|TransferListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|_listeners
operator|.
name|getListeners
argument_list|(
name|TransferListener
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|listener
argument_list|)
return|;
block|}
specifier|protected
name|void
name|fireTransferEvent
parameter_list|(
name|TransferEvent
name|evt
parameter_list|)
block|{
name|Object
index|[]
name|listeners
init|=
name|_listeners
operator|.
name|getListenerList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|listeners
operator|.
name|length
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|-=
literal|2
control|)
block|{
if|if
condition|(
name|listeners
index|[
name|i
index|]
operator|==
name|TransferListener
operator|.
name|class
condition|)
block|{
operator|(
operator|(
name|TransferListener
operator|)
name|listeners
index|[
name|i
operator|+
literal|1
index|]
operator|)
operator|.
name|transferProgress
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|transferProgress
parameter_list|(
name|TransferEvent
name|evt
parameter_list|)
block|{
name|fireTransferEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseRemoteConfig
parameter_list|()
block|{
return|return
name|_useRemoteConfig
return|;
block|}
specifier|public
name|void
name|setUseRemoteConfig
parameter_list|(
name|boolean
name|useRemoteConfig
parameter_list|)
block|{
name|_useRemoteConfig
operator|=
name|useRemoteConfig
expr_stmt|;
block|}
specifier|public
name|DependencyResolver
name|getDictatorResolver
parameter_list|()
block|{
return|return
name|_dictatorResolver
return|;
block|}
specifier|public
name|void
name|setDictatorResolver
parameter_list|(
name|DependencyResolver
name|dictatorResolver
parameter_list|)
block|{
name|_dictatorResolver
operator|=
name|dictatorResolver
expr_stmt|;
block|}
block|}
end_class

end_unit

