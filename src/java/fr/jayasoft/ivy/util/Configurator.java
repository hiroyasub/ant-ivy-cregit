begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * Ant 1.6.1 like Configurator  *   * This configurator is used to configure elements (initialised with setRoot)  * using the behaviour defined by ant for its tasks.  *   * Example (based on<a href="http://ant.apache.org/manual/develop.html#writingowntask">Ant Example</a>) :  * Configurator conf = new Configurator();  * conf.typeDef("buildpath", "Sample$BuildPath");  * conf.typeDef("xinterface", "Sample$XInterface");  *   * Sample.MyFileSelector mfs = new Sample.MyFileSelector();  * conf.setRoot(mfs);  * conf.startCreateChild("buildpath");  * conf.setAttribute("path", ".");  * conf.setAttribute("url", "abc");  * conf.startCreateChild("xinterface");  * conf.setAttribute("count", "4");  * conf.endCreateChild(); // xinterface  * conf.endCreateChild(); // buildpath  *   * @author x.hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|Configurator
block|{
specifier|private
specifier|static
class|class
name|ObjectDescriptor
block|{
specifier|private
name|Object
name|_obj
decl_stmt|;
specifier|private
name|String
name|_objName
decl_stmt|;
specifier|private
name|Map
name|_createMethods
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|_addMethods
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|_addConfiguredMethods
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|_setMethods
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|_typeAddMethods
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|_typeAddConfiguredMethods
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|ObjectDescriptor
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|objName
parameter_list|)
block|{
name|_obj
operator|=
name|object
expr_stmt|;
name|_objName
operator|=
name|objName
expr_stmt|;
name|Method
index|[]
name|methods
init|=
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Method
name|m
init|=
name|methods
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"create"
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
operator|!
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|"create"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|addCreateMethod
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"addConfigured"
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|"addConfigured"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|addAddConfiguredMethod
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|addAddConfiguredMethod
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"add"
argument_list|)
operator|&&
operator|!
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"addConfigured"
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|"add"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|addAddMethod
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|addAddMethod
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|"set"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|addSetMethod
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|addCreateMethod
parameter_list|(
name|String
name|name
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|_createMethods
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAddMethod
parameter_list|(
name|String
name|name
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|_addMethods
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAddConfiguredMethod
parameter_list|(
name|String
name|name
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|_addConfiguredMethods
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAddMethod
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|_typeAddMethods
operator|.
name|put
argument_list|(
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAddConfiguredMethod
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|_typeAddConfiguredMethods
operator|.
name|put
argument_list|(
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSetMethod
parameter_list|(
name|String
name|name
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|_setMethods
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|_obj
return|;
block|}
specifier|public
name|Method
name|getCreateMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Method
operator|)
name|_createMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Method
name|getAddMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Method
operator|)
name|_addMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Method
name|getAddConfiguredMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Method
operator|)
name|_addConfiguredMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Method
name|getAddMethod
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
return|return
name|getTypeMatchingMethod
argument_list|(
name|type
argument_list|,
name|_typeAddMethods
argument_list|)
return|;
block|}
specifier|public
name|Method
name|getAddConfiguredMethod
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
return|return
name|getTypeMatchingMethod
argument_list|(
name|type
argument_list|,
name|_typeAddConfiguredMethods
argument_list|)
return|;
block|}
specifier|private
name|Method
name|getTypeMatchingMethod
parameter_list|(
name|Class
name|type
parameter_list|,
name|Map
name|typeMethods
parameter_list|)
block|{
name|Method
name|m
init|=
operator|(
name|Method
operator|)
name|typeMethods
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|typeMethods
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class
name|clss
init|=
operator|(
name|Class
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|clss
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
operator|(
name|Method
operator|)
name|typeMethods
operator|.
name|get
argument_list|(
name|clss
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Method
name|getSetMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Method
operator|)
name|_setMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|String
name|getObjectName
parameter_list|()
block|{
return|return
name|_objName
return|;
block|}
block|}
specifier|private
name|Map
name|_typedefs
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// stack in which the top is current configured object descriptor
specifier|private
name|Stack
name|_objectStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
name|TRUE_VALUES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"true"
block|,
literal|"yes"
block|,
literal|"on"
block|}
argument_list|)
decl_stmt|;
specifier|public
name|void
name|typeDef
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|typeDef
argument_list|(
name|name
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|typeDef
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
name|_typedefs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRoot
parameter_list|(
name|Object
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|_objectStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setCurrent
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|_objectStack
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setCurrent
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|_objectStack
operator|.
name|push
argument_list|(
operator|new
name|ObjectDescriptor
argument_list|(
name|object
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|startCreateChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|_objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"set root before creating child"
argument_list|)
throw|;
block|}
name|ObjectDescriptor
name|parentOD
init|=
operator|(
name|ObjectDescriptor
operator|)
name|_objectStack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|Object
name|parent
init|=
name|parentOD
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Object
name|child
init|=
literal|null
decl_stmt|;
name|Class
name|childClass
init|=
operator|(
name|Class
operator|)
name|_typedefs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Method
name|addChild
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|childClass
operator|!=
literal|null
condition|)
block|{
name|addChild
operator|=
name|parentOD
operator|.
name|getAddMethod
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|addChild
operator|!=
literal|null
condition|)
block|{
name|child
operator|=
name|childClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|addChild
operator|.
name|invoke
argument_list|(
name|parent
argument_list|,
operator|new
name|Object
index|[]
block|{
name|child
block|}
argument_list|)
expr_stmt|;
name|setCurrent
argument_list|(
name|child
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
name|addChild
operator|=
name|parentOD
operator|.
name|getAddConfiguredMethod
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|addChild
operator|!=
literal|null
condition|)
block|{
name|child
operator|=
name|childClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|setCurrent
argument_list|(
name|child
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
block|}
else|else
block|{
name|addChild
operator|=
name|parentOD
operator|.
name|getCreateMethod
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|addChild
operator|!=
literal|null
condition|)
block|{
name|child
operator|=
name|addChild
operator|.
name|invoke
argument_list|(
name|parent
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|setCurrent
argument_list|(
name|child
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
name|addChild
operator|=
name|parentOD
operator|.
name|getAddMethod
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|addChild
operator|!=
literal|null
condition|)
block|{
name|childClass
operator|=
name|addChild
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|child
operator|=
name|childClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|addChild
operator|.
name|invoke
argument_list|(
name|parent
argument_list|,
operator|new
name|Object
index|[]
block|{
name|child
block|}
argument_list|)
expr_stmt|;
name|setCurrent
argument_list|(
name|child
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
name|addChild
operator|=
name|parentOD
operator|.
name|getAddConfiguredMethod
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|addChild
operator|!=
literal|null
condition|)
block|{
name|childClass
operator|=
name|addChild
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|child
operator|=
name|childClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|setCurrent
argument_list|(
name|child
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no default constructor on "
operator|+
name|childClass
operator|+
literal|" for adding "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|parent
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad method found for "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|parent
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no appropriate method found for adding "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|parent
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|_objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"set root before setting attribute"
argument_list|)
throw|;
block|}
name|ObjectDescriptor
name|od
init|=
operator|(
name|ObjectDescriptor
operator|)
name|_objectStack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|Method
name|m
init|=
name|od
operator|.
name|getSetMethod
argument_list|(
name|attributeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no set method found for "
operator|+
name|attributeName
operator|+
literal|" on "
operator|+
name|od
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|Object
name|convertedValue
init|=
literal|null
decl_stmt|;
name|Class
name|paramClass
init|=
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
if|if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|value
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|||
name|paramClass
operator|.
name|equals
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|TRUE_VALUES
operator|.
name|contains
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Character
operator|.
name|class
argument_list|)
operator|||
name|paramClass
operator|.
name|equals
argument_list|(
name|char
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
operator|new
name|Character
argument_list|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
else|:
literal|' '
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Short
operator|.
name|class
argument_list|)
operator|||
name|paramClass
operator|.
name|equals
argument_list|(
name|short
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|Short
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|||
name|paramClass
operator|.
name|equals
argument_list|(
name|int
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|||
name|paramClass
operator|.
name|equals
argument_list|(
name|long
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Class
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|convertedValue
operator|=
name|paramClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"impossible to convert "
operator|+
name|value
operator|+
literal|" to "
operator|+
name|paramClass
operator|+
literal|" for setting "
operator|+
name|attributeName
operator|+
literal|" on "
operator|+
name|od
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
try|try
block|{
name|m
operator|.
name|invoke
argument_list|(
name|od
operator|.
name|getObject
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
name|convertedValue
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"impossible to set "
operator|+
name|attributeName
operator|+
literal|" to "
operator|+
name|convertedValue
operator|+
literal|" on "
operator|+
name|od
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|_objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"set root before adding text"
argument_list|)
throw|;
block|}
name|ObjectDescriptor
name|od
init|=
operator|(
name|ObjectDescriptor
operator|)
name|_objectStack
operator|.
name|peek
argument_list|()
decl_stmt|;
try|try
block|{
name|od
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"addText"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
operator|.
name|invoke
argument_list|(
name|od
operator|.
name|getObject
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
name|text
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"impossible to add text on "
operator|+
name|od
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
block|}
comment|/**      *       * @return the finished child       */
specifier|public
name|Object
name|endCreateChild
parameter_list|()
block|{
if|if
condition|(
name|_objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"set root before ending child"
argument_list|)
throw|;
block|}
name|ObjectDescriptor
name|od
init|=
operator|(
name|ObjectDescriptor
operator|)
name|_objectStack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|_objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|_objectStack
operator|.
name|push
argument_list|(
name|od
argument_list|)
expr_stmt|;
comment|// back to previous state
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cannot end root"
argument_list|)
throw|;
block|}
name|ObjectDescriptor
name|parentOD
init|=
operator|(
name|ObjectDescriptor
operator|)
name|_objectStack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|od
operator|.
name|getObjectName
argument_list|()
decl_stmt|;
name|Class
name|childClass
init|=
operator|(
name|Class
operator|)
name|_typedefs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Method
name|m
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|childClass
operator|!=
literal|null
condition|)
block|{
name|m
operator|=
name|parentOD
operator|.
name|getAddConfiguredMethod
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
name|parentOD
operator|.
name|getAddConfiguredMethod
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|invoke
argument_list|(
name|parentOD
operator|.
name|getObject
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
name|od
operator|.
name|getObject
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|od
operator|.
name|getObject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"impossible to add configured child for "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|parentOD
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
block|}
specifier|public
name|Object
name|getCurrent
parameter_list|()
block|{
return|return
name|_objectStack
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
operator|(
name|ObjectDescriptor
operator|)
name|_objectStack
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|getObject
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|_objectStack
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

