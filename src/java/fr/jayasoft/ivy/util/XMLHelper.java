begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|url
operator|.
name|URLHandlerRegistry
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|XMLHelper
block|{
specifier|private
specifier|static
name|SAXParserFactory
name|_validatingFactory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|SAXParserFactory
name|_factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|String
name|JAXP_SCHEMA_LANGUAGE
init|=
literal|"http://java.sun.com/xml/jaxp/properties/schemaLanguage"
decl_stmt|;
specifier|static
specifier|final
name|String
name|JAXP_SCHEMA_SOURCE
init|=
literal|"http://java.sun.com/xml/jaxp/properties/schemaSource"
decl_stmt|;
specifier|static
specifier|final
name|String
name|W3C_XML_SCHEMA
init|=
literal|"http://www.w3.org/2001/XMLSchema"
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|_canUseSchemaValidation
init|=
literal|true
decl_stmt|;
static|static
block|{
name|_validatingFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|_validatingFactory
operator|.
name|setValidating
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|SAXParser
name|newSAXParser
parameter_list|(
name|URL
name|schema
parameter_list|,
name|InputStream
name|schemaStream
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
block|{
if|if
condition|(
operator|!
name|_canUseSchemaValidation
operator|||
name|schema
operator|==
literal|null
condition|)
block|{
return|return
name|_factory
operator|.
name|newSAXParser
argument_list|()
return|;
block|}
try|try
block|{
name|SAXParser
name|parser
init|=
name|_validatingFactory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|setProperty
argument_list|(
name|JAXP_SCHEMA_LANGUAGE
argument_list|,
name|W3C_XML_SCHEMA
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setProperty
argument_list|(
name|JAXP_SCHEMA_SOURCE
argument_list|,
name|schemaStream
argument_list|)
expr_stmt|;
return|return
name|parser
return|;
block|}
catch|catch
parameter_list|(
name|SAXNotRecognizedException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"WARNING: problem while setting JAXP validating property on SAXParser... XML validation will not be done: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|_canUseSchemaValidation
operator|=
literal|false
expr_stmt|;
return|return
name|_factory
operator|.
name|newSAXParser
argument_list|()
return|;
block|}
block|}
comment|// IMPORTANT: validation errors are only notified to the given handler, and
comment|// do not cause exception
comment|// implement warning error and fatalError methods in handler to be informed
comment|// of validation errors
specifier|public
specifier|static
name|void
name|parse
parameter_list|(
name|URL
name|xmlURL
parameter_list|,
name|URL
name|schema
parameter_list|,
name|DefaultHandler
name|handler
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
block|{
name|parse
argument_list|(
name|xmlURL
argument_list|,
name|schema
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|parse
parameter_list|(
name|URL
name|xmlURL
parameter_list|,
name|URL
name|schema
parameter_list|,
name|DefaultHandler
name|handler
parameter_list|,
name|LexicalHandler
name|lHandler
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
block|{
name|InputStream
name|xmlStream
init|=
literal|null
decl_stmt|;
name|InputStream
name|schemaStream
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|schemaStream
operator|=
name|URLHandlerRegistry
operator|.
name|getDefault
argument_list|()
operator|.
name|openStream
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
name|xmlStream
operator|=
name|URLHandlerRegistry
operator|.
name|getDefault
argument_list|()
operator|.
name|openStream
argument_list|(
name|xmlURL
argument_list|)
expr_stmt|;
name|SAXParser
name|parser
init|=
name|XMLHelper
operator|.
name|newSAXParser
argument_list|(
name|schema
argument_list|,
name|schemaStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|lHandler
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|parser
operator|.
name|setProperty
argument_list|(
literal|"http://xml.org/sax/properties/lexical-handler"
argument_list|,
name|lHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"WARNING: problem while setting the lexical handler property on SAXParser: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// continue without the lexical handler
block|}
block|}
name|parser
operator|.
name|parse
argument_list|(
name|xmlStream
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|xmlStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|xmlStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|schemaStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|schemaStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|boolean
name|canUseSchemaValidation
parameter_list|()
block|{
return|return
name|_canUseSchemaValidation
return|;
block|}
block|}
end_class

end_unit

