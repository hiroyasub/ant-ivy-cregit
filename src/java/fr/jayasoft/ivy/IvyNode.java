begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|filter
operator|.
name|FilterHelper
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|matcher
operator|.
name|MatcherHelper
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|IvyNode
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|FALLBACK_CONF_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.+)\\((.*)\\)"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|EvictionData
block|{
specifier|private
name|IvyNode
name|_node
decl_stmt|;
comment|// can be null in case of transitive eviction
specifier|private
name|ConflictManager
name|_conflictManager
decl_stmt|;
comment|// can be null in case of transitive eviction
specifier|private
name|Collection
name|_selected
decl_stmt|;
comment|// can be null in case of transitive eviction
specifier|private
name|String
name|_rootModuleConf
decl_stmt|;
specifier|public
name|EvictionData
parameter_list|(
name|String
name|rootModuleConf
parameter_list|,
name|IvyNode
name|node
parameter_list|,
name|ConflictManager
name|conflictManager
parameter_list|,
name|Collection
name|selected
parameter_list|)
block|{
name|_rootModuleConf
operator|=
name|rootModuleConf
expr_stmt|;
name|_node
operator|=
name|node
expr_stmt|;
name|_conflictManager
operator|=
name|conflictManager
expr_stmt|;
name|_selected
operator|=
name|selected
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|_selected
operator|!=
literal|null
condition|)
block|{
return|return
name|_selected
operator|+
literal|" in "
operator|+
name|_node
operator|+
literal|" ("
operator|+
name|_conflictManager
operator|+
literal|") ["
operator|+
name|_rootModuleConf
operator|+
literal|"]"
return|;
block|}
else|else
block|{
return|return
literal|"transitively ["
operator|+
name|_rootModuleConf
operator|+
literal|"]"
return|;
block|}
block|}
specifier|public
name|ConflictManager
name|getConflictManager
parameter_list|()
block|{
return|return
name|_conflictManager
return|;
block|}
specifier|public
name|IvyNode
name|getNode
parameter_list|()
block|{
return|return
name|_node
return|;
block|}
specifier|public
name|Collection
name|getSelected
parameter_list|()
block|{
return|return
name|_selected
return|;
block|}
specifier|public
name|String
name|getRootModuleConf
parameter_list|()
block|{
return|return
name|_rootModuleConf
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Caller
block|{
specifier|private
name|ModuleDescriptor
name|_md
decl_stmt|;
specifier|private
name|ModuleRevisionId
name|_mrid
decl_stmt|;
specifier|private
name|Map
name|_confs
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String callerConf -> String[] dependencyConfs)
specifier|private
name|ModuleRevisionId
name|_askedDependencyId
decl_stmt|;
specifier|public
name|Caller
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|,
name|ModuleRevisionId
name|askedDependencyId
parameter_list|)
block|{
name|_md
operator|=
name|md
expr_stmt|;
name|_mrid
operator|=
name|mrid
expr_stmt|;
name|_askedDependencyId
operator|=
name|askedDependencyId
expr_stmt|;
block|}
specifier|public
name|void
name|addConfiguration
parameter_list|(
name|String
name|callerConf
parameter_list|,
name|String
index|[]
name|dependencyConfs
parameter_list|)
block|{
name|String
index|[]
name|prevDepConfs
init|=
operator|(
name|String
index|[]
operator|)
name|_confs
operator|.
name|get
argument_list|(
name|callerConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevDepConfs
operator|!=
literal|null
condition|)
block|{
name|Set
name|newDepConfs
init|=
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|prevDepConfs
argument_list|)
argument_list|)
decl_stmt|;
name|newDepConfs
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dependencyConfs
argument_list|)
argument_list|)
expr_stmt|;
name|_confs
operator|.
name|put
argument_list|(
name|callerConf
argument_list|,
operator|(
name|String
index|[]
operator|)
name|newDepConfs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|newDepConfs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_confs
operator|.
name|put
argument_list|(
name|callerConf
argument_list|,
name|dependencyConfs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
index|[]
name|getCallerConfigurations
parameter_list|()
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|_confs
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|_confs
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|ModuleRevisionId
name|getModuleRevisionId
parameter_list|()
block|{
return|return
name|_mrid
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Caller
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Caller
name|other
init|=
operator|(
name|Caller
operator|)
name|obj
decl_stmt|;
return|return
name|other
operator|.
name|_confs
operator|.
name|equals
argument_list|(
name|_confs
argument_list|)
operator|&&
name|_mrid
operator|.
name|equals
argument_list|(
name|other
operator|.
name|_mrid
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|31
decl_stmt|;
name|hash
operator|=
name|hash
operator|*
literal|13
operator|+
name|_confs
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hash
operator|=
name|hash
operator|*
literal|13
operator|+
name|_mrid
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|hash
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|_mrid
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|ModuleRevisionId
name|getAskedDependencyId
parameter_list|()
block|{
return|return
name|_askedDependencyId
return|;
block|}
specifier|public
name|ModuleDescriptor
name|getModuleDescriptor
parameter_list|()
block|{
return|return
name|_md
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|NodeConf
block|{
specifier|private
name|IvyNode
name|_node
decl_stmt|;
specifier|private
name|String
name|_conf
decl_stmt|;
specifier|public
name|NodeConf
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
name|_node
operator|=
name|node
expr_stmt|;
name|_conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|getConf
parameter_list|()
block|{
return|return
name|_conf
return|;
block|}
specifier|public
specifier|final
name|IvyNode
name|getNode
parameter_list|()
block|{
return|return
name|_node
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|NodeConf
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getNode
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|NodeConf
operator|)
name|obj
operator|)
operator|.
name|getNode
argument_list|()
argument_list|)
operator|&&
name|getConf
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|NodeConf
operator|)
name|obj
operator|)
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|33
decl_stmt|;
name|hash
operator|+=
name|getNode
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|*
literal|17
expr_stmt|;
name|hash
operator|+=
name|getConf
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|*
literal|17
expr_stmt|;
return|return
name|hash
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ModuleIdConf
block|{
specifier|private
name|ModuleId
name|_moduleId
decl_stmt|;
specifier|private
name|String
name|_conf
decl_stmt|;
specifier|public
name|ModuleIdConf
parameter_list|(
name|ModuleId
name|mid
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
name|_moduleId
operator|=
name|mid
expr_stmt|;
name|_conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|getConf
parameter_list|()
block|{
return|return
name|_conf
return|;
block|}
specifier|public
specifier|final
name|ModuleId
name|getModuleId
parameter_list|()
block|{
return|return
name|_moduleId
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ModuleIdConf
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getModuleId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ModuleIdConf
operator|)
name|obj
operator|)
operator|.
name|getModuleId
argument_list|()
argument_list|)
operator|&&
name|getConf
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ModuleIdConf
operator|)
name|obj
operator|)
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|33
decl_stmt|;
name|hash
operator|+=
name|getModuleId
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|*
literal|17
expr_stmt|;
name|hash
operator|+=
name|getConf
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|*
literal|17
expr_stmt|;
return|return
name|hash
return|;
block|}
block|}
specifier|private
name|ModuleRevisionId
name|_id
decl_stmt|;
comment|// id as requested, i.e. may be with latest rev
comment|/**       * Represents the current parent of the node during ivy visit      * of dependency graph.      * Use callers on Dependency to know all the callers      * of a dependency      */
specifier|private
name|IvyNode
name|_parent
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_parentConf
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_rootModuleConf
decl_stmt|;
specifier|private
name|Map
name|_selectedDeps
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (ModuleIdConf -> Set(Node)) // map indicating for each dependency which revision has been selected
specifier|private
name|Map
name|_evictedDeps
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (ModuleIdConf -> Set(Node)) // map indicating for each dependency which revision has been evicted
specifier|private
name|Map
name|_evicted
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (root module conf -> EvictionData) // indicates if the node is evicted in each root module conf
comment|// Map (String rootModuleConf -> Map (ModuleRevisionId -> Caller)): key in second map is used to easily get a caller by its mrid
specifier|private
name|Map
name|_callersByRootConf
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String rootConfName -> Set(String confName))
comment|// used to know which configurations of the dependency are required by root
comment|// module configuration
specifier|private
name|Map
name|_rootModuleConfs
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String rootModuleConf -> Set(DependencyArtifactDescriptor))
specifier|private
name|Map
name|_dependencyArtifactsIncludes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// shared data
specifier|private
name|ResolveData
name|_data
decl_stmt|;
specifier|private
name|Collection
name|_confsToFetch
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
name|Collection
name|_fetchedConfigurations
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|// set only when node has been built from DependencyDescriptor
specifier|private
name|DependencyDescriptor
name|_dd
decl_stmt|;
comment|// Set when data has been loaded only
specifier|private
name|ModuleDescriptor
name|_md
decl_stmt|;
specifier|private
name|ResolvedModuleRevision
name|_module
decl_stmt|;
specifier|private
name|Exception
name|_problem
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|_downloaded
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|_searched
init|=
literal|false
decl_stmt|;
specifier|private
name|Map
name|_requiredConfs
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (NodeConf in -> Set(String conf))
specifier|private
name|boolean
name|_isRoot
init|=
literal|false
decl_stmt|;
specifier|private
name|Collection
name|_allCallers
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|_isCircular
init|=
literal|false
decl_stmt|;
specifier|private
name|Collection
name|_loadedRootModuleConfs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|public
name|IvyNode
parameter_list|(
name|ResolveData
name|data
parameter_list|,
name|DependencyDescriptor
name|dd
parameter_list|)
block|{
name|_id
operator|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
expr_stmt|;
name|_dd
operator|=
name|dd
expr_stmt|;
name|init
argument_list|(
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IvyNode
parameter_list|(
name|ResolveData
name|data
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|data
argument_list|,
name|md
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IvyNode
parameter_list|(
name|ResolveData
name|data
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|conf
parameter_list|,
name|boolean
name|isRoot
parameter_list|)
block|{
name|_id
operator|=
name|md
operator|.
name|getModuleRevisionId
argument_list|()
expr_stmt|;
name|_md
operator|=
name|md
expr_stmt|;
name|_confsToFetch
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|_isRoot
operator|=
literal|true
expr_stmt|;
comment|// we do not register nodes created from ModuleDescriptor, cause they are
comment|// the root of resolve
name|init
argument_list|(
name|data
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|ResolveData
name|data
parameter_list|,
name|boolean
name|register
parameter_list|)
block|{
name|_data
operator|=
name|data
expr_stmt|;
if|if
condition|(
name|register
condition|)
block|{
name|_data
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ConflictManager
name|getConflictManager
parameter_list|(
name|ModuleId
name|mid
parameter_list|)
block|{
if|if
condition|(
name|_md
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"impossible to get conflict manager when data has not been loaded"
argument_list|)
throw|;
block|}
name|ConflictManager
name|cm
init|=
name|_md
operator|.
name|getConflictManager
argument_list|(
name|mid
argument_list|)
decl_stmt|;
return|return
name|cm
operator|==
literal|null
condition|?
name|_data
operator|.
name|getIvy
argument_list|()
operator|.
name|getDefaultConflictManager
argument_list|()
else|:
name|cm
return|;
block|}
specifier|public
name|Collection
name|getResolvedNodes
parameter_list|(
name|ModuleId
name|mid
parameter_list|,
name|String
name|rootModuleConf
parameter_list|)
block|{
name|Collection
name|resolved
init|=
operator|(
name|Collection
operator|)
name|_selectedDeps
operator|.
name|get
argument_list|(
operator|new
name|ModuleIdConf
argument_list|(
name|mid
argument_list|,
name|rootModuleConf
argument_list|)
argument_list|)
decl_stmt|;
name|Set
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolved
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|resolved
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|node
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRealNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Collection
name|getResolvedRevisions
parameter_list|(
name|ModuleId
name|mid
parameter_list|,
name|String
name|rootModuleConf
parameter_list|)
block|{
name|Collection
name|resolved
init|=
operator|(
name|Collection
operator|)
name|_selectedDeps
operator|.
name|get
argument_list|(
operator|new
name|ModuleIdConf
argument_list|(
name|mid
argument_list|,
name|rootModuleConf
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolved
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|()
return|;
block|}
else|else
block|{
name|Collection
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|resolved
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|node
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRealNode
argument_list|()
operator|.
name|getResolvedId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|void
name|setResolvedNodes
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
name|rootModuleConf
parameter_list|,
name|Collection
name|resolved
parameter_list|)
block|{
name|_selectedDeps
operator|.
name|put
argument_list|(
operator|new
name|ModuleIdConf
argument_list|(
name|moduleId
argument_list|,
name|rootModuleConf
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|(
name|resolved
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
name|getEvictedNodes
parameter_list|(
name|ModuleId
name|mid
parameter_list|,
name|String
name|rootModuleConf
parameter_list|)
block|{
name|Collection
name|resolved
init|=
operator|(
name|Collection
operator|)
name|_evictedDeps
operator|.
name|get
argument_list|(
operator|new
name|ModuleIdConf
argument_list|(
name|mid
argument_list|,
name|rootModuleConf
argument_list|)
argument_list|)
decl_stmt|;
name|Set
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolved
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|resolved
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|node
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRealNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Collection
name|getEvictedRevisions
parameter_list|(
name|ModuleId
name|mid
parameter_list|,
name|String
name|rootModuleConf
parameter_list|)
block|{
name|Collection
name|resolved
init|=
operator|(
name|Collection
operator|)
name|_evictedDeps
operator|.
name|get
argument_list|(
operator|new
name|ModuleIdConf
argument_list|(
name|mid
argument_list|,
name|rootModuleConf
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolved
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|()
return|;
block|}
else|else
block|{
name|Collection
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|resolved
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|node
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|node
operator|.
name|getRealNode
argument_list|()
operator|.
name|getResolvedId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|void
name|setEvictedNodes
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
name|rootModuleConf
parameter_list|,
name|Collection
name|evicted
parameter_list|)
block|{
name|_evictedDeps
operator|.
name|put
argument_list|(
operator|new
name|ModuleIdConf
argument_list|(
name|moduleId
argument_list|,
name|rootModuleConf
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|(
name|evicted
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEvicted
parameter_list|(
name|String
name|rootModuleConf
parameter_list|)
block|{
name|cleanEvicted
argument_list|()
expr_stmt|;
return|return
name|_evicted
operator|.
name|containsKey
argument_list|(
name|rootModuleConf
argument_list|)
return|;
block|}
specifier|private
name|void
name|cleanEvicted
parameter_list|()
block|{
comment|// check if it was evicted by a node that we are now the real node for
for|for
control|(
name|Iterator
name|iter
init|=
name|_evicted
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|rootModuleConf
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|EvictionData
name|ed
init|=
operator|(
name|EvictionData
operator|)
name|_evicted
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
name|Collection
name|sel
init|=
name|ed
operator|.
name|getSelected
argument_list|()
decl_stmt|;
if|if
condition|(
name|sel
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|iterator
init|=
name|sel
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|n
init|=
operator|(
name|IvyNode
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getRealNode
argument_list|()
operator|.
name|equals
argument_list|(
name|this
argument_list|)
condition|)
block|{
comment|// yes, we are the real node for a selected one !
comment|// we are no more evicted in this conf !
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|markSelected
parameter_list|(
name|String
name|rootModuleConf
parameter_list|)
block|{
name|_evicted
operator|.
name|remove
argument_list|(
name|rootModuleConf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|markEvicted
parameter_list|(
name|String
name|rootModuleConf
parameter_list|,
name|IvyNode
name|node
parameter_list|,
name|ConflictManager
name|conflictManager
parameter_list|,
name|Collection
name|resolved
parameter_list|)
block|{
name|EvictionData
name|evictionData
init|=
operator|new
name|EvictionData
argument_list|(
name|rootModuleConf
argument_list|,
name|node
argument_list|,
name|conflictManager
argument_list|,
name|resolved
argument_list|)
decl_stmt|;
name|markEvicted
argument_list|(
name|evictionData
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|markEvicted
parameter_list|(
name|EvictionData
name|evictionData
parameter_list|)
block|{
name|_evicted
operator|.
name|put
argument_list|(
name|evictionData
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|evictionData
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|_rootModuleConfs
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|evictionData
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
condition|)
block|{
name|_rootModuleConfs
operator|.
name|put
argument_list|(
name|evictionData
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// bug 105: update selected data with evicted one
if|if
condition|(
name|evictionData
operator|.
name|getSelected
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|evictionData
operator|.
name|getSelected
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|selected
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|selected
operator|.
name|updateDataFrom
argument_list|(
name|this
argument_list|,
name|evictionData
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateDataFrom
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|String
name|rootModuleConf
parameter_list|)
block|{
comment|// update callers
name|Map
name|nodecallers
init|=
operator|(
name|Map
operator|)
name|node
operator|.
name|_callersByRootConf
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodecallers
operator|!=
literal|null
condition|)
block|{
name|Map
name|thiscallers
init|=
operator|(
name|Map
operator|)
name|_callersByRootConf
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|thiscallers
operator|==
literal|null
condition|)
block|{
name|thiscallers
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|_callersByRootConf
operator|.
name|put
argument_list|(
name|rootModuleConf
argument_list|,
name|thiscallers
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|nodecallers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Caller
name|caller
init|=
operator|(
name|Caller
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|thiscallers
operator|.
name|containsKey
argument_list|(
name|caller
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
condition|)
block|{
name|thiscallers
operator|.
name|put
argument_list|(
name|caller
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|caller
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// update requiredConfs
name|updateMapOfSet
argument_list|(
name|node
operator|.
name|_requiredConfs
argument_list|,
name|_requiredConfs
argument_list|)
expr_stmt|;
comment|// update rootModuleConfs
name|updateMapOfSetForKey
argument_list|(
name|node
operator|.
name|_rootModuleConfs
argument_list|,
name|_rootModuleConfs
argument_list|,
name|rootModuleConf
argument_list|)
expr_stmt|;
comment|// update dependencyArtifactsIncludes
name|updateMapOfSetForKey
argument_list|(
name|node
operator|.
name|_dependencyArtifactsIncludes
argument_list|,
name|_dependencyArtifactsIncludes
argument_list|,
name|rootModuleConf
argument_list|)
expr_stmt|;
comment|// update confsToFetch
name|updateConfsToFetch
argument_list|(
name|node
operator|.
name|_fetchedConfigurations
argument_list|)
expr_stmt|;
name|updateConfsToFetch
argument_list|(
name|node
operator|.
name|_confsToFetch
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateMapOfSet
parameter_list|(
name|Map
name|from
parameter_list|,
name|Map
name|to
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|from
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|updateMapOfSetForKey
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateMapOfSetForKey
parameter_list|(
name|Map
name|from
parameter_list|,
name|Map
name|to
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
name|Set
name|set
init|=
operator|(
name|Set
operator|)
name|from
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
name|Set
name|toupdate
init|=
operator|(
name|Set
operator|)
name|to
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|toupdate
operator|!=
literal|null
condition|)
block|{
name|toupdate
operator|.
name|addAll
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|to
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|HashSet
argument_list|(
name|set
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|EvictionData
name|getEvictedData
parameter_list|(
name|String
name|rootModuleConf
parameter_list|)
block|{
name|cleanEvicted
argument_list|()
expr_stmt|;
return|return
operator|(
name|EvictionData
operator|)
name|_evicted
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|getEvictedConfs
parameter_list|()
block|{
name|cleanEvicted
argument_list|()
expr_stmt|;
return|return
operator|(
name|String
index|[]
operator|)
name|_evicted
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|_evicted
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCompletelyEvicted
parameter_list|()
block|{
name|cleanEvicted
argument_list|()
expr_stmt|;
return|return
name|_evicted
operator|.
name|keySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|_rootModuleConfs
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns null if this node has only be evicted transitively, or the the colletion of selected nodes      * if it has been evicted by other selected nodes      * @return      */
specifier|public
name|Collection
name|getAllEvictingNodes
parameter_list|()
block|{
name|Collection
name|allEvictingNodes
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_evicted
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|EvictionData
name|ed
init|=
operator|(
name|EvictionData
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|selected
init|=
name|ed
operator|.
name|getSelected
argument_list|()
decl_stmt|;
if|if
condition|(
name|selected
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|allEvictingNodes
operator|==
literal|null
condition|)
block|{
name|allEvictingNodes
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
block|}
name|allEvictingNodes
operator|.
name|addAll
argument_list|(
name|selected
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allEvictingNodes
return|;
block|}
specifier|public
name|Collection
name|getAllEvictingConflictManagers
parameter_list|()
block|{
name|Collection
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_evicted
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|EvictionData
name|ed
init|=
operator|(
name|EvictionData
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|ed
operator|.
name|getConflictManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|IvyNode
name|getParent
parameter_list|()
block|{
return|return
name|_parent
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|IvyNode
name|parent
parameter_list|)
block|{
name|_parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|String
name|getParentConf
parameter_list|()
block|{
return|return
name|_parentConf
return|;
block|}
specifier|public
name|void
name|setParentConf
parameter_list|(
name|String
name|parentConf
parameter_list|)
block|{
name|_parentConf
operator|=
name|parentConf
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasConfigurationsToLoad
parameter_list|()
block|{
return|return
operator|!
name|_confsToFetch
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * After the call node may be discarded. To avoid using discarded node, make sure      * to get the real node after the call      * IvyNode node = ...      * node.loadData();      * node = node.getRealNode();      * ...      */
specifier|public
name|boolean
name|loadData
parameter_list|(
name|String
name|conf
parameter_list|,
name|boolean
name|shouldBePublic
parameter_list|)
block|{
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isEvicted
argument_list|(
name|_rootModuleConf
argument_list|)
operator|&&
operator|(
name|hasConfigurationsToLoad
argument_list|()
operator|||
operator|!
name|isRootModuleConfLoaded
argument_list|()
operator|)
operator|&&
operator|!
name|hasProblem
argument_list|()
condition|)
block|{
name|markRootModuleConfLoaded
argument_list|()
expr_stmt|;
if|if
condition|(
name|_md
operator|==
literal|null
condition|)
block|{
name|DependencyResolver
name|resolver
init|=
name|_data
operator|.
name|getIvy
argument_list|()
operator|.
name|getResolver
argument_list|(
name|getModuleId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"no resolver found for "
operator|+
name|getModuleId
argument_list|()
operator|+
literal|": check your configuration"
argument_list|)
expr_stmt|;
name|_problem
operator|=
operator|new
name|RuntimeException
argument_list|(
literal|"no resolver found for "
operator|+
name|getModuleId
argument_list|()
operator|+
literal|": check your configuration"
argument_list|)
expr_stmt|;
name|_data
operator|.
name|getReport
argument_list|()
operator|.
name|addDependency
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tusing "
operator|+
name|resolver
operator|+
literal|" to resolve "
operator|+
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|_module
operator|=
name|resolver
operator|.
name|getDependency
argument_list|(
name|_dd
argument_list|,
name|_data
argument_list|)
expr_stmt|;
if|if
condition|(
name|_module
operator|!=
literal|null
condition|)
block|{
name|_data
operator|.
name|getIvy
argument_list|()
operator|.
name|saveResolver
argument_list|(
name|_data
operator|.
name|getCache
argument_list|()
argument_list|,
name|_module
operator|.
name|getDescriptor
argument_list|()
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|_data
operator|.
name|getIvy
argument_list|()
operator|.
name|logModuleWhenFound
argument_list|()
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\tfound "
operator|+
name|_module
operator|.
name|getId
argument_list|()
operator|+
literal|" in "
operator|+
name|_module
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tfound "
operator|+
name|_module
operator|.
name|getId
argument_list|()
operator|+
literal|" in "
operator|+
name|_module
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getId
argument_list|()
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
comment|// IVY-56: check if revision has actually been resolved
if|if
condition|(
operator|!
name|_module
operator|.
name|getId
argument_list|()
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to resolve latest revision for "
operator|+
name|getId
argument_list|()
operator|+
literal|": check your configuration and make sure revision is part of your pattern"
argument_list|)
expr_stmt|;
name|_problem
operator|=
operator|new
name|RuntimeException
argument_list|(
literal|"impossible to resolve latest revision"
argument_list|)
expr_stmt|;
name|_data
operator|.
name|getReport
argument_list|()
operator|.
name|addDependency
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|IvyNode
name|resolved
init|=
name|_data
operator|.
name|getNode
argument_list|(
name|_module
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolved
operator|!=
literal|null
condition|)
block|{
comment|// exact revision has already been resolved
comment|// => update it and discard this node
name|resolved
operator|.
name|_downloaded
operator||=
name|_module
operator|.
name|isDownloaded
argument_list|()
expr_stmt|;
name|resolved
operator|.
name|_searched
operator||=
name|_module
operator|.
name|isSearched
argument_list|()
expr_stmt|;
name|resolved
operator|.
name|markSelected
argument_list|(
name|_rootModuleConf
argument_list|)
expr_stmt|;
name|resolved
operator|.
name|updateDataFrom
argument_list|(
name|this
argument_list|,
name|_rootModuleConf
argument_list|)
expr_stmt|;
name|resolved
operator|.
name|loadData
argument_list|(
name|conf
argument_list|,
name|shouldBePublic
argument_list|)
expr_stmt|;
if|if
condition|(
name|_dd
operator|!=
literal|null
condition|)
block|{
name|resolved
operator|.
name|addDependencyArtifactsIncludes
argument_list|(
name|_rootModuleConf
argument_list|,
name|_dd
operator|.
name|getDependencyArtifactsIncludes
argument_list|(
name|getParentConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_data
operator|.
name|register
argument_list|(
name|getId
argument_list|()
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
comment|// this actually discards the node
return|return
literal|true
return|;
block|}
block|}
name|_downloaded
operator|=
name|_module
operator|.
name|isDownloaded
argument_list|()
expr_stmt|;
name|_searched
operator|=
name|_module
operator|.
name|isSearched
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"\tmodule not found: "
operator|+
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|reportFailure
argument_list|()
expr_stmt|;
name|_problem
operator|=
operator|new
name|RuntimeException
argument_list|(
literal|"not found"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|_problem
operator|=
name|e
expr_stmt|;
block|}
comment|// still not resolved, report error
if|if
condition|(
name|_module
operator|==
literal|null
condition|)
block|{
name|_data
operator|.
name|getReport
argument_list|()
operator|.
name|addDependency
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|loaded
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|getId
argument_list|()
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
if|if
condition|(
name|_data
operator|.
name|getIvy
argument_list|()
operator|.
name|logResolvedRevision
argument_list|()
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t["
operator|+
name|_module
operator|.
name|getId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|"] "
operator|+
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t["
operator|+
name|_module
operator|.
name|getId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|"] "
operator|+
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|_md
operator|=
name|_module
operator|.
name|getDescriptor
argument_list|()
expr_stmt|;
comment|// if the revision was a latest one (which has now be resolved)
comment|// store also it to cache the result
if|if
condition|(
operator|!
name|getId
argument_list|()
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
name|_data
operator|.
name|register
argument_list|(
name|_module
operator|.
name|getId
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|_confsToFetch
operator|.
name|remove
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|updateConfsToFetch
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resolveSpecialConfigurations
argument_list|(
name|getRequiredConfigurations
argument_list|(
name|getParent
argument_list|()
argument_list|,
name|getParentConf
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|loaded
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasProblem
argument_list|()
condition|)
block|{
name|_data
operator|.
name|getReport
argument_list|()
operator|.
name|addDependency
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|handleConfiguration
argument_list|(
name|loaded
argument_list|,
name|conf
argument_list|,
name|shouldBePublic
argument_list|)
operator|&&
name|loaded
return|;
block|}
if|if
condition|(
operator|!
name|handleConfiguration
argument_list|(
name|loaded
argument_list|,
name|conf
argument_list|,
name|shouldBePublic
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|_dd
operator|!=
literal|null
condition|)
block|{
name|addDependencyArtifactsIncludes
argument_list|(
name|_rootModuleConf
argument_list|,
name|_dd
operator|.
name|getDependencyArtifactsIncludes
argument_list|(
name|getParentConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|loaded
return|;
block|}
specifier|private
name|boolean
name|markRootModuleConfLoaded
parameter_list|()
block|{
return|return
name|_loadedRootModuleConfs
operator|.
name|add
argument_list|(
name|_rootModuleConf
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isRootModuleConfLoaded
parameter_list|()
block|{
return|return
name|_loadedRootModuleConfs
operator|.
name|contains
argument_list|(
name|_rootModuleConf
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|handleConfiguration
parameter_list|(
name|boolean
name|loaded
parameter_list|,
name|String
name|conf
parameter_list|,
name|boolean
name|shouldBePublic
parameter_list|)
block|{
name|String
index|[]
name|confs
init|=
name|getRealConfs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|_md
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|c
init|=
name|_md
operator|.
name|getConfiguration
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|_confsToFetch
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|conf
operator|.
name|equals
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|_problem
operator|=
operator|new
name|RuntimeException
argument_list|(
literal|"configuration(s) not found in "
operator|+
name|this
operator|+
literal|": "
operator|+
name|conf
operator|+
literal|". Missing configuration: "
operator|+
name|confs
index|[
name|i
index|]
operator|+
literal|". It was required from "
operator|+
name|getParent
argument_list|()
operator|+
literal|" "
operator|+
name|getParentConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_problem
operator|=
operator|new
name|RuntimeException
argument_list|(
literal|"configuration(s) not found in "
operator|+
name|this
operator|+
literal|": "
operator|+
name|confs
index|[
name|i
index|]
operator|+
literal|". It was required from "
operator|+
name|getParent
argument_list|()
operator|+
literal|" "
operator|+
name|getParentConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|_data
operator|.
name|getReport
argument_list|()
operator|.
name|addDependency
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|shouldBePublic
operator|&&
operator|!
name|isRoot
argument_list|()
operator|&&
name|c
operator|.
name|getVisibility
argument_list|()
operator|!=
name|Configuration
operator|.
name|Visibility
operator|.
name|PUBLIC
condition|)
block|{
name|_confsToFetch
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|_problem
operator|=
operator|new
name|RuntimeException
argument_list|(
literal|"configuration not public in "
operator|+
name|this
operator|+
literal|": "
operator|+
name|c
operator|+
literal|". It was required from "
operator|+
name|getParent
argument_list|()
operator|+
literal|" "
operator|+
name|getParentConf
argument_list|()
argument_list|)
expr_stmt|;
name|_data
operator|.
name|getReport
argument_list|()
operator|.
name|addDependency
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|loaded
condition|)
block|{
name|_fetchedConfigurations
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|_confsToFetch
operator|.
name|removeAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|confs
argument_list|)
argument_list|)
expr_stmt|;
name|_confsToFetch
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|addRootModuleConfigurations
argument_list|(
name|_rootModuleConf
argument_list|,
name|confs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|String
name|getDefaultConf
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|FALLBACK_CONF_PATTERN
operator|.
name|matcher
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|conf
return|;
block|}
block|}
specifier|private
name|String
name|getMainConf
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|FALLBACK_CONF_PATTERN
operator|.
name|matcher
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
name|_isRoot
return|;
block|}
specifier|public
name|IvyNode
name|getRealNode
parameter_list|()
block|{
name|IvyNode
name|node
init|=
name|_data
operator|.
name|getNode
argument_list|(
name|getId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|node
operator|==
literal|null
condition|?
name|this
else|:
name|node
return|;
block|}
specifier|public
name|Collection
name|getDependencies
parameter_list|(
name|String
index|[]
name|confs
parameter_list|)
block|{
if|if
condition|(
name|_md
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"impossible to get dependencies when data has not been loaded"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Arrays
operator|.
name|asList
argument_list|(
name|confs
argument_list|)
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|confs
operator|=
name|_md
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
name|Collection
name|deps
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deps
operator|.
name|addAll
argument_list|(
name|getDependencies
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|deps
return|;
block|}
specifier|public
name|Collection
name|getDependencies
parameter_list|(
name|String
name|conf
parameter_list|,
name|boolean
name|traverse
parameter_list|)
block|{
if|if
condition|(
name|_md
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"impossible to get dependencies when data has not been loaded"
argument_list|)
throw|;
block|}
name|DependencyDescriptor
index|[]
name|dds
init|=
name|_md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|Collection
name|dependencies
init|=
operator|new
name|LinkedHashSet
argument_list|()
decl_stmt|;
comment|// it's important to respect dependencies order
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DependencyDescriptor
name|dd
init|=
name|dds
index|[
name|i
index|]
decl_stmt|;
name|String
index|[]
name|dependencyConfigurations
init|=
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependencyConfigurations
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// no configuration of the dependency is required for current confs :
comment|// it is exactly the same as if there was no dependency at all on it
continue|continue;
block|}
if|if
condition|(
name|isDependencyModuleExcluded
argument_list|(
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|conf
argument_list|)
condition|)
block|{
comment|// the whole module is excluded, it is considered as not being part of dependencies at all
name|Message
operator|.
name|verbose
argument_list|(
literal|"excluding "
operator|+
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|+
literal|" in "
operator|+
name|conf
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|IvyNode
name|depNode
init|=
name|_data
operator|.
name|getNode
argument_list|(
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|depNode
operator|==
literal|null
condition|)
block|{
name|depNode
operator|=
operator|new
name|IvyNode
argument_list|(
name|_data
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|depNode
operator|.
name|hasProblem
argument_list|()
condition|)
block|{
comment|// dependency already tried to be resolved, but unsuccessfully
comment|// nothing special to do
block|}
name|Collection
name|confs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|resolveSpecialConfigurations
argument_list|(
name|dependencyConfigurations
argument_list|,
name|depNode
argument_list|)
argument_list|)
decl_stmt|;
name|depNode
operator|.
name|updateConfsToFetch
argument_list|(
name|confs
argument_list|)
expr_stmt|;
name|depNode
operator|.
name|setRequiredConfs
argument_list|(
name|this
argument_list|,
name|conf
argument_list|,
name|confs
argument_list|)
expr_stmt|;
name|depNode
operator|.
name|addCaller
argument_list|(
name|_rootModuleConf
argument_list|,
name|_md
argument_list|,
name|_md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|conf
argument_list|,
name|dependencyConfigurations
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|dependencies
operator|.
name|add
argument_list|(
name|depNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|traverse
condition|)
block|{
name|depNode
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|depNode
operator|.
name|setParentConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|depNode
operator|.
name|setRootModuleConf
argument_list|(
name|getRootModuleConf
argument_list|()
argument_list|)
expr_stmt|;
name|depNode
operator|.
name|_data
operator|=
name|_data
expr_stmt|;
block|}
block|}
return|return
name|dependencies
return|;
block|}
specifier|private
name|boolean
name|isDependencyModuleExcluded
parameter_list|(
name|ModuleRevisionId
name|dependencyRevisionId
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
return|return
name|doesCallersExclude
argument_list|(
name|getRootModuleConf
argument_list|()
argument_list|,
operator|new
name|DefaultArtifact
argument_list|(
name|dependencyRevisionId
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ModuleRevisionId
name|getId
parameter_list|()
block|{
return|return
name|_id
return|;
block|}
specifier|public
name|void
name|updateConfsToFetch
parameter_list|(
name|Collection
name|confs
parameter_list|)
block|{
name|_confsToFetch
operator|.
name|addAll
argument_list|(
name|confs
argument_list|)
expr_stmt|;
name|_confsToFetch
operator|.
name|removeAll
argument_list|(
name|_fetchedConfigurations
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModuleId
name|getModuleId
parameter_list|()
block|{
return|return
name|_id
operator|.
name|getModuleId
argument_list|()
return|;
block|}
comment|/**      * resolve the '*' special configurations if necessary and possible      */
specifier|private
name|String
index|[]
name|resolveSpecialConfigurations
parameter_list|(
name|String
index|[]
name|dependencyConfigurations
parameter_list|,
name|IvyNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|dependencyConfigurations
operator|.
name|length
operator|==
literal|1
operator|&&
literal|"*"
operator|.
name|equals
argument_list|(
name|dependencyConfigurations
index|[
literal|0
index|]
argument_list|)
operator|&&
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|isLoaded
argument_list|()
condition|)
block|{
return|return
name|node
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getPublicConfigurationsNames
argument_list|()
return|;
block|}
return|return
name|dependencyConfigurations
return|;
block|}
specifier|public
name|boolean
name|isLoaded
parameter_list|()
block|{
return|return
name|_md
operator|!=
literal|null
return|;
block|}
specifier|public
name|ModuleDescriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|_md
return|;
block|}
comment|/**      * returns the required configurations from the given node      * @param in      * @return      */
specifier|public
name|String
index|[]
name|getRequiredConfigurations
parameter_list|(
name|IvyNode
name|in
parameter_list|,
name|String
name|inConf
parameter_list|)
block|{
name|Collection
name|req
init|=
operator|(
name|Collection
operator|)
name|_requiredConfs
operator|.
name|get
argument_list|(
operator|new
name|NodeConf
argument_list|(
name|in
argument_list|,
name|inConf
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|req
operator|==
literal|null
condition|?
operator|new
name|String
index|[
literal|0
index|]
else|:
operator|(
name|String
index|[]
operator|)
name|req
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|req
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * returns all the current required configurations of the node      * @return      */
specifier|public
name|String
index|[]
name|getRequiredConfigurations
parameter_list|()
block|{
name|Collection
name|required
init|=
operator|new
name|ArrayList
argument_list|(
name|_confsToFetch
operator|.
name|size
argument_list|()
operator|+
name|_fetchedConfigurations
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|required
operator|.
name|addAll
argument_list|(
name|_fetchedConfigurations
argument_list|)
expr_stmt|;
name|required
operator|.
name|addAll
argument_list|(
name|_confsToFetch
argument_list|)
expr_stmt|;
return|return
operator|(
name|String
index|[]
operator|)
name|required
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|required
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|setRequiredConfs
parameter_list|(
name|IvyNode
name|parent
parameter_list|,
name|String
name|parentConf
parameter_list|,
name|Collection
name|confs
parameter_list|)
block|{
name|_requiredConfs
operator|.
name|put
argument_list|(
operator|new
name|NodeConf
argument_list|(
name|parent
argument_list|,
name|parentConf
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|(
name|confs
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Configuration
name|getConfiguration
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
if|if
condition|(
name|_md
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"impossible to get configuration when data has not been loaded"
argument_list|)
throw|;
block|}
name|String
name|defaultConf
init|=
name|getDefaultConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|=
name|getMainConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
name|_md
operator|.
name|getConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|configuration
operator|=
name|_md
operator|.
name|getConfiguration
argument_list|(
name|defaultConf
argument_list|)
expr_stmt|;
block|}
return|return
name|configuration
return|;
block|}
specifier|public
name|ResolvedModuleRevision
name|getModuleRevision
parameter_list|()
block|{
return|return
name|_module
return|;
block|}
comment|/**      *       * @param rootModuleConf      * @param mrid      * @param callerConf      * @param dependencyConfs '*' must have been resolved      * @param askedDependencyId the dependency revision id asked by the caller      */
specifier|public
name|void
name|addCaller
parameter_list|(
name|String
name|rootModuleConf
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|callerConf
parameter_list|,
name|String
index|[]
name|dependencyConfs
parameter_list|,
name|ModuleRevisionId
name|askedDependencyId
parameter_list|)
block|{
if|if
condition|(
name|mrid
operator|.
name|getModuleId
argument_list|()
operator|.
name|equals
argument_list|(
name|getId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"a module is not authorized to depend on itself: "
operator|+
name|getId
argument_list|()
argument_list|)
throw|;
block|}
name|Map
name|callers
init|=
operator|(
name|Map
operator|)
name|_callersByRootConf
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|callers
operator|==
literal|null
condition|)
block|{
name|callers
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|_callersByRootConf
operator|.
name|put
argument_list|(
name|rootModuleConf
argument_list|,
name|callers
argument_list|)
expr_stmt|;
block|}
name|Caller
name|caller
init|=
operator|(
name|Caller
operator|)
name|callers
operator|.
name|get
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|caller
operator|==
literal|null
condition|)
block|{
name|caller
operator|=
operator|new
name|Caller
argument_list|(
name|md
argument_list|,
name|mrid
argument_list|,
name|askedDependencyId
argument_list|)
expr_stmt|;
name|callers
operator|.
name|put
argument_list|(
name|mrid
argument_list|,
name|caller
argument_list|)
expr_stmt|;
block|}
name|caller
operator|.
name|addConfiguration
argument_list|(
name|callerConf
argument_list|,
name|dependencyConfs
argument_list|)
expr_stmt|;
name|IvyNode
name|parent
init|=
name|_data
operator|.
name|getNode
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|_allCallers
operator|.
name|addAll
argument_list|(
name|parent
operator|.
name|_allCallers
argument_list|)
expr_stmt|;
name|_allCallers
operator|.
name|add
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|)
expr_stmt|;
name|_isCircular
operator|=
name|_allCallers
operator|.
name|contains
argument_list|(
name|getId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Caller
index|[]
name|getCallers
parameter_list|(
name|String
name|rootModuleConf
parameter_list|)
block|{
name|Map
name|callers
init|=
operator|(
name|Map
operator|)
name|_callersByRootConf
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|callers
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Caller
index|[
literal|0
index|]
return|;
block|}
return|return
operator|(
name|Caller
index|[]
operator|)
name|callers
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Caller
index|[
name|callers
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|Caller
index|[]
name|getAllCallers
parameter_list|()
block|{
name|Set
name|all
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_callersByRootConf
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
name|callers
init|=
operator|(
name|Map
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|all
operator|.
name|addAll
argument_list|(
name|callers
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Caller
index|[]
operator|)
name|all
operator|.
name|toArray
argument_list|(
operator|new
name|Caller
index|[
name|all
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getResolvedId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|IvyNode
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IvyNode
name|node
init|=
operator|(
name|IvyNode
operator|)
name|obj
decl_stmt|;
return|return
name|node
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Returns the configurations of the dependency required in a given       * root module configuration.      * @param rootModuleConf      * @return      */
specifier|public
name|String
index|[]
name|getConfigurations
parameter_list|(
name|String
name|rootModuleConf
parameter_list|)
block|{
name|Set
name|depConfs
init|=
operator|(
name|Set
operator|)
name|_rootModuleConfs
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|depConfs
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|depConfs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|depConfs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|discardConf
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
name|discardConf
argument_list|(
name|_rootModuleConf
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|discardConf
parameter_list|(
name|String
name|rootModuleConf
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
name|Set
name|depConfs
init|=
operator|(
name|Set
operator|)
name|_rootModuleConfs
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|depConfs
operator|==
literal|null
condition|)
block|{
name|depConfs
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|_rootModuleConfs
operator|.
name|put
argument_list|(
name|rootModuleConf
argument_list|,
name|depConfs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|_md
operator|!=
literal|null
condition|)
block|{
comment|// remove all given dependency configurations to the set + extended ones
name|Configuration
name|c
init|=
name|_md
operator|.
name|getConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|exts
init|=
name|c
operator|.
name|getExtends
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|discardConf
argument_list|(
name|rootModuleConf
argument_list|,
name|exts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// recursive remove of extended configurations
block|}
name|depConfs
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"unknown configuration in "
operator|+
name|getId
argument_list|()
operator|+
literal|": "
operator|+
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|depConfs
operator|.
name|remove
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addRootModuleConfigurations
parameter_list|(
name|String
name|rootModuleConf
parameter_list|,
name|String
index|[]
name|dependencyConfs
parameter_list|)
block|{
name|Set
name|depConfs
init|=
operator|(
name|Set
operator|)
name|_rootModuleConfs
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|depConfs
operator|==
literal|null
condition|)
block|{
name|depConfs
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|_rootModuleConfs
operator|.
name|put
argument_list|(
name|rootModuleConf
argument_list|,
name|depConfs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|_md
operator|!=
literal|null
condition|)
block|{
comment|// add all given dependency configurations to the set + extended ones
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencyConfs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|conf
init|=
name|_md
operator|.
name|getConfiguration
argument_list|(
name|dependencyConfs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|exts
init|=
name|conf
operator|.
name|getExtends
argument_list|()
decl_stmt|;
name|addRootModuleConfigurations
argument_list|(
name|rootModuleConf
argument_list|,
name|exts
argument_list|)
expr_stmt|;
comment|// recursive add of extended configurations
name|depConfs
operator|.
name|add
argument_list|(
name|conf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"unknown configuration in "
operator|+
name|getId
argument_list|()
operator|+
literal|": "
operator|+
name|dependencyConfs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencyConfs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|depConfs
operator|.
name|add
argument_list|(
name|dependencyConfs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns the root module configurations in which this dependency is required       * @return      */
specifier|public
name|String
index|[]
name|getRootModuleConfigurations
parameter_list|()
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|_rootModuleConfs
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|_rootModuleConfs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns all the artifacts of this dependency required in all the      * root module configurations      * @return      */
specifier|public
name|Artifact
index|[]
name|getAllArtifacts
parameter_list|()
block|{
name|Set
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|_rootModuleConfs
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|rootModuleConf
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getArtifacts
argument_list|(
name|rootModuleConf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Artifact
index|[]
operator|)
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|Artifact
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns all the artifacts of this dependency required in the      * root module configurations in which the node is not evicted      * @param artifactFilter       * @return      */
specifier|public
name|Artifact
index|[]
name|getSelectedArtifacts
parameter_list|(
name|Filter
name|artifactFilter
parameter_list|)
block|{
name|Collection
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|_rootModuleConfs
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|rootModuleConf
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isEvicted
argument_list|(
name|rootModuleConf
argument_list|)
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getArtifacts
argument_list|(
name|rootModuleConf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|FilterHelper
operator|.
name|filter
argument_list|(
name|ret
argument_list|,
name|artifactFilter
argument_list|)
expr_stmt|;
return|return
operator|(
name|Artifact
index|[]
operator|)
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|Artifact
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns the artifacts of this dependency required in the      * configurations themselves required in the given root module configuration      * @param rootModuleConf      * @return      */
specifier|public
name|Artifact
index|[]
name|getArtifacts
parameter_list|(
name|String
name|rootModuleConf
parameter_list|)
block|{
comment|// first we look for the dependency configurations required
comment|// in the given root module configuration
name|Set
name|confs
init|=
operator|(
name|Set
operator|)
name|_rootModuleConfs
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|confs
operator|==
literal|null
condition|)
block|{
comment|// no configuration required => no artifact required
return|return
operator|new
name|Artifact
index|[
literal|0
index|]
return|;
block|}
name|Set
name|artifacts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|// the set we fill before returning
comment|// we check if we have dependencyArtifacts includes description for this rootModuleConf
name|Set
name|includes
init|=
operator|(
name|Set
operator|)
name|_dependencyArtifactsIncludes
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|_md
operator|.
name|isDefault
argument_list|()
operator|&&
name|includes
operator|!=
literal|null
operator|&&
operator|!
name|includes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// the descriptor is a default one: it has been generated from nothing
comment|// moreover, we have dependency artifacts description
comment|// these descritions are thus used as if they were declared in the module
comment|// descriptor. If one is not really present, the error will be raised
comment|// at download time
for|for
control|(
name|Iterator
name|it
init|=
name|includes
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyArtifactDescriptor
name|dad
init|=
operator|(
name|DependencyArtifactDescriptor
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
operator|new
name|MDArtifact
argument_list|(
name|_md
argument_list|,
name|dad
operator|.
name|getName
argument_list|()
argument_list|,
name|dad
operator|.
name|getType
argument_list|()
argument_list|,
name|dad
operator|.
name|getExt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|includes
operator|==
literal|null
operator|||
name|includes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no artifacts includes: we get all artifacts as defined by the descriptor
for|for
control|(
name|Iterator
name|iter
init|=
name|confs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|conf
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|artifacts
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|_md
operator|.
name|getArtifacts
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we have to get only artifacts listed as "includes"
comment|// first we get all artifacts as defined by the module descriptor
comment|// and classify them by artifact id
name|Map
name|allArtifacts
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|confs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|conf
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Artifact
index|[]
name|arts
init|=
name|_md
operator|.
name|getArtifacts
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|allArtifacts
operator|.
name|put
argument_list|(
name|arts
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|arts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now we can keep only listed ones
for|for
control|(
name|Iterator
name|it
init|=
name|includes
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyArtifactDescriptor
name|dad
init|=
operator|(
name|DependencyArtifactDescriptor
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|arts
init|=
name|findArtifactsMatching
argument_list|(
name|dad
argument_list|,
name|allArtifacts
argument_list|)
decl_stmt|;
if|if
condition|(
name|arts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"a required artifact is not listed by module descriptor: "
operator|+
name|dad
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// we remove it from required list to prevent message to be displayed more than once
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
name|this
operator|+
literal|" in "
operator|+
name|rootModuleConf
operator|+
literal|": including "
operator|+
name|arts
argument_list|)
expr_stmt|;
name|artifacts
operator|.
name|addAll
argument_list|(
name|arts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// now excludes artifacts that aren't accepted by any caller
for|for
control|(
name|Iterator
name|iter
init|=
name|artifacts
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|excluded
init|=
name|doesCallersExclude
argument_list|(
name|rootModuleConf
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|excluded
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|this
operator|+
literal|" in "
operator|+
name|rootModuleConf
operator|+
literal|": excluding "
operator|+
name|artifact
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
name|Artifact
index|[]
operator|)
name|artifacts
operator|.
name|toArray
argument_list|(
operator|new
name|Artifact
index|[
name|artifacts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns true if ALL callers exclude the given artifact in the given root module conf      * @param rootModuleConf      * @param artifact      * @return      */
specifier|private
name|boolean
name|doesCallersExclude
parameter_list|(
name|String
name|rootModuleConf
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|doesCallersExclude
argument_list|(
name|rootModuleConf
argument_list|,
name|artifact
argument_list|,
operator|new
name|Stack
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|doesCallersExclude
parameter_list|(
name|String
name|rootModuleConf
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|Stack
name|callersStack
parameter_list|)
block|{
if|if
condition|(
name|callersStack
operator|.
name|contains
argument_list|(
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|callersStack
operator|.
name|push
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Caller
index|[]
name|callers
init|=
name|getCallers
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|callers
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Collection
name|callersNodes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ModuleDescriptor
name|md
init|=
name|callers
index|[
name|i
index|]
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|doesExclude
argument_list|(
name|md
argument_list|,
name|rootModuleConf
argument_list|,
name|callers
index|[
name|i
index|]
operator|.
name|getCallerConfigurations
argument_list|()
argument_list|,
name|this
argument_list|,
name|artifact
argument_list|,
name|callersStack
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|callersStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|doesExclude
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|rootModuleConf
parameter_list|,
name|String
index|[]
name|moduleConfs
parameter_list|,
name|IvyNode
name|dependency
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|Stack
name|callersStack
parameter_list|)
block|{
comment|// artifact is excluded if it match any of the exclude pattern for this dependency...
name|DependencyDescriptor
name|dd
init|=
name|getDependencyDescriptor
argument_list|(
name|md
argument_list|,
name|dependency
argument_list|)
decl_stmt|;
if|if
condition|(
name|dd
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dd
operator|.
name|doesExclude
argument_list|(
name|moduleConfs
argument_list|,
name|artifact
operator|.
name|getId
argument_list|()
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// ... or if it is excluded by all its callers
name|IvyNode
name|c
init|=
name|_data
operator|.
name|getNode
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
return|return
name|c
operator|.
name|doesCallersExclude
argument_list|(
name|rootModuleConf
argument_list|,
name|artifact
argument_list|,
name|callersStack
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|DependencyDescriptor
name|getDependencyDescriptor
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|IvyNode
name|dependency
parameter_list|)
block|{
if|if
condition|(
name|md
operator|!=
literal|null
condition|)
block|{
name|DependencyDescriptor
index|[]
name|dds
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyId
argument_list|()
operator|.
name|equals
argument_list|(
name|dependency
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|dds
index|[
name|i
index|]
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Collection
name|findArtifactsMatching
parameter_list|(
name|DependencyArtifactDescriptor
name|dad
parameter_list|,
name|Map
name|allArtifacts
parameter_list|)
block|{
name|Collection
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|allArtifacts
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ArtifactId
name|aid
init|=
operator|(
name|ArtifactId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|MatcherHelper
operator|.
name|matches
argument_list|(
name|dad
operator|.
name|getMatcher
argument_list|()
argument_list|,
name|dad
operator|.
name|getId
argument_list|()
argument_list|,
name|aid
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|allArtifacts
operator|.
name|get
argument_list|(
name|aid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|addDependencyArtifactsIncludes
parameter_list|(
name|String
name|rootModuleConf
parameter_list|,
name|DependencyArtifactDescriptor
index|[]
name|dependencyArtifacts
parameter_list|)
block|{
name|addDependencyArtifacts
argument_list|(
name|rootModuleConf
argument_list|,
name|dependencyArtifacts
argument_list|,
name|_dependencyArtifactsIncludes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addDependencyArtifacts
parameter_list|(
name|String
name|rootModuleConf
parameter_list|,
name|DependencyArtifactDescriptor
index|[]
name|dependencyArtifacts
parameter_list|,
name|Map
name|artifactsMap
parameter_list|)
block|{
name|Set
name|depArtifacts
init|=
operator|(
name|Set
operator|)
name|artifactsMap
operator|.
name|get
argument_list|(
name|rootModuleConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|depArtifacts
operator|==
literal|null
condition|)
block|{
name|depArtifacts
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|artifactsMap
operator|.
name|put
argument_list|(
name|rootModuleConf
argument_list|,
name|depArtifacts
argument_list|)
expr_stmt|;
block|}
name|depArtifacts
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dependencyArtifacts
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getPublication
parameter_list|()
block|{
if|if
condition|(
name|_module
operator|!=
literal|null
condition|)
block|{
return|return
name|_module
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|DependencyDescriptor
name|getDependencyDescriptor
parameter_list|()
block|{
return|return
name|_dd
return|;
block|}
specifier|public
name|boolean
name|hasProblem
parameter_list|()
block|{
return|return
name|_problem
operator|!=
literal|null
return|;
block|}
specifier|public
name|ModuleRevisionId
name|getResolvedId
parameter_list|()
block|{
if|if
condition|(
name|_md
operator|!=
literal|null
operator|&&
name|_md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|_md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
return|;
block|}
if|else if
condition|(
name|_module
operator|!=
literal|null
condition|)
block|{
return|return
name|_module
operator|.
name|getId
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getId
argument_list|()
return|;
block|}
block|}
specifier|public
name|Exception
name|getProblem
parameter_list|()
block|{
return|return
name|_problem
return|;
block|}
specifier|public
name|boolean
name|isDownloaded
parameter_list|()
block|{
return|return
name|_downloaded
return|;
block|}
specifier|public
name|boolean
name|isSearched
parameter_list|()
block|{
return|return
name|_searched
return|;
block|}
specifier|public
name|String
name|getRootModuleConf
parameter_list|()
block|{
return|return
name|_rootModuleConf
return|;
block|}
specifier|public
name|void
name|setRootModuleConf
parameter_list|(
name|String
name|rootModuleConf
parameter_list|)
block|{
if|if
condition|(
name|_rootModuleConf
operator|!=
literal|null
operator|&&
operator|!
name|_rootModuleConf
operator|.
name|equals
argument_list|(
name|rootModuleConf
argument_list|)
condition|)
block|{
name|_confsToFetch
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// we change of root module conf => we discard all confs to fetch
block|}
if|if
condition|(
name|rootModuleConf
operator|!=
literal|null
operator|&&
name|rootModuleConf
operator|.
name|equals
argument_list|(
name|_rootModuleConf
argument_list|)
condition|)
block|{
name|_selectedDeps
operator|.
name|put
argument_list|(
operator|new
name|ModuleIdConf
argument_list|(
name|_id
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|rootModuleConf
argument_list|)
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_rootModuleConf
operator|=
name|rootModuleConf
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getConfsToFetch
parameter_list|()
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|_confsToFetch
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|_confsToFetch
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns true if this node can already be found among its callers      * @return      */
specifier|public
name|boolean
name|isCircular
parameter_list|()
block|{
return|return
name|_isCircular
return|;
block|}
specifier|public
name|boolean
name|isFetched
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
return|return
name|_fetchedConfigurations
operator|.
name|contains
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**      * Returns the eviction data for this node if it has been previously evicted in the most far parent      * of the given node, null otherwise (if it hasn't been evicted in root) for the       * given rootModuleConf.      * Note that this method only works if conflict resolution has already be done in all the ancestors.      *       * @param rootModuleConf      * @param parent      * @return      */
specifier|public
name|EvictionData
name|getEvictionDataInRoot
parameter_list|(
name|String
name|rootModuleConf
parameter_list|,
name|IvyNode
name|parent
parameter_list|)
block|{
name|IvyNode
name|root
init|=
name|getRoot
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|Collection
name|selectedNodes
init|=
name|root
operator|.
name|getResolvedNodes
argument_list|(
name|getModuleId
argument_list|()
argument_list|,
name|rootModuleConf
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|selectedNodes
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|node
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getResolvedId
argument_list|()
operator|.
name|equals
argument_list|(
name|getResolvedId
argument_list|()
argument_list|)
condition|)
block|{
comment|// the node is part of the selected ones for the root: no eviction data to return
return|return
literal|null
return|;
block|}
block|}
comment|// we didn't find this mrid in the selected ones for the root: it has been previously evicted
return|return
operator|new
name|EvictionData
argument_list|(
name|rootModuleConf
argument_list|,
name|parent
argument_list|,
name|root
operator|.
name|getConflictManager
argument_list|(
name|getModuleId
argument_list|()
argument_list|)
argument_list|,
name|selectedNodes
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|IvyNode
name|getRoot
parameter_list|(
name|IvyNode
name|parent
parameter_list|)
block|{
name|IvyNode
name|root
init|=
name|parent
decl_stmt|;
name|Collection
name|path
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|path
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
while|while
condition|(
name|root
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|root
operator|.
name|isRoot
argument_list|()
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|contains
argument_list|(
name|root
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|root
return|;
block|}
name|root
operator|=
name|root
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
return|return
name|root
return|;
block|}
specifier|public
name|IvyNode
name|findNode
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
name|_data
operator|.
name|getNode
argument_list|(
name|mrid
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|getRealConfs
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
if|if
condition|(
name|_md
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|conf
block|}
return|;
block|}
name|String
name|defaultConf
init|=
name|getDefaultConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|=
name|getMainConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|_md
operator|.
name|getConfiguration
argument_list|(
name|conf
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|defaultConf
argument_list|)
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
name|conf
operator|=
name|defaultConf
expr_stmt|;
block|}
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
name|_md
operator|.
name|getPublicConfigurationsNames
argument_list|()
return|;
block|}
if|else if
condition|(
name|conf
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|conf
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|confs
index|[
name|i
index|]
operator|=
name|confs
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
index|[]
block|{
name|conf
block|}
return|;
block|}
block|}
end_class

end_unit

