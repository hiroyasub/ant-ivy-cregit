begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ConflictManager
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultDependencyArtifactDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|License
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|MDArtifact
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|conflict
operator|.
name|FixedConflictManager
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_comment
comment|/**  * Parses an xml ivy file and output a ModuleDescriptor.  * For dependency and performance reasons, it does uses  * only the SAX API, which makes the parsing code harder  * to understand.  *   * @author x.hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|XmlModuleDescriptorParser
extends|extends
name|DefaultHandler
block|{
specifier|private
specifier|static
specifier|final
name|Collection
name|ALLOWED_VERSIONS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|,
literal|"1.1"
block|}
argument_list|)
decl_stmt|;
specifier|private
name|DefaultModuleDescriptor
name|_md
decl_stmt|;
specifier|private
name|DefaultDependencyDescriptor
name|_dd
decl_stmt|;
specifier|private
name|DefaultDependencyArtifactDescriptor
name|_dad
decl_stmt|;
specifier|private
name|MDArtifact
name|_artifact
decl_stmt|;
specifier|private
name|List
name|_errors
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|String
name|_conf
decl_stmt|;
specifier|private
name|boolean
name|_validate
init|=
literal|true
decl_stmt|;
specifier|private
name|Ivy
name|_ivy
decl_stmt|;
specifier|private
name|boolean
name|_artifactsDeclared
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NONE
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|INFO
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CONF
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PUB
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEP
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ARTIFACT_INCLUDE
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ARTIFACT_EXCLUDE
init|=
literal|6
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CONFLICT
init|=
literal|7
decl_stmt|;
specifier|private
name|int
name|_state
init|=
name|NONE
decl_stmt|;
specifier|private
name|Resource
name|_res
decl_stmt|;
specifier|private
name|String
name|_defaultConf
decl_stmt|;
specifier|public
name|XmlModuleDescriptorParser
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
name|_ivy
operator|=
name|ivy
expr_stmt|;
name|_validate
operator|=
name|validate
expr_stmt|;
block|}
specifier|public
specifier|static
name|ModuleDescriptor
name|parseDescriptor
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|URL
name|xmlURL
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|parseDescriptor
argument_list|(
name|ivy
argument_list|,
name|xmlURL
argument_list|,
operator|new
name|URLResource
argument_list|(
name|xmlURL
argument_list|)
argument_list|,
name|validate
argument_list|)
return|;
block|}
comment|/**      *       * @param ivy      * @param xmlURL the url pointing to the file to parse      * @param realURL the real url of the file to parse, used for log only      * @param validate      * @return      * @throws ParseException      * @throws IOException      */
specifier|public
specifier|static
name|ModuleDescriptor
name|parseDescriptor
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|URL
name|xmlURL
parameter_list|,
name|Resource
name|res
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|XmlModuleDescriptorParser
name|parser
init|=
operator|new
name|XmlModuleDescriptorParser
argument_list|(
name|ivy
argument_list|,
name|validate
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|xmlURL
argument_list|,
name|res
argument_list|,
name|validate
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|getModuleDescriptor
argument_list|()
return|;
block|}
specifier|private
name|ModuleDescriptor
name|getModuleDescriptor
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|_errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|_errors
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
throw|;
block|}
return|return
name|_md
return|;
block|}
specifier|private
name|void
name|parse
parameter_list|(
name|URL
name|xmlURL
parameter_list|,
name|Resource
name|res
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
try|try
block|{
name|_md
operator|=
operator|new
name|DefaultModuleDescriptor
argument_list|()
expr_stmt|;
name|_res
operator|=
name|res
expr_stmt|;
comment|// used for log and date only
name|_md
operator|.
name|setLastModified
argument_list|(
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
name|URL
name|schemaURL
init|=
name|validate
condition|?
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"ivy.xsd"
argument_list|)
else|:
literal|null
decl_stmt|;
name|XMLHelper
operator|.
name|parse
argument_list|(
name|xmlURL
argument_list|,
name|schemaURL
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|checkConfigurations
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|_artifactsDeclared
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|_md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|_md
operator|.
name|addArtifact
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
operator|new
name|MDArtifact
argument_list|(
name|_md
argument_list|,
name|_md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|ex
parameter_list|)
block|{
name|ParseException
name|pe
init|=
operator|new
name|ParseException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in "
operator|+
name|xmlURL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|pe
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|pe
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|ex
parameter_list|)
block|{
name|IllegalStateException
name|ise
init|=
operator|new
name|IllegalStateException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in "
operator|+
name|xmlURL
argument_list|)
decl_stmt|;
name|ise
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ise
throw|;
block|}
block|}
specifier|private
name|Date
name|getDefaultPubDate
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|(
name|_md
operator|.
name|getLastModified
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|long
name|getLastModified
parameter_list|()
block|{
name|long
name|last
init|=
name|_res
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|>
literal|0
condition|)
block|{
return|return
name|last
return|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"impossible to get date for "
operator|+
name|_res
operator|+
literal|": using 'now'"
argument_list|)
expr_stmt|;
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
if|if
condition|(
literal|"ivy-module"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|String
name|version
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ALLOWED_VERSIONS
operator|.
name|contains
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|addError
argument_list|(
literal|"invalid version "
operator|+
name|version
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"invalid version "
operator|+
name|version
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
literal|"info"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|_state
operator|=
name|INFO
expr_stmt|;
name|String
name|org
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"organisation"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|module
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|revision
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"revision"
argument_list|)
argument_list|)
decl_stmt|;
name|_md
operator|.
name|setModuleRevisionId
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|module
argument_list|,
name|revision
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|status
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"status"
argument_list|)
argument_list|)
decl_stmt|;
name|_md
operator|.
name|setStatus
argument_list|(
name|status
operator|==
literal|null
condition|?
name|Status
operator|.
name|DEFAULT_STATUS
else|:
name|status
argument_list|)
expr_stmt|;
name|_md
operator|.
name|setResolverName
argument_list|(
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"resolver"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|_md
operator|.
name|setDefault
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|pubDate
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"publication"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pubDate
operator|!=
literal|null
operator|&&
name|pubDate
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|_md
operator|.
name|setPublicationDate
argument_list|(
name|Ivy
operator|.
name|DATE_FORMAT
operator|.
name|parse
argument_list|(
name|pubDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|addError
argument_list|(
literal|"invalid publication date format: "
operator|+
name|pubDate
argument_list|)
expr_stmt|;
name|_md
operator|.
name|setPublicationDate
argument_list|(
name|getDefaultPubDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|_md
operator|.
name|setPublicationDate
argument_list|(
name|getDefaultPubDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"license"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|_md
operator|.
name|addLicense
argument_list|(
operator|new
name|License
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"url"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"description"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|_md
operator|.
name|setHomePage
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"homepage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"configurations"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|_state
operator|=
name|CONF
expr_stmt|;
block|}
if|else if
condition|(
literal|"publications"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|_state
operator|=
name|PUB
expr_stmt|;
name|_artifactsDeclared
operator|=
literal|true
expr_stmt|;
name|checkConfigurations
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"dependencies"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|_state
operator|=
name|DEP
expr_stmt|;
name|_defaultConf
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconf"
argument_list|)
expr_stmt|;
name|_defaultConf
operator|=
name|_defaultConf
operator|==
literal|null
condition|?
literal|"*->*"
else|:
name|_defaultConf
expr_stmt|;
name|checkConfigurations
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"conflicts"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|_state
operator|=
name|CONFLICT
expr_stmt|;
name|checkConfigurations
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"artifact"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
if|if
condition|(
name|_state
operator|==
name|PUB
condition|)
block|{
comment|// this is a published artifact
name|String
name|ext
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"ext"
argument_list|)
decl_stmt|;
name|ext
operator|=
name|ext
operator|!=
literal|null
condition|?
name|ext
else|:
name|attributes
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|_artifact
operator|=
operator|new
name|MDArtifact
argument_list|(
name|_md
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|String
name|confs
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
decl_stmt|;
comment|// only add confs if they are specified. if they aren't, endElement will handle this
comment|// only if there are no conf defined in sub elements
if|if
condition|(
name|confs
operator|!=
literal|null
operator|&&
name|confs
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|conf
decl_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|confs
argument_list|)
condition|)
block|{
name|conf
operator|=
name|_md
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|=
name|confs
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|_artifact
operator|.
name|addConfiguration
argument_list|(
name|conf
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|_md
operator|.
name|addArtifact
argument_list|(
name|conf
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|_artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|_state
operator|==
name|DEP
condition|)
block|{
comment|// this is an artifact asked for a particular dependency
name|addDependencyArtifactsIncludes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|_validate
condition|)
block|{
name|addError
argument_list|(
literal|"artifact tag found in invalid tag: "
operator|+
name|_state
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"include"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|addDependencyArtifactsIncludes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"exclude"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|addDependencyArtifactsExcludes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"dependency"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|String
name|org
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"org"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|==
literal|null
condition|)
block|{
name|org
operator|=
name|_md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
expr_stmt|;
block|}
name|boolean
name|force
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"force"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"rev"
argument_list|)
argument_list|)
decl_stmt|;
name|_dd
operator|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|_md
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|name
argument_list|,
name|rev
argument_list|)
argument_list|,
name|force
argument_list|)
expr_stmt|;
name|_md
operator|.
name|addDependency
argument_list|(
name|_dd
argument_list|)
expr_stmt|;
name|String
name|confs
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|confs
operator|!=
literal|null
operator|&&
name|confs
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|parseDepsConfs
argument_list|(
name|confs
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|String
name|conf
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|_state
condition|)
block|{
case|case
name|CONF
case|:
name|String
name|visibility
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"visibility"
argument_list|)
decl_stmt|;
name|String
name|ext
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"extends"
argument_list|)
decl_stmt|;
name|_md
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|,
name|Configuration
operator|.
name|Visibility
operator|.
name|getVisibility
argument_list|(
name|visibility
operator|==
literal|null
condition|?
literal|"public"
else|:
name|visibility
argument_list|)
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"description"
argument_list|)
argument_list|,
name|ext
operator|==
literal|null
condition|?
literal|null
else|:
name|ext
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PUB
case|:
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|_md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|_artifact
operator|.
name|addConfiguration
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|_md
operator|.
name|addArtifact
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
name|_artifact
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|_artifact
operator|.
name|addConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|_md
operator|.
name|addArtifact
argument_list|(
name|conf
argument_list|,
name|_artifact
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DEP
case|:
name|_conf
operator|=
name|conf
expr_stmt|;
name|String
name|mappeds
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"mapped"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappeds
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|mapped
init|=
name|mappeds
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapped
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|_dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|_conf
argument_list|,
name|mapped
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|ARTIFACT_INCLUDE
case|:
case|case
name|ARTIFACT_EXCLUDE
case|:
name|_dad
operator|.
name|addConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|_validate
condition|)
block|{
name|addError
argument_list|(
literal|"conf tag found in invalid tag: "
operator|+
name|_state
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|else if
condition|(
literal|"mapped"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|_dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|_conf
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"manager"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|_state
operator|==
name|CONFLICT
condition|)
block|{
name|String
name|org
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"org"
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|=
name|org
operator|==
literal|null
condition|?
literal|".*"
else|:
name|org
expr_stmt|;
name|String
name|mod
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
argument_list|)
decl_stmt|;
name|mod
operator|=
name|mod
operator|==
literal|null
condition|?
literal|".*"
else|:
name|mod
expr_stmt|;
name|ConflictManager
name|cm
decl_stmt|;
name|String
name|name
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|_ivy
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"rev"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|revs
init|=
name|rev
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|revs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|revs
index|[
name|i
index|]
operator|=
name|revs
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|cm
operator|=
operator|new
name|FixedConflictManager
argument_list|(
name|revs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|cm
operator|=
name|_ivy
operator|.
name|getConflictManager
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|cm
operator|==
literal|null
condition|)
block|{
name|addError
argument_list|(
literal|"unknown conflict manager: "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|addError
argument_list|(
literal|"bad conflict manager: no name nor rev"
argument_list|)
expr_stmt|;
return|return;
block|}
name|_md
operator|.
name|addConflictManager
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|mod
argument_list|)
argument_list|,
name|cm
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|_validate
operator|&&
name|_state
operator|!=
name|INFO
condition|)
block|{
name|addError
argument_list|(
literal|"unknwon tag "
operator|+
name|qName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|addError
argument_list|(
literal|"exception while parsing: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"exception while parsing: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|parseDepsConfs
parameter_list|(
name|String
name|confs
parameter_list|)
block|{
name|String
index|[]
name|conf
init|=
name|confs
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|ops
init|=
name|conf
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"->"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ops
operator|.
name|length
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|ops
index|[
literal|0
index|]
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|addError
argument_list|(
literal|"invalid conf "
operator|+
name|conf
index|[
name|i
index|]
operator|+
literal|" for "
operator|+
name|_dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|+
literal|": mapping required in a list of confs"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|ops
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|ops
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ops
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
index|[]
name|modConfs
init|=
name|ops
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|depConfs
init|=
name|ops
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|modConfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|depConfs
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|_dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|modConfs
index|[
name|j
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|depConfs
index|[
name|k
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|addError
argument_list|(
literal|"invalid conf "
operator|+
name|conf
index|[
name|i
index|]
operator|+
literal|" for "
operator|+
name|_dd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addDependencyArtifactsIncludes
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|_state
operator|=
name|ARTIFACT_INCLUDE
expr_stmt|;
name|addDependencyArtifact
argument_list|(
name|attributes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addDependencyArtifactsExcludes
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|_state
operator|=
name|ARTIFACT_EXCLUDE
expr_stmt|;
name|addDependencyArtifact
argument_list|(
name|attributes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addDependencyArtifact
parameter_list|(
name|Attributes
name|attributes
parameter_list|,
name|boolean
name|includes
parameter_list|)
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|==
literal|null
condition|?
literal|".*"
else|:
name|name
expr_stmt|;
name|String
name|type
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|type
operator|=
name|type
operator|==
literal|null
condition|?
literal|".*"
else|:
name|type
expr_stmt|;
name|String
name|ext
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"ext"
argument_list|)
decl_stmt|;
name|ext
operator|=
name|ext
operator|!=
literal|null
condition|?
name|ext
else|:
name|type
expr_stmt|;
name|_dad
operator|=
operator|new
name|DefaultDependencyArtifactDescriptor
argument_list|(
name|_dd
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|ext
argument_list|,
name|includes
argument_list|)
expr_stmt|;
name|String
name|confs
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
decl_stmt|;
comment|// only add confs if they are specified. if they aren't, endElement will handle this
comment|// only if there are no conf defined in sub elements
if|if
condition|(
name|confs
operator|!=
literal|null
operator|&&
name|confs
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|conf
decl_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|confs
argument_list|)
condition|)
block|{
name|conf
operator|=
name|_md
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|=
name|confs
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|_dad
operator|.
name|addConfiguration
argument_list|(
name|conf
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|_state
operator|==
name|PUB
operator|&&
literal|"artifact"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|_artifact
operator|.
name|getConfigurations
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|_md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|_artifact
operator|.
name|addConfiguration
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|_md
operator|.
name|addArtifact
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
name|_artifact
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"configurations"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|checkConfigurations
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_state
operator|==
name|ARTIFACT_INCLUDE
operator|&&
operator|(
literal|"artifact"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|||
literal|"include"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|)
operator|)
operator|||
operator|(
name|_state
operator|==
name|ARTIFACT_EXCLUDE
operator|&&
literal|"exclude"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|)
condition|)
block|{
name|_state
operator|=
name|DEP
expr_stmt|;
if|if
condition|(
name|_dad
operator|.
name|getConfigurations
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|_md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|_dad
operator|.
name|addConfiguration
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
literal|"dependency"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|_dd
operator|.
name|getModuleConfigurations
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|parseDepsConfs
argument_list|(
name|_defaultConf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkConfigurations
parameter_list|()
block|{
if|if
condition|(
name|_md
operator|.
name|getConfigurations
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|_md
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"xml parsing: "
operator|+
name|getLocationString
argument_list|(
name|ex
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"xml parsing: "
operator|+
name|getLocationString
argument_list|(
name|ex
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
throws|throws
name|SAXException
block|{
name|addError
argument_list|(
literal|"[Fatal Error] "
operator|+
name|getLocationString
argument_list|(
name|ex
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Returns a string of the location. */
specifier|private
name|String
name|getLocationString
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
block|{
name|StringBuffer
name|str
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|systemId
init|=
name|ex
operator|.
name|getSystemId
argument_list|()
decl_stmt|;
if|if
condition|(
name|systemId
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|systemId
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
name|systemId
operator|=
name|systemId
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|systemId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|_res
operator|!=
literal|null
condition|)
block|{
name|str
operator|.
name|append
argument_list|(
name|_res
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|str
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// getLocationString(SAXParseException):String
specifier|private
name|void
name|addError
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|_res
operator|!=
literal|null
condition|)
block|{
name|_errors
operator|.
name|add
argument_list|(
name|msg
operator|+
literal|" in "
operator|+
name|_res
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_errors
operator|.
name|add
argument_list|(
name|msg
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|parseDescriptor
argument_list|(
operator|new
name|Ivy
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
literal|"test/xml/module1/module1.ivy.xml"
argument_list|)
operator|.
name|toURL
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

