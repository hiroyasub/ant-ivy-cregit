begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_comment
comment|/**  * Used to update ivy files. Uses ivy file as source and not ModuleDescriptor to preserve  * as much as possible the original syntax  *   * @author Hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|XmlModuleDescriptorUpdater
block|{
specifier|public
specifier|static
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
comment|/**      * used to copy a module descriptor xml file (also known as ivy file)      * and update the revisions of its dependencies, its status and revision      *       * @param srcURL the url of the source module descriptor file      * @param destFile The file to which the updated module descriptor should be output      * @param resolvedRevisions Map from ModuleId of dependencies to new revision (as String)      * @param status the new status, null to keep the old one      * @param revision the new revision, null to keep the old one      */
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|URL
name|srcURL
parameter_list|,
name|File
name|destFile
parameter_list|,
specifier|final
name|Map
name|resolvedRevisions
parameter_list|,
specifier|final
name|String
name|status
parameter_list|,
specifier|final
name|String
name|revision
parameter_list|,
specifier|final
name|Date
name|pubdate
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|update
argument_list|(
name|srcURL
argument_list|,
name|destFile
argument_list|,
name|resolvedRevisions
argument_list|,
name|status
argument_list|,
name|revision
argument_list|,
name|pubdate
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * used to copy a module descriptor xml file (also known as ivy file)      * and update the revisions of its dependencies, its status and revision      *       * @param srcURL the url of the source module descriptor file      * @param destFile The file to which the updated module descriptor should be output      * @param resolvedRevisions Map from ModuleId of dependencies to new revision (as String)      * @param status the new status, null to keep the old one      * @param revision the new revision, null to keep the old one      */
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|URL
name|srcURL
parameter_list|,
name|File
name|destFile
parameter_list|,
specifier|final
name|Map
name|resolvedRevisions
parameter_list|,
specifier|final
name|String
name|status
parameter_list|,
specifier|final
name|String
name|revision
parameter_list|,
specifier|final
name|Date
name|pubdate
parameter_list|,
specifier|final
name|String
name|resolverName
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|destFile
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|destFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|destFile
argument_list|)
expr_stmt|;
specifier|final
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|fos
argument_list|)
decl_stmt|;
name|copyHeader
argument_list|(
name|srcURL
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|XMLHelper
operator|.
name|parse
argument_list|(
name|srcURL
argument_list|,
literal|null
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
block|{
comment|// never print *ln* cause \n is found in copied characters stream
comment|// nor do we need do handle indentation, original one is maintained except for attributes
specifier|private
name|String
name|_organisation
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_justOpen
init|=
literal|null
decl_stmt|;
comment|// used to know if the last open tag was empty, to adjust termination with /> instead of></qName>
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|_justOpen
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"info"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|_organisation
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"organisation"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<info organisation=\""
operator|+
name|_organisation
operator|+
literal|"\" module=\""
operator|+
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" revision=\""
operator|+
name|revision
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"revision"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" revision=\""
operator|+
name|attributes
operator|.
name|getValue
argument_list|(
literal|"revision"
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" status=\""
operator|+
name|status
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|" status=\""
operator|+
name|attributes
operator|.
name|getValue
argument_list|(
literal|"status"
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pubdate
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" publication=\""
operator|+
name|Ivy
operator|.
name|DATE_FORMAT
operator|.
name|format
argument_list|(
name|pubdate
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"publication"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" publication=\""
operator|+
name|attributes
operator|.
name|getValue
argument_list|(
literal|"publication"
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolverName
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" resolver=\""
operator|+
name|resolverName
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"resolver"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" resolver=\""
operator|+
name|attributes
operator|.
name|getValue
argument_list|(
literal|"resolver"
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"dependency"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<dependency"
argument_list|)
expr_stmt|;
name|String
name|org
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"org"
argument_list|)
decl_stmt|;
name|org
operator|=
name|org
operator|==
literal|null
condition|?
name|_organisation
else|:
name|org
expr_stmt|;
name|ModuleId
name|mid
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attName
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"rev"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|String
name|rev
init|=
operator|(
name|String
operator|)
name|resolvedRevisions
operator|.
name|get
argument_list|(
name|mid
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" rev=\""
operator|+
name|rev
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|" rev=\""
operator|+
name|attributes
operator|.
name|getValue
argument_list|(
literal|"rev"
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|attName
operator|+
literal|"=\""
operator|+
name|attributes
operator|.
name|getValue
argument_list|(
name|attName
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// copy
name|out
operator|.
name|print
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
name|_justOpen
operator|=
name|qName
expr_stmt|;
comment|//                    indent.append("\t");
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|_justOpen
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|_justOpen
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|ch
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|qName
operator|.
name|equals
argument_list|(
name|_justOpen
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|"</"
operator|+
name|qName
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
name|_justOpen
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|IllegalStateException
name|ise
init|=
operator|new
name|IllegalStateException
argument_list|(
literal|"impossible to update "
operator|+
name|srcURL
operator|+
literal|": parser problem"
argument_list|)
decl_stmt|;
name|ise
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ise
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
comment|/**      * Copy xml header from src url ivy file to given printwriter      * In fact, copies everything before<ivy-module to out, except      * if<ivy-module is not found, in which case nothing is copied.      *       * @param srcURL      * @param out      * @throws IOException      */
specifier|private
specifier|static
name|void
name|copyHeader
parameter_list|(
name|URL
name|srcURL
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|srcURL
operator|.
name|openStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
init|;
name|line
operator|!=
literal|null
condition|;
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
control|)
block|{
name|int
name|index
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|"<ivy-module"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|test
init|=
operator|new
name|File
argument_list|(
literal|"test/xml/module1/module1.ivy.xml"
argument_list|)
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|Map
name|resolvedRevisions
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|resolvedRevisions
operator|.
name|put
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"jayasoft"
argument_list|,
literal|"module3"
argument_list|)
argument_list|,
literal|"3.3"
argument_list|)
expr_stmt|;
name|resolvedRevisions
operator|.
name|put
argument_list|(
operator|new
name|ModuleId
argument_list|(
literal|"jayasoft"
argument_list|,
literal|"module4"
argument_list|)
argument_list|,
literal|"4.4"
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|test
argument_list|,
operator|new
name|File
argument_list|(
literal|"build/cache/ivy.xml"
argument_list|)
argument_list|,
name|resolvedRevisions
argument_list|,
literal|"release"
argument_list|,
literal|"1.3"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"job done"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

