begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the licence found in LICENCE.TXT in the root directory of the project.  * Copyright Jayasoft 2005 - All rights reserved  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractModuleDescriptorParser
implements|implements
name|ModuleDescriptorParser
block|{
specifier|public
name|ModuleDescriptor
name|parseDescriptor
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|URL
name|descriptorURL
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|parseDescriptor
argument_list|(
name|ivy
argument_list|,
name|descriptorURL
argument_list|,
operator|new
name|URLResource
argument_list|(
name|descriptorURL
argument_list|)
argument_list|,
name|validate
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
specifier|static
class|class
name|AbstractParser
extends|extends
name|DefaultHandler
block|{
specifier|private
name|String
name|_defaultConf
decl_stmt|;
specifier|private
name|DefaultDependencyDescriptor
name|_defaultConfMappingDescriptor
decl_stmt|;
specifier|private
name|Resource
name|_res
decl_stmt|;
specifier|private
name|List
name|_errors
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|checkErrors
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|_errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|_errors
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|setResource
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
name|_res
operator|=
name|res
expr_stmt|;
comment|// used for log and date only
block|}
specifier|protected
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|_res
return|;
block|}
specifier|protected
name|String
name|getDefaultConf
parameter_list|()
block|{
return|return
name|_defaultConf
return|;
block|}
specifier|protected
name|void
name|setDefaultConf
parameter_list|(
name|String
name|defaultConf
parameter_list|)
block|{
name|_defaultConf
operator|=
name|defaultConf
expr_stmt|;
block|}
specifier|protected
name|void
name|parseDepsConfs
parameter_list|(
name|String
name|confs
parameter_list|,
name|DefaultDependencyDescriptor
name|dd
parameter_list|)
block|{
name|parseDepsConfs
argument_list|(
name|confs
argument_list|,
name|dd
argument_list|,
name|_defaultConf
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|parseDepsConfs
parameter_list|(
name|String
name|confs
parameter_list|,
name|DefaultDependencyDescriptor
name|dd
parameter_list|,
name|boolean
name|useDefaultMappingToGuessRightOperande
parameter_list|)
block|{
name|String
index|[]
name|conf
init|=
name|confs
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|ops
init|=
name|conf
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"->"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ops
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
index|[]
name|modConfs
init|=
name|ops
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|useDefaultMappingToGuessRightOperande
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|modConfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|modConfs
index|[
name|j
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|modConfs
index|[
name|j
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|modConfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
index|[]
name|depConfs
init|=
name|getDefaultConfMapping
argument_list|()
operator|.
name|getDependencyConfigurations
argument_list|(
name|modConfs
index|[
name|j
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|depConfs
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|modConfs
index|[
name|j
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|depConfs
index|[
name|k
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|ops
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
index|[]
name|modConfs
init|=
name|ops
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|depConfs
init|=
name|ops
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|modConfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|depConfs
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|modConfs
index|[
name|j
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|depConfs
index|[
name|k
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|addError
argument_list|(
literal|"invalid conf "
operator|+
name|conf
index|[
name|i
index|]
operator|+
literal|" for "
operator|+
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|DependencyDescriptor
name|getDefaultConfMapping
parameter_list|()
block|{
if|if
condition|(
name|_defaultConfMappingDescriptor
operator|==
literal|null
condition|)
block|{
name|_defaultConfMappingDescriptor
operator|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|parseDepsConfs
argument_list|(
name|_defaultConf
argument_list|,
name|_defaultConfMappingDescriptor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|_defaultConfMappingDescriptor
return|;
block|}
specifier|protected
name|void
name|addError
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|_res
operator|!=
literal|null
condition|)
block|{
name|_errors
operator|.
name|add
argument_list|(
name|msg
operator|+
literal|" in "
operator|+
name|_res
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_errors
operator|.
name|add
argument_list|(
name|msg
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"xml parsing: "
operator|+
name|getLocationString
argument_list|(
name|ex
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
block|{
name|addError
argument_list|(
literal|"xml parsing: "
operator|+
name|getLocationString
argument_list|(
name|ex
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
throws|throws
name|SAXException
block|{
name|addError
argument_list|(
literal|"[Fatal Error] "
operator|+
name|getLocationString
argument_list|(
name|ex
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Returns a string of the location. */
specifier|private
name|String
name|getLocationString
parameter_list|(
name|SAXParseException
name|ex
parameter_list|)
block|{
name|StringBuffer
name|str
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|systemId
init|=
name|ex
operator|.
name|getSystemId
argument_list|()
decl_stmt|;
if|if
condition|(
name|systemId
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|systemId
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
name|systemId
operator|=
name|systemId
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|systemId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|getResource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|str
operator|.
name|append
argument_list|(
name|getResource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|str
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// getLocationString(SAXParseException):String
block|}
block|}
end_class

end_unit

