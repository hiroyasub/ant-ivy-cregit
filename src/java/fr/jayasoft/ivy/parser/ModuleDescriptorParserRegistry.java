begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the licence found in LICENCE.TXT in the root directory of the project.  * Copyright Jayasoft 2005 - All rights reserved  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|external
operator|.
name|m2
operator|.
name|PomModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlModuleDescriptorParser
import|;
end_import

begin_class
specifier|public
class|class
name|ModuleDescriptorParserRegistry
extends|extends
name|AbstractModuleDescriptorParser
block|{
specifier|private
specifier|static
name|ModuleDescriptorParserRegistry
name|INSTANCE
init|=
operator|new
name|ModuleDescriptorParserRegistry
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|ModuleDescriptorParserRegistry
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
specifier|private
name|List
name|_parsers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|ModuleDescriptorParserRegistry
parameter_list|()
block|{
name|_parsers
operator|.
name|add
argument_list|(
name|PomModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|_parsers
operator|.
name|add
argument_list|(
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModuleDescriptorParser
name|getParser
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|_parsers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleDescriptorParser
name|parser
init|=
operator|(
name|ModuleDescriptorParser
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|accept
argument_list|(
name|res
argument_list|)
condition|)
block|{
return|return
name|parser
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|ModuleDescriptor
name|parseDescriptor
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|URL
name|descriptorURL
parameter_list|,
name|Resource
name|res
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorParser
name|parser
init|=
name|getParser
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"no module descriptor parser found for "
operator|+
name|res
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|parser
operator|.
name|parseDescriptor
argument_list|(
name|ivy
argument_list|,
name|descriptorURL
argument_list|,
name|res
argument_list|,
name|validate
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
return|return
name|getParser
argument_list|(
name|res
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|toIvyFile
parameter_list|(
name|URL
name|srcURL
parameter_list|,
name|Resource
name|res
parameter_list|,
name|File
name|destFile
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorParser
name|parser
init|=
name|getParser
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"no module descriptor parser found for "
operator|+
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parser
operator|.
name|toIvyFile
argument_list|(
name|srcURL
argument_list|,
name|res
argument_list|,
name|destFile
argument_list|,
name|md
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

