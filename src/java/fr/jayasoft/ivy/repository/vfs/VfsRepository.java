begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * This file is subject to the licence found in LICENCE.TXT in the root directory of the project.  * Copyright Jayasoft 2005 - All rights reserved   * Implementation of a VFS repository  *   * @author glen  * @author Matt Inger  * @author Stephen Nesbitt  *   */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|vfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|vfs
operator|.
name|FileContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|vfs
operator|.
name|FileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|vfs
operator|.
name|impl
operator|.
name|StandardFileSystemManager
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|AbstractRepository
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|TransferEvent
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|CopyProgressEvent
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|CopyProgressListener
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|VfsRepository
extends|extends
name|AbstractRepository
block|{
comment|/** 	 * Name of the resource defining the Ivy VFS Repo configuration. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|IVY_VFS_CONFIG
init|=
literal|"ivy_vfs.xml"
decl_stmt|;
specifier|private
name|StandardFileSystemManager
name|_manager
init|=
literal|null
decl_stmt|;
comment|/** 	 * Create a new Ivy VFS Repository Instance 	 * 	 */
specifier|public
name|VfsRepository
parameter_list|()
block|{
try|try
block|{
comment|/* 			 * The DefaultFileSystemManager gets its configuration from the jakarta-vfs-common 			 * implementation which includes the res and tmp schemes which are of no use to use here. 			 * Using StandardFileSystemManager lets us specify which schemes to support as well as  			 * providing a mechanism to change this support without recompilation. 			 */
name|_manager
operator|=
operator|new
name|StandardFileSystemManager
argument_list|()
expr_stmt|;
name|_manager
operator|.
name|setConfiguration
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|IVY_VFS_CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|_manager
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// Generate and print a list of available schemes
name|Message
operator|.
name|verbose
argument_list|(
literal|"Available VFS schemes..."
argument_list|)
expr_stmt|;
name|String
index|[]
name|schemes
init|=
name|_manager
operator|.
name|getSchemes
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|schemes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|schemes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"VFS Supported Scheme: "
operator|+
name|schemes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileSystemException
name|e
parameter_list|)
block|{
comment|/* 			 * If our attempt to initialize a VFS Repository fails we log the failure 			 * but continue on. Given that an Ivy instance may involve numerous 			 * different repository types, it seems overly cautious to throw a runtime 			 * exception on the initialization failure of just one repository type. 			 */
name|Message
operator|.
name|error
argument_list|(
literal|"Unable to initialize VFS repository manager!"
argument_list|)
expr_stmt|;
name|Message
operator|.
name|error
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|CopyProgressListener
name|_progress
init|=
operator|new
name|CopyProgressListener
argument_list|()
block|{
specifier|public
name|void
name|start
parameter_list|(
name|CopyProgressEvent
name|evt
parameter_list|)
block|{
name|fireTransferStarted
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|progress
parameter_list|(
name|CopyProgressEvent
name|evt
parameter_list|)
block|{
name|fireTransferProgress
argument_list|(
name|evt
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|evt
operator|.
name|getReadBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|end
parameter_list|(
name|CopyProgressEvent
name|evt
parameter_list|)
block|{
name|fireTransferCompleted
argument_list|(
name|evt
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|evt
operator|.
name|getReadBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
name|_manager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Get a VfsResource 	 *  	 * @param source a<code>String</code> identifying a VFS Resource 	 * @throws code>IOException</code> on failure 	 * @see "Supported File Systems in the jakarta-commons-vfs documentation" 	 */
specifier|public
name|Resource
name|getResource
parameter_list|(
name|String
name|vfsURI
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|VfsResource
argument_list|(
name|vfsURI
argument_list|,
name|_manager
argument_list|)
return|;
block|}
comment|/** 	 * Transfer a VFS Resource from the repository to the local file system. 	 *  	 * @param srcVfsURI a<code>String</code> identifying the VFS resource to be fetched 	 * @param destination a<code>File</code> identifying the destination file 	 * @throws<code>IOException</code> on failure 	 * @see "Supported File Systems in the jakarta-commons-vfs documentation" 	 */
specifier|public
name|void
name|get
parameter_list|(
name|String
name|srcVfsURI
parameter_list|,
name|File
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|VfsResource
name|src
init|=
operator|new
name|VfsResource
argument_list|(
name|srcVfsURI
argument_list|,
name|_manager
argument_list|)
decl_stmt|;
name|fireTransferInitiated
argument_list|(
name|src
argument_list|,
name|TransferEvent
operator|.
name|REQUEST_GET
argument_list|)
expr_stmt|;
try|try
block|{
name|FileContent
name|content
init|=
name|src
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid vfs uri "
operator|+
name|srcVfsURI
operator|+
literal|": no content found"
argument_list|)
throw|;
block|}
name|FileUtil
operator|.
name|copy
argument_list|(
name|content
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|destination
argument_list|,
name|_progress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fireTransferError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|fireTransferError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/** 	 * Return a listing of the contents of a parent directory. Listing is a set 	 * of strings representing VFS URIs. 	 *  	 * @param a<code>String</code> providing identifyiong a VFS provided resource 	 * @throws<code>IOException</code> on failure. 	 * @see "Supported File Systems in the jakarta-commons-vfs documentation" 	 */
specifier|public
name|List
name|list
parameter_list|(
name|String
name|vfsURI
parameter_list|)
throws|throws
name|IOException
block|{
name|VfsResource
name|res
init|=
operator|new
name|VfsResource
argument_list|(
name|vfsURI
argument_list|,
name|_manager
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|getChildren
argument_list|()
return|;
block|}
empty_stmt|;
comment|/** 	 * Transfer an Ivy resource to a VFS repository 	 *  	 * @param source a<code>File</code> indentifying the local file to transfer to the repository 	 * @param vfsURI a<code>String</code> identifying the destination VFS Resource. 	 * @param overwrite whether to overwrite an existing resource. 	 * @throws<code>IOException</code> on failure. 	 * @see "Supported File Systems in the jakarta-commons-vfs documentation" 	 *  	 */
specifier|public
name|void
name|put
parameter_list|(
name|File
name|source
parameter_list|,
name|String
name|vfsURI
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|VfsResource
name|dest
init|=
operator|new
name|VfsResource
argument_list|(
name|vfsURI
argument_list|,
name|_manager
argument_list|)
decl_stmt|;
name|fireTransferInitiated
argument_list|(
name|dest
argument_list|,
name|TransferEvent
operator|.
name|REQUEST_PUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|dest
operator|.
name|physicallyExists
argument_list|()
operator|&&
operator|!
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot copy. Destination file: "
operator|+
name|dest
operator|.
name|getName
argument_list|()
operator|+
literal|" exists and overwrite not set."
argument_list|)
throw|;
block|}
if|if
condition|(
name|dest
operator|.
name|getContent
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid vfs uri "
operator|+
name|vfsURI
operator|+
literal|" to put data to: resource has no content"
argument_list|)
throw|;
block|}
name|FileUtil
operator|.
name|copy
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
argument_list|,
name|dest
operator|.
name|getContent
argument_list|()
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|_progress
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

