begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|AbstractRepository
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|RepositoryCopyProgressListener
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|TransferEvent
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_class
specifier|public
class|class
name|FileRepository
extends|extends
name|AbstractRepository
block|{
specifier|private
name|RepositoryCopyProgressListener
name|_progress
init|=
operator|new
name|RepositoryCopyProgressListener
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|private
name|File
name|_baseDir
decl_stmt|;
specifier|private
name|boolean
name|_local
init|=
literal|true
decl_stmt|;
specifier|public
name|FileRepository
parameter_list|()
block|{
name|_baseDir
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|FileRepository
parameter_list|(
name|File
name|basedir
parameter_list|)
block|{
name|_baseDir
operator|=
name|basedir
expr_stmt|;
block|}
specifier|public
name|Resource
name|getResource
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileResource
argument_list|(
name|this
argument_list|,
name|getFile
argument_list|(
name|source
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|get
parameter_list|(
name|String
name|source
parameter_list|,
name|File
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|fireTransferInitiated
argument_list|(
name|getResource
argument_list|(
name|source
argument_list|)
argument_list|,
name|TransferEvent
operator|.
name|REQUEST_GET
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|getFile
argument_list|(
name|source
argument_list|)
argument_list|,
name|destination
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|File
name|source
parameter_list|,
name|String
name|destination
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|fireTransferInitiated
argument_list|(
name|getResource
argument_list|(
name|destination
argument_list|)
argument_list|,
name|TransferEvent
operator|.
name|REQUEST_PUT
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|source
argument_list|,
name|getFile
argument_list|(
name|destination
argument_list|)
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copy
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|destination
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|_progress
operator|.
name|setTotalLength
argument_list|(
operator|new
name|Long
argument_list|(
name|src
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|destination
argument_list|,
name|_progress
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fireTransferError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|fireTransferError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|_progress
operator|.
name|setTotalLength
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
name|list
parameter_list|(
name|String
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
name|getFile
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
index|[]
name|names
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|(
name|names
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|parent
operator|+
name|getFileSeparator
argument_list|()
operator|+
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|File
name|getFile
parameter_list|(
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|_baseDir
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|_baseDir
argument_list|,
name|source
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|File
argument_list|(
name|source
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|isLocal
parameter_list|()
block|{
return|return
name|_local
return|;
block|}
specifier|public
name|void
name|setLocal
parameter_list|(
name|boolean
name|local
parameter_list|)
block|{
name|_local
operator|=
name|local
expr_stmt|;
block|}
block|}
end_class

end_unit

