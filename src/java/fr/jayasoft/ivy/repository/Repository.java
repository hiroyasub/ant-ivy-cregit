begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the licence found in LICENCE.TXT in the root directory of the project.  * Copyright Jayasoft 2005 - All rights reserved  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a collection of resources available to Ivy. Ivy uses one or more  * repositories as both a source of resources for Ivy enabled build systems and  * as a distribution center for resources generated by Ivy enabled build systems.  *</p>  *<p>A repository supports the following fundamental operations  *<ul>  *<li>retrieving a resource from the repository.</li>  *<li>transfering a resource to the repository.</li>  *<li>retrieving a listing of resources.</li>  *</ul>  *</p>  *<h4>Resource Retrieval</h4>  *</p>  *<p>{@link #get} retrieves a resource specified by a provided identifier creating a new file .</p>  *</p>  *<h4>resource Publication</h4>  *</p>  *<p>{@link #put} transfers a file to the repository.  *</p>  *</p>  *<h4>resource Listing</h4>  *</p>  *<p>{@link #list} returns a listing of file like objects  *    belonging to a specified parent directory.</p>  *</p>  */
end_comment

begin_interface
specifier|public
interface|interface
name|Repository
block|{
comment|/** 	 * Return the resource associated with a specified identifier. 	 *  	 * @param source A string identifying the resource. 	 * @return The resource associated with the resource identifier. 	 * @throws IOException On failure to get resource. 	 */
name|Resource
name|getResource
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Fetch a resource from the repository.      *       * @param source A string identifying the resource to be fetched.      * @param destination Where to place the fetched resource.      * @throws IOException On retrieval failure.      */
name|void
name|get
parameter_list|(
name|String
name|source
parameter_list|,
name|File
name|destination
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Transfer a resource to the repository      *       * @param source The local file to be transferred.      * @param destination Where to transfer the resource.      * @param overwrite Whether the transfer should overwrite an existing resource.      * @throws IOException On publication failure.      */
name|void
name|put
parameter_list|(
name|File
name|source
parameter_list|,
name|String
name|destination
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Return a listing of resources      *       * @param parent The parent directory from which to generate the listing.      * @return A listing of the parent directory's file content.      * @throws IOException On listing failure.      */
name|List
name|list
parameter_list|(
name|String
name|parent
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Add a listener to the repository.      *       * @param listener The listener to attach to the repository.      */
name|void
name|addTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
function_decl|;
comment|/**      * Remove a listener on the repository      *       * @param listener The listener to remove      */
name|void
name|removeTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
function_decl|;
comment|/**      * Determine if a given listener is attached to the repository.      *       * @param listener The listener being quireied      * @return<code>true</code> if the provided listener is attached to the repository,      *<code>false</code> if not.      */
name|boolean
name|hasTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
function_decl|;
comment|/**      * Get the repository's file separator string.      *       * @return The repository's file separator delimiter      */
name|String
name|getFileSeparator
parameter_list|()
function_decl|;
comment|/**      * Normalize a string.      *       * @param source The string to normalize.      * @return The normalized string.      */
name|String
name|standardize
parameter_list|(
name|String
name|source
parameter_list|)
function_decl|;
comment|/**      * Return the name of the repository      *       */
name|String
name|getName
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

