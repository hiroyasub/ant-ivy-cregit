begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
package|;
end_package

begin_class
specifier|public
specifier|abstract
class|class
name|LazyResource
implements|implements
name|Resource
block|{
specifier|private
name|boolean
name|_init
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|_local
decl_stmt|;
specifier|private
name|String
name|_name
decl_stmt|;
specifier|private
name|long
name|_lastModified
decl_stmt|;
specifier|private
name|long
name|_contentLength
decl_stmt|;
specifier|private
name|boolean
name|_exists
decl_stmt|;
specifier|public
name|LazyResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|_name
operator|=
name|name
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|init
parameter_list|()
function_decl|;
specifier|private
name|void
name|checkInit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|_init
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
name|_init
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
name|checkInit
argument_list|()
expr_stmt|;
return|return
name|_exists
return|;
block|}
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
name|checkInit
argument_list|()
expr_stmt|;
return|return
name|_contentLength
return|;
block|}
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
name|checkInit
argument_list|()
expr_stmt|;
return|return
name|_lastModified
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
specifier|public
name|boolean
name|isLocal
parameter_list|()
block|{
name|checkInit
argument_list|()
expr_stmt|;
return|return
name|_local
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|protected
name|void
name|setContentLength
parameter_list|(
name|long
name|contentLength
parameter_list|)
block|{
name|_contentLength
operator|=
name|contentLength
expr_stmt|;
block|}
specifier|protected
name|void
name|setExists
parameter_list|(
name|boolean
name|exists
parameter_list|)
block|{
name|_exists
operator|=
name|exists
expr_stmt|;
block|}
specifier|protected
name|void
name|setLastModified
parameter_list|(
name|long
name|lastModified
parameter_list|)
block|{
name|_lastModified
operator|=
name|lastModified
expr_stmt|;
block|}
specifier|protected
name|void
name|setLocal
parameter_list|(
name|boolean
name|local
parameter_list|)
block|{
name|_local
operator|=
name|local
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
name|setContentLength
argument_list|(
name|r
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
name|setLocal
argument_list|(
name|r
operator|.
name|isLocal
argument_list|()
argument_list|)
expr_stmt|;
name|setLastModified
argument_list|(
name|r
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
name|setExists
argument_list|(
name|r
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

