begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the licence found in LICENCE.TXT in the root directory of the project.  * Copyright Jayasoft 2005 - All rights reserved  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|sftp
package|;
end_package

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_class
specifier|public
class|class
name|SFTPResource
implements|implements
name|Resource
block|{
specifier|private
name|SFTPRepository
name|_repository
decl_stmt|;
specifier|private
name|String
name|_path
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|_init
init|=
literal|false
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|_exists
decl_stmt|;
specifier|private
specifier|transient
name|long
name|_lastModified
decl_stmt|;
specifier|private
specifier|transient
name|long
name|_contentLength
decl_stmt|;
specifier|public
name|SFTPResource
parameter_list|(
name|SFTPRepository
name|repository
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|_repository
operator|=
name|repository
expr_stmt|;
name|_path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_path
return|;
block|}
specifier|public
name|Resource
name|clone
parameter_list|(
name|String
name|cloneName
parameter_list|)
block|{
return|return
operator|new
name|SFTPResource
argument_list|(
name|_repository
argument_list|,
name|cloneName
argument_list|)
return|;
block|}
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|_lastModified
return|;
block|}
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|_contentLength
return|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|_exists
return|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
operator|!
name|_init
condition|)
block|{
name|Resource
name|r
init|=
name|_repository
operator|.
name|resolveResource
argument_list|(
name|_path
argument_list|)
decl_stmt|;
name|_contentLength
operator|=
name|r
operator|.
name|getContentLength
argument_list|()
expr_stmt|;
name|_lastModified
operator|=
name|r
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
name|_exists
operator|=
name|r
operator|.
name|exists
argument_list|()
expr_stmt|;
name|_init
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isLocal
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

