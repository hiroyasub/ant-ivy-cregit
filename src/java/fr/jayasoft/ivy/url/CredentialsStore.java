begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|url
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  *   * @author Christian Riege  * @author Xavier Hanin  */
end_comment

begin_class
specifier|public
class|class
name|CredentialsStore
block|{
comment|/**      * A Map of Credentials objects keyed by the 'key' of the Credentials.      */
specifier|private
specifier|final
specifier|static
name|Map
name|keyring
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|CredentialsStore
name|INSTANCE
init|=
operator|new
name|CredentialsStore
argument_list|()
decl_stmt|;
specifier|private
name|CredentialsStore
parameter_list|()
block|{
block|}
specifier|public
name|void
name|addCredentials
parameter_list|(
name|String
name|realm
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|passwd
parameter_list|)
block|{
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Credentials
name|c
init|=
operator|new
name|Credentials
argument_list|(
name|realm
argument_list|,
name|host
argument_list|,
name|userName
argument_list|,
name|passwd
argument_list|)
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"credentials added: "
operator|+
name|c
argument_list|)
expr_stmt|;
name|keyring
operator|.
name|put
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
comment|// add also with host only, to be able to find credential with host only
comment|// (useful for httpclient especially)
name|keyring
operator|.
name|put
argument_list|(
name|c
operator|.
name|getHost
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Credentials
name|getCredentials
parameter_list|(
name|String
name|realm
parameter_list|,
name|String
name|host
parameter_list|)
block|{
return|return
operator|(
name|Credentials
operator|)
name|keyring
operator|.
name|get
argument_list|(
name|Credentials
operator|.
name|buildKey
argument_list|(
name|realm
argument_list|,
name|host
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

