begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This class can be used as the default implementation for DependencyDescriptor.  * It implements required methods and enables to fill dependency information  * with the addDependencyConfiguration method.  *   * @author Xavier Hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|DefaultDependencyDescriptor
implements|implements
name|DependencyDescriptor
block|{
specifier|private
name|ModuleRevisionId
name|_revId
decl_stmt|;
specifier|private
name|Map
name|_confs
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|_artifactsIncludes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String masterConf -> Collection(DependencyArtifactDescriptor))
specifier|private
name|Map
name|_artifactsExcludes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String masterConf -> Collection(DependencyArtifactDescriptor))
specifier|private
name|Set
name|_extends
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|/**      * Used to indicate that this revision must be used in case of conflicts, independently      * of conflicts manager      */
specifier|private
name|boolean
name|_force
decl_stmt|;
comment|/**      * Used to indicate that the dependency is a changing one, i.e. that ivy should not rely on the version to know if it can trust artifacts in cache      */
specifier|private
name|boolean
name|_changing
decl_stmt|;
specifier|private
name|ModuleRevisionId
name|_parentId
decl_stmt|;
specifier|private
name|boolean
name|_transitive
init|=
literal|true
decl_stmt|;
specifier|public
name|DefaultDependencyDescriptor
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
name|_parentId
operator|=
name|dd
operator|.
name|getParentRevisionId
argument_list|()
expr_stmt|;
name|_revId
operator|=
operator|new
name|ModuleRevisionId
argument_list|(
name|dd
operator|.
name|getDependencyId
argument_list|()
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|_force
operator|=
name|dd
operator|.
name|isForce
argument_list|()
expr_stmt|;
name|_changing
operator|=
name|dd
operator|.
name|isChanging
argument_list|()
expr_stmt|;
name|_transitive
operator|=
name|dd
operator|.
name|isTransitive
argument_list|()
expr_stmt|;
name|String
index|[]
name|moduleConfs
init|=
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|moduleConfs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|_confs
operator|.
name|put
argument_list|(
name|moduleConfs
index|[
name|i
index|]
argument_list|,
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyConfigurations
argument_list|(
name|moduleConfs
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|_artifactsExcludes
operator|.
name|put
argument_list|(
name|moduleConfs
index|[
name|i
index|]
argument_list|,
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyArtifactsExcludes
argument_list|(
name|moduleConfs
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|_artifactsIncludes
operator|.
name|put
argument_list|(
name|moduleConfs
index|[
name|i
index|]
argument_list|,
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dd
operator|.
name|getDependencyArtifactsIncludes
argument_list|(
name|moduleConfs
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DefaultDependencyDescriptor
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|changing
parameter_list|,
name|boolean
name|transitive
parameter_list|)
block|{
name|_parentId
operator|=
name|md
operator|.
name|getModuleRevisionId
argument_list|()
expr_stmt|;
name|_revId
operator|=
name|mrid
expr_stmt|;
name|_force
operator|=
name|force
expr_stmt|;
name|_changing
operator|=
name|changing
expr_stmt|;
name|_transitive
operator|=
name|transitive
expr_stmt|;
block|}
specifier|public
name|DefaultDependencyDescriptor
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
name|this
argument_list|(
name|mrid
argument_list|,
name|force
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultDependencyDescriptor
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|changing
parameter_list|)
block|{
name|_revId
operator|=
name|mrid
expr_stmt|;
name|_force
operator|=
name|force
expr_stmt|;
name|_changing
operator|=
name|changing
expr_stmt|;
block|}
specifier|public
name|ModuleId
name|getDependencyId
parameter_list|()
block|{
return|return
name|getDependencyRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
return|;
block|}
specifier|public
name|ModuleRevisionId
name|getDependencyRevisionId
parameter_list|()
block|{
return|return
name|_revId
return|;
block|}
specifier|public
name|String
index|[]
name|getModuleConfigurations
parameter_list|()
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|_confs
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|_confs
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|getDependencyConfigurations
parameter_list|(
name|String
name|moduleConfiguration
parameter_list|)
block|{
name|List
name|confs
init|=
operator|(
name|List
operator|)
name|_confs
operator|.
name|get
argument_list|(
name|moduleConfiguration
argument_list|)
decl_stmt|;
name|List
name|defConfs
init|=
operator|(
name|List
operator|)
name|_confs
operator|.
name|get
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
name|Collection
name|ret
init|=
operator|new
name|LinkedHashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|confs
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|confs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defConfs
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|defConfs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|remove
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|moduleConfiguration
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
return|;
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|getDependencyConfigurations
parameter_list|(
name|String
index|[]
name|moduleConfigurations
parameter_list|)
block|{
name|Set
name|confs
init|=
operator|new
name|LinkedHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|moduleConfigurations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|confs
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getDependencyConfigurations
argument_list|(
name|moduleConfigurations
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confs
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
return|;
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|confs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|confs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|DependencyArtifactDescriptor
index|[]
name|getDependencyArtifactsIncludes
parameter_list|(
name|String
name|moduleConfiguration
parameter_list|)
block|{
return|return
name|getDependencyArtifacts
argument_list|(
name|moduleConfiguration
argument_list|,
name|_artifactsIncludes
argument_list|)
return|;
block|}
specifier|public
name|DependencyArtifactDescriptor
index|[]
name|getDependencyArtifactsExcludes
parameter_list|(
name|String
name|moduleConfiguration
parameter_list|)
block|{
return|return
name|getDependencyArtifacts
argument_list|(
name|moduleConfiguration
argument_list|,
name|_artifactsExcludes
argument_list|)
return|;
block|}
specifier|private
name|DependencyArtifactDescriptor
index|[]
name|getDependencyArtifacts
parameter_list|(
name|String
name|moduleConfiguration
parameter_list|,
name|Map
name|artifactsMap
parameter_list|)
block|{
if|if
condition|(
name|artifactsMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|DependencyArtifactDescriptor
index|[
literal|0
index|]
return|;
block|}
name|Collection
name|artifacts
init|=
operator|(
name|Collection
operator|)
name|artifactsMap
operator|.
name|get
argument_list|(
name|moduleConfiguration
argument_list|)
decl_stmt|;
name|Collection
name|defArtifacts
init|=
operator|(
name|Collection
operator|)
name|artifactsMap
operator|.
name|get
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
name|Set
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|artifacts
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defArtifacts
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|defArtifacts
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|DependencyArtifactDescriptor
index|[]
operator|)
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|DependencyArtifactDescriptor
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|DependencyArtifactDescriptor
index|[]
name|getDependencyArtifactsIncludes
parameter_list|(
name|String
index|[]
name|moduleConfigurations
parameter_list|)
block|{
name|Set
name|artifacts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|moduleConfigurations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|artifacts
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getDependencyArtifactsIncludes
argument_list|(
name|moduleConfigurations
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|DependencyArtifactDescriptor
index|[]
operator|)
name|artifacts
operator|.
name|toArray
argument_list|(
operator|new
name|DependencyArtifactDescriptor
index|[
name|artifacts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|DependencyArtifactDescriptor
index|[]
name|getDependencyArtifactsExcludes
parameter_list|(
name|String
index|[]
name|moduleConfigurations
parameter_list|)
block|{
name|Set
name|artifacts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|moduleConfigurations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|artifacts
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getDependencyArtifactsExcludes
argument_list|(
name|moduleConfigurations
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|DependencyArtifactDescriptor
index|[]
operator|)
name|artifacts
operator|.
name|toArray
argument_list|(
operator|new
name|DependencyArtifactDescriptor
index|[
name|artifacts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|DependencyArtifactDescriptor
index|[]
name|getAllDependencyArtifactsIncludes
parameter_list|()
block|{
return|return
name|getAllDependencyArtifacts
argument_list|(
name|_artifactsIncludes
argument_list|)
return|;
block|}
specifier|public
name|DependencyArtifactDescriptor
index|[]
name|getAllDependencyArtifactsExcludes
parameter_list|()
block|{
return|return
name|getAllDependencyArtifacts
argument_list|(
name|_artifactsExcludes
argument_list|)
return|;
block|}
specifier|private
name|DependencyArtifactDescriptor
index|[]
name|getAllDependencyArtifacts
parameter_list|(
name|Map
name|artifactsMap
parameter_list|)
block|{
name|Set
name|ret
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|artifactsMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Collection
name|artifacts
init|=
operator|(
name|Collection
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|DependencyArtifactDescriptor
index|[]
operator|)
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|DependencyArtifactDescriptor
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|addDependencyConfiguration
parameter_list|(
name|String
name|masterConf
parameter_list|,
name|String
name|depConf
parameter_list|)
block|{
name|List
name|confs
init|=
operator|(
name|List
operator|)
name|_confs
operator|.
name|get
argument_list|(
name|masterConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|confs
operator|==
literal|null
condition|)
block|{
name|confs
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|_confs
operator|.
name|put
argument_list|(
name|masterConf
argument_list|,
name|confs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|confs
operator|.
name|contains
argument_list|(
name|depConf
argument_list|)
condition|)
block|{
name|confs
operator|.
name|add
argument_list|(
name|depConf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addDependencyArtifactIncludes
parameter_list|(
name|String
name|masterConf
parameter_list|,
name|DependencyArtifactDescriptor
name|dad
parameter_list|)
block|{
name|addDependencyArtifacts
argument_list|(
name|masterConf
argument_list|,
name|dad
argument_list|,
name|_artifactsIncludes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDependencyArtifactExcludes
parameter_list|(
name|String
name|masterConf
parameter_list|,
name|DependencyArtifactDescriptor
name|dad
parameter_list|)
block|{
name|addDependencyArtifacts
argument_list|(
name|masterConf
argument_list|,
name|dad
argument_list|,
name|_artifactsExcludes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addDependencyArtifacts
parameter_list|(
name|String
name|masterConf
parameter_list|,
name|DependencyArtifactDescriptor
name|dad
parameter_list|,
name|Map
name|artifactsMap
parameter_list|)
block|{
name|Collection
name|artifacts
init|=
operator|(
name|Collection
operator|)
name|artifactsMap
operator|.
name|get
argument_list|(
name|masterConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifacts
operator|==
literal|null
condition|)
block|{
name|artifacts
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|artifactsMap
operator|.
name|put
argument_list|(
name|masterConf
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
block|}
name|artifacts
operator|.
name|add
argument_list|(
name|dad
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addExtends
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
name|_extends
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"dependency: "
operator|+
name|_revId
operator|+
literal|" "
operator|+
name|_confs
return|;
block|}
specifier|public
name|boolean
name|isForce
parameter_list|()
block|{
return|return
name|_force
return|;
block|}
specifier|public
name|ModuleRevisionId
name|getParentRevisionId
parameter_list|()
block|{
return|return
name|_parentId
return|;
block|}
specifier|public
name|boolean
name|isChanging
parameter_list|()
block|{
return|return
name|_changing
return|;
block|}
specifier|public
name|boolean
name|isTransitive
parameter_list|()
block|{
return|return
name|_transitive
return|;
block|}
block|}
end_class

end_unit

