begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultModuleRevision
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|IvyNode
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|LatestStrategy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ResolvedURL
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|DownloadReport
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|CopyProgressEvent
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|CopyProgressListener
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|IvyPattern
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlModuleDescriptorUpdater
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_comment
comment|/**  * @deprecated use RepositoryResolver instead  * @author Xavier Hanin  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractURLResolver
extends|extends
name|AbstractResolver
block|{
specifier|public
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|_workspaceName
decl_stmt|;
comment|/**      * True if the files resolved are dependent of the environment from which they have been resolved, false otherwise. In general, relative paths are dependent of the environment, and absolute paths including machine reference are not.       */
specifier|private
name|boolean
name|_envDependent
init|=
literal|true
decl_stmt|;
comment|/**      * The latest strategy to use to find latest among several artifacts      */
specifier|private
name|LatestStrategy
name|_latestStrategy
decl_stmt|;
specifier|private
name|String
name|_latestStrategyName
decl_stmt|;
specifier|private
name|List
name|_ivyattempts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|AbstractURLResolver
parameter_list|()
block|{
name|_workspaceName
operator|=
name|Ivy
operator|.
name|getLocalHostName
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getWorkspaceName
parameter_list|()
block|{
return|return
name|_workspaceName
return|;
block|}
specifier|public
name|void
name|setWorkspaceName
parameter_list|(
name|String
name|workspaceName
parameter_list|)
block|{
name|_workspaceName
operator|=
name|workspaceName
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnvDependent
parameter_list|()
block|{
return|return
name|_envDependent
return|;
block|}
specifier|public
name|void
name|setEnvDependent
parameter_list|(
name|boolean
name|envDependent
parameter_list|)
block|{
name|_envDependent
operator|=
name|envDependent
expr_stmt|;
block|}
specifier|public
name|LatestStrategy
name|getLatestStrategy
parameter_list|()
block|{
if|if
condition|(
name|_latestStrategy
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|_latestStrategyName
operator|!=
literal|null
condition|)
block|{
name|_latestStrategy
operator|=
name|getIvy
argument_list|()
operator|.
name|getLatestStrategy
argument_list|(
name|_latestStrategyName
argument_list|)
expr_stmt|;
if|if
condition|(
name|_latestStrategy
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"unknown latest strategy: "
operator|+
name|_latestStrategyName
argument_list|)
expr_stmt|;
name|_latestStrategy
operator|=
name|getIvy
argument_list|()
operator|.
name|getDefaultLatestStrategy
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|_latestStrategy
operator|=
name|getIvy
argument_list|()
operator|.
name|getDefaultLatestStrategy
argument_list|()
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": no latest strategy defined: using default"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|_latestStrategy
return|;
block|}
specifier|public
name|void
name|setLatestStrategy
parameter_list|(
name|LatestStrategy
name|latestStrategy
parameter_list|)
block|{
name|_latestStrategy
operator|=
name|latestStrategy
expr_stmt|;
block|}
specifier|public
name|void
name|setLatest
parameter_list|(
name|String
name|strategyName
parameter_list|)
block|{
name|_latestStrategyName
operator|=
name|strategyName
expr_stmt|;
block|}
specifier|public
name|ResolvedModuleRevision
name|getDependency
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
throws|throws
name|ParseException
block|{
name|_ivyattempts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
name|downloaded
init|=
literal|false
decl_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
comment|// check revision
name|int
name|index
init|=
name|mrid
operator|.
name|getRevision
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"@"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|mrid
operator|.
name|getRevision
argument_list|()
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|_workspaceName
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": unhandled revision => "
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|mrid
operator|.
name|isExactRevision
argument_list|()
operator|&&
operator|!
name|acceptLatest
argument_list|()
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"latest revisions not handled by "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|". impossible to resolve "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// look for ivy file
name|ResolvedURL
name|ivyURL
init|=
name|getIvyURL
argument_list|(
name|mrid
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|cachedIvyURL
init|=
literal|null
decl_stmt|;
comment|// get module descriptor
name|ModuleDescriptor
name|md
decl_stmt|;
if|if
condition|(
name|ivyURL
operator|==
literal|null
condition|)
block|{
name|md
operator|=
name|DefaultModuleDescriptor
operator|.
name|newDefaultInstance
argument_list|(
name|mrid
argument_list|,
name|dd
operator|.
name|getAllDependencyArtifactsIncludes
argument_list|()
argument_list|)
expr_stmt|;
name|ResolvedURL
name|artifactURL
init|=
name|findFirstArtifact
argument_list|(
name|md
argument_list|,
name|mrid
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactURL
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": no ivy file nor artifact found for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|logIvyNotFound
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": no ivy file found for "
operator|+
name|mrid
operator|+
literal|": using default data"
argument_list|)
expr_stmt|;
name|logIvyNotFound
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mrid
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
name|md
operator|.
name|setResolvedModuleRevisionId
argument_list|(
operator|new
name|ModuleRevisionId
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|artifactURL
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": found ivy file for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\t=> "
operator|+
name|ivyURL
argument_list|)
expr_stmt|;
comment|// first check if this dependency has not yet been resolved
if|if
condition|(
operator|!
name|mrid
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
name|ModuleRevisionId
name|resolvedMrid
init|=
operator|new
name|ModuleRevisionId
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|ivyURL
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|IvyNode
name|node
init|=
name|data
operator|.
name|getNode
argument_list|(
name|resolvedMrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
comment|// this revision has already be resolved : return it
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision already resolved: "
operator|+
name|resolvedMrid
argument_list|)
expr_stmt|;
return|return
name|node
operator|.
name|getModuleRevision
argument_list|()
return|;
block|}
comment|// now let's see if we can find it in cache
name|ResolvedModuleRevision
name|rmr
init|=
name|data
operator|.
name|getIvy
argument_list|()
operator|.
name|findModuleInCache
argument_list|(
name|resolvedMrid
argument_list|,
name|data
operator|.
name|getCache
argument_list|()
argument_list|,
name|doValidate
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmr
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache: "
operator|+
name|resolvedMrid
argument_list|)
expr_stmt|;
return|return
name|rmr
return|;
block|}
block|}
comment|// now download ivy file and parse it
name|cachedIvyURL
operator|=
name|ivyURL
operator|.
name|getURL
argument_list|()
expr_stmt|;
comment|// default value: the source itself
try|try
block|{
comment|// temp file is used to prevent downloading twice
name|File
name|ivyTempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
decl_stmt|;
name|ivyTempFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": downloading "
operator|+
name|ivyURL
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|ivyURL
operator|.
name|getURL
argument_list|()
argument_list|,
name|ivyTempFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|downloaded
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|cachedIvyURL
operator|=
name|ivyTempFile
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
comment|// ignored, will not used temp file
name|Message
operator|.
name|warn
argument_list|(
literal|"malformed url exception for temp file: "
operator|+
name|ivyTempFile
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// ignored, will not used temp file
name|Message
operator|.
name|warn
argument_list|(
literal|"problem while downloading ivy file: "
operator|+
name|ivyURL
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|md
operator|=
name|XmlModuleDescriptorParser
operator|.
name|parseDescriptor
argument_list|(
name|data
operator|.
name|getIvy
argument_list|()
argument_list|,
name|cachedIvyURL
argument_list|,
operator|new
name|URLResource
argument_list|(
name|ivyURL
operator|.
name|getURL
argument_list|()
argument_list|)
argument_list|,
name|doValidate
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": parsed downloaded ivy file for "
operator|+
name|mrid
operator|+
literal|" parsed="
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"io problem while parsing ivy file: "
operator|+
name|ivyURL
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|md
operator|.
name|setResolverName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// check module descriptor revision
if|if
condition|(
name|mrid
operator|.
name|getRevision
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"latest."
argument_list|)
condition|)
block|{
name|String
name|askedStatus
init|=
name|mrid
operator|.
name|getRevision
argument_list|()
operator|.
name|substring
argument_list|(
literal|"latest."
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Status
operator|.
name|getPriority
argument_list|(
name|askedStatus
argument_list|)
operator|<
name|Status
operator|.
name|getPriority
argument_list|(
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": unacceptable status => was="
operator|+
name|md
operator|.
name|getStatus
argument_list|()
operator|+
literal|" required="
operator|+
name|askedStatus
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
if|else if
condition|(
operator|!
name|mrid
operator|.
name|acceptRevision
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": unacceptable revision => was="
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|" required="
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// resolve revision
name|ModuleRevisionId
name|resolvedMrid
init|=
name|mrid
decl_stmt|;
if|if
condition|(
operator|!
name|resolvedMrid
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
name|resolvedMrid
operator|=
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|resolvedMrid
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|resolvedMrid
operator|.
name|getRevision
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|ivyURL
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|ivyURL
operator|.
name|getRevision
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|resolvedMrid
operator|=
operator|new
name|ModuleRevisionId
argument_list|(
name|resolvedMrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
operator|(
name|_envDependent
condition|?
literal|"##"
else|:
literal|""
operator|)
operator|+
name|DATE_FORMAT
operator|.
name|format
argument_list|(
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
operator|+
literal|"@"
operator|+
name|_workspaceName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resolvedMrid
operator|=
operator|new
name|ModuleRevisionId
argument_list|(
name|resolvedMrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|ivyURL
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\t["
operator|+
name|resolvedMrid
operator|.
name|getRevision
argument_list|()
operator|+
literal|"] "
operator|+
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|md
operator|.
name|setResolvedModuleRevisionId
argument_list|(
name|resolvedMrid
argument_list|)
expr_stmt|;
comment|// resolve and check publication date
if|if
condition|(
name|data
operator|.
name|getDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|long
name|pubDate
init|=
name|getPublicationDate
argument_list|(
name|md
argument_list|,
name|resolvedMrid
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pubDate
operator|>
name|data
operator|.
name|getDate
argument_list|()
operator|.
name|getTime
argument_list|()
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": unacceptable publication date => was="
operator|+
operator|new
name|Date
argument_list|(
name|pubDate
argument_list|)
operator|+
literal|" required="
operator|+
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|pubDate
operator|==
operator|-
literal|1
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": impossible to guess publication date: artifact missing for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|md
operator|.
name|setResolvedPublicationDate
argument_list|(
operator|new
name|Date
argument_list|(
name|pubDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|ivyURL
operator|==
literal|null
condition|)
block|{
comment|// a basic ivy file is written containing default data
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|md
argument_list|,
name|data
operator|.
name|getIvy
argument_list|()
operator|.
name|getIvyFileInCache
argument_list|(
name|data
operator|.
name|getCache
argument_list|()
argument_list|,
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// copy and update ivy file from source to cache
name|XmlModuleDescriptorUpdater
operator|.
name|update
argument_list|(
name|cachedIvyURL
operator|!=
literal|null
condition|?
name|cachedIvyURL
else|:
name|ivyURL
operator|.
name|getURL
argument_list|()
argument_list|,
name|data
operator|.
name|getIvy
argument_list|()
operator|.
name|getIvyFileInCache
argument_list|(
name|data
operator|.
name|getCache
argument_list|()
argument_list|,
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|,
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|,
name|md
operator|.
name|getResolvedPublicationDate
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"impossible to copy ivy file to cache : "
operator|+
name|ivyURL
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DefaultModuleRevision
argument_list|(
name|this
argument_list|,
name|md
argument_list|,
literal|true
argument_list|,
name|downloaded
argument_list|)
return|;
block|}
specifier|public
name|void
name|reportFailure
parameter_list|()
block|{
for|for
control|(
name|ListIterator
name|iter
init|=
name|_ivyattempts
operator|.
name|listIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|m
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"\t\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": tried "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|acceptLatest
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|DownloadReport
name|download
parameter_list|(
name|Artifact
index|[]
name|artifacts
parameter_list|,
name|Ivy
name|ivy
parameter_list|,
name|File
name|cache
parameter_list|)
block|{
name|DownloadReport
name|dr
init|=
operator|new
name|DownloadReport
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|artifacts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ArtifactDownloadReport
name|adr
init|=
operator|new
name|ArtifactDownloadReport
argument_list|(
name|artifacts
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dr
operator|.
name|addArtifactReport
argument_list|(
name|adr
argument_list|)
expr_stmt|;
name|File
name|archiveFile
init|=
name|ivy
operator|.
name|getArchiveFileInCache
argument_list|(
name|cache
argument_list|,
name|artifacts
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|archiveFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t[NOT REQUIRED] "
operator|+
name|artifacts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|archiveFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ResolvedURL
name|artifactURL
init|=
name|getArtifactURL
argument_list|(
name|artifacts
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactURL
operator|!=
literal|null
condition|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"downloading "
operator|+
name|artifactURL
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|artifactURL
operator|.
name|getURL
argument_list|()
argument_list|,
name|archiveFile
argument_list|,
operator|new
name|CopyProgressListener
argument_list|()
block|{
specifier|public
name|void
name|start
parameter_list|(
name|CopyProgressEvent
name|evt
parameter_list|)
block|{
block|}
specifier|public
name|void
name|progress
parameter_list|(
name|CopyProgressEvent
name|evt
parameter_list|)
block|{
name|Message
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|end
parameter_list|(
name|CopyProgressEvent
name|evt
parameter_list|)
block|{
name|Message
operator|.
name|endProgress
argument_list|(
literal|" ("
operator|+
operator|(
name|evt
operator|.
name|getTotalReadBytes
argument_list|()
operator|/
literal|1024
operator|)
operator|+
literal|"kB)"
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|evt
operator|.
name|getTotalReadBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|"\t[SUCCESSFUL ] "
operator|+
name|artifacts
index|[
name|i
index|]
operator|+
literal|" ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"\t[FAILED     ] "
operator|+
name|artifacts
index|[
name|i
index|]
operator|+
literal|" ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"\t[NOT FOUND  ] "
operator|+
name|artifacts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|logNotFound
argument_list|(
name|artifacts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|dr
return|;
block|}
specifier|protected
name|long
name|getPublicationDate
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|md
operator|.
name|getPublicationDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|md
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
name|ResolvedURL
name|artifactURL
init|=
name|findFirstArtifact
argument_list|(
name|md
argument_list|,
name|mrid
argument_list|,
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactURL
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|artifactURL
operator|.
name|getURL
argument_list|()
operator|.
name|openConnection
argument_list|()
operator|.
name|getLastModified
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|private
name|List
name|_ivyPatterns
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// List (String pattern)
specifier|private
name|List
name|_artifactPatterns
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// List (String pattern)
comment|/** 	 * example of pattern : ~/Workspace/[module]/[module].ivy.xml 	 * @param pattern 	 */
specifier|public
name|void
name|addIvyPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|_ivyPatterns
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addArtifactPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|_artifactPatterns
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getIvyPatterns
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|_ivyPatterns
argument_list|)
return|;
block|}
specifier|public
name|List
name|getArtifactPatterns
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|_artifactPatterns
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setIvyPatterns
parameter_list|(
name|List
name|ivyPatterns
parameter_list|)
block|{
name|_ivyPatterns
operator|=
name|ivyPatterns
expr_stmt|;
block|}
specifier|protected
name|void
name|setArtifactPatterns
parameter_list|(
name|List
name|artifactPatterns
parameter_list|)
block|{
name|_artifactPatterns
operator|=
name|artifactPatterns
expr_stmt|;
block|}
comment|/* 	 * Methods respecting ivy conf method specifications 	 */
specifier|public
name|void
name|addConfiguredIvy
parameter_list|(
name|IvyPattern
name|p
parameter_list|)
block|{
name|_ivyPatterns
operator|.
name|add
argument_list|(
name|p
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfiguredArtifact
parameter_list|(
name|IvyPattern
name|p
parameter_list|)
block|{
name|_artifactPatterns
operator|.
name|add
argument_list|(
name|p
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ResolvedURL
name|getIvyURL
parameter_list|(
name|ModuleRevisionId
name|moduleRevision
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
return|return
name|findURLUsingPatterns
argument_list|(
name|moduleRevision
argument_list|,
name|_ivyPatterns
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|,
name|date
argument_list|)
return|;
block|}
specifier|protected
name|ResolvedURL
name|getArtifactURL
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|findURLUsingPatterns
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|_artifactPatterns
argument_list|,
name|artifact
operator|.
name|getName
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|,
name|artifact
operator|.
name|getExt
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|ResolvedURL
name|findURLUsingPatterns
parameter_list|(
name|ModuleRevisionId
name|moduleRevision
parameter_list|,
name|List
name|patternList
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|ResolvedURL
name|rurl
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|patternList
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
name|rurl
operator|==
literal|null
condition|;
control|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|rurl
operator|=
name|findURLUsingPattern
argument_list|(
name|moduleRevision
argument_list|,
name|pattern
argument_list|,
name|artifact
argument_list|,
name|type
argument_list|,
name|ext
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
return|return
name|rurl
return|;
block|}
specifier|protected
name|ResolvedURL
name|findFirstArtifact
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|ResolvedURL
name|ret
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|conf
init|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getArtifacts
argument_list|(
name|conf
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|artifacts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|ret
operator|=
name|findURLUsingPatterns
argument_list|(
name|mrid
argument_list|,
name|_artifactPatterns
argument_list|,
name|artifacts
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|artifacts
index|[
name|j
index|]
operator|.
name|getType
argument_list|()
argument_list|,
name|artifacts
index|[
name|j
index|]
operator|.
name|getExt
argument_list|()
argument_list|,
name|date
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Output message to log indicating what have been done to look for an artifact which      * has finally not been found      *       * @param artifact the artifact which has not been found      */
specifier|protected
name|void
name|logIvyNotFound
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
decl_stmt|;
name|String
name|revisionToken
init|=
name|mrid
operator|.
name|getRevision
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"latest."
argument_list|)
condition|?
literal|"[any "
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
operator|.
name|substring
argument_list|(
literal|"latest."
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|"]"
else|:
literal|"["
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
operator|+
literal|"]"
decl_stmt|;
name|Artifact
name|latestArtifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
operator|new
name|ModuleRevisionId
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|revisionToken
argument_list|)
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_ivyPatterns
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|resolvedFileName
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\ttried "
operator|+
name|resolvedFileName
argument_list|)
expr_stmt|;
name|_ivyattempts
operator|.
name|add
argument_list|(
name|resolvedFileName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mrid
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
name|resolvedFileName
operator|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
name|latestArtifact
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\ttried "
operator|+
name|resolvedFileName
argument_list|)
expr_stmt|;
name|_ivyattempts
operator|.
name|add
argument_list|(
name|resolvedFileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Output message to log indicating what have been done to look for an artifact which      * has finally not been found      *       * @param artifact the artifact which has not been found      */
specifier|protected
name|void
name|logNotFound
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|_artifactPatterns
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|resolvedFileName
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"\t\ttried "
operator|+
name|resolvedFileName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|ResolvedURL
name|findURLUsingPattern
parameter_list|(
name|ModuleRevisionId
name|moduleRevision
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|,
name|Date
name|date
parameter_list|)
function_decl|;
specifier|public
name|OrganisationEntry
index|[]
name|listOrganisations
parameter_list|()
block|{
name|Collection
name|names
init|=
name|findNames
argument_list|(
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|)
decl_stmt|;
name|OrganisationEntry
index|[]
name|ret
init|=
operator|new
name|OrganisationEntry
index|[
name|names
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|org
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
operator|new
name|OrganisationEntry
argument_list|(
name|this
argument_list|,
name|org
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|ModuleEntry
index|[]
name|listModules
parameter_list|(
name|OrganisationEntry
name|org
parameter_list|)
block|{
name|Map
name|tokenValues
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|org
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
name|findNames
argument_list|(
name|tokenValues
argument_list|,
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
decl_stmt|;
name|ModuleEntry
index|[]
name|ret
init|=
operator|new
name|ModuleEntry
index|[
name|names
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
operator|new
name|ModuleEntry
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|RevisionEntry
index|[]
name|listRevisions
parameter_list|(
name|ModuleEntry
name|mod
parameter_list|)
block|{
name|Map
name|tokenValues
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|mod
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|mod
operator|.
name|getModule
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
name|findNames
argument_list|(
name|tokenValues
argument_list|,
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|)
decl_stmt|;
name|RevisionEntry
index|[]
name|ret
init|=
operator|new
name|RevisionEntry
index|[
name|names
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
operator|new
name|RevisionEntry
argument_list|(
name|mod
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|Collection
name|findNames
parameter_list|(
name|Map
name|tokenValues
parameter_list|,
name|String
name|token
parameter_list|)
block|{
name|Collection
name|names
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|findIvyNames
argument_list|(
name|tokenValues
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|names
operator|.
name|addAll
argument_list|(
name|findArtifactNames
argument_list|(
name|tokenValues
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
specifier|protected
name|Collection
name|findIvyNames
parameter_list|(
name|Map
name|tokenValues
parameter_list|,
name|String
name|token
parameter_list|)
block|{
name|Collection
name|names
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|tokenValues
operator|=
operator|new
name|HashMap
argument_list|(
name|tokenValues
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ARTIFACT_KEY
argument_list|,
literal|"ivy"
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|TYPE_KEY
argument_list|,
literal|"ivy"
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|EXT_KEY
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|findTokenValues
argument_list|(
name|names
argument_list|,
name|getIvyPatterns
argument_list|()
argument_list|,
name|tokenValues
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|getIvy
argument_list|()
operator|.
name|filterIgnore
argument_list|(
name|names
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
specifier|protected
name|Collection
name|findArtifactNames
parameter_list|(
name|Map
name|tokenValues
parameter_list|,
name|String
name|token
parameter_list|)
block|{
name|Collection
name|names
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|tokenValues
operator|=
operator|new
name|HashMap
argument_list|(
name|tokenValues
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ARTIFACT_KEY
argument_list|,
name|tokenValues
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|TYPE_KEY
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|EXT_KEY
argument_list|,
literal|"jar"
argument_list|)
expr_stmt|;
name|findTokenValues
argument_list|(
name|names
argument_list|,
name|getArtifactPatterns
argument_list|()
argument_list|,
name|tokenValues
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|getIvy
argument_list|()
operator|.
name|filterIgnore
argument_list|(
name|names
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
comment|// should be overwritten by subclasses wanting to have listing features
specifier|protected
name|void
name|findTokenValues
parameter_list|(
name|Collection
name|names
parameter_list|,
name|List
name|patterns
parameter_list|,
name|Map
name|tokenValues
parameter_list|,
name|String
name|token
parameter_list|)
block|{
block|}
specifier|protected
name|void
name|findTokenValues
parameter_list|(
name|Collection
name|names
parameter_list|,
name|List
name|listers
parameter_list|,
name|String
name|prefix
parameter_list|,
name|List
name|patterns
parameter_list|,
name|Map
name|tokenValues
parameter_list|,
name|String
name|token
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|patterns
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|partiallyResolvedPattern
init|=
name|IvyPatternHelper
operator|.
name|substituteTokens
argument_list|(
name|pattern
argument_list|,
name|tokenValues
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|listers
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|URLLister
name|lister
init|=
operator|(
name|URLLister
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|values
init|=
name|ResolverHelper
operator|.
name|listTokenValues
argument_list|(
name|lister
argument_list|,
name|prefix
operator|+
name|partiallyResolvedPattern
argument_list|,
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|names
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

