begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DefaultModuleRevision
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|IvyNode
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|event
operator|.
name|EndDownloadEvent
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|event
operator|.
name|StartDownloadEvent
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|parser
operator|.
name|ModuleDescriptorParserRegistry
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|DownloadReport
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_comment
comment|/**  * @author Xavier Hanin  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BasicResolver
extends|extends
name|AbstractResolver
block|{
specifier|public
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|_workspaceName
decl_stmt|;
comment|/**      * True if the files resolved are dependent of the environment from which they have been resolved, false otherwise. In general, relative paths are dependent of the environment, and absolute paths including machine reference are not.       */
specifier|private
name|boolean
name|_envDependent
init|=
literal|true
decl_stmt|;
specifier|private
name|List
name|_ivyattempts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|_artattempts
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Boolean
name|_checkmodified
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|_checkconsistency
init|=
literal|true
decl_stmt|;
specifier|public
name|BasicResolver
parameter_list|()
block|{
name|_workspaceName
operator|=
name|Ivy
operator|.
name|getLocalHostName
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getWorkspaceName
parameter_list|()
block|{
return|return
name|_workspaceName
return|;
block|}
specifier|public
name|void
name|setWorkspaceName
parameter_list|(
name|String
name|workspaceName
parameter_list|)
block|{
name|_workspaceName
operator|=
name|workspaceName
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnvDependent
parameter_list|()
block|{
return|return
name|_envDependent
return|;
block|}
specifier|public
name|void
name|setEnvDependent
parameter_list|(
name|boolean
name|envDependent
parameter_list|)
block|{
name|_envDependent
operator|=
name|envDependent
expr_stmt|;
block|}
comment|/**      * True if this resolver should check lastmodified date to know if ivy files are up to date.      * @return      */
specifier|public
name|boolean
name|isCheckmodified
parameter_list|()
block|{
if|if
condition|(
name|_checkmodified
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getIvy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|check
init|=
name|getIvy
argument_list|()
operator|.
name|getVariable
argument_list|(
literal|"ivy.resolver.default.check.modified"
argument_list|)
decl_stmt|;
return|return
name|check
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|check
argument_list|)
operator|.
name|booleanValue
argument_list|()
else|:
literal|false
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
name|_checkmodified
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|setCheckmodified
parameter_list|(
name|boolean
name|check
parameter_list|)
block|{
name|_checkmodified
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|check
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResolvedModuleRevision
name|getDependency
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
throws|throws
name|ParseException
block|{
name|DependencyDescriptor
name|systemDd
init|=
name|dd
decl_stmt|;
name|dd
operator|=
name|fromSystem
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|clearIvyAttempts
argument_list|()
expr_stmt|;
name|boolean
name|downloaded
init|=
literal|false
decl_stmt|;
name|boolean
name|searched
init|=
literal|false
decl_stmt|;
name|Date
name|cachedPublicationDate
init|=
literal|null
decl_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
comment|// check revision
name|int
name|index
init|=
name|mrid
operator|.
name|getRevision
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"@"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|mrid
operator|.
name|getRevision
argument_list|()
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|_workspaceName
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": unhandled revision => "
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|mrid
operator|.
name|isExactRevision
argument_list|()
operator|&&
operator|!
name|acceptLatest
argument_list|()
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"latest revisions not handled by "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|". impossible to resolve "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// if we do not have to check modified and if the revision is exact and not changing,
comment|// we first search for it in cache
if|if
condition|(
name|mrid
operator|.
name|isExactRevision
argument_list|()
operator|&&
operator|!
name|isCheckmodified
argument_list|()
operator|&&
operator|!
name|dd
operator|.
name|isChanging
argument_list|()
condition|)
block|{
name|ResolvedModuleRevision
name|rmr
init|=
name|findModuleInCache
argument_list|(
name|data
argument_list|,
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
operator|&&
name|rmr
operator|.
name|getResolver
argument_list|()
operator|!=
name|this
operator|&&
name|isResolved
argument_list|(
name|data
argument_list|,
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": found revision in cache: "
operator|+
name|mrid
operator|+
literal|" (resolved by "
operator|+
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"): but it's a default one, maybe we can find a better one"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache: "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
name|toSystem
argument_list|(
name|rmr
argument_list|)
return|;
block|}
block|}
block|}
name|URL
name|cachedIvyURL
init|=
literal|null
decl_stmt|;
name|ResolvedResource
name|ivyRef
init|=
name|findIvyFileRef
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|searched
operator|=
literal|true
expr_stmt|;
comment|// get module descriptor
name|ModuleDescriptorParser
name|parser
decl_stmt|;
name|ModuleDescriptor
name|md
decl_stmt|;
name|ModuleDescriptor
name|systemMd
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ivyRef
operator|==
literal|null
condition|)
block|{
name|parser
operator|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|md
operator|=
name|DefaultModuleDescriptor
operator|.
name|newDefaultInstance
argument_list|(
name|mrid
argument_list|,
name|dd
operator|.
name|getAllDependencyArtifactsIncludes
argument_list|()
argument_list|)
expr_stmt|;
name|ResolvedResource
name|artifactRef
init|=
name|findFirstArtifactRef
argument_list|(
name|md
argument_list|,
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactRef
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": no ivy file nor artifact found for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|logIvyNotFound
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
name|String
index|[]
name|conf
init|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getArtifacts
argument_list|(
name|conf
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|artifacts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|logArtifactNotFound
argument_list|(
name|artifacts
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": no ivy file found for "
operator|+
name|mrid
operator|+
literal|": using default data"
argument_list|)
expr_stmt|;
name|logIvyNotFound
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mrid
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
name|md
operator|.
name|setResolvedModuleRevisionId
argument_list|(
operator|new
name|ModuleRevisionId
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|artifactRef
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|parser
operator|=
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getParser
argument_list|(
name|ivyRef
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"no module descriptor parser available for "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": found md file for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\t=> "
operator|+
name|ivyRef
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tparser = "
operator|+
name|parser
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|resolvedMrid
init|=
name|mrid
decl_stmt|;
comment|// first check if this dependency has not yet been resolved
if|if
condition|(
operator|!
name|mrid
operator|.
name|isExactRevision
argument_list|()
operator|&&
name|ModuleRevisionId
operator|.
name|isExactRevision
argument_list|(
name|ivyRef
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|resolvedMrid
operator|=
operator|new
name|ModuleRevisionId
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|ivyRef
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|IvyNode
name|node
init|=
name|getSystemNode
argument_list|(
name|data
argument_list|,
name|resolvedMrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getModuleRevision
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this revision has already be resolved : return it
if|if
condition|(
name|node
operator|.
name|getDescriptor
argument_list|()
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": found already resolved revision: "
operator|+
name|resolvedMrid
operator|+
literal|": but it's a default one, maybe we can find a better one"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision already resolved: "
operator|+
name|resolvedMrid
argument_list|)
expr_stmt|;
return|return
name|toSystem
argument_list|(
name|searchedRmr
argument_list|(
name|node
operator|.
name|getModuleRevision
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
comment|// now let's see if we can find it in cache and if it is up to date
name|ResolvedModuleRevision
name|rmr
init|=
name|findModuleInCache
argument_list|(
name|data
argument_list|,
name|resolvedMrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
operator|&&
name|rmr
operator|.
name|getResolver
argument_list|()
operator|!=
name|this
operator|&&
name|isResolved
argument_list|(
name|data
argument_list|,
name|resolvedMrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": found revision in cache: "
operator|+
name|mrid
operator|+
literal|" (resolved by "
operator|+
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"): but it's a default one, maybe we can find a better one"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isCheckmodified
argument_list|()
operator|&&
operator|!
name|dd
operator|.
name|isChanging
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache: "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
name|toSystem
argument_list|(
name|searchedRmr
argument_list|(
name|rmr
argument_list|)
argument_list|)
return|;
block|}
name|long
name|repLastModified
init|=
name|ivyRef
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
name|long
name|cacheLastModified
init|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
operator|&&
name|repLastModified
operator|<=
name|cacheLastModified
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache (not updated): "
operator|+
name|resolvedMrid
argument_list|)
expr_stmt|;
return|return
name|toSystem
argument_list|(
name|searchedRmr
argument_list|(
name|rmr
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache is not up to date: "
operator|+
name|resolvedMrid
argument_list|)
expr_stmt|;
if|if
condition|(
name|dd
operator|.
name|isChanging
argument_list|()
condition|)
block|{
comment|// ivy file has been updated, we should see if it has a new publication date
comment|// to see if a new download is required (in case the dependency is a changing one)
name|cachedPublicationDate
operator|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getResolvedPublicationDate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// now download ivy file and parse it
try|try
block|{
comment|// first check if source file is not cache file itself
if|if
condition|(
name|ResourceHelper
operator|.
name|equals
argument_list|(
name|ivyRef
operator|.
name|getResource
argument_list|()
argument_list|,
name|data
operator|.
name|getIvy
argument_list|()
operator|.
name|getIvyFileInCache
argument_list|(
name|data
operator|.
name|getCache
argument_list|()
argument_list|,
name|toSystem
argument_list|(
name|resolvedMrid
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"invalid configuration for resolver '"
operator|+
name|getName
argument_list|()
operator|+
literal|"': pointing ivy files to ivy cache is forbidden !"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// temp file is used to prevent downloading twice
name|File
name|ivyTempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
decl_stmt|;
name|ivyTempFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": downloading "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|get
argument_list|(
name|ivyRef
operator|.
name|getResource
argument_list|()
argument_list|,
name|ivyTempFile
argument_list|)
expr_stmt|;
name|downloaded
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|cachedIvyURL
operator|=
name|ivyTempFile
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"malformed url exception for temp file: "
operator|+
name|ivyTempFile
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"problem while downloading ivy file: "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|md
operator|=
name|parser
operator|.
name|parseDescriptor
argument_list|(
name|data
operator|.
name|getIvy
argument_list|()
argument_list|,
name|cachedIvyURL
argument_list|,
name|ivyRef
operator|.
name|getResource
argument_list|()
argument_list|,
name|doValidate
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": parsed downloaded md file for "
operator|+
name|mrid
operator|+
literal|" parsed="
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// check descriptor data is in sync with resource revision and names
name|systemMd
operator|=
name|toSystem
argument_list|(
name|md
argument_list|)
expr_stmt|;
if|if
condition|(
name|_checkconsistency
condition|)
block|{
name|checkDescriptorConsistency
argument_list|(
name|mrid
argument_list|,
name|md
argument_list|,
name|ivyRef
argument_list|)
expr_stmt|;
name|checkDescriptorConsistency
argument_list|(
name|systemDd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|systemMd
argument_list|,
name|ivyRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|md
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
operator|(
operator|(
name|DefaultModuleDescriptor
operator|)
name|md
operator|)
operator|.
name|setModuleRevisionId
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mrid
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|,
name|ivyRef
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"consistency disabled with non default module descriptor... module info can't be updated, so consistency check will be done"
argument_list|)
expr_stmt|;
name|checkDescriptorConsistency
argument_list|(
name|mrid
argument_list|,
name|md
argument_list|,
name|ivyRef
argument_list|)
expr_stmt|;
name|checkDescriptorConsistency
argument_list|(
name|systemDd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|systemMd
argument_list|,
name|ivyRef
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check if we should delete old artifacts
name|boolean
name|deleteOldArtifacts
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cachedPublicationDate
operator|!=
literal|null
operator|&&
operator|!
name|cachedPublicationDate
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getResolvedPublicationDate
argument_list|()
argument_list|)
condition|)
block|{
comment|// artifacts have changed, they should be downloaded again
name|Message
operator|.
name|verbose
argument_list|(
name|dd
operator|+
literal|" has changed: deleting old artifacts"
argument_list|)
expr_stmt|;
name|deleteOldArtifacts
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|deleteOldArtifacts
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Artifact
index|[]
name|arts
init|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getArtifacts
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|arts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|File
name|artFile
init|=
name|data
operator|.
name|getIvy
argument_list|()
operator|.
name|getArchiveFileInCache
argument_list|(
name|data
operator|.
name|getCache
argument_list|()
argument_list|,
name|toSystem
argument_list|(
name|arts
index|[
name|j
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|artFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"deleting "
operator|+
name|artFile
argument_list|)
expr_stmt|;
name|artFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|File
name|originFile
init|=
name|data
operator|.
name|getIvy
argument_list|()
operator|.
name|getOriginFileInCache
argument_list|(
name|data
operator|.
name|getCache
argument_list|()
argument_list|,
name|toSystem
argument_list|(
name|arts
index|[
name|j
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|originFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"deleting "
operator|+
name|originFile
argument_list|)
expr_stmt|;
name|originFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|dd
operator|.
name|isChanging
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
name|dd
operator|+
literal|" is changing, but has not changed: will trust cached artifacts if any"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"io problem while parsing ivy file: "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// check module descriptor revision
if|if
condition|(
name|mrid
operator|.
name|getRevision
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"latest."
argument_list|)
condition|)
block|{
name|String
name|askedStatus
init|=
name|mrid
operator|.
name|getRevision
argument_list|()
operator|.
name|substring
argument_list|(
literal|"latest."
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Status
operator|.
name|getPriority
argument_list|(
name|askedStatus
argument_list|)
operator|<
name|Status
operator|.
name|getPriority
argument_list|(
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": unacceptable status => was="
operator|+
name|md
operator|.
name|getStatus
argument_list|()
operator|+
literal|" required="
operator|+
name|askedStatus
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
if|else if
condition|(
operator|!
name|mrid
operator|.
name|acceptRevision
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": unacceptable revision => was="
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|" required="
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|systemMd
operator|==
literal|null
condition|)
block|{
name|systemMd
operator|=
name|toSystem
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
comment|// resolve revision
name|ModuleRevisionId
name|resolvedMrid
init|=
name|mrid
decl_stmt|;
if|if
condition|(
operator|!
name|resolvedMrid
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
name|resolvedMrid
operator|=
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|resolvedMrid
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|resolvedMrid
operator|.
name|getRevision
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|ivyRef
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|ivyRef
operator|.
name|getRevision
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|ModuleRevisionId
operator|.
name|isExactRevision
argument_list|(
name|ivyRef
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|resolvedMrid
operator|=
operator|new
name|ModuleRevisionId
argument_list|(
name|resolvedMrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
operator|(
name|_envDependent
condition|?
literal|"##"
else|:
literal|""
operator|)
operator|+
name|DATE_FORMAT
operator|.
name|format
argument_list|(
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
operator|+
literal|"@"
operator|+
name|_workspaceName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resolvedMrid
operator|=
operator|new
name|ModuleRevisionId
argument_list|(
name|resolvedMrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|ivyRef
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\t["
operator|+
name|resolvedMrid
operator|.
name|getRevision
argument_list|()
operator|+
literal|"] "
operator|+
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|md
operator|.
name|setResolvedModuleRevisionId
argument_list|(
name|resolvedMrid
argument_list|)
expr_stmt|;
name|systemMd
operator|.
name|setResolvedModuleRevisionId
argument_list|(
name|toSystem
argument_list|(
name|resolvedMrid
argument_list|)
argument_list|)
expr_stmt|;
comment|// keep system md in sync with md
comment|// resolve and check publication date
if|if
condition|(
name|data
operator|.
name|getDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|long
name|pubDate
init|=
name|getPublicationDate
argument_list|(
name|md
argument_list|,
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|pubDate
operator|>
name|data
operator|.
name|getDate
argument_list|()
operator|.
name|getTime
argument_list|()
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": unacceptable publication date => was="
operator|+
operator|new
name|Date
argument_list|(
name|pubDate
argument_list|)
operator|+
literal|" required="
operator|+
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|pubDate
operator|==
operator|-
literal|1
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": impossible to guess publication date: artifact missing for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|md
operator|.
name|setResolvedPublicationDate
argument_list|(
operator|new
name|Date
argument_list|(
name|pubDate
argument_list|)
argument_list|)
expr_stmt|;
name|systemMd
operator|.
name|setResolvedPublicationDate
argument_list|(
operator|new
name|Date
argument_list|(
name|pubDate
argument_list|)
argument_list|)
expr_stmt|;
comment|// keep system md in sync with md
block|}
try|try
block|{
name|File
name|ivyFile
init|=
name|data
operator|.
name|getIvy
argument_list|()
operator|.
name|getIvyFileInCache
argument_list|(
name|data
operator|.
name|getCache
argument_list|()
argument_list|,
name|systemMd
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ivyRef
operator|==
literal|null
condition|)
block|{
comment|// a basic ivy file is written containing default data
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|systemMd
argument_list|,
name|ivyFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|md
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
name|DefaultModuleDescriptor
name|dmd
init|=
operator|(
name|DefaultModuleDescriptor
operator|)
name|md
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|getIvy
argument_list|()
operator|.
name|logNotConvertedExclusionRule
argument_list|()
operator|&&
name|dmd
operator|.
name|isNamespaceUseful
argument_list|()
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"the module descriptor "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|" has information which can't be converted into the system namespace. It will require the availability of the namespace '"
operator|+
name|getNamespace
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' to be fully usable."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// copy and update ivy file from source to cache
name|parser
operator|.
name|toIvyFile
argument_list|(
name|cachedIvyURL
argument_list|,
name|ivyRef
operator|.
name|getResource
argument_list|()
argument_list|,
name|ivyFile
argument_list|,
name|systemMd
argument_list|)
expr_stmt|;
name|long
name|repLastModified
init|=
name|ivyRef
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|repLastModified
operator|>
literal|0
condition|)
block|{
name|ivyFile
operator|.
name|setLastModified
argument_list|(
name|repLastModified
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"impossible to copy ivy file to cache : "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|getIvy
argument_list|()
operator|.
name|saveResolver
argument_list|(
name|data
operator|.
name|getCache
argument_list|()
argument_list|,
name|systemMd
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|DefaultModuleRevision
argument_list|(
name|this
argument_list|,
name|systemMd
argument_list|,
name|searched
argument_list|,
name|downloaded
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isResolved
parameter_list|(
name|ResolveData
name|data
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|IvyNode
name|node
init|=
name|getSystemNode
argument_list|(
name|data
argument_list|,
name|mrid
argument_list|)
decl_stmt|;
return|return
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getModuleRevision
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|private
name|void
name|checkDescriptorConsistency
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|,
name|ResolvedResource
name|ivyRef
parameter_list|)
throws|throws
name|ParseException
block|{
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|mrid
operator|.
name|getOrganisation
argument_list|()
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": bad organisation found in "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": expected="
operator|+
name|mrid
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|" found="
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mrid
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": bad module name found in "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": expected="
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|" found="
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|ivyRef
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ivyRef
operator|.
name|getRevision
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"working@"
argument_list|)
operator|&&
operator|!
name|ModuleRevisionId
operator|.
name|acceptRevision
argument_list|(
name|ivyRef
operator|.
name|getRevision
argument_list|()
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": bad revision found in "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": expected="
operator|+
name|ivyRef
operator|.
name|getRevision
argument_list|()
operator|+
literal|" found="
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"inconsistent module descriptor file found for "
operator|+
name|mrid
argument_list|,
literal|0
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|clearIvyAttempts
parameter_list|()
block|{
name|_ivyattempts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clearArtifactAttempts
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|ResolvedModuleRevision
name|searchedRmr
parameter_list|(
specifier|final
name|ResolvedModuleRevision
name|rmr
parameter_list|)
block|{
comment|// delegate all to previously found except isSearched
return|return
operator|new
name|ResolvedModuleRevision
argument_list|()
block|{
specifier|public
name|boolean
name|isSearched
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isDownloaded
parameter_list|()
block|{
return|return
name|rmr
operator|.
name|isDownloaded
argument_list|()
return|;
block|}
specifier|public
name|ModuleDescriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|rmr
operator|.
name|getDescriptor
argument_list|()
return|;
block|}
specifier|public
name|Date
name|getPublicationDate
parameter_list|()
block|{
return|return
name|rmr
operator|.
name|getPublicationDate
argument_list|()
return|;
block|}
specifier|public
name|ModuleRevisionId
name|getId
parameter_list|()
block|{
return|return
name|rmr
operator|.
name|getId
argument_list|()
return|;
block|}
specifier|public
name|DependencyResolver
name|getResolver
parameter_list|()
block|{
return|return
name|rmr
operator|.
name|getResolver
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|void
name|logIvyAttempt
parameter_list|(
name|String
name|attempt
parameter_list|)
block|{
name|_ivyattempts
operator|.
name|add
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\ttried "
operator|+
name|attempt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|logArtifactAttempt
parameter_list|(
name|Artifact
name|art
parameter_list|,
name|String
name|attempt
parameter_list|)
block|{
name|List
name|attempts
init|=
operator|(
name|List
operator|)
name|_artattempts
operator|.
name|get
argument_list|(
name|art
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempts
operator|==
literal|null
condition|)
block|{
name|attempts
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|_artattempts
operator|.
name|put
argument_list|(
name|art
argument_list|,
name|attempts
argument_list|)
expr_stmt|;
block|}
name|attempts
operator|.
name|add
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\ttried "
operator|+
name|attempt
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reportFailure
parameter_list|()
block|{
for|for
control|(
name|ListIterator
name|iter
init|=
name|_ivyattempts
operator|.
name|listIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|m
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"\t\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": tried "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|_artattempts
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|art
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
name|attempts
init|=
operator|(
name|List
operator|)
name|_artattempts
operator|.
name|get
argument_list|(
name|art
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempts
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"\t\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": tried artifact "
operator|+
name|art
operator|+
literal|":"
argument_list|)
expr_stmt|;
for|for
control|(
name|ListIterator
name|iterator
init|=
name|attempts
operator|.
name|listIterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|m
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"\t\t\t"
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|reportFailure
parameter_list|(
name|Artifact
name|art
parameter_list|)
block|{
name|List
name|attempts
init|=
operator|(
name|List
operator|)
name|_artattempts
operator|.
name|get
argument_list|(
name|art
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ListIterator
name|iter
init|=
name|attempts
operator|.
name|listIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|m
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"\t\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": tried "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|acceptLatest
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|DownloadReport
name|download
parameter_list|(
name|Artifact
index|[]
name|artifacts
parameter_list|,
name|Ivy
name|ivy
parameter_list|,
name|File
name|cache
parameter_list|)
block|{
name|clearArtifactAttempts
argument_list|()
expr_stmt|;
name|DownloadReport
name|dr
init|=
operator|new
name|DownloadReport
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|artifacts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ArtifactDownloadReport
name|adr
init|=
operator|new
name|ArtifactDownloadReport
argument_list|(
name|artifacts
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|dr
operator|.
name|addArtifactReport
argument_list|(
name|adr
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|fireIvyEvent
argument_list|(
operator|new
name|StartDownloadEvent
argument_list|(
name|this
argument_list|,
name|artifacts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|archiveFile
init|=
name|ivy
operator|.
name|getArchiveFileInCache
argument_list|(
name|cache
argument_list|,
name|artifacts
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|archiveFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t[NOT REQUIRED] "
operator|+
name|artifacts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|archiveFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Artifact
name|artifact
init|=
name|fromSystem
argument_list|(
name|artifacts
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|artifact
operator|.
name|equals
argument_list|(
name|artifacts
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|"looking for artifact "
operator|+
name|artifact
operator|+
literal|" (is "
operator|+
name|artifacts
index|[
name|i
index|]
operator|+
literal|" in system namespace)"
argument_list|)
expr_stmt|;
block|}
name|ResolvedResource
name|artifactRef
init|=
name|findArtifactRef
argument_list|(
name|artifact
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactRef
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ResourceHelper
operator|.
name|equals
argument_list|(
name|artifactRef
operator|.
name|getResource
argument_list|()
argument_list|,
name|archiveFile
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"invalid configuration for resolver '"
operator|+
name|getName
argument_list|()
operator|+
literal|"': pointing artifacts to ivy cache is forbidden !"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|File
name|originFile
init|=
name|ivy
operator|.
name|getOriginFileInCache
argument_list|(
name|cache
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
try|try
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"downloading "
operator|+
name|artifactRef
operator|.
name|getResource
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|writeOriginFile
argument_list|(
name|originFile
argument_list|,
name|artifactRef
argument_list|)
expr_stmt|;
name|File
name|tmp
init|=
name|ivy
operator|.
name|getArchiveFileInCache
argument_list|(
name|cache
argument_list|,
operator|new
name|DefaultArtifact
argument_list|(
name|artifacts
index|[
name|i
index|]
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|artifacts
index|[
name|i
index|]
operator|.
name|getPublicationDate
argument_list|()
argument_list|,
name|artifacts
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|artifacts
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|,
name|artifacts
index|[
name|i
index|]
operator|.
name|getExt
argument_list|()
operator|+
literal|".part"
argument_list|)
argument_list|)
decl_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|get
argument_list|(
name|artifactRef
operator|.
name|getResource
argument_list|()
argument_list|,
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tmp
operator|.
name|renameTo
argument_list|(
name|archiveFile
argument_list|)
condition|)
block|{
name|originFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"\t[FAILED     ] "
operator|+
name|artifacts
index|[
name|i
index|]
operator|+
literal|" impossible to move temp file to definitive one ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t[SUCCESSFUL ] "
operator|+
name|artifacts
index|[
name|i
index|]
operator|+
literal|" ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|originFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"\t[FAILED     ] "
operator|+
name|artifacts
index|[
name|i
index|]
operator|+
literal|" : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logArtifactNotFound
argument_list|(
name|artifacts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
block|}
name|ivy
operator|.
name|fireIvyEvent
argument_list|(
operator|new
name|EndDownloadEvent
argument_list|(
name|this
argument_list|,
name|artifacts
index|[
name|i
index|]
argument_list|,
name|adr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dr
return|;
block|}
specifier|private
name|void
name|writeOriginFile
parameter_list|(
name|File
name|originFile
parameter_list|,
name|ResolvedResource
name|artifactRef
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|originProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|originProperties
operator|.
name|setProperty
argument_list|(
literal|"isLocal"
argument_list|,
name|artifactRef
operator|.
name|getResource
argument_list|()
operator|.
name|isLocal
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|originProperties
operator|.
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|artifactRef
operator|.
name|getResource
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|originFile
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|originFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|FileOutputStream
name|originOutputStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|originFile
argument_list|)
decl_stmt|;
try|try
block|{
name|originProperties
operator|.
name|store
argument_list|(
name|originOutputStream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|originOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|clearArtifactAttempts
parameter_list|()
block|{
name|_artattempts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|ResolvedResource
name|artifactRef
init|=
name|findArtifactRef
argument_list|(
name|artifact
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactRef
operator|!=
literal|null
condition|)
block|{
return|return
name|artifactRef
operator|.
name|getResource
argument_list|()
operator|.
name|exists
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|long
name|getPublicationDate
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
if|if
condition|(
name|md
operator|.
name|getPublicationDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|md
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
name|ResolvedResource
name|artifactRef
init|=
name|findFirstArtifactRef
argument_list|(
name|md
argument_list|,
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactRef
operator|!=
literal|null
condition|)
block|{
return|return
name|artifactRef
operator|.
name|getLastModified
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|public
name|OrganisationEntry
index|[]
name|listOrganisations
parameter_list|()
block|{
name|Collection
name|names
init|=
name|findNames
argument_list|(
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|)
decl_stmt|;
name|OrganisationEntry
index|[]
name|ret
init|=
operator|new
name|OrganisationEntry
index|[
name|names
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|org
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
operator|new
name|OrganisationEntry
argument_list|(
name|this
argument_list|,
name|org
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|ModuleEntry
index|[]
name|listModules
parameter_list|(
name|OrganisationEntry
name|org
parameter_list|)
block|{
name|Map
name|tokenValues
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|org
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
name|findNames
argument_list|(
name|tokenValues
argument_list|,
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
decl_stmt|;
name|ModuleEntry
index|[]
name|ret
init|=
operator|new
name|ModuleEntry
index|[
name|names
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
operator|new
name|ModuleEntry
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|RevisionEntry
index|[]
name|listRevisions
parameter_list|(
name|ModuleEntry
name|mod
parameter_list|)
block|{
name|Map
name|tokenValues
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|mod
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|mod
operator|.
name|getModule
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
name|findNames
argument_list|(
name|tokenValues
argument_list|,
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|)
decl_stmt|;
name|RevisionEntry
index|[]
name|ret
init|=
operator|new
name|RevisionEntry
index|[
name|names
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
operator|new
name|RevisionEntry
argument_list|(
name|mod
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
specifier|abstract
name|Collection
name|findNames
parameter_list|(
name|Map
name|tokenValues
parameter_list|,
name|String
name|token
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|ResolvedResource
name|findIvyFileRef
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
function_decl|;
specifier|protected
name|ResolvedResource
name|findFirstArtifactRef
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
name|ResolvedResource
name|ret
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|conf
init|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getArtifacts
argument_list|(
name|conf
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|artifacts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|ret
operator|=
name|findArtifactRef
argument_list|(
name|artifacts
index|[
name|j
index|]
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
specifier|abstract
name|ResolvedResource
name|findArtifactRef
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Date
name|date
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|long
name|get
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|File
name|ivyTempFile
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|logIvyNotFound
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|logArtifactNotFound
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|isCheckconsistency
parameter_list|()
block|{
return|return
name|_checkconsistency
return|;
block|}
specifier|public
name|void
name|setCheckconsistency
parameter_list|(
name|boolean
name|checkConsitency
parameter_list|)
block|{
name|_checkconsistency
operator|=
name|checkConsitency
expr_stmt|;
block|}
block|}
end_class

end_unit

