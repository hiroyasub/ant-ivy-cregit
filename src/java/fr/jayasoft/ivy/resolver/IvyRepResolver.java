begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_comment
comment|/**  * IvyRepResolver is a resolver which can be used to resolve dependencies found  * in the ivy official repository for ivy files and ibiblio maven repository for the artifacts,   * or similar repositories.  * For more flexibility with url and patterns, see {@link fr.jayasoft.ivy.resolver.URLResolver}.  */
end_comment

begin_class
specifier|public
class|class
name|IvyRepResolver
extends|extends
name|URLResolver
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IVYPATTERN
init|=
literal|"[organisation]/[module]/ivy-[revision].xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IVYROOT
init|=
literal|"http://ivyrep.jayasoft.org/"
decl_stmt|;
specifier|private
name|String
name|_ivyroot
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_ivypattern
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_artroot
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_artpattern
init|=
literal|null
decl_stmt|;
specifier|public
name|IvyRepResolver
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setIvy
parameter_list|(
name|Ivy
name|ivy
parameter_list|)
block|{
name|super
operator|.
name|setIvy
argument_list|(
name|ivy
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|configureRepositories
argument_list|()
expr_stmt|;
if|if
condition|(
name|_ivyroot
operator|==
literal|null
condition|)
block|{
name|String
name|root
init|=
name|ivy
operator|.
name|getVariable
argument_list|(
literal|"ivy.ivyrep.default.ivy.root"
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|_ivyroot
operator|=
name|root
expr_stmt|;
block|}
else|else
block|{
name|_ivyroot
operator|=
name|DEFAULT_IVYROOT
expr_stmt|;
block|}
block|}
if|if
condition|(
name|_ivypattern
operator|==
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|ivy
operator|.
name|getVariable
argument_list|(
literal|"ivy.ivyrep.default.ivy.pattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|_ivypattern
operator|=
name|pattern
expr_stmt|;
block|}
else|else
block|{
name|_ivypattern
operator|=
name|DEFAULT_IVYPATTERN
expr_stmt|;
block|}
block|}
if|if
condition|(
name|_artroot
operator|==
literal|null
condition|)
block|{
name|String
name|root
init|=
name|ivy
operator|.
name|getVariable
argument_list|(
literal|"ivy.ivyrep.default.artifact.root"
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|_artroot
operator|=
name|root
expr_stmt|;
block|}
else|else
block|{
name|_artroot
operator|=
name|IBiblioResolver
operator|.
name|DEFAULT_ROOT
expr_stmt|;
block|}
block|}
if|if
condition|(
name|_artpattern
operator|==
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|ivy
operator|.
name|getVariable
argument_list|(
literal|"ivy.ivyrep.default.artifact.pattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|_artpattern
operator|=
name|pattern
expr_stmt|;
block|}
else|else
block|{
name|_artpattern
operator|=
name|IBiblioResolver
operator|.
name|DEFAULT_PATTERN
expr_stmt|;
block|}
block|}
name|updateWholeIvyPattern
argument_list|()
expr_stmt|;
name|updateWholeArtPattern
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getWholeIvyPattern
parameter_list|()
block|{
return|return
name|_ivyroot
operator|+
name|_ivypattern
return|;
block|}
specifier|private
name|String
name|getWholeArtPattern
parameter_list|()
block|{
return|return
name|_artroot
operator|+
name|_artpattern
return|;
block|}
specifier|public
name|String
name|getIvypattern
parameter_list|()
block|{
return|return
name|_ivypattern
return|;
block|}
specifier|public
name|void
name|setIvypattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"pattern must not be null"
argument_list|)
throw|;
block|}
name|_ivypattern
operator|=
name|pattern
expr_stmt|;
name|updateWholeIvyPattern
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getIvyroot
parameter_list|()
block|{
return|return
name|_ivyroot
return|;
block|}
comment|/**      * Sets the root of the maven like repository.      * The maven like repository is necessarily an http repository.      * @param root the root of the maven like repository      * @throws IllegalArgumentException if root does not start with "http://"      */
specifier|public
name|void
name|setIvyroot
parameter_list|(
name|String
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"root must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|root
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|_ivyroot
operator|=
name|root
operator|+
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|_ivyroot
operator|=
name|root
expr_stmt|;
block|}
name|updateWholeIvyPattern
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateWholeIvyPattern
parameter_list|()
block|{
name|setIvyPatterns
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|getWholeIvyPattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateWholeArtPattern
parameter_list|()
block|{
name|setArtifactPatterns
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|getWholeArtPattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|publish
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|src
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"publish not supported by IBiblioResolver"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getArtroot
parameter_list|()
block|{
return|return
name|_artroot
return|;
block|}
specifier|public
name|String
name|getArtpattern
parameter_list|()
block|{
return|return
name|_artpattern
return|;
block|}
specifier|public
name|void
name|setArtpattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"pattern must not be null"
argument_list|)
throw|;
block|}
name|_artpattern
operator|=
name|pattern
expr_stmt|;
name|updateWholeArtPattern
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setArtroot
parameter_list|(
name|String
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"root must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|root
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|_artroot
operator|=
name|root
operator|+
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|_artroot
operator|=
name|root
expr_stmt|;
block|}
name|updateWholeArtPattern
argument_list|()
expr_stmt|;
block|}
specifier|public
name|OrganisationEntry
index|[]
name|listOrganisations
parameter_list|()
block|{
try|try
block|{
name|URL
name|content
init|=
operator|new
name|URL
argument_list|(
name|_ivyroot
operator|+
literal|"content.xml"
argument_list|)
decl_stmt|;
specifier|final
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|XMLHelper
operator|.
name|parse
argument_list|(
name|content
argument_list|,
literal|null
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
block|{
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"organisation"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|String
name|org
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|OrganisationEntry
argument_list|(
name|IvyRepResolver
operator|.
name|this
argument_list|,
name|org
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|(
name|OrganisationEntry
index|[]
operator|)
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|OrganisationEntry
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"unable to parse content.xml file on ivyrep: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|listOrganisations
argument_list|()
return|;
block|}
comment|// overwrite parent to use only ivy patterns (and not artifact ones, cause ibiblio is too slow to answer)
specifier|public
name|ModuleEntry
index|[]
name|listModules
parameter_list|(
name|OrganisationEntry
name|org
parameter_list|)
block|{
name|Map
name|tokenValues
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|org
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
name|findIvyNames
argument_list|(
name|tokenValues
argument_list|,
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
decl_stmt|;
name|ModuleEntry
index|[]
name|ret
init|=
operator|new
name|ModuleEntry
index|[
name|names
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
operator|new
name|ModuleEntry
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"ivyrep"
return|;
block|}
block|}
end_class

end_unit

