begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|LatestStrategy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
operator|.
name|DownloadReport
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|AbstractRepository
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * @author Xavier Hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|RepositoryResolver
extends|extends
name|AbstractResourceResolver
block|{
specifier|private
name|Repository
name|_repository
decl_stmt|;
specifier|public
name|RepositoryResolver
parameter_list|()
block|{
block|}
specifier|public
name|Repository
name|getRepository
parameter_list|()
block|{
return|return
name|_repository
return|;
block|}
specifier|public
name|void
name|setRepository
parameter_list|(
name|Repository
name|repository
parameter_list|)
block|{
name|_repository
operator|=
name|repository
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|_repository
operator|instanceof
name|AbstractRepository
condition|)
block|{
operator|(
operator|(
name|AbstractRepository
operator|)
name|_repository
operator|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|ResolvedResource
name|findResourceUsingPattern
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
return|return
name|findResourceUsingPattern
argument_list|(
name|getName
argument_list|()
argument_list|,
name|getRepository
argument_list|()
argument_list|,
name|getLatestStrategy
argument_list|()
argument_list|,
name|mrid
argument_list|,
name|pattern
argument_list|,
name|artifact
argument_list|,
name|type
argument_list|,
name|ext
argument_list|,
name|date
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ResolvedResource
name|findResourceUsingPattern
parameter_list|(
name|String
name|name
parameter_list|,
name|Repository
name|repository
parameter_list|,
name|LatestStrategy
name|strategy
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|String
name|resourceName
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
name|mrid
argument_list|,
name|artifact
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t trying "
operator|+
name|resourceName
argument_list|)
expr_stmt|;
try|try
block|{
name|Resource
name|res
init|=
name|repository
operator|.
name|getResource
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|boolean
name|reachable
init|=
name|res
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
name|reachable
condition|)
block|{
return|return
operator|new
name|ResolvedResource
argument_list|(
name|res
argument_list|,
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
operator|!
name|mrid
operator|.
name|isExactRevision
argument_list|()
condition|)
block|{
name|ResolvedResource
index|[]
name|rress
init|=
name|ResolverHelper
operator|.
name|findAll
argument_list|(
name|repository
argument_list|,
name|mrid
argument_list|,
name|pattern
argument_list|,
name|artifact
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
decl_stmt|;
if|if
condition|(
name|rress
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|name
operator|+
literal|": unable to list resources for "
operator|+
name|mrid
operator|+
literal|": pattern="
operator|+
name|pattern
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rress
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|name
operator|+
literal|": found "
operator|+
name|rress
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|ResolvedResource
name|found
init|=
operator|(
name|ResolvedResource
operator|)
name|strategy
operator|.
name|findLatest
argument_list|(
name|rress
argument_list|,
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|name
operator|+
literal|": no resource found for "
operator|+
name|mrid
operator|+
literal|": pattern="
operator|+
name|pattern
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|found
operator|.
name|getResource
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|name
operator|+
literal|": resource not reachable for "
operator|+
name|mrid
operator|+
literal|": res="
operator|+
name|res
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|found
return|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|name
operator|+
literal|": resource not reachable for "
operator|+
name|mrid
operator|+
literal|": res="
operator|+
name|res
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|name
operator|+
literal|": unable to get resource for "
operator|+
name|mrid
operator|+
literal|": res="
operator|+
name|resourceName
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Returns all resolved res matching the given pattern and matching given mrid,       * or null if no lister is able to handle the given pattern      *       * @param mrid      * @param pattern      * @param artifact      * @param type      * @param ext      * @return      */
specifier|protected
name|ResolvedResource
index|[]
name|findAll
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|ext
parameter_list|)
block|{
return|return
name|ResolverHelper
operator|.
name|findAll
argument_list|(
name|_repository
argument_list|,
name|mrid
argument_list|,
name|pattern
argument_list|,
name|artifact
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
return|;
block|}
specifier|protected
name|long
name|get
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|File
name|ivyTempFile
parameter_list|)
throws|throws
name|IOException
block|{
name|_repository
operator|.
name|get
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
argument_list|,
name|ivyTempFile
argument_list|)
expr_stmt|;
return|return
name|ivyTempFile
operator|.
name|length
argument_list|()
return|;
block|}
specifier|public
name|void
name|publish
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|src
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|destPattern
decl_stmt|;
if|if
condition|(
literal|"ivy"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
operator|!
name|getIvyPatterns
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|destPattern
operator|=
operator|(
name|String
operator|)
name|getIvyPatterns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destPattern
operator|=
operator|(
name|String
operator|)
name|getArtifactPatterns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|dest
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|destPattern
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
name|_repository
operator|.
name|put
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|"\tpublished "
operator|+
name|artifact
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|dest
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DownloadReport
name|download
parameter_list|(
name|Artifact
index|[]
name|artifacts
parameter_list|,
name|Ivy
name|ivy
parameter_list|,
name|File
name|cache
parameter_list|)
block|{
try|try
block|{
name|_repository
operator|.
name|addTransferListener
argument_list|(
name|ivy
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|download
argument_list|(
name|artifacts
argument_list|,
name|ivy
argument_list|,
name|cache
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|ivy
operator|!=
literal|null
condition|)
block|{
name|_repository
operator|.
name|removeTransferListener
argument_list|(
name|ivy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|findTokenValues
parameter_list|(
name|Collection
name|names
parameter_list|,
name|List
name|patterns
parameter_list|,
name|Map
name|tokenValues
parameter_list|,
name|String
name|token
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|patterns
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|partiallyResolvedPattern
init|=
name|IvyPatternHelper
operator|.
name|substituteTokens
argument_list|(
name|pattern
argument_list|,
name|tokenValues
argument_list|)
decl_stmt|;
name|String
index|[]
name|values
init|=
name|ResolverHelper
operator|.
name|listTokenValues
argument_list|(
name|_repository
argument_list|,
name|partiallyResolvedPattern
argument_list|,
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|names
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"repository"
return|;
block|}
specifier|public
name|void
name|dumpConfig
parameter_list|()
block|{
name|super
operator|.
name|dumpConfig
argument_list|()
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\trepository: "
operator|+
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

