begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|FileURLLister
implements|implements
name|URLLister
block|{
specifier|private
name|File
name|_basedir
decl_stmt|;
specifier|public
name|FileURLLister
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileURLLister
parameter_list|(
name|File
name|baseDir
parameter_list|)
block|{
name|_basedir
operator|=
name|baseDir
expr_stmt|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"file"
argument_list|)
return|;
block|}
specifier|public
name|List
name|listAll
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|File
name|file
init|=
name|_basedir
operator|==
literal|null
condition|?
operator|new
name|File
argument_list|(
name|path
argument_list|)
else|:
operator|new
name|File
argument_list|(
name|_basedir
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
index|[]
name|files
init|=
name|file
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|(
name|files
operator|.
name|length
argument_list|)
decl_stmt|;
name|URL
name|context
init|=
name|url
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|url
else|:
operator|new
name|URL
argument_list|(
name|url
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|URL
argument_list|(
name|context
argument_list|,
name|files
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file lister"
return|;
block|}
block|}
end_class

end_unit

