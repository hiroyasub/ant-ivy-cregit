begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_comment
comment|/**  * IBiblioResolver is a resolver which can be used to resolve dependencies found  * in the ibiblio maven repository, or similar repositories.  * For more flexibility with url and patterns, see {@link fr.jayasoft.ivy.resolver.URLResolver}.  */
end_comment

begin_class
specifier|public
class|class
name|IBiblioResolver
extends|extends
name|URLResolver
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PATTERN
init|=
literal|"[module]/[type]s/[artifact]-[revision].[ext]"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROOT
init|=
literal|"http://www.ibiblio.org/maven/"
decl_stmt|;
specifier|private
name|String
name|_root
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_pattern
init|=
literal|null
decl_stmt|;
specifier|public
name|IBiblioResolver
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setIvy
parameter_list|(
name|Ivy
name|ivy
parameter_list|)
block|{
name|super
operator|.
name|setIvy
argument_list|(
name|ivy
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|configureRepositories
argument_list|()
expr_stmt|;
if|if
condition|(
name|_root
operator|==
literal|null
condition|)
block|{
name|String
name|root
init|=
name|ivy
operator|.
name|getVariable
argument_list|(
literal|"ivy.ibiblio.default.artifact.root"
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|_root
operator|=
name|root
expr_stmt|;
block|}
else|else
block|{
name|_root
operator|=
name|DEFAULT_ROOT
expr_stmt|;
block|}
block|}
if|if
condition|(
name|_pattern
operator|==
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|ivy
operator|.
name|getVariable
argument_list|(
literal|"ivy.ibiblio.default.artifact.pattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|_pattern
operator|=
name|pattern
expr_stmt|;
block|}
else|else
block|{
name|_pattern
operator|=
name|DEFAULT_PATTERN
expr_stmt|;
block|}
block|}
name|updateWholePattern
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getWholePattern
parameter_list|()
block|{
return|return
name|_root
operator|+
name|_pattern
return|;
block|}
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|_pattern
return|;
block|}
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"pattern must not be null"
argument_list|)
throw|;
block|}
name|_pattern
operator|=
name|pattern
expr_stmt|;
name|updateWholePattern
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getRoot
parameter_list|()
block|{
return|return
name|_root
return|;
block|}
comment|/**      * Sets the root of the maven like repository.      * The maven like repository is necessarily an http repository.      * @param root the root of the maven like repository      * @throws IllegalArgumentException if root does not start with "http://"      */
specifier|public
name|void
name|setRoot
parameter_list|(
name|String
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"root must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|root
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|_root
operator|=
name|root
operator|+
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|_root
operator|=
name|root
expr_stmt|;
block|}
name|updateWholePattern
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateWholePattern
parameter_list|()
block|{
name|setArtifactPatterns
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|getWholePattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|publish
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|src
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"publish not supported by IBiblioResolver"
argument_list|)
throw|;
block|}
specifier|public
name|OrganisationEntry
index|[]
name|listOrganisations
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|ModuleEntry
index|[]
name|listModules
parameter_list|(
name|OrganisationEntry
name|org
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"ibiblio"
return|;
block|}
block|}
end_class

end_unit

