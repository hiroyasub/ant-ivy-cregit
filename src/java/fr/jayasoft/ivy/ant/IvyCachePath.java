begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ArtifactOrigin
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_comment
comment|/**  * Creates an ant path consisting in all artifacts found during a resolve.  *   * @author Xavier Hanin  */
end_comment

begin_class
specifier|public
class|class
name|IvyCachePath
extends|extends
name|IvyCacheTask
block|{
specifier|private
name|String
name|_pathid
decl_stmt|;
specifier|private
name|boolean
name|useOrigin
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|isUseOrigin
parameter_list|()
block|{
return|return
name|useOrigin
return|;
block|}
specifier|public
name|void
name|setUseOrigin
parameter_list|(
name|boolean
name|useOrigin
parameter_list|)
block|{
name|this
operator|.
name|useOrigin
operator|=
name|useOrigin
expr_stmt|;
block|}
specifier|public
name|String
name|getPathid
parameter_list|()
block|{
return|return
name|_pathid
return|;
block|}
specifier|public
name|void
name|setPathid
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|_pathid
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
name|prepareAndCheck
argument_list|()
expr_stmt|;
if|if
condition|(
name|_pathid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"pathid is required in ivy classpath"
argument_list|)
throw|;
block|}
try|try
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
name|getProject
argument_list|()
operator|.
name|addReference
argument_list|(
name|_pathid
argument_list|,
name|path
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|getPaths
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PathEntry
name|p
init|=
operator|(
name|PathEntry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isRelativeToCache
argument_list|()
condition|)
block|{
name|path
operator|.
name|createPathElement
argument_list|()
operator|.
name|setLocation
argument_list|(
operator|new
name|File
argument_list|(
name|getCache
argument_list|()
argument_list|,
name|p
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|.
name|createPathElement
argument_list|()
operator|.
name|setLocation
argument_list|(
operator|new
name|File
argument_list|(
name|p
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"impossible to build ivy path: "
operator|+
name|ex
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|addPath
parameter_list|(
name|List
name|paths
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|Ivy
name|ivy
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|useOrigin
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
operator|new
name|PathEntry
argument_list|(
name|ivy
operator|.
name|getArchivePathInCache
argument_list|(
name|artifact
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ArtifactOrigin
name|origin
init|=
name|ivy
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|getCache
argument_list|()
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|origin
operator|==
literal|null
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
operator|new
name|PathEntry
argument_list|(
name|ivy
operator|.
name|getArchivePathInCache
argument_list|(
name|artifact
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|origin
operator|.
name|isLocal
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
operator|new
name|PathEntry
argument_list|(
name|origin
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paths
operator|.
name|add
argument_list|(
operator|new
name|PathEntry
argument_list|(
name|ivy
operator|.
name|getArchivePathInCache
argument_list|(
name|artifact
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

