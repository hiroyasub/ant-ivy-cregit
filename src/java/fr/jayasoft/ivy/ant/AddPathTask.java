begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|DirSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|FileList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|FileSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Path
operator|.
name|PathElement
import|;
end_import

begin_comment
comment|/**  * This task is not directly related to ivy, but is useful in some modular build systems.  *   * The idea is to be able to contribute new sub path elements to an existing path.  *   * @author Xavier Hanin  */
end_comment

begin_class
specifier|public
class|class
name|AddPathTask
extends|extends
name|Task
block|{
specifier|private
name|String
name|_topath
decl_stmt|;
specifier|private
name|boolean
name|_first
init|=
literal|false
decl_stmt|;
specifier|private
name|Path
name|_toadd
decl_stmt|;
specifier|public
name|String
name|getTopath
parameter_list|()
block|{
return|return
name|_topath
return|;
block|}
specifier|public
name|void
name|setTopath
parameter_list|(
name|String
name|topath
parameter_list|)
block|{
name|_topath
operator|=
name|topath
expr_stmt|;
block|}
specifier|public
name|void
name|setProject
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
name|super
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|_toadd
operator|=
operator|new
name|Path
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
name|Object
name|element
init|=
name|getProject
argument_list|()
operator|.
name|getReference
argument_list|(
name|_topath
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"destination path not found: "
operator|+
name|_topath
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|element
operator|instanceof
name|Path
operator|)
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"destination path is not a path: "
operator|+
name|element
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|dest
init|=
operator|(
name|Path
operator|)
name|element
decl_stmt|;
if|if
condition|(
name|_first
condition|)
block|{
comment|// now way to add path elements at te beginning of the existing path: we do the opposite
comment|// and replace the reference
name|_toadd
operator|.
name|append
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|getProject
argument_list|()
operator|.
name|addReference
argument_list|(
name|_topath
argument_list|,
name|_toadd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dest
operator|.
name|append
argument_list|(
name|_toadd
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|BuildException
block|{
name|_toadd
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDirset
parameter_list|(
name|DirSet
name|dset
parameter_list|)
throws|throws
name|BuildException
block|{
name|_toadd
operator|.
name|addDirset
argument_list|(
name|dset
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFilelist
parameter_list|(
name|FileList
name|fl
parameter_list|)
throws|throws
name|BuildException
block|{
name|_toadd
operator|.
name|addFilelist
argument_list|(
name|fl
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFileset
parameter_list|(
name|FileSet
name|fs
parameter_list|)
throws|throws
name|BuildException
block|{
name|_toadd
operator|.
name|addFileset
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Path
name|createPath
parameter_list|()
throws|throws
name|BuildException
block|{
return|return
name|_toadd
operator|.
name|createPath
argument_list|()
return|;
block|}
specifier|public
name|PathElement
name|createPathElement
parameter_list|()
throws|throws
name|BuildException
block|{
return|return
name|_toadd
operator|.
name|createPathElement
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isFirst
parameter_list|()
block|{
return|return
name|_first
return|;
block|}
specifier|public
name|void
name|setFirst
parameter_list|(
name|boolean
name|first
parameter_list|)
block|{
name|_first
operator|=
name|first
expr_stmt|;
block|}
block|}
end_class

end_unit

