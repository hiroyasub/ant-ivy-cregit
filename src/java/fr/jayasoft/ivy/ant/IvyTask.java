begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_comment
comment|/**  * @author Hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|IvyTask
extends|extends
name|Task
block|{
specifier|private
name|Boolean
name|_validate
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|doValidate
parameter_list|(
name|Ivy
name|ivy
parameter_list|)
block|{
if|if
condition|(
name|_validate
operator|!=
literal|null
condition|)
block|{
return|return
name|_validate
operator|.
name|booleanValue
argument_list|()
return|;
block|}
return|return
name|ivy
operator|.
name|doValidate
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isValidate
parameter_list|()
block|{
return|return
name|_validate
operator|==
literal|null
condition|?
literal|true
else|:
name|_validate
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setValidate
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
name|_validate
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|validate
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Ivy
name|getIvyInstance
parameter_list|()
block|{
name|ensureMessageInitialised
argument_list|()
expr_stmt|;
name|Object
name|reference
init|=
name|getProject
argument_list|()
operator|.
name|getReference
argument_list|(
literal|"ivy.instance"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"no ivy instance found: auto configuring ivy"
argument_list|)
expr_stmt|;
name|IvyConfigure
name|configure
init|=
operator|new
name|IvyConfigure
argument_list|()
decl_stmt|;
name|configure
operator|.
name|setProject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|configure
operator|.
name|execute
argument_list|()
expr_stmt|;
name|reference
operator|=
name|getProject
argument_list|()
operator|.
name|getReference
argument_list|(
literal|"ivy.instance"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"ivy internal problem: impossible to get ivy instance !"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|reference
operator|instanceof
name|Ivy
operator|)
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"ivy internal problem: bad ivy instance class: "
operator|+
name|reference
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|(
name|Ivy
operator|)
name|reference
return|;
block|}
specifier|protected
name|void
name|ensureMessageInitialised
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Message
operator|.
name|isInitialised
argument_list|()
condition|)
block|{
name|Message
operator|.
name|init
argument_list|(
operator|new
name|AntMessageImpl
argument_list|(
name|getProject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getProject
argument_list|()
operator|.
name|addBuildListener
argument_list|(
operator|new
name|BuildListener
argument_list|()
block|{
specifier|public
name|void
name|buildFinished
parameter_list|(
name|BuildEvent
name|event
parameter_list|)
block|{
name|Message
operator|.
name|uninit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|buildStarted
parameter_list|(
name|BuildEvent
name|event
parameter_list|)
block|{
block|}
specifier|public
name|void
name|targetStarted
parameter_list|(
name|BuildEvent
name|event
parameter_list|)
block|{
block|}
specifier|public
name|void
name|targetFinished
parameter_list|(
name|BuildEvent
name|event
parameter_list|)
block|{
block|}
specifier|public
name|void
name|taskStarted
parameter_list|(
name|BuildEvent
name|event
parameter_list|)
block|{
block|}
specifier|public
name|void
name|taskFinished
parameter_list|(
name|BuildEvent
name|event
parameter_list|)
block|{
block|}
specifier|public
name|void
name|messageLogged
parameter_list|(
name|BuildEvent
name|event
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setIvyInstance
parameter_list|(
name|Ivy
name|ivy
parameter_list|)
block|{
name|getProject
argument_list|()
operator|.
name|addReference
argument_list|(
literal|"ivy.instance"
argument_list|,
name|ivy
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setResolved
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
name|getProject
argument_list|()
operator|.
name|addReference
argument_list|(
literal|"ivy.resolved.descriptor"
argument_list|,
name|md
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|ensureResolved
parameter_list|(
name|boolean
name|haltOnFailure
parameter_list|,
name|String
name|org
parameter_list|,
name|String
name|module
parameter_list|)
block|{
name|ensureMessageInitialised
argument_list|()
expr_stmt|;
if|if
condition|(
name|org
operator|!=
literal|null
operator|&&
name|module
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|Object
name|reference
init|=
name|getProject
argument_list|()
operator|.
name|getReference
argument_list|(
literal|"ivy.resolved.descriptor"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"no resolved descriptor found: launching default resolve"
argument_list|)
expr_stmt|;
name|IvyResolve
name|resolve
init|=
operator|new
name|IvyResolve
argument_list|()
decl_stmt|;
name|resolve
operator|.
name|setProject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setHaltonfailure
argument_list|(
name|haltOnFailure
argument_list|)
expr_stmt|;
if|if
condition|(
name|_validate
operator|!=
literal|null
condition|)
block|{
name|resolve
operator|.
name|setValidate
argument_list|(
name|_validate
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resolve
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
index|[]
name|splitConfs
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
name|String
index|[]
name|confs
init|=
name|conf
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|confs
index|[
name|i
index|]
operator|=
name|confs
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
return|return
name|confs
return|;
block|}
specifier|protected
name|String
name|mergeConfs
parameter_list|(
name|String
index|[]
name|conf
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|conf
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|setLength
argument_list|(
name|buf
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|// delete last comma
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|DateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
decl_stmt|;
specifier|protected
name|Date
name|getPubDate
parameter_list|(
name|String
name|date
parameter_list|,
name|Date
name|def
parameter_list|)
block|{
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"now"
operator|.
name|equalsIgnoreCase
argument_list|(
name|date
argument_list|)
condition|)
block|{
return|return
operator|new
name|Date
argument_list|()
return|;
block|}
try|try
block|{
return|return
name|DATE_FORMAT
operator|.
name|parse
argument_list|(
name|date
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"publication date provided in bad format. should be yyyyMMddHHmmss and not "
operator|+
name|date
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|def
return|;
block|}
block|}
specifier|protected
name|String
name|getProperty
parameter_list|(
name|String
name|value
parameter_list|,
name|Ivy
name|ivy
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|getProperty
argument_list|(
name|ivy
argument_list|,
name|name
argument_list|)
return|;
block|}
else|else
block|{
name|value
operator|=
name|ivy
operator|.
name|substitute
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"parameter found as attribute value: "
operator|+
name|name
operator|+
literal|"="
operator|+
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
specifier|protected
name|String
name|getProperty
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|val
init|=
name|ivy
operator|.
name|getVariable
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|ivy
operator|.
name|substitute
argument_list|(
name|getProject
argument_list|()
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"parameter found as ant project property: "
operator|+
name|name
operator|+
literal|"="
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"parameter not found: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|val
operator|=
name|ivy
operator|.
name|substitute
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"parameter found as ivy variable: "
operator|+
name|name
operator|+
literal|"="
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
block|}
end_class

end_unit

