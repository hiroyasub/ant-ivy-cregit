begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|FileSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|PatternSet
operator|.
name|NameEntry
import|;
end_import

begin_class
specifier|public
class|class
name|IvyCacheFileset
extends|extends
name|IvyCacheTask
block|{
specifier|private
name|String
name|_setid
decl_stmt|;
specifier|public
name|String
name|getSetid
parameter_list|()
block|{
return|return
name|_setid
return|;
block|}
specifier|public
name|void
name|setSetid
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|_setid
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
if|if
condition|(
name|_setid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"setid is required in ivy cachefileset"
argument_list|)
throw|;
block|}
try|try
block|{
name|FileSet
name|fileset
init|=
operator|new
name|FileSet
argument_list|()
decl_stmt|;
name|fileset
operator|.
name|setProject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|getProject
argument_list|()
operator|.
name|addReference
argument_list|(
name|_setid
argument_list|,
name|fileset
argument_list|)
expr_stmt|;
name|fileset
operator|.
name|setDir
argument_list|(
name|getCache
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|paths
init|=
name|getPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameEntry
name|ne
init|=
name|fileset
operator|.
name|createExclude
argument_list|()
decl_stmt|;
name|ne
operator|.
name|setName
argument_list|(
literal|"**/*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|paths
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|p
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|NameEntry
name|ne
init|=
name|fileset
operator|.
name|createInclude
argument_list|()
decl_stmt|;
name|ne
operator|.
name|setName
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"impossible to build ivy cache fileset: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

