begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|external
operator|.
name|m2
operator|.
name|PomModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_comment
comment|/**  * @author Hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|IvyConvertPom
extends|extends
name|IvyTask
block|{
specifier|private
name|File
name|_pomFile
init|=
literal|null
decl_stmt|;
specifier|private
name|File
name|_ivyFile
init|=
literal|null
decl_stmt|;
specifier|public
name|File
name|getPomFile
parameter_list|()
block|{
return|return
name|_pomFile
return|;
block|}
specifier|public
name|void
name|setPomFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|_pomFile
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|File
name|getIvyFile
parameter_list|()
block|{
return|return
name|_ivyFile
return|;
block|}
specifier|public
name|void
name|setIvyFile
parameter_list|(
name|File
name|ivyFile
parameter_list|)
block|{
name|_ivyFile
operator|=
name|ivyFile
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
try|try
block|{
if|if
condition|(
name|_pomFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"source pom file is required for convertpom task"
argument_list|)
throw|;
block|}
if|if
condition|(
name|_ivyFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"destination ivy file is required for convertpom task"
argument_list|)
throw|;
block|}
name|ModuleDescriptor
name|md
init|=
name|PomModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
operator|new
name|Ivy
argument_list|()
argument_list|,
name|_pomFile
operator|.
name|toURL
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PomModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|toIvyFile
argument_list|(
name|_pomFile
operator|.
name|toURL
argument_list|()
argument_list|,
operator|new
name|URLResource
argument_list|(
name|_pomFile
operator|.
name|toURL
argument_list|()
argument_list|)
argument_list|,
name|getIvyFile
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"unable to convert given pom file to url: "
operator|+
name|_pomFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|log
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"syntax errors in pom file "
operator|+
name|_pomFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"impossible convert given pom file to ivy file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" from="
operator|+
name|_pomFile
operator|+
literal|" to="
operator|+
name|_ivyFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

