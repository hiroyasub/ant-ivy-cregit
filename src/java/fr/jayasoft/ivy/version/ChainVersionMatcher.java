begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the licence found in LICENCE.TXT in the root directory of the project.  * Copyright Jayasoft 2005 - All rights reserved  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|version
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_class
specifier|public
class|class
name|ChainVersionMatcher
implements|implements
name|VersionMatcher
block|{
specifier|private
name|List
name|_matchers
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|public
name|void
name|add
parameter_list|(
name|VersionMatcher
name|matcher
parameter_list|)
block|{
name|_matchers
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDynamic
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|_matchers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|VersionMatcher
name|matcher
init|=
operator|(
name|VersionMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|isDynamic
argument_list|(
name|askedMrid
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleRevisionId
name|foundMrid
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|_matchers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|VersionMatcher
name|matcher
init|=
operator|(
name|VersionMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
operator|||
name|matcher
operator|.
name|isDynamic
argument_list|(
name|askedMrid
argument_list|)
condition|)
block|{
return|return
name|matcher
operator|.
name|accept
argument_list|(
name|askedMrid
argument_list|,
name|foundMrid
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|needModuleDescriptor
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleRevisionId
name|foundMrid
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|_matchers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|VersionMatcher
name|matcher
init|=
operator|(
name|VersionMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
operator|||
name|matcher
operator|.
name|isDynamic
argument_list|(
name|askedMrid
argument_list|)
condition|)
block|{
return|return
name|matcher
operator|.
name|needModuleDescriptor
argument_list|(
name|askedMrid
argument_list|,
name|foundMrid
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleDescriptor
name|foundMD
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|_matchers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|VersionMatcher
name|matcher
init|=
operator|(
name|VersionMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
operator|||
name|matcher
operator|.
name|isDynamic
argument_list|(
name|askedMrid
argument_list|)
condition|)
block|{
return|return
name|matcher
operator|.
name|accept
argument_list|(
name|askedMrid
argument_list|,
name|foundMD
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

