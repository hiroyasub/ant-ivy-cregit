begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * This file is subject to the license found in LICENCE.TXT in the root directory of the project.  *   * #SNAPSHOT#  */
end_comment

begin_package
package|package
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|report
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|IvyNode
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|License
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|fr
operator|.
name|jayasoft
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * @author Xavier Hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|XmlReportOutputter
implements|implements
name|ReportOutputter
block|{
specifier|public
name|void
name|output
parameter_list|(
name|ResolveReport
name|report
parameter_list|,
name|File
name|destDir
parameter_list|)
block|{
name|String
index|[]
name|confs
init|=
name|report
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
argument_list|(
name|report
operator|.
name|getConfigurationReport
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
argument_list|,
name|destDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|output
parameter_list|(
name|ConfigurationResolveReport
name|report
parameter_list|,
name|File
name|destDir
parameter_list|)
block|{
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|destDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|reportFile
init|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
name|getReportFileName
argument_list|(
name|report
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|reportFile
argument_list|)
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml-stylesheet type=\"text/xsl\" href=\"ivy-report.xsl\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<ivy-report version=\"1.0\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t<info"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\torganisation=\""
operator|+
name|mrid
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\tmodule=\""
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\tconf=\""
operator|+
name|report
operator|.
name|getConfiguration
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\tdate=\""
operator|+
name|Ivy
operator|.
name|DATE_FORMAT
operator|.
name|format
argument_list|(
name|report
operator|.
name|getDate
argument_list|()
argument_list|)
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t<dependencies>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|report
operator|.
name|getModuleIds
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleId
name|mid
init|=
operator|(
name|ModuleId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\t<module organisation=\""
operator|+
name|mid
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"\""
operator|+
literal|" name=\""
operator|+
name|mid
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
operator|+
literal|" resolver=\""
operator|+
name|report
operator|.
name|getIvy
argument_list|()
operator|.
name|getResolverName
argument_list|(
name|mid
argument_list|)
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it2
init|=
name|report
operator|.
name|getNodes
argument_list|(
name|mid
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|dep
init|=
operator|(
name|IvyNode
operator|)
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|ModuleDescriptor
name|md
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dep
operator|.
name|getModuleRevision
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|md
operator|=
name|dep
operator|.
name|getModuleRevision
argument_list|()
operator|.
name|getDescriptor
argument_list|()
expr_stmt|;
block|}
name|String
name|details
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|dep
operator|.
name|isLoaded
argument_list|()
condition|)
block|{
name|details
operator|+=
literal|" status=\""
operator|+
name|dep
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|+
literal|"\""
operator|+
literal|" pubdate=\""
operator|+
name|Ivy
operator|.
name|DATE_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|dep
operator|.
name|getPublication
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"\""
operator|+
literal|" resolver=\""
operator|+
name|dep
operator|.
name|getModuleRevision
argument_list|()
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
expr_stmt|;
block|}
if|if
condition|(
name|dep
operator|.
name|isEvicted
argument_list|(
name|report
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|IvyNode
operator|.
name|EvictionData
name|ed
init|=
name|dep
operator|.
name|getEvictedData
argument_list|(
name|report
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|details
operator|+=
literal|" evicted=\""
operator|+
name|ed
operator|.
name|getConflictManager
argument_list|()
operator|+
literal|"\""
expr_stmt|;
block|}
if|if
condition|(
name|dep
operator|.
name|hasProblem
argument_list|()
condition|)
block|{
name|details
operator|+=
literal|" error=\""
operator|+
name|dep
operator|.
name|getProblem
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\""
expr_stmt|;
block|}
if|if
condition|(
name|md
operator|!=
literal|null
operator|&&
name|md
operator|.
name|getHomePage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|details
operator|+=
literal|" homepage=\""
operator|+
name|md
operator|.
name|getHomePage
argument_list|()
operator|+
literal|"\""
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t\t\t<revision name=\""
operator|+
name|dep
operator|.
name|getResolvedId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|"\""
operator|+
name|details
operator|+
literal|" downloaded=\""
operator|+
name|dep
operator|.
name|isDownloaded
argument_list|()
operator|+
literal|"\""
operator|+
literal|" searched=\""
operator|+
name|dep
operator|.
name|isSearched
argument_list|()
operator|+
literal|"\""
operator|+
literal|" conf=\""
operator|+
name|toString
argument_list|(
name|dep
operator|.
name|getConfigurations
argument_list|(
name|report
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|!=
literal|null
condition|)
block|{
name|License
index|[]
name|licenses
init|=
name|md
operator|.
name|getLicenses
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|licenses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|lurl
decl_stmt|;
if|if
condition|(
name|licenses
index|[
name|i
index|]
operator|.
name|getUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lurl
operator|=
literal|" url=\""
operator|+
name|licenses
index|[
name|i
index|]
operator|.
name|getUrl
argument_list|()
operator|+
literal|"\""
expr_stmt|;
block|}
else|else
block|{
name|lurl
operator|=
literal|""
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t\t\t\t<license name=\""
operator|+
name|licenses
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
operator|+
name|lurl
operator|+
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dep
operator|.
name|isEvicted
argument_list|(
name|report
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|)
block|{
name|IvyNode
operator|.
name|EvictionData
name|ed
init|=
name|dep
operator|.
name|getEvictedData
argument_list|(
name|report
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|it3
init|=
name|ed
operator|.
name|getSelected
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|sel
init|=
operator|(
name|IvyNode
operator|)
name|it3
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\t\t\t<evicted-by rev=\""
operator|+
name|sel
operator|.
name|getResolvedId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
block|}
name|IvyNode
operator|.
name|Caller
index|[]
name|callers
init|=
name|dep
operator|.
name|getCallers
argument_list|(
name|report
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t\t\t\t<caller organisation=\""
operator|+
name|callers
index|[
name|i
index|]
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"\""
operator|+
literal|" name=\""
operator|+
name|callers
index|[
name|i
index|]
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
operator|+
literal|" conf=\""
operator|+
name|toString
argument_list|(
name|callers
index|[
name|i
index|]
operator|.
name|getCallerConfigurations
argument_list|()
argument_list|)
operator|+
literal|"\""
operator|+
literal|" rev=\""
operator|+
name|callers
index|[
name|i
index|]
operator|.
name|getAskedDependencyId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
name|ArtifactDownloadReport
index|[]
name|adr
init|=
name|report
operator|.
name|getDownloadReports
argument_list|(
name|dep
operator|.
name|getResolvedId
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\t\t\t<artifacts>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|adr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t\t\t\t<artifact name=\""
operator|+
name|adr
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"\" type=\""
operator|+
name|adr
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|+
literal|"\" ext=\""
operator|+
name|adr
index|[
name|i
index|]
operator|.
name|getExt
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" status=\""
operator|+
name|adr
index|[
name|i
index|]
operator|.
name|getDownloadStatus
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" size=\""
operator|+
name|adr
index|[
name|i
index|]
operator|.
name|getSize
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t\t\t\t</artifacts>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\t\t</revision>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t\t</module>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t</dependencies>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</ivy-report>"
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\treport for "
operator|+
name|mrid
operator|+
literal|" "
operator|+
name|report
operator|.
name|getConfiguration
argument_list|()
operator|+
literal|" produced in "
operator|+
name|reportFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to produce report for "
operator|+
name|report
operator|.
name|getModuleDescriptor
argument_list|()
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|String
index|[]
name|strs
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|strs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|strs
operator|.
name|length
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getReportFileName
parameter_list|(
name|ConfigurationResolveReport
name|report
parameter_list|)
block|{
return|return
name|getReportFileName
argument_list|(
name|report
operator|.
name|getModuleDescriptor
argument_list|()
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|report
operator|.
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getReportFileName
parameter_list|(
name|ModuleId
name|mid
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
return|return
name|mid
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"-"
operator|+
name|mid
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|conf
operator|+
literal|".xml"
return|;
block|}
block|}
end_class

end_unit

