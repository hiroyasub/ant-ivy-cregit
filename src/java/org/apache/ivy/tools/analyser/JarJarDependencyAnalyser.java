begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|tools
operator|.
name|analyser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|JarJarDependencyAnalyser
implements|implements
name|DependencyAnalyser
block|{
specifier|private
name|File
name|_jarjarjarLocation
decl_stmt|;
specifier|public
name|JarJarDependencyAnalyser
parameter_list|(
name|File
name|jarjarjarLocation
parameter_list|)
block|{
name|_jarjarjarLocation
operator|=
name|jarjarjarLocation
expr_stmt|;
block|}
specifier|public
name|ModuleDescriptor
index|[]
name|analyze
parameter_list|(
name|JarModule
index|[]
name|modules
parameter_list|)
block|{
name|StringBuffer
name|jarjarCmd
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"java -jar \""
argument_list|)
operator|.
name|append
argument_list|(
name|_jarjarjarLocation
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" --find --level=jar "
argument_list|)
decl_stmt|;
name|Map
name|jarModulesMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Map
name|mds
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modules
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|jarModulesMap
operator|.
name|put
argument_list|(
name|modules
index|[
name|i
index|]
operator|.
name|getJar
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|modules
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|DefaultModuleDescriptor
name|md
init|=
name|DefaultModuleDescriptor
operator|.
name|newBasicInstance
argument_list|(
name|modules
index|[
name|i
index|]
operator|.
name|getMrid
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|(
name|modules
index|[
name|i
index|]
operator|.
name|getJar
argument_list|()
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mds
operator|.
name|put
argument_list|(
name|modules
index|[
name|i
index|]
operator|.
name|getMrid
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|jarjarCmd
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|modules
index|[
name|i
index|]
operator|.
name|getJar
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|modules
operator|.
name|length
condition|)
block|{
name|jarjarCmd
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"jarjar command: "
operator|+
name|jarjarCmd
argument_list|)
expr_stmt|;
try|try
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|jarjarCmd
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|deps
init|=
name|line
operator|.
name|split
argument_list|(
literal|" -> "
argument_list|)
decl_stmt|;
name|JarModule
name|module
init|=
operator|(
name|JarModule
operator|)
name|jarModulesMap
operator|.
name|get
argument_list|(
name|deps
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|JarModule
name|dependency
init|=
operator|(
name|JarModule
operator|)
name|jarModulesMap
operator|.
name|get
argument_list|(
name|deps
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|.
name|getMrid
argument_list|()
operator|.
name|getModuleId
argument_list|()
operator|.
name|equals
argument_list|(
name|dependency
operator|.
name|getMrid
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Message
operator|.
name|verbose
argument_list|(
name|module
operator|.
name|getMrid
argument_list|()
operator|+
literal|" depends on "
operator|+
name|dependency
operator|.
name|getMrid
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultModuleDescriptor
name|md
init|=
operator|(
name|DefaultModuleDescriptor
operator|)
name|mds
operator|.
name|get
argument_list|(
name|module
operator|.
name|getMrid
argument_list|()
argument_list|)
decl_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|dependency
operator|.
name|getMrid
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|ModuleDescriptor
operator|.
name|DEFAULT_CONFIGURATION
argument_list|,
name|ModuleDescriptor
operator|.
name|DEFAULT_CONFIGURATION
argument_list|)
expr_stmt|;
name|md
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|ModuleDescriptor
index|[]
operator|)
name|mds
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ModuleDescriptor
index|[
name|mds
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|JarJarDependencyAnalyser
name|a
init|=
operator|new
name|JarJarDependencyAnalyser
argument_list|(
operator|new
name|File
argument_list|(
literal|"D:/temp/test2/jarjar-0.7.jar"
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|analyze
argument_list|(
operator|new
name|JarModuleFinder
argument_list|(
literal|"D:/temp/test2/ivyrep/[organisation]/[module]/[revision]/[artifact].[ext]"
argument_list|)
operator|.
name|findJarModules
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

