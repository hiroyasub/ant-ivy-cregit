begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|tools
operator|.
name|analyser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|FileURLLister
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolverHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|URLLister
import|;
end_import

begin_class
specifier|public
class|class
name|JarModuleFinder
block|{
specifier|private
name|String
name|_pattern
decl_stmt|;
specifier|private
name|String
name|_filePattern
decl_stmt|;
specifier|public
name|JarModuleFinder
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|_pattern
operator|=
literal|"file:///"
operator|+
name|pattern
expr_stmt|;
name|_filePattern
operator|=
name|pattern
expr_stmt|;
block|}
specifier|public
name|JarModule
index|[]
name|findJarModules
parameter_list|()
block|{
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|URLLister
name|lister
init|=
operator|new
name|FileURLLister
argument_list|()
decl_stmt|;
try|try
block|{
name|String
index|[]
name|orgs
init|=
name|ResolverHelper
operator|.
name|listTokenValues
argument_list|(
name|lister
argument_list|,
name|_pattern
argument_list|,
literal|"organisation"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|orgPattern
init|=
name|IvyPatternHelper
operator|.
name|substituteToken
argument_list|(
name|_pattern
argument_list|,
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|orgs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|modules
init|=
name|ResolverHelper
operator|.
name|listTokenValues
argument_list|(
name|lister
argument_list|,
name|orgPattern
argument_list|,
literal|"module"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|modules
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|modPattern
init|=
name|IvyPatternHelper
operator|.
name|substituteToken
argument_list|(
name|orgPattern
argument_list|,
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|modules
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|revs
init|=
name|ResolverHelper
operator|.
name|listTokenValues
argument_list|(
name|lister
argument_list|,
name|modPattern
argument_list|,
literal|"revision"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|revs
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|File
name|jar
init|=
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|_filePattern
argument_list|,
name|orgs
index|[
name|i
index|]
argument_list|,
name|modules
index|[
name|j
index|]
argument_list|,
name|revs
index|[
name|k
index|]
argument_list|,
name|modules
index|[
name|j
index|]
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|jar
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|JarModule
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|orgs
index|[
name|i
index|]
argument_list|,
name|modules
index|[
name|j
index|]
argument_list|,
name|revs
index|[
name|k
index|]
argument_list|)
argument_list|,
name|jar
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
return|return
operator|(
name|JarModule
index|[]
operator|)
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|JarModule
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|JarModule
index|[]
name|mods
init|=
operator|new
name|JarModuleFinder
argument_list|(
literal|"D:/temp/test2/ivyrep/[organisation]/[module]/[revision]/[artifact].[ext]"
argument_list|)
operator|.
name|findJarModules
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|mods
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

