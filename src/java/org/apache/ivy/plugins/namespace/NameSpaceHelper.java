begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ArtifactId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|MetadataArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|NameSpaceHelper
block|{
specifier|private
name|NameSpaceHelper
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|DependencyDescriptor
name|toSystem
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|Namespace
name|ns
parameter_list|)
block|{
return|return
name|DefaultDependencyDescriptor
operator|.
name|transformInstance
argument_list|(
name|dd
argument_list|,
name|ns
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DependencyDescriptor
name|transform
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|NamespaceTransformer
name|t
parameter_list|,
name|boolean
name|fromSystem
parameter_list|)
block|{
return|return
name|DefaultDependencyDescriptor
operator|.
name|transformInstance
argument_list|(
name|dd
argument_list|,
name|t
argument_list|,
name|fromSystem
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ModuleDescriptor
name|toSystem
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|Namespace
name|ns
parameter_list|)
block|{
return|return
name|DefaultModuleDescriptor
operator|.
name|transformInstance
argument_list|(
name|md
argument_list|,
name|ns
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ResolvedModuleRevision
name|toSystem
parameter_list|(
name|ResolvedModuleRevision
name|rmr
parameter_list|,
name|Namespace
name|ns
parameter_list|)
block|{
if|if
condition|(
name|ns
operator|.
name|getToSystemTransformer
argument_list|()
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|rmr
return|;
block|}
name|ModuleDescriptor
name|md
init|=
name|toSystem
argument_list|(
name|rmr
operator|.
name|getDescriptor
argument_list|()
argument_list|,
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|.
name|equals
argument_list|(
name|rmr
operator|.
name|getDescriptor
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|rmr
return|;
block|}
return|return
operator|new
name|ResolvedModuleRevision
argument_list|(
name|rmr
operator|.
name|getResolver
argument_list|()
argument_list|,
name|rmr
operator|.
name|getArtifactResolver
argument_list|()
argument_list|,
name|md
argument_list|,
name|transform
argument_list|(
name|rmr
operator|.
name|getReport
argument_list|()
argument_list|,
name|ns
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Artifact
name|transform
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|NamespaceTransformer
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|artifact
return|;
block|}
name|ModuleRevisionId
name|mrid
init|=
name|t
operator|.
name|transform
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|equals
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
return|return
name|artifact
return|;
block|}
return|return
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
name|artifact
operator|.
name|getPublicationDate
argument_list|()
argument_list|,
name|artifact
operator|.
name|getName
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|,
name|artifact
operator|.
name|getExt
argument_list|()
argument_list|,
name|artifact
operator|.
name|getUrl
argument_list|()
argument_list|,
name|artifact
operator|.
name|getQualifiedExtraAttributes
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|MetadataArtifactDownloadReport
name|transform
parameter_list|(
name|MetadataArtifactDownloadReport
name|report
parameter_list|,
name|NamespaceTransformer
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|report
return|;
block|}
name|MetadataArtifactDownloadReport
name|madr
init|=
operator|new
name|MetadataArtifactDownloadReport
argument_list|(
name|transform
argument_list|(
name|report
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|t
argument_list|)
argument_list|)
decl_stmt|;
name|madr
operator|.
name|setSearched
argument_list|(
name|report
operator|.
name|isSearched
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setDownloadStatus
argument_list|(
name|report
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setDownloadDetails
argument_list|(
name|report
operator|.
name|getDownloadDetails
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setArtifactOrigin
argument_list|(
name|report
operator|.
name|getArtifactOrigin
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setDownloadTimeMillis
argument_list|(
name|report
operator|.
name|getDownloadTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setOriginalLocalFile
argument_list|(
name|report
operator|.
name|getOriginalLocalFile
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setLocalFile
argument_list|(
name|report
operator|.
name|getLocalFile
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setSize
argument_list|(
name|report
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|madr
return|;
block|}
specifier|public
specifier|static
name|ArtifactId
name|transform
parameter_list|(
name|ArtifactId
name|artifactId
parameter_list|,
name|NamespaceTransformer
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|artifactId
return|;
block|}
name|ModuleId
name|mid
init|=
name|transform
argument_list|(
name|artifactId
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|mid
operator|.
name|equals
argument_list|(
name|artifactId
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|artifactId
return|;
block|}
return|return
operator|new
name|ArtifactId
argument_list|(
name|mid
argument_list|,
name|artifactId
operator|.
name|getName
argument_list|()
argument_list|,
name|artifactId
operator|.
name|getType
argument_list|()
argument_list|,
name|artifactId
operator|.
name|getExt
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ModuleId
name|transform
parameter_list|(
name|ModuleId
name|mid
parameter_list|,
name|NamespaceTransformer
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|mid
return|;
block|}
return|return
name|t
operator|.
name|transform
argument_list|(
operator|new
name|ModuleRevisionId
argument_list|(
name|mid
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|getModuleId
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|transformOrganisation
parameter_list|(
name|String
name|org
parameter_list|,
name|NamespaceTransformer
name|t
parameter_list|)
block|{
return|return
name|transform
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
literal|""
argument_list|)
argument_list|,
name|t
argument_list|)
operator|.
name|getOrganisation
argument_list|()
return|;
block|}
block|}
end_class

end_unit

