begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|trigger
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|IvyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|IvyEventFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|IvyListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_comment
comment|/**  * Base class for easy trigger implementation.  *   * This base class takes of the event filtering part, the only method to implement in subclasses  * is {@link IvyListener#progress(IvyEvent)} which should do whatever the trigger needs to do when  * the event occurs. This method will only be called when an event matching the trigger filter occurs.  *   *   *   * @since 1.4  * @author Xavier Hanin  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTrigger
implements|implements
name|Trigger
block|{
specifier|private
name|Filter
name|_filter
decl_stmt|;
specifier|private
name|String
name|_event
decl_stmt|;
specifier|private
name|String
name|_filterExpression
decl_stmt|;
specifier|private
name|String
name|_matcher
init|=
name|PatternMatcher
operator|.
name|EXACT
decl_stmt|;
specifier|public
name|Filter
name|getEventFilter
parameter_list|()
block|{
if|if
condition|(
name|_filter
operator|==
literal|null
condition|)
block|{
name|_filter
operator|=
name|createFilter
argument_list|()
expr_stmt|;
block|}
return|return
name|_filter
return|;
block|}
specifier|private
name|Filter
name|createFilter
parameter_list|()
block|{
return|return
operator|new
name|IvyEventFilter
argument_list|(
name|getEvent
argument_list|()
argument_list|,
name|getFilter
argument_list|()
argument_list|,
name|getPatternMatcher
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|PatternMatcher
name|getPatternMatcher
parameter_list|()
block|{
return|return
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getSettings
argument_list|()
operator|.
name|getMatcher
argument_list|(
name|_matcher
argument_list|)
return|;
block|}
specifier|public
name|String
name|getEvent
parameter_list|()
block|{
return|return
name|_event
return|;
block|}
specifier|public
name|void
name|setEvent
parameter_list|(
name|String
name|event
parameter_list|)
block|{
name|_event
operator|=
name|event
expr_stmt|;
block|}
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|_filterExpression
return|;
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filterExpression
parameter_list|)
block|{
name|_filterExpression
operator|=
name|filterExpression
expr_stmt|;
block|}
specifier|public
name|String
name|getMatcher
parameter_list|()
block|{
return|return
name|_matcher
return|;
block|}
specifier|public
name|void
name|setMatcher
parameter_list|(
name|String
name|matcher
parameter_list|)
block|{
name|_matcher
operator|=
name|matcher
expr_stmt|;
block|}
block|}
end_class

end_unit

