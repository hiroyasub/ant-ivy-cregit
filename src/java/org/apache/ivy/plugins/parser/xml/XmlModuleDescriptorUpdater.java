begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ExtendsDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|InheritableItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|NameSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|file
operator|.
name|FileResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Checks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|DateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|extendable
operator|.
name|ExtendableItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * Used to update ivy files. Uses ivy file as source and not ModuleDescriptor to preserve as much as  * possible the original syntax  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|XmlModuleDescriptorUpdater
block|{
comment|// CheckStyle:StaticVariableName| OFF
comment|// LINE_SEPARATOR is actually a constant, but we have to modify it for the tests
specifier|public
specifier|static
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
comment|// CheckStyle:StaticVariableName| ON
specifier|private
name|XmlModuleDescriptorUpdater
parameter_list|()
block|{
block|}
comment|/**      * used to copy a module descriptor xml file (also known as ivy file) and update the revisions      * of its dependencies, its status and revision      *      * @param srcURL      *            the url of the source module descriptor file      * @param destFile      *            The file to which the updated module descriptor should be output      * @param options      *            UpdateOptions      * @throws IOException if something goes wrong      * @throws SAXException if something goes wrong      */
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|URL
name|srcURL
parameter_list|,
name|File
name|destFile
parameter_list|,
name|UpdateOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|destFile
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|destFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|OutputStream
name|destStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|destFile
argument_list|)
decl_stmt|;
try|try
block|{
name|update
argument_list|(
name|srcURL
argument_list|,
name|destStream
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|destStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"failed to close a stream : "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|URL
name|srcURL
parameter_list|,
name|OutputStream
name|destFile
parameter_list|,
name|UpdateOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|InputStream
name|in
init|=
name|srcURL
operator|.
name|openStream
argument_list|()
decl_stmt|;
try|try
block|{
name|update
argument_list|(
name|srcURL
argument_list|,
name|in
argument_list|,
name|destFile
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"failed to close a stream : "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|destFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"failed to close a stream : "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Resource
name|res
parameter_list|,
name|File
name|destFile
parameter_list|,
name|UpdateOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|destFile
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|destFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|OutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|destFile
argument_list|)
decl_stmt|;
try|try
block|{
comment|// TODO: use resource as input stream context?
name|URL
name|inputStreamContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|res
operator|instanceof
name|URLResource
condition|)
block|{
name|inputStreamContext
operator|=
operator|(
operator|(
name|URLResource
operator|)
name|res
operator|)
operator|.
name|getURL
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|res
operator|instanceof
name|FileResource
condition|)
block|{
name|inputStreamContext
operator|=
operator|(
operator|(
name|FileResource
operator|)
name|res
operator|)
operator|.
name|getFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
name|update
argument_list|(
name|inputStreamContext
argument_list|,
name|in
argument_list|,
name|fos
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"failed to close a stream : "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"failed to close a stream : "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|UpdaterHandler
extends|extends
name|DefaultHandler
implements|implements
name|LexicalHandler
block|{
comment|/** standard attributes of ivy-module/info */
specifier|private
specifier|static
specifier|final
name|Collection
name|STD_ATTS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"organisation"
block|,
literal|"module"
block|,
literal|"branch"
block|,
literal|"revision"
block|,
literal|"status"
block|,
literal|"publication"
block|,
literal|"namespace"
block|}
argument_list|)
decl_stmt|;
comment|/** elements that may appear inside ivy-module, in expected order */
specifier|private
specifier|static
specifier|final
name|List
name|MODULE_ELEMENTS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"info"
block|,
literal|"configurations"
block|,
literal|"publications"
block|,
literal|"dependencies"
block|,
literal|"conflicts"
block|}
argument_list|)
decl_stmt|;
comment|/** element position of "configurations" inside "ivy-module" */
specifier|private
specifier|static
specifier|final
name|int
name|CONFIGURATIONS_POSITION
init|=
name|MODULE_ELEMENTS
operator|.
name|indexOf
argument_list|(
literal|"configurations"
argument_list|)
decl_stmt|;
comment|/** element position of "dependencies" inside "ivy-module" */
specifier|private
specifier|static
specifier|final
name|int
name|DEPENDENCIES_POSITION
init|=
name|MODULE_ELEMENTS
operator|.
name|indexOf
argument_list|(
literal|"dependencies"
argument_list|)
decl_stmt|;
comment|/** elements that may appear inside of ivy-module/info */
specifier|private
specifier|static
specifier|final
name|Collection
name|INFO_ELEMENTS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"extends"
block|,
literal|"ivyauthor"
block|,
literal|"license"
block|,
literal|"repository"
block|,
literal|"description"
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ParserSettings
name|settings
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|out
decl_stmt|;
specifier|private
specifier|final
name|Map
name|resolvedRevisions
decl_stmt|;
specifier|private
specifier|final
name|Map
name|resolvedBranches
decl_stmt|;
specifier|private
specifier|final
name|String
name|status
decl_stmt|;
specifier|private
specifier|final
name|String
name|revision
decl_stmt|;
specifier|private
specifier|final
name|Date
name|pubdate
decl_stmt|;
specifier|private
specifier|final
name|Namespace
name|ns
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|replaceInclude
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|generateRevConstraint
decl_stmt|;
specifier|private
name|boolean
name|inHeader
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|List
name|confs
decl_stmt|;
specifier|private
specifier|final
name|URL
name|relativePathCtx
decl_stmt|;
specifier|private
specifier|final
name|UpdateOptions
name|options
decl_stmt|;
specifier|public
name|UpdaterHandler
parameter_list|(
name|URL
name|relativePathCtx
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
specifier|final
name|UpdateOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|options
operator|.
name|getSettings
argument_list|()
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|resolvedRevisions
operator|=
name|options
operator|.
name|getResolvedRevisions
argument_list|()
expr_stmt|;
name|this
operator|.
name|resolvedBranches
operator|=
name|options
operator|.
name|getResolvedBranches
argument_list|()
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|options
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|options
operator|.
name|getRevision
argument_list|()
expr_stmt|;
name|this
operator|.
name|pubdate
operator|=
name|options
operator|.
name|getPubdate
argument_list|()
expr_stmt|;
name|this
operator|.
name|ns
operator|=
name|options
operator|.
name|getNamespace
argument_list|()
expr_stmt|;
name|this
operator|.
name|replaceInclude
operator|=
name|options
operator|.
name|isReplaceInclude
argument_list|()
expr_stmt|;
name|this
operator|.
name|generateRevConstraint
operator|=
name|options
operator|.
name|isGenerateRevConstraint
argument_list|()
expr_stmt|;
name|this
operator|.
name|relativePathCtx
operator|=
name|relativePathCtx
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|getConfsToExclude
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|confs
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|options
operator|.
name|getConfsToExclude
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|confs
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
block|}
comment|// never print *ln* cause \n is found in copied characters stream
comment|// nor do we need do handle indentation, original one is maintained except for attributes
specifier|private
name|String
name|organisation
init|=
literal|null
decl_stmt|;
comment|// defaultConfMapping of imported configurations, if any
specifier|private
name|String
name|defaultConfMapping
init|=
literal|null
decl_stmt|;
comment|// confMappingOverride of imported configurations, if any
specifier|private
name|Boolean
name|confMappingOverride
init|=
literal|null
decl_stmt|;
comment|// used to know if the last open tag was empty, to adjust termination
comment|// with /> instead of></qName>
specifier|private
name|String
name|justOpen
init|=
literal|null
decl_stmt|;
comment|// track the size of the left indent, so that inserted elements are formatted
comment|// like nearby elements.
comment|// true when we're reading indent whitespace
specifier|private
name|boolean
name|indenting
decl_stmt|;
specifier|private
name|StringBuffer
name|currentIndent
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
name|indentLevels
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// ArrayList<String>
comment|// true if an ivy-module/info/description element has been found in the published descriptor
specifier|private
name|boolean
name|hasDescription
init|=
literal|false
decl_stmt|;
comment|// true if merged configurations have been written
specifier|private
name|boolean
name|mergedConfigurations
init|=
literal|false
decl_stmt|;
comment|// true if merged deps have been written
specifier|private
name|boolean
name|mergedDependencies
init|=
literal|false
decl_stmt|;
comment|// the new value of the defaultconf attribute on the publications tag
specifier|private
name|String
name|newDefaultConf
init|=
literal|null
decl_stmt|;
specifier|private
name|Stack
name|context
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|Stack
name|buffers
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|Stack
name|confAttributeBuffers
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|inHeader
operator|=
literal|false
expr_stmt|;
name|endIndent
argument_list|()
expr_stmt|;
if|if
condition|(
name|justOpen
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|flushMergedElementsBefore
argument_list|(
name|qName
argument_list|)
expr_stmt|;
comment|// according to ivy.xsd, all<dependency> elements must occur before
comment|// the<exclude>,<override> or<conflict> elements
if|if
condition|(
name|options
operator|.
name|isMerge
argument_list|()
operator|&&
operator|(
literal|"exclude"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
literal|"override"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
literal|"conflict"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|)
operator|&&
literal|"ivy-module/dependencies"
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
condition|)
block|{
name|ModuleDescriptor
name|merged
init|=
name|options
operator|.
name|getMergedDescriptor
argument_list|()
decl_stmt|;
name|writeInheritedDependencies
argument_list|(
name|merged
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|getIndent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|push
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"info"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|infoStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|replaceInclude
operator|&&
literal|"include"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|context
operator|.
name|contains
argument_list|(
literal|"configurations"
argument_list|)
condition|)
block|{
comment|// TODO, in the case of !replaceInclude, we should still replace the relative path
comment|// by an absolute path.
name|includeStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ivy-module/info/extends"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|startExtends
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ivy-module/dependencies/dependency"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|startElementInDependency
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"dependencies"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|startDependencies
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ivy-module/configurations/conf"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|startElementInConfigurationsConf
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ivy-module/publications/artifact/conf"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
literal|"ivy-module/dependencies/dependency/conf"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
literal|"ivy-module/dependencies/dependency/artifact/conf"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|buffers
operator|.
name|push
argument_list|(
operator|new
name|ExtendedBuffer
argument_list|(
name|getContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|confAttributeBuffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setDefaultPrint
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|confName
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confs
operator|.
name|contains
argument_list|(
name|confName
argument_list|)
condition|)
block|{
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|confAttributeBuffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
literal|"ivy-module/publications/artifact"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|ExtendedBuffer
name|buffer
init|=
operator|new
name|ExtendedBuffer
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|buffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|confAttributeBuffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|setDefaultPrint
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
operator|==
literal|null
operator|&&
operator|(
operator|(
name|newDefaultConf
operator|==
literal|null
operator|)
operator|||
operator|(
name|newDefaultConf
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attName
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|String
name|confName
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|newConf
init|=
name|removeConfigurationsFromList
argument_list|(
name|confName
argument_list|,
name|confs
argument_list|)
decl_stmt|;
if|if
condition|(
name|newConf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|newConf
operator|+
literal|"\""
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
literal|"ivy-module/dependencies/dependency/artifact"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|ExtendedBuffer
name|buffer
init|=
operator|new
name|ExtendedBuffer
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|buffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|confAttributeBuffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|setDefaultPrint
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attName
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|String
name|confName
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|newConf
init|=
name|removeConfigurationsFromList
argument_list|(
name|confName
argument_list|,
name|confs
argument_list|)
decl_stmt|;
if|if
condition|(
name|newConf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|newConf
operator|+
literal|"\""
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
literal|"ivy-module/publications"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|startPublications
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|options
operator|.
name|isMerge
argument_list|()
operator|&&
name|path
operator|.
name|startsWith
argument_list|(
literal|"ivy-module/info"
argument_list|)
condition|)
block|{
name|ModuleDescriptor
name|merged
init|=
name|options
operator|.
name|getMergedDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"ivy-module/info/description"
argument_list|)
condition|)
block|{
comment|// if the descriptor already contains a description, don't bother printing
comment|// the merged version.
name|hasDescription
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|INFO_ELEMENTS
operator|.
name|contains
argument_list|(
name|qName
argument_list|)
condition|)
block|{
comment|// according to the XSD, we should write description after all of the other
comment|// standard<info> elements but before any extended elements.
name|writeInheritedDescription
argument_list|(
name|merged
argument_list|)
expr_stmt|;
block|}
block|}
comment|// copy
name|write
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
name|justOpen
operator|=
name|qName
expr_stmt|;
comment|// indent.append("\t");
block|}
specifier|private
name|void
name|startExtends
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
comment|// in merge mode, comment out extends element
if|if
condition|(
name|options
operator|.
name|isMerge
argument_list|()
condition|)
block|{
name|write
argument_list|(
literal|"<!-- "
argument_list|)
expr_stmt|;
block|}
name|write
argument_list|(
literal|"<extends"
argument_list|)
expr_stmt|;
name|String
name|org
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"organisation"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|module
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
argument_list|)
decl_stmt|;
name|ModuleId
name|parentId
init|=
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|module
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"revision"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// replace inline revision with resolved parent revision
name|ModuleDescriptor
name|merged
init|=
name|options
operator|.
name|getMergedDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|merged
operator|!=
literal|null
condition|)
block|{
name|ExtendsDescriptor
index|[]
name|parents
init|=
name|merged
operator|.
name|getInheritedDescriptors
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|value
operator|==
literal|null
operator|&&
name|j
operator|<
name|parents
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|ModuleRevisionId
name|resolvedId
init|=
name|parents
index|[
name|j
index|]
operator|.
name|getResolvedParentRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentId
operator|.
name|equals
argument_list|(
name|resolvedId
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
name|value
operator|=
name|resolvedId
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"organisation"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|value
operator|=
name|org
expr_stmt|;
block|}
if|else if
condition|(
literal|"module"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|value
operator|=
name|module
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|write
argument_list|(
literal|" "
operator|+
name|name
operator|+
literal|"=\""
operator|+
name|value
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startElementInConfigurationsConf
parameter_list|(
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
name|buffers
operator|.
name|push
argument_list|(
operator|new
name|ExtendedBuffer
argument_list|(
name|getContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|confName
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confs
operator|.
name|contains
argument_list|(
name|confName
argument_list|)
condition|)
block|{
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|extend
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"extends"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|extend
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|extend
argument_list|,
literal|", "
argument_list|)
init|;
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|current
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|confs
operator|.
name|contains
argument_list|(
name|current
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot exclude a configuration which is extended."
argument_list|)
throw|;
block|}
block|}
block|}
name|write
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|startDependencies
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
comment|// copy
name|write
argument_list|(
literal|"<dependencies"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attName
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"defaultconfmapping"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|String
name|newMapping
init|=
name|removeConfigurationsFromMapping
argument_list|(
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconfmapping"
argument_list|)
argument_list|)
argument_list|,
name|confs
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|newMapping
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add default conf mapping if needed
if|if
condition|(
name|defaultConfMapping
operator|!=
literal|null
operator|&&
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconfmapping"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|newMapping
init|=
name|removeConfigurationsFromMapping
argument_list|(
name|defaultConfMapping
argument_list|,
name|confs
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
argument_list|(
literal|" defaultconfmapping=\""
operator|+
name|newMapping
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add confmappingoverride if needed
if|if
condition|(
name|confMappingOverride
operator|!=
literal|null
operator|&&
name|attributes
operator|.
name|getValue
argument_list|(
literal|"confmappingoverride"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" confmappingoverride=\""
operator|+
name|confMappingOverride
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startPublications
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|write
argument_list|(
literal|"<publications"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attName
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"defaultconf"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|newDefaultConf
operator|=
name|removeConfigurationsFromList
argument_list|(
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconf"
argument_list|)
argument_list|)
argument_list|,
name|confs
argument_list|)
expr_stmt|;
if|if
condition|(
name|newDefaultConf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|newDefaultConf
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|startElementInDependency
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|ExtendedBuffer
name|buffer
init|=
operator|new
name|ExtendedBuffer
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|buffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|confAttributeBuffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|setDefaultPrint
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
operator|==
literal|null
operator|||
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"<dependency"
argument_list|)
expr_stmt|;
name|String
name|org
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"org"
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|=
name|org
operator|==
literal|null
condition|?
name|organisation
else|:
name|org
expr_stmt|;
name|String
name|module
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|branch
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"branch"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|branchConstraint
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"branchConstraint"
argument_list|)
argument_list|)
decl_stmt|;
name|branchConstraint
operator|=
name|branchConstraint
operator|==
literal|null
condition|?
name|branch
else|:
name|branchConstraint
expr_stmt|;
comment|// look for the branch used in resolved revisions
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|ModuleId
name|mid
init|=
name|ModuleId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|module
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
condition|)
block|{
name|mid
operator|=
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|mid
argument_list|,
name|ns
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|resolvedRevisions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleRevisionId
name|mrid
init|=
operator|(
name|ModuleRevisionId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|mrid
operator|.
name|getModuleId
argument_list|()
operator|.
name|equals
argument_list|(
name|mid
argument_list|)
condition|)
block|{
name|branch
operator|=
name|mrid
operator|.
name|getBranch
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|String
name|revision
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"rev"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|revisionConstraint
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"revConstraint"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|extraAttributes
init|=
name|ExtendableItemHelper
operator|.
name|getExtraAttributes
argument_list|(
name|settings
argument_list|,
name|attributes
argument_list|,
name|XmlModuleDescriptorParser
operator|.
name|DEPENDENCY_REGULAR_ATTRIBUTES
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|localMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|module
argument_list|,
name|branch
argument_list|,
name|revision
argument_list|,
name|extraAttributes
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|systemMrid
init|=
name|ns
operator|==
literal|null
condition|?
name|localMrid
else|:
name|ns
operator|.
name|getToSystemTransformer
argument_list|()
operator|.
name|transform
argument_list|(
name|localMrid
argument_list|)
decl_stmt|;
name|String
name|newBranch
init|=
operator|(
name|String
operator|)
name|resolvedBranches
operator|.
name|get
argument_list|(
name|systemMrid
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attName
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"rev"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|String
name|rev
init|=
operator|(
name|String
operator|)
name|resolvedRevisions
operator|.
name|get
argument_list|(
name|systemMrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" rev=\""
operator|+
name|rev
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|getIndex
argument_list|(
literal|"branchConstraint"
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|branchConstraint
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" branchConstraint=\""
operator|+
name|branchConstraint
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|generateRevConstraint
operator|&&
name|attributes
operator|.
name|getIndex
argument_list|(
literal|"revConstraint"
argument_list|)
operator|==
operator|-
literal|1
operator|&&
operator|!
name|rev
operator|.
name|equals
argument_list|(
name|systemMrid
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" revConstraint=\""
operator|+
name|systemMrid
operator|.
name|getRevision
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|write
argument_list|(
literal|" rev=\""
operator|+
name|systemMrid
operator|.
name|getRevision
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"revConstraint"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" revConstraint=\""
operator|+
name|revisionConstraint
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"org"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" org=\""
operator|+
name|systemMrid
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"name"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" name=\""
operator|+
name|systemMrid
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"branch"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
if|if
condition|(
name|newBranch
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" branch=\""
operator|+
name|newBranch
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|resolvedBranches
operator|.
name|containsKey
argument_list|(
name|systemMrid
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" branch=\""
operator|+
name|systemMrid
operator|.
name|getBranch
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if resolvedBranches contains the systemMrid, but the new branch is null,
comment|// the branch attribute will be removed altogether
block|}
block|}
if|else if
condition|(
literal|"branchConstraint"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" branchConstraint=\""
operator|+
name|branchConstraint
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|String
name|oldMapping
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldMapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|newMapping
init|=
name|removeConfigurationsFromMapping
argument_list|(
name|oldMapping
argument_list|,
name|confs
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
argument_list|(
literal|" conf=\""
operator|+
name|newMapping
operator|+
literal|"\""
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attName
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|attName
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attributes
operator|.
name|getIndex
argument_list|(
literal|"branch"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|newBranch
operator|!=
literal|null
condition|)
block|{
comment|// erase an existing branch attribute if its new value is blank
if|if
condition|(
operator|!
name|newBranch
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" branch=\""
operator|+
name|newBranch
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|options
operator|.
name|isUpdateBranch
argument_list|()
operator|&&
name|systemMrid
operator|.
name|getBranch
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this dependency is on a specific branch, we set it explicitly in the updated
comment|// file
name|write
argument_list|(
literal|" branch=\""
operator|+
name|systemMrid
operator|.
name|getBranch
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|includeStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|ExtendedBuffer
name|buffer
init|=
operator|new
name|ExtendedBuffer
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|buffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
try|try
block|{
name|URL
name|url
decl_stmt|;
if|if
condition|(
name|settings
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|settings
operator|.
name|getRelativeUrlResolver
argument_list|()
operator|.
name|getURL
argument_list|(
name|relativePathCtx
argument_list|,
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"file"
argument_list|)
argument_list|)
argument_list|,
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"url"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO : settings can be null, but I don't why.
comment|// Check if the next code is correct in that case
name|String
name|fileName
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
name|String
name|urlStr
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
name|Checks
operator|.
name|checkAbsolute
argument_list|(
name|fileName
argument_list|,
literal|"settings.include"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
block|}
name|XMLHelper
operator|.
name|parse
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
block|{
specifier|private
name|boolean
name|insideConfigurations
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|doIndent
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"configurations"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|insideConfigurations
operator|=
literal|true
expr_stmt|;
name|String
name|defaultconf
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconfmapping"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultconf
operator|!=
literal|null
condition|)
block|{
name|defaultConfMapping
operator|=
name|defaultconf
expr_stmt|;
block|}
name|String
name|mappingOverride
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"confmappingoverride"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingOverride
operator|!=
literal|null
condition|)
block|{
name|confMappingOverride
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|mappingOverride
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|insideConfigurations
condition|)
block|{
name|String
name|confName
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confs
operator|.
name|contains
argument_list|(
name|confName
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|doIndent
condition|)
block|{
name|write
argument_list|(
literal|"/>\n\t\t"
argument_list|)
expr_stmt|;
block|}
name|String
name|extend
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"extends"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|extend
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|extend
argument_list|,
literal|", "
argument_list|)
init|;
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|current
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|confs
operator|.
name|contains
argument_list|(
name|current
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot exclude a "
operator|+
literal|"configuration which is extended."
argument_list|)
throw|;
block|}
block|}
block|}
name|write
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|doIndent
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"configurations"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|insideConfigurations
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"exception occurred while importing configurations: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|infoStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|module
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
literal|null
decl_stmt|;
name|String
name|branch
init|=
literal|null
decl_stmt|;
name|String
name|status
init|=
literal|null
decl_stmt|;
name|String
name|namespace
init|=
literal|null
decl_stmt|;
name|Map
comment|/*<String,String> */
name|extraAttributes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|isMerge
argument_list|()
condition|)
block|{
comment|// get attributes from merged descriptor, ignoring raw XML
name|ModuleDescriptor
name|merged
init|=
name|options
operator|.
name|getMergedDescriptor
argument_list|()
decl_stmt|;
name|ModuleRevisionId
name|mergedMrid
init|=
name|merged
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
name|organisation
operator|=
name|mergedMrid
operator|.
name|getOrganisation
argument_list|()
expr_stmt|;
name|branch
operator|=
name|mergedMrid
operator|.
name|getBranch
argument_list|()
expr_stmt|;
name|rev
operator|=
name|mergedMrid
operator|.
name|getRevision
argument_list|()
expr_stmt|;
name|status
operator|=
name|merged
operator|.
name|getStatus
argument_list|()
expr_stmt|;
comment|// TODO: should namespace be added to ModuleDescriptor interface, so we don't
comment|// have to do this kind of check?
if|if
condition|(
name|merged
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
name|Namespace
name|ns
init|=
operator|(
operator|(
name|DefaultModuleDescriptor
operator|)
name|merged
operator|)
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
condition|)
block|{
name|namespace
operator|=
name|ns
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|namespace
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"namespace"
argument_list|)
expr_stmt|;
block|}
name|extraAttributes
operator|=
name|merged
operator|.
name|getQualifiedExtraAttributes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// get attributes from raw XML, performing property substitution
name|organisation
operator|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"organisation"
argument_list|)
argument_list|)
expr_stmt|;
name|rev
operator|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"revision"
argument_list|)
argument_list|)
expr_stmt|;
name|branch
operator|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"branch"
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|namespace
operator|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"namespace"
argument_list|)
argument_list|)
expr_stmt|;
name|extraAttributes
operator|=
operator|new
name|LinkedHashMap
argument_list|(
name|attributes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|qname
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|STD_ATTS
operator|.
name|contains
argument_list|(
name|qname
argument_list|)
condition|)
block|{
name|extraAttributes
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// apply override values provided in options
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|rev
operator|=
name|revision
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getBranch
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|branch
operator|=
name|options
operator|.
name|getBranch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|status
operator|!=
literal|null
condition|)
block|{
name|status
operator|=
name|this
operator|.
name|status
expr_stmt|;
block|}
comment|// if necessary translate mrid using optional namespace argument
name|ModuleRevisionId
name|localMid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
name|branch
argument_list|,
name|rev
argument_list|,
name|ExtendableItemHelper
operator|.
name|getExtraAttributes
argument_list|(
name|settings
argument_list|,
name|attributes
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"organisation"
block|,
literal|"module"
block|,
literal|"revision"
block|,
literal|"status"
block|,
literal|"publication"
block|,
literal|"namespace"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|systemMid
init|=
name|ns
operator|==
literal|null
condition|?
name|localMid
else|:
name|ns
operator|.
name|getToSystemTransformer
argument_list|()
operator|.
name|transform
argument_list|(
name|localMid
argument_list|)
decl_stmt|;
name|write
argument_list|(
literal|"<info"
argument_list|)
expr_stmt|;
if|if
condition|(
name|organisation
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" organisation=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|systemMid
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|write
argument_list|(
literal|" module=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|systemMid
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" branch=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|systemMid
operator|.
name|getBranch
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|systemMid
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" revision=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|systemMid
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|write
argument_list|(
literal|" status=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|status
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|pubdate
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" publication=\""
operator|+
name|DateUtil
operator|.
name|format
argument_list|(
name|pubdate
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"publication"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" publication=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"publication"
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" namespace=\""
operator|+
name|namespace
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|extras
init|=
name|extraAttributes
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|extras
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|extra
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|extras
operator|.
name|next
argument_list|()
decl_stmt|;
name|write
argument_list|(
literal|" "
operator|+
name|extra
operator|.
name|getKey
argument_list|()
operator|+
literal|"=\""
operator|+
name|extra
operator|.
name|getValue
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|write
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|getWriter
argument_list|()
operator|.
name|print
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PrintWriter
name|getWriter
parameter_list|()
block|{
return|return
name|buffers
operator|.
name|isEmpty
argument_list|()
condition|?
name|out
else|:
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|getWriter
argument_list|()
return|;
block|}
specifier|private
name|String
name|getContext
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|context
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|ctx
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|ctx
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|setLength
argument_list|(
name|buf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|substitute
parameter_list|(
name|ParserSettings
name|ivy
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|String
name|result
init|=
name|ivy
operator|==
literal|null
condition|?
name|value
else|:
name|ivy
operator|.
name|substitute
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|XMLHelper
operator|.
name|escape
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|private
name|String
name|removeConfigurationsFromMapping
parameter_list|(
name|String
name|mapping
parameter_list|,
name|List
name|confsToRemove
parameter_list|)
block|{
name|StringBuffer
name|newMapping
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|mappingSep
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|mapping
argument_list|,
literal|";"
argument_list|)
init|;
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|current
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
index|[]
name|ops
init|=
name|current
operator|.
name|split
argument_list|(
literal|"->"
argument_list|)
decl_stmt|;
name|String
index|[]
name|lhs
init|=
name|ops
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
name|confsToWrite
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|lhs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|confs
operator|.
name|contains
argument_list|(
name|lhs
index|[
name|j
index|]
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|confsToWrite
operator|.
name|add
argument_list|(
name|lhs
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|confsToWrite
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newMapping
operator|.
name|append
argument_list|(
name|mappingSep
argument_list|)
expr_stmt|;
name|String
name|sep
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|confsToWrite
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|newMapping
operator|.
name|append
argument_list|(
name|sep
argument_list|)
expr_stmt|;
name|newMapping
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|sep
operator|=
literal|","
expr_stmt|;
block|}
if|if
condition|(
name|ops
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|newMapping
operator|.
name|append
argument_list|(
literal|"->"
argument_list|)
expr_stmt|;
name|newMapping
operator|.
name|append
argument_list|(
name|ops
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|mappingSep
operator|=
literal|";"
expr_stmt|;
block|}
block|}
return|return
name|newMapping
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|removeConfigurationsFromList
parameter_list|(
name|String
name|list
parameter_list|,
name|List
name|confsToRemove
parameter_list|)
block|{
name|StringBuffer
name|newList
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|listSep
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|list
argument_list|,
literal|","
argument_list|)
init|;
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|current
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|confsToRemove
operator|.
name|contains
argument_list|(
name|current
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|newList
operator|.
name|append
argument_list|(
name|listSep
argument_list|)
expr_stmt|;
name|newList
operator|.
name|append
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|listSep
operator|=
literal|","
expr_stmt|;
block|}
block|}
return|return
name|newList
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|justOpen
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|justOpen
operator|=
literal|null
expr_stmt|;
block|}
name|write
argument_list|(
name|XMLHelper
operator|.
name|escape
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// examine characters for current indent level, keeping in mind
comment|// that our indent might be split across multiple calls to characters()
for|for
control|(
name|int
name|i
init|=
name|start
init|,
name|end
init|=
name|start
operator|+
name|length
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|ch
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
literal|'\n'
condition|)
block|{
comment|// newline resets the indent level
name|currentIndent
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|indenting
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|indenting
condition|)
block|{
comment|// indent continues until first non-whitespace character
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|currentIndent
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endIndent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** record the current indent level for future elements that appear at the same depth */
specifier|private
name|void
name|endIndent
parameter_list|()
block|{
if|if
condition|(
name|indenting
condition|)
block|{
comment|// record the indent at this level. if we insert any elements at
comment|// this level, we'll use the same indent.
name|setIndent
argument_list|(
name|context
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|currentIndent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|indenting
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**          * Set the indent for the given depth. Indents less than the provided depth will be          * calculated automatically, if they have not already been defined.          */
specifier|private
name|void
name|setIndent
parameter_list|(
name|int
name|level
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
name|fillIndents
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|indentLevels
operator|.
name|set
argument_list|(
name|level
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
comment|/**          * Guarantee that indent levels have been calculated up to and including the given depth          * (starting at 0).          */
specifier|private
name|void
name|fillIndents
parameter_list|(
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|indentLevels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// add a default single-level indent until we see indents in the document
name|indentLevels
operator|.
name|add
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
block|}
name|String
name|oneLevel
init|=
operator|(
name|String
operator|)
name|indentLevels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|fill
init|=
name|indentLevels
operator|.
name|size
argument_list|()
init|;
name|fill
operator|<=
name|level
condition|;
operator|++
name|fill
control|)
block|{
name|indentLevels
operator|.
name|add
argument_list|(
name|indentLevels
operator|.
name|get
argument_list|(
name|fill
operator|-
literal|1
argument_list|)
operator|+
name|oneLevel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * get the whitespace that should precede new elements at the current depth in the document          */
specifier|private
name|String
name|getIndent
parameter_list|()
block|{
name|int
name|level
init|=
name|context
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|fillIndents
argument_list|(
name|level
argument_list|)
expr_stmt|;
return|return
operator|(
name|String
operator|)
name|indentLevels
operator|.
name|get
argument_list|(
name|level
argument_list|)
return|;
block|}
comment|/**          * Write XML elements that do not appear in the source descriptor, but have been copied in          * from a parent module descriptor via&lt;extends&gt; declaration.          *          * @param merged          *            child descriptor containing the merged data          * @param items          *            the list of inherited items to print          * @param printer          *            a printer that knows how to write the given type of item          * @param itemName          *            the name of the container element, e.g. "configurations"          * @param includeContainer          *            if true, include an enclosing element named<code>itemName</code>. Otherwise          *            just write the inherited items inline, with a comment indicating where they          *            came from.          */
specifier|private
name|void
name|writeInheritedItems
parameter_list|(
name|ModuleDescriptor
name|merged
parameter_list|,
name|InheritableItem
index|[]
name|items
parameter_list|,
name|ItemPrinter
name|printer
parameter_list|,
name|String
name|itemName
parameter_list|,
name|boolean
name|includeContainer
parameter_list|)
block|{
comment|// first categorize inherited items by their source module, so that
comment|// we can add some useful comments
name|PrintWriter
name|out
init|=
name|getWriter
argument_list|()
decl_stmt|;
name|Map
name|inheritedItems
init|=
name|collateInheritedItems
argument_list|(
name|merged
argument_list|,
name|items
argument_list|)
decl_stmt|;
name|boolean
name|hasItems
init|=
operator|!
name|inheritedItems
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasItems
operator|&&
name|includeContainer
condition|)
block|{
if|if
condition|(
name|currentIndent
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|getIndent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"<"
operator|+
name|itemName
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|context
operator|.
name|push
argument_list|(
name|itemName
argument_list|)
expr_stmt|;
name|justOpen
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|parents
init|=
name|inheritedItems
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|parents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|parents
operator|.
name|next
argument_list|()
decl_stmt|;
name|ModuleRevisionId
name|parent
init|=
operator|(
name|ModuleRevisionId
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
name|list
init|=
operator|(
name|List
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|justOpen
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|justOpen
operator|=
literal|null
expr_stmt|;
comment|// helps endElement() decide how to write close tags
block|}
name|writeInheritanceComment
argument_list|(
name|itemName
argument_list|,
name|parent
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
name|InheritableItem
name|item
init|=
operator|(
name|InheritableItem
operator|)
name|list
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|getIndent
argument_list|()
argument_list|)
expr_stmt|;
name|printer
operator|.
name|print
argument_list|(
name|merged
argument_list|,
name|item
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasItems
condition|)
block|{
if|if
condition|(
name|includeContainer
condition|)
block|{
name|context
operator|.
name|pop
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|getIndent
argument_list|()
operator|+
literal|"</"
operator|+
name|itemName
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|// restore the prior indent
name|out
operator|.
name|print
argument_list|(
name|currentIndent
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeInheritanceComment
parameter_list|(
name|String
name|itemDescription
parameter_list|,
name|Object
name|parentInfo
parameter_list|)
block|{
name|PrintWriter
name|out
init|=
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|getIndent
argument_list|()
operator|+
literal|"<!-- "
operator|+
name|itemDescription
operator|+
literal|" inherited from "
operator|+
name|parentInfo
operator|+
literal|" -->"
argument_list|)
expr_stmt|;
block|}
comment|/**          * Collect the given list of inherited descriptor items into lists keyed by parent Id. Thus          * all of the items inherited from parent A can be written together, then all of the items          * from parent B, and so on.          *          * @param merged          *            the merged child descriptor          * @param items          *            the inherited items to collate          * @return maps parent ModuleRevisionId to a List of InheritedItems imported from that          *         parent          */
specifier|private
name|Map
comment|/*<ModuleRevisionId,List> */
name|collateInheritedItems
parameter_list|(
name|ModuleDescriptor
name|merged
parameter_list|,
name|InheritableItem
index|[]
name|items
parameter_list|)
block|{
name|LinkedHashMap
comment|/*<ModuleRevisionId,List> */
name|inheritedItems
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ModuleRevisionId
name|source
init|=
name|items
index|[
name|i
index|]
operator|.
name|getSourceModule
argument_list|()
decl_stmt|;
comment|// ignore items that are defined directly in the child descriptor
if|if
condition|(
name|source
operator|!=
literal|null
operator|&&
operator|!
name|source
operator|.
name|getModuleId
argument_list|()
operator|.
name|equals
argument_list|(
name|merged
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
name|List
name|accum
init|=
operator|(
name|List
operator|)
name|inheritedItems
operator|.
name|get
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|accum
operator|==
literal|null
condition|)
block|{
name|accum
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|inheritedItems
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|accum
argument_list|)
expr_stmt|;
block|}
name|accum
operator|.
name|add
argument_list|(
name|items
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|inheritedItems
return|;
block|}
comment|/**          * If no info/description element has yet been written, write the description inherited from          * the parent descriptor, if any. Calling this method more than once has no affect.          */
specifier|private
name|void
name|writeInheritedDescription
parameter_list|(
name|ModuleDescriptor
name|merged
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasDescription
condition|)
block|{
name|hasDescription
operator|=
literal|true
expr_stmt|;
name|String
name|description
init|=
name|merged
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|description
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|description
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|PrintWriter
name|writer
init|=
name|getWriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|justOpen
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|writeInheritanceComment
argument_list|(
literal|"description"
argument_list|,
literal|"parent"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|getIndent
argument_list|()
operator|+
literal|"<description>"
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|description
argument_list|)
operator|+
literal|"</description>"
argument_list|)
expr_stmt|;
comment|// restore the indent that existed before we wrote the extra elements
name|writer
operator|.
name|print
argument_list|(
name|currentIndent
argument_list|)
expr_stmt|;
name|justOpen
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeInheritedConfigurations
parameter_list|(
name|ModuleDescriptor
name|merged
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mergedConfigurations
condition|)
block|{
name|mergedConfigurations
operator|=
literal|true
expr_stmt|;
name|writeInheritedItems
argument_list|(
name|merged
argument_list|,
name|merged
operator|.
name|getConfigurations
argument_list|()
argument_list|,
name|ConfigurationPrinter
operator|.
name|INSTANCE
argument_list|,
literal|"configurations"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeInheritedDependencies
parameter_list|(
name|ModuleDescriptor
name|merged
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mergedDependencies
condition|)
block|{
name|mergedDependencies
operator|=
literal|true
expr_stmt|;
name|writeInheritedItems
argument_list|(
name|merged
argument_list|,
name|merged
operator|.
name|getDependencies
argument_list|()
argument_list|,
name|DependencyPrinter
operator|.
name|INSTANCE
argument_list|,
literal|"dependencies"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          *<p>          * If publishing in merge mode, guarantee that any merged elements appearing before          *<code>moduleElement</code> have been written. This method should be called<i>before</i>          * we write the start tag of<code>moduleElement</code>. This covers cases where merged          * elements like "configurations" and "dependencies" appear in the parent descriptor, but          * are completely missing in the child descriptor.          *</p>          *          *<p>          * For example, if "moduleElement" is "dependencies", guarantees that "configurations" has          * been written. If<code>moduleElement</code> is<code>null</code>, then all missing merged          * elements will be flushed.          *</p>          *          * @param moduleElement          *            a descriptor element name, for example "configurations" or "info"          */
specifier|private
name|void
name|flushMergedElementsBefore
parameter_list|(
name|String
name|moduleElement
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|isMerge
argument_list|()
operator|&&
name|context
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
literal|"ivy-module"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|peek
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|mergedConfigurations
operator|&&
name|mergedDependencies
operator|)
condition|)
block|{
comment|// calculate the position of the element in ivy-module
name|int
name|position
init|=
name|moduleElement
operator|==
literal|null
condition|?
name|MODULE_ELEMENTS
operator|.
name|size
argument_list|()
else|:
name|MODULE_ELEMENTS
operator|.
name|indexOf
argument_list|(
name|moduleElement
argument_list|)
decl_stmt|;
name|ModuleDescriptor
name|merged
init|=
name|options
operator|.
name|getMergedDescriptor
argument_list|()
decl_stmt|;
comment|// see if we should write<configurations>
if|if
condition|(
operator|!
name|mergedConfigurations
operator|&&
name|position
operator|>
name|CONFIGURATIONS_POSITION
operator|&&
name|merged
operator|.
name|getConfigurations
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|mergedConfigurations
operator|=
literal|true
expr_stmt|;
name|writeInheritedItems
argument_list|(
name|merged
argument_list|,
name|merged
operator|.
name|getConfigurations
argument_list|()
argument_list|,
name|ConfigurationPrinter
operator|.
name|INSTANCE
argument_list|,
literal|"configurations"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// see if we should write<dependencies>
if|if
condition|(
operator|!
name|mergedDependencies
operator|&&
name|position
operator|>
name|DEPENDENCIES_POSITION
operator|&&
name|merged
operator|.
name|getDependencies
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|mergedDependencies
operator|=
literal|true
expr_stmt|;
name|writeInheritedItems
argument_list|(
name|merged
argument_list|,
name|merged
operator|.
name|getDependencies
argument_list|()
argument_list|,
name|DependencyPrinter
operator|.
name|INSTANCE
argument_list|,
literal|"dependencies"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|flushAllMergedElements
parameter_list|()
block|{
name|flushMergedElementsBefore
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|path
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|isMerge
argument_list|()
condition|)
block|{
name|ModuleDescriptor
name|merged
init|=
name|options
operator|.
name|getMergedDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"ivy-module/info"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// guarantee that inherited description has been written before
comment|// info element closes.
name|writeInheritedDescription
argument_list|(
name|merged
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ivy-module/configurations"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// write inherited configurations after all child configurations
name|writeInheritedConfigurations
argument_list|(
name|merged
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ivy-module/dependencies"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// write inherited dependencies after all child dependencies
name|writeInheritedDependencies
argument_list|(
name|merged
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ivy-module"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// write any remaining inherited data before we close the
comment|// descriptor.
name|flushAllMergedElements
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|qName
operator|.
name|equals
argument_list|(
name|justOpen
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|write
argument_list|(
literal|"</"
operator|+
name|qName
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|buffers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExtendedBuffer
name|buffer
init|=
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|getContext
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|buffers
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|isPrint
argument_list|()
condition|)
block|{
name|write
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|confAttributeBuffers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExtendedBuffer
name|buffer
init|=
operator|(
name|ExtendedBuffer
operator|)
name|confAttributeBuffers
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|getContext
argument_list|()
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|confAttributeBuffers
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
comment|//<extends> element is commented out when in merge mode.
if|if
condition|(
name|options
operator|.
name|isMerge
argument_list|()
operator|&&
literal|"ivy-module/info/extends"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" -->"
argument_list|)
expr_stmt|;
block|}
name|justOpen
operator|=
literal|null
expr_stmt|;
name|context
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|out
operator|.
name|print
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SAXException
block|{
name|write
argument_list|(
literal|"<?"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"?>"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
specifier|public
name|void
name|endCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
specifier|public
name|void
name|endDTD
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
specifier|public
name|void
name|startCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
specifier|public
name|void
name|comment
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|justOpen
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|justOpen
operator|=
literal|null
expr_stmt|;
block|}
name|StringBuffer
name|comment
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|comment
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"<!--"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|comment
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"-->"
argument_list|)
expr_stmt|;
if|if
condition|(
name|inHeader
condition|)
block|{
name|write
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
specifier|public
name|void
name|startEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
specifier|public
name|void
name|startDTD
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
block|}
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|URL
name|inStreamCtx
parameter_list|,
name|InputStream
name|inStream
parameter_list|,
name|OutputStream
name|outStream
parameter_list|,
specifier|final
name|UpdateOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|outStream
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
try|try
block|{
name|UpdaterHandler
name|updaterHandler
init|=
operator|new
name|UpdaterHandler
argument_list|(
name|inStreamCtx
argument_list|,
name|out
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|InputSource
name|inSrc
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|inStream
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|inStreamCtx
operator|!=
literal|null
condition|)
block|{
name|inSrc
operator|.
name|setSystemId
argument_list|(
name|inStreamCtx
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|XMLHelper
operator|.
name|parse
argument_list|(
name|inSrc
argument_list|,
literal|null
argument_list|,
name|updaterHandler
argument_list|,
name|updaterHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|IllegalStateException
name|ise
init|=
operator|new
name|IllegalStateException
argument_list|(
literal|"impossible to update Ivy files: parser problem"
argument_list|)
decl_stmt|;
name|ise
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ise
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ExtendedBuffer
block|{
specifier|private
name|String
name|context
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|print
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|defaultPrint
init|=
literal|false
decl_stmt|;
specifier|private
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|private
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|ExtendedBuffer
parameter_list|(
name|String
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
name|boolean
name|isPrint
parameter_list|()
block|{
if|if
condition|(
name|print
operator|==
literal|null
condition|)
block|{
return|return
name|defaultPrint
return|;
block|}
return|return
name|print
return|;
block|}
name|void
name|setPrint
parameter_list|(
name|boolean
name|print
parameter_list|)
block|{
name|this
operator|.
name|print
operator|=
name|print
expr_stmt|;
block|}
name|void
name|setDefaultPrint
parameter_list|(
name|boolean
name|print
parameter_list|)
block|{
name|this
operator|.
name|defaultPrint
operator|=
name|print
expr_stmt|;
block|}
name|PrintWriter
name|getWriter
parameter_list|()
block|{
return|return
name|writer
return|;
block|}
name|String
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Prints a descriptor item's XML representation      */
specifier|protected
specifier|static
interface|interface
name|ItemPrinter
block|{
comment|/**          * Print an XML representation of<code>item</code> to<code>out</code>.          *          * @param parent          *            the module descriptor containing<code>item</code>          * @param item          *            subcomponent of the descriptor, for example a {@link DependencyDescriptor} or          *            {@link Configuration}          * @param out PrintWriter          */
specifier|public
name|void
name|print
parameter_list|(
name|ModuleDescriptor
name|parent
parameter_list|,
name|Object
name|item
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
function_decl|;
block|}
specifier|protected
specifier|static
class|class
name|DependencyPrinter
implements|implements
name|ItemPrinter
block|{
specifier|public
specifier|static
specifier|final
name|DependencyPrinter
name|INSTANCE
init|=
operator|new
name|DependencyPrinter
argument_list|()
decl_stmt|;
specifier|public
name|void
name|print
parameter_list|(
name|ModuleDescriptor
name|parent
parameter_list|,
name|Object
name|item
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|XmlModuleDescriptorWriter
operator|.
name|printDependency
argument_list|(
name|parent
argument_list|,
operator|(
name|DependencyDescriptor
operator|)
name|item
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|ConfigurationPrinter
implements|implements
name|ItemPrinter
block|{
specifier|public
specifier|static
specifier|final
name|ConfigurationPrinter
name|INSTANCE
init|=
operator|new
name|ConfigurationPrinter
argument_list|()
decl_stmt|;
specifier|public
name|void
name|print
parameter_list|(
name|ModuleDescriptor
name|parent
parameter_list|,
name|Object
name|item
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|XmlModuleDescriptorWriter
operator|.
name|printConfiguration
argument_list|(
operator|(
name|Configuration
operator|)
name|item
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

