begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|NameSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|file
operator|.
name|FileResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|extendable
operator|.
name|ExtendableItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * Used to update ivy files. Uses ivy file as source and not ModuleDescriptor to preserve as much as  * possible the original syntax  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|XmlModuleDescriptorUpdater
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_HEADER_LENGTH
init|=
literal|10000
decl_stmt|;
comment|//CheckStyle:StaticVariableName| OFF
comment|//LINE_SEPARATOR is actually a constant, but we have to modify it for the tests
specifier|public
specifier|static
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
comment|//CheckStyle:StaticVariableName| ON
specifier|private
name|XmlModuleDescriptorUpdater
parameter_list|()
block|{
block|}
comment|/**      * used to copy a module descriptor xml file (also known as ivy file) and update the revisions      * of its dependencies, its status and revision      *       * @param srcURL      *            the url of the source module descriptor file      * @param destFile      *            The file to which the updated module descriptor should be output      */
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|URL
name|srcURL
parameter_list|,
name|File
name|destFile
parameter_list|,
name|UpdateOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|destFile
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|destFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|OutputStream
name|destStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|destFile
argument_list|)
decl_stmt|;
try|try
block|{
name|update
argument_list|(
name|srcURL
argument_list|,
name|destStream
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|destStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"failed to close a stream : "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|URL
name|srcURL
parameter_list|,
name|OutputStream
name|destFile
parameter_list|,
name|UpdateOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|InputStream
name|in
init|=
name|srcURL
operator|.
name|openStream
argument_list|()
decl_stmt|;
try|try
block|{
name|update
argument_list|(
name|srcURL
argument_list|,
name|in
argument_list|,
name|destFile
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"failed to close a stream : "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|destFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"failed to close a stream : "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Resource
name|res
parameter_list|,
name|File
name|destFile
parameter_list|,
name|UpdateOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|destFile
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|destFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|OutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|destFile
argument_list|)
decl_stmt|;
try|try
block|{
comment|//TODO: use resource as input stream context?
name|URL
name|inputStreamContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|res
operator|instanceof
name|URLResource
condition|)
block|{
name|inputStreamContext
operator|=
operator|(
operator|(
name|URLResource
operator|)
name|res
operator|)
operator|.
name|getURL
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|res
operator|instanceof
name|FileResource
condition|)
block|{
name|inputStreamContext
operator|=
operator|(
operator|(
name|FileResource
operator|)
name|res
operator|)
operator|.
name|getFile
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
name|update
argument_list|(
name|inputStreamContext
argument_list|,
name|in
argument_list|,
name|fos
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"failed to close a stream : "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"failed to close a stream : "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|UpdaterHandler
extends|extends
name|DefaultHandler
implements|implements
name|LexicalHandler
block|{
specifier|private
specifier|final
name|ParserSettings
name|settings
decl_stmt|;
specifier|private
specifier|final
name|PrintWriter
name|out
decl_stmt|;
specifier|private
specifier|final
name|Map
name|resolvedRevisions
decl_stmt|;
specifier|private
specifier|final
name|String
name|status
decl_stmt|;
specifier|private
specifier|final
name|String
name|revision
decl_stmt|;
specifier|private
specifier|final
name|Date
name|pubdate
decl_stmt|;
specifier|private
specifier|final
name|Namespace
name|ns
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|replaceInclude
decl_stmt|;
specifier|private
name|boolean
name|inHeader
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|List
name|confs
decl_stmt|;
specifier|private
specifier|final
name|URL
name|relativePathCtx
decl_stmt|;
specifier|public
name|UpdaterHandler
parameter_list|(
name|URL
name|relativePathCtx
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
specifier|final
name|UpdateOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|options
operator|.
name|getSettings
argument_list|()
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|resolvedRevisions
operator|=
name|options
operator|.
name|getResolvedRevisions
argument_list|()
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|options
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|options
operator|.
name|getRevision
argument_list|()
expr_stmt|;
name|this
operator|.
name|pubdate
operator|=
name|options
operator|.
name|getPubdate
argument_list|()
expr_stmt|;
name|this
operator|.
name|ns
operator|=
name|options
operator|.
name|getNamespace
argument_list|()
expr_stmt|;
name|this
operator|.
name|replaceInclude
operator|=
name|options
operator|.
name|isReplaceInclude
argument_list|()
expr_stmt|;
name|this
operator|.
name|relativePathCtx
operator|=
name|relativePathCtx
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|getConfsToExclude
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|confs
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|options
operator|.
name|getConfsToExclude
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|confs
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
block|}
comment|// never print *ln* cause \n is found in copied characters stream
comment|// nor do we need do handle indentation, original one is maintained except for attributes
specifier|private
name|String
name|organisation
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|defaultConfMapping
init|=
literal|null
decl_stmt|;
comment|// defaultConfMapping of imported
comment|// configurations, if any
specifier|private
name|Boolean
name|confMappingOverride
init|=
literal|null
decl_stmt|;
comment|// confMappingOverride of imported
comment|// configurations, if any
specifier|private
name|String
name|justOpen
init|=
literal|null
decl_stmt|;
comment|// used to know if the last open tag was empty, to
comment|// adjust termination with /> instead of></qName>
specifier|private
name|Stack
name|context
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|Stack
name|buffers
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|Stack
name|confAttributeBuffers
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|inHeader
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|justOpen
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|push
argument_list|(
name|qName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"info"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|infoStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|replaceInclude
operator|&&
literal|"include"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|context
operator|.
name|contains
argument_list|(
literal|"configurations"
argument_list|)
condition|)
block|{
comment|//TODO, in the case of !replaceInclude, we should still replace the relative path
comment|//by an absolute path.
name|includeStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ivy-module/dependencies/dependency"
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
condition|)
block|{
name|startElementInDependency
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"dependencies"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|startDependencies
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ivy-module/configurations/conf"
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
condition|)
block|{
name|startElementInConfigurationsConf
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ivy-module/publications/artifact/conf"
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
operator|||
literal|"ivy-module/dependencies/dependency/conf"
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
operator|||
literal|"ivy-module/dependencies/dependency/artifact/conf"
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
condition|)
block|{
name|buffers
operator|.
name|push
argument_list|(
operator|new
name|ExtendedBuffer
argument_list|(
name|getContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|confAttributeBuffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setDefaultPrint
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|confName
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confs
operator|.
name|contains
argument_list|(
name|confName
argument_list|)
condition|)
block|{
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|confAttributeBuffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
literal|"ivy-module/publications/artifact"
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
operator|||
literal|"ivy-module/dependencies/dependency/artifact"
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
condition|)
block|{
name|ExtendedBuffer
name|buffer
init|=
operator|new
name|ExtendedBuffer
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|buffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|confAttributeBuffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|setDefaultPrint
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attName
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|String
name|confName
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|newConf
init|=
name|removeConfigurationsFromList
argument_list|(
name|confName
argument_list|,
name|confs
argument_list|)
decl_stmt|;
if|if
condition|(
name|newConf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|newConf
operator|+
literal|"\""
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// copy
name|write
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
name|justOpen
operator|=
name|qName
expr_stmt|;
comment|// indent.append("\t");
block|}
specifier|private
name|void
name|startElementInConfigurationsConf
parameter_list|(
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
name|buffers
operator|.
name|push
argument_list|(
operator|new
name|ExtendedBuffer
argument_list|(
name|getContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|confName
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confs
operator|.
name|contains
argument_list|(
name|confName
argument_list|)
condition|)
block|{
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|extend
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"extends"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|extend
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|extend
argument_list|,
literal|", "
argument_list|)
init|;
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|current
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|confs
operator|.
name|contains
argument_list|(
name|current
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot exclude a configuration which is extended."
argument_list|)
throw|;
block|}
block|}
block|}
name|write
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|startDependencies
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
comment|// copy
name|write
argument_list|(
literal|"<dependencies"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attName
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"defaultconfmapping"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|String
name|newMapping
init|=
name|removeConfigurationsFromMapping
argument_list|(
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconfmapping"
argument_list|)
argument_list|)
argument_list|,
name|confs
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|newMapping
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add default conf mapping if needed
if|if
condition|(
name|defaultConfMapping
operator|!=
literal|null
operator|&&
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconfmapping"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|newMapping
init|=
name|removeConfigurationsFromMapping
argument_list|(
name|defaultConfMapping
argument_list|,
name|confs
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
argument_list|(
literal|" defaultconfmapping=\""
operator|+
name|newMapping
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add confmappingoverride if needed
if|if
condition|(
name|confMappingOverride
operator|!=
literal|null
operator|&&
name|attributes
operator|.
name|getValue
argument_list|(
literal|"confmappingoverride"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" confmappingoverride=\""
operator|+
name|confMappingOverride
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startElementInDependency
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|ExtendedBuffer
name|buffer
init|=
operator|new
name|ExtendedBuffer
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|buffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|confAttributeBuffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|setDefaultPrint
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
operator|==
literal|null
operator|||
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"<dependency"
argument_list|)
expr_stmt|;
name|String
name|org
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"org"
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|=
name|org
operator|==
literal|null
condition|?
name|organisation
else|:
name|org
expr_stmt|;
name|String
name|module
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|branch
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"branch"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|branchConstraint
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"branchConstraint"
argument_list|)
argument_list|)
decl_stmt|;
name|branchConstraint
operator|=
name|branchConstraint
operator|==
literal|null
condition|?
name|branch
else|:
name|branchConstraint
expr_stmt|;
comment|// look for the branch used in resolved revisions
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|ModuleId
name|mid
init|=
name|ModuleId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|module
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
condition|)
block|{
name|mid
operator|=
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|mid
argument_list|,
name|ns
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|resolvedRevisions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleRevisionId
name|mrid
init|=
operator|(
name|ModuleRevisionId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|mrid
operator|.
name|getModuleId
argument_list|()
operator|.
name|equals
argument_list|(
name|mid
argument_list|)
condition|)
block|{
name|branch
operator|=
name|mrid
operator|.
name|getBranch
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|String
name|revision
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"rev"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|revisionConstraint
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"revConstraint"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|extraAttributes
init|=
name|ExtendableItemHelper
operator|.
name|getExtraAttributes
argument_list|(
name|settings
argument_list|,
name|attributes
argument_list|,
name|XmlModuleDescriptorParser
operator|.
name|DEPENDENCY_REGULAR_ATTRIBUTES
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|localMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|module
argument_list|,
name|branch
argument_list|,
name|revision
argument_list|,
name|extraAttributes
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|systemMrid
init|=
name|ns
operator|==
literal|null
condition|?
name|localMrid
else|:
name|ns
operator|.
name|getToSystemTransformer
argument_list|()
operator|.
name|transform
argument_list|(
name|localMrid
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attName
init|=
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"rev"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|String
name|rev
init|=
operator|(
name|String
operator|)
name|resolvedRevisions
operator|.
name|get
argument_list|(
name|systemMrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" rev=\""
operator|+
name|rev
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributes
operator|.
name|getIndex
argument_list|(
literal|"branchConstraint"
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|branchConstraint
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" branchConstraint=\""
operator|+
name|branchConstraint
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attributes
operator|.
name|getIndex
argument_list|(
literal|"revConstraint"
argument_list|)
operator|==
operator|-
literal|1
operator|&&
operator|!
name|rev
operator|.
name|equals
argument_list|(
name|systemMrid
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" revConstraint=\""
operator|+
name|systemMrid
operator|.
name|getRevision
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|write
argument_list|(
literal|" rev=\""
operator|+
name|systemMrid
operator|.
name|getRevision
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"revConstraint"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" revConstraint=\""
operator|+
name|revisionConstraint
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"org"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" org=\""
operator|+
name|systemMrid
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"name"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" name=\""
operator|+
name|systemMrid
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"branch"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" branch=\""
operator|+
name|systemMrid
operator|.
name|getBranch
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"branchConstraint"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" branchConstraint=\""
operator|+
name|branchConstraint
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|String
name|oldMapping
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldMapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|newMapping
init|=
name|removeConfigurationsFromMapping
argument_list|(
name|oldMapping
argument_list|,
name|confs
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMapping
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
argument_list|(
literal|" conf=\""
operator|+
name|newMapping
operator|+
literal|"\""
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
operator|)
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attName
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|attName
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|systemMrid
operator|.
name|getBranch
argument_list|()
operator|!=
literal|null
operator|&&
name|attributes
operator|.
name|getIndex
argument_list|(
literal|"branch"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|// this dependency is on a specific branch, we set it explicitly in the updated file
name|write
argument_list|(
literal|" branch=\""
operator|+
name|systemMrid
operator|.
name|getBranch
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|includeStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|ExtendedBuffer
name|buffer
init|=
operator|new
name|ExtendedBuffer
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|buffers
operator|.
name|push
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
try|try
block|{
name|URL
name|url
decl_stmt|;
if|if
condition|(
name|settings
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|settings
operator|.
name|getRelativeUrlResolver
argument_list|()
operator|.
name|getURL
argument_list|(
name|relativePathCtx
argument_list|,
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"file"
argument_list|)
argument_list|)
argument_list|,
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"url"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//TODO : settings can be null, but I don't why.
comment|//Check if the next code is correct in that case
name|String
name|fileName
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
name|String
name|urlStr
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
block|}
name|XMLHelper
operator|.
name|parse
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
block|{
specifier|private
name|boolean
name|insideConfigurations
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|doIndent
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"configurations"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|insideConfigurations
operator|=
literal|true
expr_stmt|;
name|String
name|defaultconf
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconfmapping"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultconf
operator|!=
literal|null
condition|)
block|{
name|defaultConfMapping
operator|=
name|defaultconf
expr_stmt|;
block|}
name|String
name|mappingOverride
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"confmappingoverride"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingOverride
operator|!=
literal|null
condition|)
block|{
name|confMappingOverride
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|mappingOverride
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|insideConfigurations
condition|)
block|{
name|String
name|confName
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confs
operator|.
name|contains
argument_list|(
name|confName
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|setPrint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|doIndent
condition|)
block|{
name|write
argument_list|(
literal|"/>\n\t\t"
argument_list|)
expr_stmt|;
block|}
name|String
name|extend
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"extends"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|extend
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|extend
argument_list|,
literal|", "
argument_list|)
init|;
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|current
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|confs
operator|.
name|contains
argument_list|(
name|current
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot exclude a "
operator|+
literal|"configuration which is extended."
argument_list|)
throw|;
block|}
block|}
block|}
name|write
argument_list|(
literal|"<"
operator|+
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|doIndent
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"configurations"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|insideConfigurations
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"exception occured while importing configurations: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|infoStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|organisation
operator|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"organisation"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|module
init|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|revision
decl_stmt|;
if|if
condition|(
name|rev
operator|==
literal|null
condition|)
block|{
name|rev
operator|=
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"revision"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ModuleRevisionId
name|localMid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
literal|null
argument_list|,
name|rev
argument_list|,
name|ExtendableItemHelper
operator|.
name|getExtraAttributes
argument_list|(
name|settings
argument_list|,
name|attributes
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"organisation"
block|,
literal|"module"
block|,
literal|"revision"
block|,
literal|"status"
block|,
literal|"publication"
block|,
literal|"namespace"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|systemMid
init|=
name|ns
operator|==
literal|null
condition|?
name|localMid
else|:
name|ns
operator|.
name|getToSystemTransformer
argument_list|()
operator|.
name|transform
argument_list|(
name|localMid
argument_list|)
decl_stmt|;
name|write
argument_list|(
literal|"<info organisation=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|systemMid
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|+
literal|"\" module=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|systemMid
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|systemMid
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" revision=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|systemMid
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" status=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|status
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|write
argument_list|(
literal|" status=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"status"
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pubdate
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" publication=\""
operator|+
name|Ivy
operator|.
name|DATE_FORMAT
operator|.
name|format
argument_list|(
name|pubdate
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"publication"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" publication=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"publication"
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|Collection
name|stdAtts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"organisation"
block|,
literal|"module"
block|,
literal|"revision"
block|,
literal|"status"
block|,
literal|"publication"
block|,
literal|"namespace"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"namespace"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|" namespace=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"namespace"
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|stdAtts
operator|.
name|contains
argument_list|(
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|" "
operator|+
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|+
literal|"=\""
operator|+
name|substitute
argument_list|(
name|settings
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|write
parameter_list|(
name|String
name|content
parameter_list|)
block|{
if|if
condition|(
name|buffers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ExtendedBuffer
name|buffer
init|=
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getContext
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|context
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|ctx
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|ctx
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|setLength
argument_list|(
name|buf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|substitute
parameter_list|(
name|ParserSettings
name|ivy
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|String
name|result
init|=
name|ivy
operator|==
literal|null
condition|?
name|value
else|:
name|ivy
operator|.
name|substitute
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|XMLHelper
operator|.
name|escape
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|private
name|String
name|removeConfigurationsFromMapping
parameter_list|(
name|String
name|mapping
parameter_list|,
name|List
name|confsToRemove
parameter_list|)
block|{
name|StringBuffer
name|newMapping
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|mappingSep
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|mapping
argument_list|,
literal|";"
argument_list|)
init|;
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|current
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
index|[]
name|ops
init|=
name|current
operator|.
name|split
argument_list|(
literal|"->"
argument_list|)
decl_stmt|;
name|String
index|[]
name|lhs
init|=
name|ops
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
name|confsToWrite
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|lhs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|confs
operator|.
name|contains
argument_list|(
name|lhs
index|[
name|j
index|]
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|confsToWrite
operator|.
name|add
argument_list|(
name|lhs
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|confsToWrite
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newMapping
operator|.
name|append
argument_list|(
name|mappingSep
argument_list|)
expr_stmt|;
name|String
name|sep
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|confsToWrite
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|newMapping
operator|.
name|append
argument_list|(
name|sep
argument_list|)
expr_stmt|;
name|newMapping
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|sep
operator|=
literal|","
expr_stmt|;
block|}
if|if
condition|(
name|ops
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|newMapping
operator|.
name|append
argument_list|(
literal|"->"
argument_list|)
expr_stmt|;
name|newMapping
operator|.
name|append
argument_list|(
name|ops
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|mappingSep
operator|=
literal|";"
expr_stmt|;
block|}
block|}
return|return
name|newMapping
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|removeConfigurationsFromList
parameter_list|(
name|String
name|list
parameter_list|,
name|List
name|confsToRemove
parameter_list|)
block|{
name|StringBuffer
name|newList
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|listSep
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|list
argument_list|,
literal|","
argument_list|)
init|;
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|current
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|confsToRemove
operator|.
name|contains
argument_list|(
name|current
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|newList
operator|.
name|append
argument_list|(
name|listSep
argument_list|)
expr_stmt|;
name|newList
operator|.
name|append
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|listSep
operator|=
literal|","
expr_stmt|;
block|}
block|}
return|return
name|newList
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|justOpen
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|justOpen
operator|=
literal|null
expr_stmt|;
block|}
name|write
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|qName
operator|.
name|equals
argument_list|(
name|justOpen
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|write
argument_list|(
literal|"</"
operator|+
name|qName
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|buffers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExtendedBuffer
name|buffer
init|=
operator|(
name|ExtendedBuffer
operator|)
name|buffers
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|getContext
argument_list|()
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
condition|)
block|{
name|buffers
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|isPrint
argument_list|()
condition|)
block|{
name|write
argument_list|(
name|buffer
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|confAttributeBuffers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ExtendedBuffer
name|buffer
init|=
operator|(
name|ExtendedBuffer
operator|)
name|confAttributeBuffers
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|getContext
argument_list|()
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
condition|)
block|{
name|confAttributeBuffers
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
name|justOpen
operator|=
literal|null
expr_stmt|;
name|context
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|out
operator|.
name|print
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
specifier|public
name|void
name|endCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
specifier|public
name|void
name|endDTD
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
specifier|public
name|void
name|startCDATA
parameter_list|()
throws|throws
name|SAXException
block|{
block|}
specifier|public
name|void
name|comment
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
operator|!
name|inHeader
condition|)
block|{
name|StringBuffer
name|comment
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|comment
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"<!--"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|comment
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"-->"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
specifier|public
name|void
name|startEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
specifier|public
name|void
name|startDTD
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
block|{
block|}
block|}
specifier|public
specifier|static
name|void
name|update
parameter_list|(
name|URL
name|inStreamCtx
parameter_list|,
name|InputStream
name|inStream
parameter_list|,
name|OutputStream
name|outStream
parameter_list|,
specifier|final
name|UpdateOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|outStream
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BufferedInputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|in
operator|.
name|mark
argument_list|(
name|MAX_HEADER_LENGTH
argument_list|)
expr_stmt|;
comment|// assume the header is never larger than 10000 bytes.
name|copyHeader
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// reposition the stream at the beginning
try|try
block|{
name|UpdaterHandler
name|updaterHandler
init|=
operator|new
name|UpdaterHandler
argument_list|(
name|inStreamCtx
argument_list|,
name|out
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|InputSource
name|inSrc
init|=
operator|new
name|InputSource
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|inStreamCtx
operator|!=
literal|null
condition|)
block|{
name|inSrc
operator|.
name|setSystemId
argument_list|(
name|inStreamCtx
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|XMLHelper
operator|.
name|parse
argument_list|(
name|inSrc
argument_list|,
literal|null
argument_list|,
name|updaterHandler
argument_list|,
name|updaterHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|IllegalStateException
name|ise
init|=
operator|new
name|IllegalStateException
argument_list|(
literal|"impossible to update Ivy files: parser problem"
argument_list|)
decl_stmt|;
name|ise
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ise
throw|;
block|}
block|}
comment|/**      * Copy xml header from src url ivy file to given printwriter In fact, copies everything before      *<ivy-module to out, except if<ivy-module is not found, in which case nothing is copied. The      * prolog<?xml version="..." encoding="...."?> is also replaced by<?xml version="1.0"      * encoding="UTF-8"?> if it was present.      *       * @param in      * @param out      * @throws IOException      */
specifier|private
specifier|static
name|void
name|copyHeader
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
operator|&&
name|line
operator|.
name|startsWith
argument_list|(
literal|"<?xml "
argument_list|)
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
name|line
operator|.
name|indexOf
argument_list|(
literal|">"
argument_list|)
operator|+
literal|1
argument_list|,
name|line
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|line
operator|!=
literal|null
condition|;
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
control|)
block|{
name|int
name|index
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|"<ivy-module"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// r.close();
block|}
specifier|private
specifier|static
class|class
name|ExtendedBuffer
block|{
specifier|private
name|String
name|context
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|print
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|defaultPrint
init|=
literal|false
decl_stmt|;
specifier|private
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|ExtendedBuffer
parameter_list|(
name|String
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
name|boolean
name|isPrint
parameter_list|()
block|{
if|if
condition|(
name|print
operator|==
literal|null
condition|)
block|{
return|return
name|defaultPrint
return|;
block|}
return|return
name|print
operator|.
name|booleanValue
argument_list|()
return|;
block|}
name|void
name|setPrint
parameter_list|(
name|boolean
name|print
parameter_list|)
block|{
name|this
operator|.
name|print
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|print
argument_list|)
expr_stmt|;
block|}
name|void
name|setDefaultPrint
parameter_list|(
name|boolean
name|print
parameter_list|)
block|{
name|this
operator|.
name|defaultPrint
operator|=
name|print
expr_stmt|;
block|}
name|StringBuffer
name|getBuffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
name|String
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
block|}
block|}
end_class

end_unit

