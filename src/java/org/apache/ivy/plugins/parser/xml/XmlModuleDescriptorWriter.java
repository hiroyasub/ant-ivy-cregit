begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyArtifactDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptorMediator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ExcludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ExtendsDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ExtraInfoHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|IncludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|OverrideDependencyDescriptorMediator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|MapMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|DateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|extendable
operator|.
name|ExtendableItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|isNullOrEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|joinArray
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|XmlModuleDescriptorWriter
block|{
specifier|private
name|XmlModuleDescriptorWriter
parameter_list|()
block|{
comment|// Utility class
block|}
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|md
argument_list|,
literal|null
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|licenseHeader
parameter_list|,
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|output
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|output
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|licenseHeader
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|licenseHeader
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|xmlNamespace
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
name|md
operator|.
name|getExtraAttributesNamespaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
range|:
name|namespaces
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|xmlNamespace
operator|.
name|append
argument_list|(
literal|" xmlns:"
argument_list|)
operator|.
name|append
argument_list|(
name|ns
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
operator|.
name|append
argument_list|(
name|ns
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|String
name|version
init|=
literal|"2.0"
decl_stmt|;
if|if
condition|(
name|md
operator|.
name|getInheritedDescriptors
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|version
operator|=
literal|"2.2"
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<ivy-module version=\""
operator|+
name|version
operator|+
literal|"\""
operator|+
name|xmlNamespace
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|printInfoTag
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|printConfigurations
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|printPublications
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|printDependencies
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</ivy-module>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printDependencies
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|DependencyDescriptor
index|[]
name|dds
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
if|if
condition|(
name|dds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t<dependencies>"
argument_list|)
expr_stmt|;
for|for
control|(
name|DependencyDescriptor
name|dep
range|:
name|dds
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t"
argument_list|)
expr_stmt|;
name|printDependency
argument_list|(
name|md
argument_list|,
name|dep
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|printAllExcludes
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|printAllMediators
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t</dependencies>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|printDependency
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|DependencyDescriptor
name|dep
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
specifier|final
name|ModuleRevisionId
name|dependencyRevisionId
init|=
name|dep
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<dependency org=\"%s\" name=\"%s\""
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dependencyRevisionId
operator|.
name|getOrganisation
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dependencyRevisionId
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dependencyRevisionId
operator|.
name|getBranch
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" branch=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dependencyRevisionId
operator|.
name|getBranch
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" rev=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dependencyRevisionId
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
specifier|final
name|ModuleRevisionId
name|dynamicConstraintDependencyRevisionId
init|=
name|dep
operator|.
name|getDynamicConstraintDependencyRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dynamicConstraintDependencyRevisionId
operator|.
name|equals
argument_list|(
name|dependencyRevisionId
argument_list|)
condition|)
block|{
if|if
condition|(
name|dynamicConstraintDependencyRevisionId
operator|.
name|getBranch
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" branchConstraint=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dynamicConstraintDependencyRevisionId
operator|.
name|getBranch
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" revConstraint=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dynamicConstraintDependencyRevisionId
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dep
operator|.
name|isForce
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" force=\""
operator|+
name|dep
operator|.
name|isForce
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dep
operator|.
name|isChanging
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" changing=\""
operator|+
name|dep
operator|.
name|isChanging
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dep
operator|.
name|isTransitive
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" transitive=\""
operator|+
name|dep
operator|.
name|isTransitive
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|modConf
range|:
name|dep
operator|.
name|getModuleConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|XMLHelper
operator|.
name|escape
argument_list|(
name|modConf
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|listToPrefixedString
argument_list|(
name|dep
operator|.
name|getDependencyConfigurations
argument_list|(
name|modConf
argument_list|)
argument_list|,
literal|"->"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" conf=\""
operator|+
name|sb
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|printExtraAttributes
argument_list|(
name|dep
argument_list|,
name|out
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|DependencyArtifactDescriptor
index|[]
name|depArtifacts
init|=
name|dep
operator|.
name|getAllDependencyArtifacts
argument_list|()
decl_stmt|;
if|if
condition|(
name|depArtifacts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|printDependencyArtefacts
argument_list|(
name|md
argument_list|,
name|out
argument_list|,
name|depArtifacts
argument_list|)
expr_stmt|;
name|IncludeRule
index|[]
name|includes
init|=
name|dep
operator|.
name|getAllIncludeRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|includes
operator|.
name|length
operator|>
literal|0
operator|&&
name|depArtifacts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|printDependencyIncludeRules
argument_list|(
name|md
argument_list|,
name|out
argument_list|,
name|includes
argument_list|)
expr_stmt|;
name|ExcludeRule
index|[]
name|excludes
init|=
name|dep
operator|.
name|getAllExcludeRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludes
operator|.
name|length
operator|>
literal|0
operator|&&
name|includes
operator|.
name|length
operator|==
literal|0
operator|&&
name|depArtifacts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|printDependencyExcludeRules
argument_list|(
name|md
argument_list|,
name|out
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
if|if
condition|(
name|includes
operator|.
name|length
operator|+
name|excludes
operator|.
name|length
operator|+
name|depArtifacts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t\t</dependency>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printAllMediators
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|Map
argument_list|<
name|MapMatcher
argument_list|,
name|DependencyDescriptorMediator
argument_list|>
name|mediators
init|=
name|md
operator|.
name|getAllDependencyDescriptorMediators
argument_list|()
operator|.
name|getAllRules
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MapMatcher
argument_list|,
name|DependencyDescriptorMediator
argument_list|>
name|mediatorRule
range|:
name|mediators
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MapMatcher
name|matcher
init|=
name|mediatorRule
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|DependencyDescriptorMediator
name|mediator
init|=
name|mediatorRule
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|mediator
operator|instanceof
name|OverrideDependencyDescriptorMediator
condition|)
block|{
name|OverrideDependencyDescriptorMediator
name|oddm
init|=
operator|(
name|OverrideDependencyDescriptorMediator
operator|)
name|mediator
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\t\t<override org=\"%s\" module=\"%s\" matcher=\"%s\""
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|matcher
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|)
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|matcher
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|matcher
operator|.
name|getPatternMatcher
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|oddm
operator|.
name|getBranch
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" branch=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|oddm
operator|.
name|getBranch
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oddm
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" rev=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|oddm
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"ignoring unhandled DependencyDescriptorMediator: "
operator|+
name|mediator
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|printAllExcludes
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|ExcludeRule
index|[]
name|excludes
init|=
name|md
operator|.
name|getAllExcludeRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ExcludeRule
name|exclude
range|:
name|excludes
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\t\t<exclude org=\"%s\" module=\"%s\" artifact=\"%s\" type=\"%s\" ext=\"%s\""
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getId
argument_list|()
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getId
argument_list|()
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getId
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getId
argument_list|()
operator|.
name|getExt
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|ruleConfs
init|=
name|exclude
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|ruleConfs
argument_list|)
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|listToPrefixedString
argument_list|(
name|ruleConfs
argument_list|,
literal|" conf=\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" matcher=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getMatcher
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|printDependencyExcludeRules
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|ExcludeRule
index|[]
name|excludes
parameter_list|)
block|{
if|if
condition|(
name|excludes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ExcludeRule
name|exclude
range|:
name|excludes
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\t\t\t<exclude org=\"%s\" module=\"%s\" name=\"%s\" type=\"%s\" ext=\"%s\""
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getId
argument_list|()
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getId
argument_list|()
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getId
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getId
argument_list|()
operator|.
name|getExt
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|ruleConfs
init|=
name|exclude
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|ruleConfs
argument_list|)
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|listToPrefixedString
argument_list|(
name|ruleConfs
argument_list|,
literal|" conf=\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" matcher=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exclude
operator|.
name|getMatcher
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|printDependencyIncludeRules
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|IncludeRule
index|[]
name|includes
parameter_list|)
block|{
if|if
condition|(
name|includes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|IncludeRule
name|include
range|:
name|includes
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\t\t\t<include name=\"%s\" type=\"%s\" ext=\"%s\""
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|include
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|include
operator|.
name|getId
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|include
operator|.
name|getId
argument_list|()
operator|.
name|getExt
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|ruleConfs
init|=
name|include
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|ruleConfs
argument_list|)
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|listToPrefixedString
argument_list|(
name|ruleConfs
argument_list|,
literal|" conf=\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" matcher=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|include
operator|.
name|getMatcher
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|printDependencyArtefacts
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|DependencyArtifactDescriptor
index|[]
name|depArtifacts
parameter_list|)
block|{
if|if
condition|(
name|depArtifacts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|DependencyArtifactDescriptor
name|depArtifact
range|:
name|depArtifacts
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\t\t\t<artifact name=\"%s\" type=\"%s\" ext=\"%s\""
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|depArtifact
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|depArtifact
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|depArtifact
operator|.
name|getExt
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|dadConfs
init|=
name|depArtifact
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|dadConfs
argument_list|)
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|listToPrefixedString
argument_list|(
name|dadConfs
argument_list|,
literal|" conf=\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|printExtraAttributes
argument_list|(
name|depArtifact
argument_list|,
name|out
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|listToPrefixedString
parameter_list|(
name|String
index|[]
name|confs
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|conf
range|:
name|confs
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
name|prefix
operator|.
name|length
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|XMLHelper
operator|.
name|escape
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Writes the extra attributes of the given {@link ExtendableItem} to the given      *<tt>PrintWriter</tt>.      *      * @param item      *            the {@link ExtendableItem}, cannot be<tt>null</tt>      * @param out      *            the writer to use      * @param prefix      *            the string to write before writing the attributes (if any)      */
specifier|private
specifier|static
name|void
name|printExtraAttributes
parameter_list|(
name|ExtendableItem
name|item
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|printExtraAttributes
argument_list|(
name|item
operator|.
name|getQualifiedExtraAttributes
argument_list|()
argument_list|,
name|out
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the specified<tt>Map</tt> containing the extra attributes to the given      *<tt>PrintWriter</tt>.      *      * @param extra      *            the extra attributes, can be<tt>null</tt>      * @param out      *            the writer to use      * @param prefix      *            the string to write before writing the attributes (if any)      */
specifier|private
specifier|static
name|void
name|printExtraAttributes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extra
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|extra
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|delim
init|=
name|prefix
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|extra
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s%s=\"%s\""
argument_list|,
name|delim
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|delim
operator|=
literal|" "
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printPublications
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t<publications>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|md
operator|.
name|getAllArtifacts
argument_list|()
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\t\t<artifact name=\"%s\" type=\"%s\" ext=\"%s\" conf=\"%s\""
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|artifact
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|artifact
operator|.
name|getExt
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|getConfs
argument_list|(
name|md
argument_list|,
name|artifact
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|printExtraAttributes
argument_list|(
name|artifact
argument_list|,
name|out
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t</publications>"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printConfigurations
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|Configuration
index|[]
name|confs
init|=
name|md
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
name|confs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t<configurations>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Configuration
name|conf
range|:
name|confs
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t"
argument_list|)
expr_stmt|;
name|printConfiguration
argument_list|(
name|conf
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t</configurations>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|printConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<conf"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" name=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|conf
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" visibility=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|conf
operator|.
name|getVisibility
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" description=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|conf
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|exts
init|=
name|conf
operator|.
name|getExtends
argument_list|()
decl_stmt|;
if|if
condition|(
name|exts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|listToPrefixedString
argument_list|(
name|exts
argument_list|,
literal|" extends=\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|conf
operator|.
name|isTransitive
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" transitive=\"false\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getDeprecated
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" deprecated=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|conf
operator|.
name|getDeprecated
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|printExtraAttributes
argument_list|(
name|conf
argument_list|,
name|out
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printInfoTag
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t<info organisation=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\tmodule=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|String
name|branch
init|=
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getBranch
argument_list|()
decl_stmt|;
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t\tbranch=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|branch
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|String
name|revision
init|=
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t\trevision=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|revision
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t\tstatus=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\tpublication=\""
operator|+
name|DateUtil
operator|.
name|format
argument_list|(
name|md
operator|.
name|getResolvedPublicationDate
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t\tdefault=\"true\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|md
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
name|DefaultModuleDescriptor
name|dmd
init|=
operator|(
name|DefaultModuleDescriptor
operator|)
name|md
decl_stmt|;
if|if
condition|(
name|dmd
operator|.
name|getNamespace
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dmd
operator|.
name|getNamespace
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"system"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t\tnamespace=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dmd
operator|.
name|getNamespace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|md
operator|.
name|getExtraAttributes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|printExtraAttributes
argument_list|(
name|md
argument_list|,
name|out
argument_list|,
literal|"\t\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|requireInnerInfoElement
argument_list|(
name|md
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t>"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExtendsDescriptor
name|parent
range|:
name|md
operator|.
name|getInheritedDescriptors
argument_list|()
control|)
block|{
name|ModuleRevisionId
name|mrid
init|=
name|parent
operator|.
name|getParentRevisionId
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\t\t<extends organisation=\"%s\" module=\"%s\" revision=\"%s\""
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|mrid
operator|.
name|getOrganisation
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|mrid
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|XMLHelper
operator|.
name|escape
argument_list|(
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|parent
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" location=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|location
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" extendType=\""
operator|+
name|joinArray
argument_list|(
name|parent
operator|.
name|getExtendsTypes
argument_list|()
argument_list|,
literal|","
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
name|License
index|[]
name|licenses
init|=
name|md
operator|.
name|getLicenses
argument_list|()
decl_stmt|;
for|for
control|(
name|License
name|license
range|:
name|licenses
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t<license "
argument_list|)
expr_stmt|;
if|if
condition|(
name|license
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"name=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|license
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|license
operator|.
name|getUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"url=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|license
operator|.
name|getUrl
argument_list|()
argument_list|)
operator|+
literal|"\" "
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|md
operator|.
name|getHomePage
argument_list|()
operator|!=
literal|null
operator|||
name|md
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t<description"
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|.
name|getHomePage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" homepage=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|md
operator|.
name|getHomePage
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|" />"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\t"
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\t</description>"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ExtraInfoHolder
name|extraInfo
range|:
name|md
operator|.
name|getExtraInfos
argument_list|()
control|)
block|{
name|printExtraInfoElement
argument_list|(
name|out
argument_list|,
name|extraInfo
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t</info>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t/>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printExtraInfoElement
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|ExtraInfoHolder
name|extraInfo
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|indent
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|extraInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|extraInfo
operator|.
name|getAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" %s=\"%s\""
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|requireClosingTag
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isNullOrEmpty
argument_list|(
name|extraInfo
operator|.
name|getContent
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|XMLHelper
operator|.
name|escape
argument_list|(
name|extraInfo
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|requireClosingTag
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|extraInfo
operator|.
name|getNestedExtraInfoHolder
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExtraInfoHolder
name|nestedElement
range|:
name|extraInfo
operator|.
name|getNestedExtraInfoHolder
argument_list|()
control|)
block|{
name|printExtraInfoElement
argument_list|(
name|out
argument_list|,
name|nestedElement
argument_list|,
name|indent
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|requireClosingTag
operator|=
literal|true
expr_stmt|;
comment|// prepare indentation for closing tag
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|indent
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|requireClosingTag
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|extraInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|requireInnerInfoElement
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
return|return
name|md
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|md
operator|.
name|getHomePage
argument_list|()
operator|!=
literal|null
operator|||
operator|!
name|isNullOrEmpty
argument_list|(
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|||
name|md
operator|.
name|getLicenses
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|||
name|md
operator|.
name|getInheritedDescriptors
argument_list|()
operator|.
name|length
operator|>
literal|0
return|;
block|}
specifier|private
specifier|static
name|String
name|getConfs
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|conf
range|:
name|md
operator|.
name|getConfigurationsNames
argument_list|()
control|)
block|{
if|if
condition|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|conf
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|.
name|setLength
argument_list|(
name|ret
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

