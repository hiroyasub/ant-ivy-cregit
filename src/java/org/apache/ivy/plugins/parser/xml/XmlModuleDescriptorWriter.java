begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyArtifactDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ExcludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|IncludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|extendable
operator|.
name|ExtendableItem
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|XmlModuleDescriptorWriter
block|{
specifier|private
name|XmlModuleDescriptorWriter
parameter_list|()
block|{
comment|//Utility class
block|}
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|md
argument_list|,
literal|null
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|licenseHeader
parameter_list|,
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|output
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|output
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|licenseHeader
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|licenseHeader
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|xmlNamespace
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Map
name|namespaces
init|=
name|md
operator|.
name|getExtraAttributesNamespaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|namespaces
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
name|ns
init|=
operator|(
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|xmlNamespace
operator|.
name|append
argument_list|(
literal|" xmlns:"
argument_list|)
operator|.
name|append
argument_list|(
name|ns
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
operator|.
name|append
argument_list|(
name|ns
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<ivy-module version=\"1.0\""
operator|+
name|xmlNamespace
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|printInfoTag
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|printConfigurations
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|printPublications
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|printDependencies
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</ivy-module>"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printDependencies
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|DependencyDescriptor
index|[]
name|dds
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
if|if
condition|(
name|dds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t<dependencies>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t<dependency"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" org=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" name=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" rev=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|dds
index|[
name|i
index|]
operator|.
name|isForce
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" force=\""
operator|+
name|dds
index|[
name|i
index|]
operator|.
name|isForce
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dds
index|[
name|i
index|]
operator|.
name|isChanging
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" changing=\""
operator|+
name|dds
index|[
name|i
index|]
operator|.
name|isChanging
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dds
index|[
name|i
index|]
operator|.
name|isTransitive
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" transitive=\""
operator|+
name|dds
index|[
name|i
index|]
operator|.
name|isTransitive
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" conf=\""
argument_list|)
expr_stmt|;
name|String
index|[]
name|modConfs
init|=
name|dds
index|[
name|i
index|]
operator|.
name|getModuleConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|modConfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
index|[]
name|depConfs
init|=
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyConfigurations
argument_list|(
name|modConfs
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|XMLHelper
operator|.
name|escape
argument_list|(
name|modConfs
index|[
name|j
index|]
argument_list|)
operator|+
literal|"->"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|depConfs
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|XMLHelper
operator|.
name|escape
argument_list|(
name|depConfs
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|+
literal|1
operator|<
name|depConfs
operator|.
name|length
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|j
operator|+
literal|1
operator|<
name|modConfs
operator|.
name|length
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|printExtraAttributes
argument_list|(
name|dds
index|[
name|i
index|]
argument_list|,
name|out
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|DependencyArtifactDescriptor
index|[]
name|depArtifacts
init|=
name|dds
index|[
name|i
index|]
operator|.
name|getAllDependencyArtifacts
argument_list|()
decl_stmt|;
if|if
condition|(
name|depArtifacts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|printDependencyArtefacts
argument_list|(
name|md
argument_list|,
name|out
argument_list|,
name|depArtifacts
argument_list|)
expr_stmt|;
name|IncludeRule
index|[]
name|includes
init|=
name|dds
index|[
name|i
index|]
operator|.
name|getAllIncludeRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|includes
operator|.
name|length
operator|>
literal|0
operator|&&
name|depArtifacts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|printDependencyIncludeRules
argument_list|(
name|md
argument_list|,
name|out
argument_list|,
name|includes
argument_list|)
expr_stmt|;
name|ExcludeRule
index|[]
name|excludes
init|=
name|dds
index|[
name|i
index|]
operator|.
name|getAllExcludeRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludes
operator|.
name|length
operator|>
literal|0
operator|&&
name|includes
operator|.
name|length
operator|==
literal|0
operator|&&
name|depArtifacts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|printDependencyExcludeRules
argument_list|(
name|md
argument_list|,
name|out
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
if|if
condition|(
name|includes
operator|.
name|length
operator|+
name|excludes
operator|.
name|length
operator|+
name|depArtifacts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t\t</dependency>"
argument_list|)
expr_stmt|;
block|}
block|}
name|printAllExcludes
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printAllExcludes
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|ExcludeRule
index|[]
name|excludes
init|=
name|md
operator|.
name|getAllExcludeRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|excludes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t<exclude"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" org=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" module=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" artifact=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" type=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" ext=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getExt
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|String
index|[]
name|ruleConfs
init|=
name|excludes
index|[
name|j
index|]
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|ruleConfs
argument_list|)
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" conf=\""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|ruleConfs
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|XMLHelper
operator|.
name|escape
argument_list|(
name|ruleConfs
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|+
literal|1
operator|<
name|ruleConfs
operator|.
name|length
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" matcher=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getMatcher
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t</dependencies>"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printDependencyExcludeRules
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|ExcludeRule
index|[]
name|excludes
parameter_list|)
block|{
if|if
condition|(
name|excludes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|excludes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t\t<exclude"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" org=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" module=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" name=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" type=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" ext=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getExt
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|String
index|[]
name|ruleConfs
init|=
name|excludes
index|[
name|j
index|]
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|ruleConfs
argument_list|)
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" conf=\""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|ruleConfs
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|XMLHelper
operator|.
name|escape
argument_list|(
name|ruleConfs
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|+
literal|1
operator|<
name|ruleConfs
operator|.
name|length
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" matcher=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|excludes
index|[
name|j
index|]
operator|.
name|getMatcher
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|printDependencyIncludeRules
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|IncludeRule
index|[]
name|includes
parameter_list|)
block|{
if|if
condition|(
name|includes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|includes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t\t<include"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" name=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|includes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" type=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|includes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" ext=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|includes
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|getExt
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|String
index|[]
name|ruleConfs
init|=
name|includes
index|[
name|j
index|]
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|ruleConfs
argument_list|)
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" conf=\""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|ruleConfs
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|XMLHelper
operator|.
name|escape
argument_list|(
name|ruleConfs
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|+
literal|1
operator|<
name|ruleConfs
operator|.
name|length
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|" matcher=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|includes
index|[
name|j
index|]
operator|.
name|getMatcher
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|printDependencyArtefacts
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|DependencyArtifactDescriptor
index|[]
name|depArtifacts
parameter_list|)
block|{
if|if
condition|(
name|depArtifacts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|depArtifacts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t\t<artifact"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" name=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|depArtifacts
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" type=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|depArtifacts
index|[
name|j
index|]
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" ext=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|depArtifacts
index|[
name|j
index|]
operator|.
name|getExt
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|String
index|[]
name|dadconfs
init|=
name|depArtifacts
index|[
name|j
index|]
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|dadconfs
argument_list|)
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" conf=\""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|dadconfs
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dadconfs
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|+
literal|1
operator|<
name|dadconfs
operator|.
name|length
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|printExtraAttributes
argument_list|(
name|depArtifacts
index|[
name|j
index|]
argument_list|,
name|out
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Writes the extra attributes of the given {@link ExtendableItem} to the      * given<tt>PrintWriter</tt>.      *       * @param item the {@link ExtendableItem}, cannot be<tt>null</tt>      * @param out the writer to use      * @param prefix the string to write before writing the attributes (if any)      */
specifier|private
specifier|static
name|void
name|printExtraAttributes
parameter_list|(
name|ExtendableItem
name|item
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|printExtraAttributes
argument_list|(
name|item
operator|.
name|getQualifiedExtraAttributes
argument_list|()
argument_list|,
name|out
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the specified<tt>Map</tt> containing the extra attributes to the      * given<tt>PrintWriter</tt>.      *       * @param extra the extra attributes, can be<tt>null</tt>      * @param out the writer to use      * @param prefix the string to write before writing the attributes (if any)      */
specifier|private
specifier|static
name|void
name|printExtraAttributes
parameter_list|(
name|Map
name|extra
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|extra
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|delim
init|=
name|prefix
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|extra
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|delim
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|delim
operator|=
literal|" "
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printPublications
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t<publications>"
argument_list|)
expr_stmt|;
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getAllArtifacts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|artifacts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t<artifact"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" name=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|artifacts
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" type=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|artifacts
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" ext=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|artifacts
index|[
name|i
index|]
operator|.
name|getExt
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" conf=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|getConfs
argument_list|(
name|md
argument_list|,
name|artifacts
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|printExtraAttributes
argument_list|(
name|artifacts
index|[
name|i
index|]
argument_list|,
name|out
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t</publications>"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printConfigurations
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|Configuration
index|[]
name|confs
init|=
name|md
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
name|confs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t<configurations>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\t\t<conf"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" name=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|confs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" visibility=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|confs
index|[
name|i
index|]
operator|.
name|getVisibility
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|confs
index|[
name|i
index|]
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" description=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|confs
index|[
name|i
index|]
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|exts
init|=
name|confs
index|[
name|i
index|]
operator|.
name|getExtends
argument_list|()
decl_stmt|;
if|if
condition|(
name|exts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" extends=\""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|exts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|XMLHelper
operator|.
name|escape
argument_list|(
name|exts
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|+
literal|1
operator|<
name|exts
operator|.
name|length
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confs
index|[
name|i
index|]
operator|.
name|getDeprecated
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" deprecated=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|confs
index|[
name|i
index|]
operator|.
name|getDeprecated
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|printExtraAttributes
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
name|out
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t</configurations>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printInfoTag
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t<info organisation=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\tmodule=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|String
name|branch
init|=
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getBranch
argument_list|()
decl_stmt|;
if|if
condition|(
name|branch
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t\tbranch=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|branch
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|String
name|revision
init|=
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t\trevision=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|revision
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t\tstatus=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\t\tpublication=\""
operator|+
name|Ivy
operator|.
name|DATE_FORMAT
operator|.
name|format
argument_list|(
name|md
operator|.
name|getResolvedPublicationDate
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t\tdefault=\"true\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|md
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
name|DefaultModuleDescriptor
name|dmd
init|=
operator|(
name|DefaultModuleDescriptor
operator|)
name|md
decl_stmt|;
if|if
condition|(
name|dmd
operator|.
name|getNamespace
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|dmd
operator|.
name|getNamespace
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"system"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"\t\tnamespace=\""
operator|+
name|XMLHelper
operator|.
name|escape
argument_list|(
name|dmd
operator|.
name|getNamespace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|md
operator|.
name|getExtraAttributes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|printExtraAttributes
argument_list|(
name|md
argument_list|,
name|out
argument_list|,
literal|"\t\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\t/>"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getConfs
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|confs
init|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|.
name|setLength
argument_list|(
name|ret
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

