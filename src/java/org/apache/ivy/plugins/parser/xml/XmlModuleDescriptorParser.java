begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ConfigurationAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyArtifactDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultExcludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultExtendsDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultIncludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyArtifactDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ExcludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|IncludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|MDArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|OverrideDependencyDescriptorMediator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ArtifactId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|ConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|FixedConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|NameSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|AbstractModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|FileSystemResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|DateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|extendable
operator|.
name|ExtendableItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Parses an xml ivy file and output a ModuleDescriptor. For dependency and performance reasons, it  * uses only the SAX API, which makes the parsing code harder to understand.  */
end_comment

begin_class
specifier|public
class|class
name|XmlModuleDescriptorParser
extends|extends
name|AbstractModuleDescriptorParser
block|{
specifier|static
specifier|final
name|String
index|[]
name|DEPENDENCY_REGULAR_ATTRIBUTES
init|=
operator|new
name|String
index|[]
block|{
literal|"org"
block|,
literal|"name"
block|,
literal|"branch"
block|,
literal|"branchConstraint"
block|,
literal|"rev"
block|,
literal|"revConstraint"
block|,
literal|"force"
block|,
literal|"transitive"
block|,
literal|"changing"
block|,
literal|"conf"
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODULE_INHERITANCE_REPOSITORY
init|=
literal|"module-inheritance-repository"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmlModuleDescriptorParser
name|INSTANCE
init|=
operator|new
name|XmlModuleDescriptorParser
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|XmlModuleDescriptorParser
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
specifier|protected
name|XmlModuleDescriptorParser
parameter_list|()
block|{
block|}
comment|/**      * @param settings      * @param xmlURL      *            the url pointing to the file to parse      * @param res      *            the real resource to parse, used for log only      * @param validate      * @return      * @throws ParseException      * @throws IOException      */
specifier|public
name|ModuleDescriptor
name|parseDescriptor
parameter_list|(
name|ParserSettings
name|ivySettings
parameter_list|,
name|URL
name|xmlURL
parameter_list|,
name|Resource
name|res
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Parser
name|parser
init|=
name|newParser
argument_list|(
name|ivySettings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setValidate
argument_list|(
name|validate
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setInput
argument_list|(
name|xmlURL
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
return|return
name|parser
operator|.
name|getModuleDescriptor
argument_list|()
return|;
block|}
comment|/** Used for test purpose */
name|ModuleDescriptor
name|parseDescriptor
parameter_list|(
name|ParserSettings
name|ivySettings
parameter_list|,
name|InputStream
name|descriptor
parameter_list|,
name|Resource
name|res
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Parser
name|parser
init|=
name|newParser
argument_list|(
name|ivySettings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setValidate
argument_list|(
name|validate
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setInput
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
return|return
name|parser
operator|.
name|getModuleDescriptor
argument_list|()
return|;
block|}
comment|/**      * Instantiates a Parser instance responsible for actual parsing of Ivy files.      *<p>      * Override this method if you want to use a custom Parser.      *</p>      *       * @param ivySettings      *            the settings to use during parsing      * @return the Parser instance used for parsing Ivy files      */
specifier|protected
name|Parser
name|newParser
parameter_list|(
name|ParserSettings
name|ivySettings
parameter_list|)
block|{
return|return
operator|new
name|Parser
argument_list|(
name|this
argument_list|,
name|ivySettings
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// this the default parser, it thus accepts all resources
block|}
specifier|public
name|void
name|toIvyFile
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Resource
name|res
parameter_list|,
name|File
name|destFile
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
try|try
block|{
name|Namespace
name|ns
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|md
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
name|DefaultModuleDescriptor
name|dmd
init|=
operator|(
name|DefaultModuleDescriptor
operator|)
name|md
decl_stmt|;
name|ns
operator|=
name|dmd
operator|.
name|getNamespace
argument_list|()
expr_stmt|;
block|}
name|XmlModuleDescriptorUpdater
operator|.
name|update
argument_list|(
name|is
argument_list|,
name|res
argument_list|,
name|destFile
argument_list|,
operator|new
name|UpdateOptions
argument_list|()
operator|.
name|setSettings
argument_list|(
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getSettings
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|setRevision
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|.
name|setPubdate
argument_list|(
name|md
operator|.
name|getResolvedPublicationDate
argument_list|()
argument_list|)
operator|.
name|setUpdateBranch
argument_list|(
literal|false
argument_list|)
operator|.
name|setNamespace
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|ParseException
name|ex
init|=
operator|new
name|ParseException
argument_list|(
literal|"exception occurred while parsing "
operator|+
name|res
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|Parser
extends|extends
name|AbstractParser
block|{
specifier|public
specifier|static
specifier|final
class|class
name|State
block|{
specifier|public
specifier|static
specifier|final
name|int
name|NONE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|INFO
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CONF
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|PUB
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEP
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEP_ARTIFACT
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ARTIFACT_INCLUDE
init|=
literal|6
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ARTIFACT_EXCLUDE
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CONFLICT
init|=
literal|8
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|EXCLUDE
init|=
literal|9
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEPS
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DESCRIPTION
init|=
literal|11
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|EXTRA_INFO
init|=
literal|12
decl_stmt|;
specifier|private
name|State
parameter_list|()
block|{
block|}
block|}
specifier|protected
specifier|static
specifier|final
name|List
name|ALLOWED_VERSIONS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"1.0"
block|,
literal|"1.1"
block|,
literal|"1.2"
block|,
literal|"1.3"
block|,
literal|"1.4"
block|,
literal|"2.0"
block|,
literal|"2.1"
block|,
literal|"2.2"
block|}
argument_list|)
decl_stmt|;
comment|/* how and what do we have to parse */
specifier|private
name|ParserSettings
name|settings
decl_stmt|;
specifier|private
name|boolean
name|validate
init|=
literal|true
decl_stmt|;
specifier|private
name|URL
name|descriptorURL
decl_stmt|;
specifier|private
name|InputStream
name|descriptorInput
decl_stmt|;
comment|/* Parsing state */
specifier|private
name|int
name|state
init|=
name|State
operator|.
name|NONE
decl_stmt|;
specifier|private
name|PatternMatcher
name|defaultMatcher
decl_stmt|;
specifier|private
name|DefaultDependencyDescriptor
name|dd
decl_stmt|;
specifier|private
name|ConfigurationAware
name|confAware
decl_stmt|;
specifier|private
name|MDArtifact
name|artifact
decl_stmt|;
specifier|private
name|String
name|conf
decl_stmt|;
specifier|private
name|boolean
name|artifactsDeclared
init|=
literal|false
decl_stmt|;
specifier|private
name|StringBuffer
name|buffer
decl_stmt|;
specifier|private
name|String
name|descriptorVersion
decl_stmt|;
specifier|private
name|String
index|[]
name|publicationsDefaultConf
decl_stmt|;
specifier|public
name|Parser
parameter_list|(
name|ModuleDescriptorParser
name|parser
parameter_list|,
name|ParserSettings
name|ivySettings
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|settings
operator|=
name|ivySettings
expr_stmt|;
block|}
specifier|public
name|void
name|setInput
parameter_list|(
name|InputStream
name|descriptorInput
parameter_list|)
block|{
name|this
operator|.
name|descriptorInput
operator|=
name|descriptorInput
expr_stmt|;
block|}
specifier|public
name|void
name|setInput
parameter_list|(
name|URL
name|descriptorURL
parameter_list|)
block|{
name|this
operator|.
name|descriptorURL
operator|=
name|descriptorURL
expr_stmt|;
block|}
specifier|public
name|void
name|setValidate
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
name|this
operator|.
name|validate
operator|=
name|validate
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
try|try
block|{
name|URL
name|schemaURL
init|=
name|validate
condition|?
name|getSchemaURL
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|descriptorURL
operator|!=
literal|null
condition|)
block|{
name|XMLHelper
operator|.
name|parse
argument_list|(
name|descriptorURL
argument_list|,
name|schemaURL
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XMLHelper
operator|.
name|parse
argument_list|(
name|descriptorInput
argument_list|,
name|schemaURL
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|checkConfigurations
argument_list|()
expr_stmt|;
name|replaceConfigurationWildcards
argument_list|()
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|setModuleArtifact
argument_list|(
name|DefaultArtifact
operator|.
name|newIvyArtifact
argument_list|(
name|getMd
argument_list|()
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|,
name|getMd
argument_list|()
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|artifactsDeclared
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|getMd
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|getMd
argument_list|()
operator|.
name|addArtifact
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
operator|new
name|MDArtifact
argument_list|(
name|getMd
argument_list|()
argument_list|,
name|getMd
argument_list|()
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|getMd
argument_list|()
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|ex
parameter_list|)
block|{
name|IllegalStateException
name|ise
init|=
operator|new
name|IllegalStateException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in "
operator|+
name|descriptorURL
argument_list|)
decl_stmt|;
name|ise
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ise
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|checkErrors
argument_list|()
expr_stmt|;
name|ParseException
name|pe
init|=
operator|new
name|ParseException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in "
operator|+
name|descriptorURL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|pe
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|pe
throw|;
block|}
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|DESCRIPTION
condition|)
block|{
comment|// make sure we don't interpret any tag while in description tag
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return;
block|}
if|else if
condition|(
literal|"ivy-module"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|ivyModuleStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"info"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|infoStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|INFO
operator|&&
literal|"extends"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|extendsStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|INFO
operator|&&
literal|"license"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|getMd
argument_list|()
operator|.
name|addLicense
argument_list|(
operator|new
name|License
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|,
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"url"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|INFO
operator|&&
literal|"description"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|getMd
argument_list|()
operator|.
name|setHomePage
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"homepage"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|DESCRIPTION
expr_stmt|;
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|INFO
operator|&&
literal|"ivyauthor"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
comment|// nothing to do, we don't store this
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|INFO
operator|&&
literal|"repository"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
comment|// nothing to do, we don't store this
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|INFO
operator|&&
name|isOtherNamespace
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|EXTRA_INFO
expr_stmt|;
block|}
if|else if
condition|(
literal|"configurations"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|configurationStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"publications"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|publicationsStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"dependencies"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|dependenciesStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"conflicts"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|descriptorVersion
operator|.
name|startsWith
argument_list|(
literal|"1."
argument_list|)
condition|)
block|{
name|Message
operator|.
name|deprecated
argument_list|(
literal|"using conflicts section is deprecated: "
operator|+
literal|"please use hints section instead. Ivy file URL: "
operator|+
name|descriptorURL
argument_list|)
expr_stmt|;
block|}
name|state
operator|=
name|State
operator|.
name|CONFLICT
expr_stmt|;
name|checkConfigurations
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"artifact"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|artifactStarted
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"include"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|state
operator|==
name|State
operator|.
name|DEP
condition|)
block|{
name|addIncludeRule
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"exclude"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|state
operator|==
name|State
operator|.
name|DEP
condition|)
block|{
name|addExcludeRule
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"exclude"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|state
operator|==
name|State
operator|.
name|DEPS
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|EXCLUDE
expr_stmt|;
name|parseRule
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addExcludeRule
argument_list|(
operator|(
name|ExcludeRule
operator|)
name|confAware
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"dependency"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|dependencyStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|confStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"mapped"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|conf
argument_list|,
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
literal|"conflict"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|state
operator|==
name|State
operator|.
name|DEPS
operator|)
operator|||
literal|"manager"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|state
operator|==
name|State
operator|.
name|CONFLICT
condition|)
block|{
name|managerStarted
argument_list|(
name|attributes
argument_list|,
name|state
operator|==
name|State
operator|.
name|CONFLICT
condition|?
literal|"name"
else|:
literal|"manager"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"override"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|state
operator|==
name|State
operator|.
name|DEPS
condition|)
block|{
name|mediationOverrideStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"include"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|state
operator|==
name|State
operator|.
name|CONF
condition|)
block|{
name|includeConfStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|validate
operator|&&
name|state
operator|!=
name|State
operator|.
name|EXTRA_INFO
operator|&&
name|state
operator|!=
name|State
operator|.
name|DESCRIPTION
condition|)
block|{
name|addError
argument_list|(
literal|"unknown tag "
operator|+
name|qName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|SAXException
condition|)
block|{
throw|throw
operator|(
name|SAXException
operator|)
name|ex
throw|;
block|}
name|SAXException
name|sax
init|=
operator|new
name|SAXException
argument_list|(
literal|"Problem occurred while parsing ivy file: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
decl_stmt|;
name|sax
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|sax
throw|;
block|}
block|}
comment|/**          * Default parent location to check (for dev ONLY)           * @return a relative path to a parent module descriptor          */
specifier|protected
name|String
name|getDefaultParentLocation
parameter_list|()
block|{
return|return
literal|"../ivy.xml"
return|;
block|}
comment|/**          * Handle extends elements.          * It checks :          *<ul>          *<li>filesystem based on location attribute, if no one is specified it will check the default parent location</li>          *<li>cache to find a resolved parent descriptor</li>          *<li>ask repositories to retrieve the parent module descriptor</li>          *</ul>          * @param attributes           * @throws ParseException           */
specifier|protected
name|void
name|extendsStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|parentOrganisation
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"organisation"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|parentModule
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|parentRevision
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"revision"
argument_list|)
operator|!=
literal|null
condition|?
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"revision"
argument_list|)
argument_list|)
else|:
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
decl_stmt|;
name|String
name|location
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"location"
argument_list|)
operator|!=
literal|null
condition|?
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"location"
argument_list|)
argument_list|)
else|:
name|getDefaultParentLocation
argument_list|()
decl_stmt|;
name|ModuleDescriptor
name|parent
init|=
literal|null
decl_stmt|;
name|String
name|extendType
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"extendType"
argument_list|)
operator|!=
literal|null
condition|?
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"extendType"
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
else|:
literal|"all"
decl_stmt|;
name|List
comment|/*<String> */
name|extendTypes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|extendType
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|ModuleId
name|parentMid
init|=
operator|new
name|ModuleId
argument_list|(
name|parentOrganisation
argument_list|,
name|parentModule
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|parentMrid
init|=
operator|new
name|ModuleRevisionId
argument_list|(
name|parentMid
argument_list|,
name|parentRevision
argument_list|)
decl_stmt|;
comment|//check on filesystem based on location attribute (for dev ONLY)
try|try
block|{
name|DependencyResolver
name|parentResolver
init|=
name|checkParentModuleOnFilesystem
argument_list|(
name|location
argument_list|,
name|parentMrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentResolver
operator|!=
literal|null
condition|)
block|{
name|parent
operator|=
name|resolveParentFromModuleInheritanceRepository
argument_list|(
name|parentResolver
argument_list|,
name|parentMrid
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"Unable to parse included ivy file "
operator|+
name|location
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// if not found, tries to resolve using repositories
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|parent
operator|=
name|parseOtherIvyFile
argument_list|(
name|parentMrid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"Unable to parse included ivy file for "
operator|+
name|parentMrid
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if still not found throw an exception
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Unable to parse included ivy file for "
operator|+
name|parentMrid
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
throw|;
block|}
name|DefaultExtendsDescriptor
name|ed
init|=
operator|new
name|DefaultExtendsDescriptor
argument_list|(
name|parent
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|parent
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"location"
argument_list|)
argument_list|,
operator|(
name|String
index|[]
operator|)
name|extendTypes
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|extendTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|getMd
argument_list|()
operator|.
name|addInheritedDescriptor
argument_list|(
name|ed
argument_list|)
expr_stmt|;
name|mergeWithOtherModuleDescriptor
argument_list|(
name|extendTypes
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/**          * Merge current module with a given module descriptor and specify what should be inherited through extendTypes argument          * @param extendTypes specify what should be inherited          * @param parent a given parent module descriptor          */
specifier|protected
name|void
name|mergeWithOtherModuleDescriptor
parameter_list|(
name|List
comment|/*<String> */
name|extendTypes
parameter_list|,
name|ModuleDescriptor
name|parent
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|extendTypes
operator|.
name|contains
argument_list|(
literal|"all"
argument_list|)
condition|)
block|{
name|mergeAll
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|extendTypes
operator|.
name|contains
argument_list|(
literal|"info"
argument_list|)
condition|)
block|{
name|mergeInfo
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extendTypes
operator|.
name|contains
argument_list|(
literal|"configurations"
argument_list|)
condition|)
block|{
name|mergeConfigurations
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extendTypes
operator|.
name|contains
argument_list|(
literal|"dependencies"
argument_list|)
condition|)
block|{
name|mergeDependencies
argument_list|(
name|parent
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extendTypes
operator|.
name|contains
argument_list|(
literal|"description"
argument_list|)
condition|)
block|{
name|mergeDescription
argument_list|(
name|parent
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extendTypes
operator|.
name|contains
argument_list|(
literal|"licenses"
argument_list|)
condition|)
block|{
name|mergeLicenses
argument_list|(
name|parent
operator|.
name|getLicenses
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**          * Merge everything from a given parent          * @param parent a given parent module desciptor          */
specifier|protected
name|void
name|mergeAll
parameter_list|(
name|ModuleDescriptor
name|parent
parameter_list|)
block|{
name|mergeInfo
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|mergeConfigurations
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|mergeDependencies
argument_list|(
name|parent
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|mergeDescription
argument_list|(
name|parent
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|mergeLicenses
argument_list|(
name|parent
operator|.
name|getLicenses
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**          * Explain how to inherit metadatas related to info element          * @param parent a given parent module decriptor          */
specifier|protected
name|void
name|mergeInfo
parameter_list|(
name|ModuleDescriptor
name|parent
parameter_list|)
block|{
name|ModuleRevisionId
name|parentMrid
init|=
name|parent
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
name|DefaultModuleDescriptor
name|descriptor
init|=
name|getMd
argument_list|()
decl_stmt|;
name|ModuleRevisionId
name|currentMrid
init|=
name|descriptor
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
name|ModuleRevisionId
name|mergedMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mergeValue
argument_list|(
name|parentMrid
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|currentMrid
operator|.
name|getOrganisation
argument_list|()
argument_list|)
argument_list|,
name|currentMrid
operator|.
name|getName
argument_list|()
argument_list|,
name|mergeValue
argument_list|(
name|parentMrid
operator|.
name|getBranch
argument_list|()
argument_list|,
name|currentMrid
operator|.
name|getBranch
argument_list|()
argument_list|)
argument_list|,
name|mergeRevisionValue
argument_list|(
name|parentMrid
operator|.
name|getRevision
argument_list|()
argument_list|,
name|currentMrid
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|,
name|mergeValues
argument_list|(
name|parentMrid
operator|.
name|getQualifiedExtraAttributes
argument_list|()
argument_list|,
name|currentMrid
operator|.
name|getQualifiedExtraAttributes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|descriptor
operator|.
name|setModuleRevisionId
argument_list|(
name|mergedMrid
argument_list|)
expr_stmt|;
name|descriptor
operator|.
name|setResolvedModuleRevisionId
argument_list|(
name|mergedMrid
argument_list|)
expr_stmt|;
name|descriptor
operator|.
name|setStatus
argument_list|(
name|mergeValue
argument_list|(
name|parent
operator|.
name|getStatus
argument_list|()
argument_list|,
name|descriptor
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|descriptor
operator|.
name|getNamespace
argument_list|()
operator|==
literal|null
operator|&&
name|parent
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
name|Namespace
name|parentNamespace
init|=
operator|(
operator|(
name|DefaultModuleDescriptor
operator|)
name|parent
operator|)
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
name|descriptor
operator|.
name|setNamespace
argument_list|(
name|parentNamespace
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|mergeRevisionValue
parameter_list|(
name|String
name|inherited
parameter_list|,
name|String
name|override
parameter_list|)
block|{
if|if
condition|(
name|override
operator|==
literal|null
operator|||
name|override
operator|.
name|equals
argument_list|(
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|inherited
return|;
block|}
else|else
block|{
return|return
name|override
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|mergeValue
parameter_list|(
name|String
name|inherited
parameter_list|,
name|String
name|override
parameter_list|)
block|{
return|return
name|override
operator|==
literal|null
condition|?
name|inherited
else|:
name|override
return|;
block|}
specifier|private
specifier|static
name|Map
name|mergeValues
parameter_list|(
name|Map
name|inherited
parameter_list|,
name|Map
name|overrides
parameter_list|)
block|{
name|LinkedHashMap
name|dup
init|=
operator|new
name|LinkedHashMap
argument_list|(
name|inherited
operator|.
name|size
argument_list|()
operator|+
name|overrides
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|dup
operator|.
name|putAll
argument_list|(
name|inherited
argument_list|)
expr_stmt|;
name|dup
operator|.
name|putAll
argument_list|(
name|overrides
argument_list|)
expr_stmt|;
return|return
name|dup
return|;
block|}
comment|/**          * Describes how to merge configurations elements          * @param sourceMrid the source module revision id          * @param configurations array of configurations to be inherited           */
specifier|protected
name|void
name|mergeConfigurations
parameter_list|(
name|ModuleDescriptor
name|parent
parameter_list|)
block|{
name|ModuleRevisionId
name|sourceMrid
init|=
name|parent
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
name|Configuration
index|[]
name|configurations
init|=
name|parent
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configurations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|configuration
init|=
name|configurations
index|[
name|i
index|]
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"Merging configuration with: "
operator|+
name|configuration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//copy configuration from parent descriptor
name|getMd
argument_list|()
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
name|configuration
argument_list|,
name|sourceMrid
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
name|setDefaultConfMapping
argument_list|(
operator|(
operator|(
name|DefaultModuleDescriptor
operator|)
name|parent
operator|)
operator|.
name|getDefaultConfMapping
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultConf
argument_list|(
operator|(
operator|(
name|DefaultModuleDescriptor
operator|)
name|parent
operator|)
operator|.
name|getDefaultConf
argument_list|()
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|setMappingOverride
argument_list|(
operator|(
operator|(
name|DefaultModuleDescriptor
operator|)
name|parent
operator|)
operator|.
name|isMappingOverride
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Describes how dependencies should be inherited          * @param dependencies array of dependencies to inherit          */
specifier|protected
name|void
name|mergeDependencies
parameter_list|(
name|DependencyDescriptor
index|[]
name|dependencies
parameter_list|)
block|{
name|DefaultModuleDescriptor
name|md
init|=
name|getMd
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DependencyDescriptor
name|dependencyDescriptor
init|=
name|dependencies
index|[
name|i
index|]
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"Merging dependency with: "
operator|+
name|dependencyDescriptor
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|md
operator|.
name|addDependency
argument_list|(
name|dependencyDescriptor
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Describes how to merge description          * @param description description going to be inherited          */
specifier|protected
name|void
name|mergeDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|String
name|current
init|=
name|getMd
argument_list|()
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
operator|||
name|current
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|getMd
argument_list|()
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Describes how to merge licenses          * @param licenses licenses going to be inherited          */
specifier|public
name|void
name|mergeLicenses
parameter_list|(
name|License
index|[]
name|licenses
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|licenses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|getMd
argument_list|()
operator|.
name|addLicense
argument_list|(
name|licenses
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Check if parent module is reachable using location attribute (for dev purpose).          * If parent module is reachable it will be registered in module inheritance repository           * @param location a given location           * @param parentMrid           * @throws IOException          * @throws ParseException           */
specifier|protected
name|DependencyResolver
name|checkParentModuleOnFilesystem
parameter_list|(
name|String
name|location
parameter_list|,
name|ModuleRevisionId
name|parentMrid
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
literal|"file"
operator|.
name|equals
argument_list|(
name|descriptorURL
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|descriptorURL
argument_list|,
name|location
argument_list|)
decl_stmt|;
try|try
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|file
operator|=
name|FileUtil
operator|.
name|normalize
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"Parent module doesn't exist on the filesystem: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|FileSystemResolver
name|parentModuleResolver
init|=
operator|new
name|FileSystemResolver
argument_list|()
decl_stmt|;
name|parentModuleResolver
operator|.
name|setName
argument_list|(
name|getModuleInheritanceRepositoryParentResolverName
argument_list|(
name|parentMrid
argument_list|)
argument_list|)
expr_stmt|;
name|parentModuleResolver
operator|.
name|addIvyPattern
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|parentModuleResolver
operator|.
name|setSettings
argument_list|(
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parentModuleResolver
return|;
block|}
comment|/**          * Describe how to parse a {@link ModuleDescriptor} by asking repositories          * @param parentMrid a given {@link ModuleRevisionId} to find          * @return a {@link ModuleDescriptor} if found. Return null if no {@link ModuleDescriptor} was found          * @throws ParseException          */
specifier|protected
name|ModuleDescriptor
name|parseOtherIvyFile
parameter_list|(
name|ModuleRevisionId
name|parentMrid
parameter_list|)
throws|throws
name|ParseException
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"Trying to parse included ivy file by asking repository for module :"
operator|+
name|parentMrid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|parentMrid
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResolveData
name|data
init|=
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getResolveData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|ResolveEngine
name|engine
init|=
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getIvy
argument_list|()
operator|.
name|getResolveEngine
argument_list|()
decl_stmt|;
name|ResolveOptions
name|options
init|=
operator|new
name|ResolveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setDownload
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ResolveData
argument_list|(
name|engine
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
name|DependencyResolver
name|resolver
init|=
name|getSettings
argument_list|()
operator|.
name|getResolver
argument_list|(
name|parentMrid
argument_list|)
decl_stmt|;
name|dd
operator|=
name|NameSpaceHelper
operator|.
name|toSystem
argument_list|(
name|dd
argument_list|,
name|getSettings
argument_list|()
operator|.
name|getContextNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|ResolvedModuleRevision
name|otherModule
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherModule
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Unable to find "
operator|+
name|parentMrid
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|)
throw|;
block|}
return|return
name|otherModule
operator|.
name|getDescriptor
argument_list|()
return|;
block|}
comment|/**          * Resolve parent module from module inheritance repository          * @param parentMrid a given {@link ModuleRevisionId} to find          * @return a {@link ModuleDescriptor} if found. Return null if no {@link ModuleDescriptor} was found          * @throws ParseException          */
specifier|protected
name|ModuleDescriptor
name|resolveParentFromModuleInheritanceRepository
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|,
name|ModuleRevisionId
name|parentMrid
parameter_list|)
throws|throws
name|ParseException
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"Trying to resolve included ivy file from module inheritance repository "
argument_list|)
expr_stmt|;
name|DependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|parentMrid
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResolveEngine
name|engine
init|=
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getIvy
argument_list|()
operator|.
name|getResolveEngine
argument_list|()
decl_stmt|;
name|ResolveOptions
name|options
init|=
operator|new
name|ResolveOptions
argument_list|()
decl_stmt|;
comment|//not sure we need to download parent module
name|options
operator|.
name|setDownload
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ResolveData
name|data
init|=
operator|new
name|ResolveData
argument_list|(
name|engine
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|dd
operator|=
name|NameSpaceHelper
operator|.
name|toSystem
argument_list|(
name|dd
argument_list|,
name|getSettings
argument_list|()
operator|.
name|getContextNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|ResolvedModuleRevision
name|otherModule
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherModule
operator|!=
literal|null
condition|)
block|{
return|return
name|otherModule
operator|.
name|getDescriptor
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getModuleInheritanceRepositoryParentResolverName
parameter_list|(
name|ModuleRevisionId
name|parentMrid
parameter_list|)
block|{
return|return
name|MODULE_INHERITANCE_REPOSITORY
operator|+
literal|"-"
operator|+
name|parentMrid
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|publicationsStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|state
operator|=
name|State
operator|.
name|PUB
expr_stmt|;
name|artifactsDeclared
operator|=
literal|true
expr_stmt|;
name|checkConfigurations
argument_list|()
expr_stmt|;
name|String
name|defaultConf
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultConf
operator|!=
literal|null
condition|)
block|{
name|setPublicationsDefaultConf
argument_list|(
name|defaultConf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setPublicationsDefaultConf
parameter_list|(
name|String
name|defaultConf
parameter_list|)
block|{
name|this
operator|.
name|publicationsDefaultConf
operator|=
name|defaultConf
operator|==
literal|null
condition|?
literal|null
else|:
name|defaultConf
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isOtherNamespace
parameter_list|(
name|String
name|qName
parameter_list|)
block|{
return|return
name|qName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
specifier|protected
name|void
name|managerStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|,
name|String
name|managerAtt
parameter_list|)
block|{
name|String
name|org
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"org"
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|=
name|org
operator|==
literal|null
condition|?
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
else|:
name|org
expr_stmt|;
name|String
name|mod
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
argument_list|)
decl_stmt|;
name|mod
operator|=
name|mod
operator|==
literal|null
condition|?
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
else|:
name|mod
expr_stmt|;
name|ConflictManager
name|cm
decl_stmt|;
name|String
name|name
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
name|managerAtt
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"rev"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|revs
init|=
name|rev
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|revs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|revs
index|[
name|i
index|]
operator|=
name|revs
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|cm
operator|=
operator|new
name|FixedConflictManager
argument_list|(
name|revs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|cm
operator|=
name|settings
operator|.
name|getConflictManager
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|cm
operator|==
literal|null
condition|)
block|{
name|addError
argument_list|(
literal|"unknown conflict manager: "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|addError
argument_list|(
literal|"bad conflict manager: no manager nor rev"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|matcherName
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"matcher"
argument_list|)
argument_list|)
decl_stmt|;
name|PatternMatcher
name|matcher
init|=
name|matcherName
operator|==
literal|null
condition|?
name|defaultMatcher
else|:
name|settings
operator|.
name|getMatcher
argument_list|(
name|matcherName
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|==
literal|null
condition|)
block|{
name|addError
argument_list|(
literal|"unknown matcher: "
operator|+
name|matcherName
argument_list|)
expr_stmt|;
return|return;
block|}
name|getMd
argument_list|()
operator|.
name|addConflictManager
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|mod
argument_list|)
argument_list|,
name|matcher
argument_list|,
name|cm
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|mediationOverrideStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|org
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"org"
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|=
name|org
operator|==
literal|null
condition|?
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
else|:
name|org
expr_stmt|;
name|String
name|mod
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
argument_list|)
decl_stmt|;
name|mod
operator|=
name|mod
operator|==
literal|null
condition|?
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
else|:
name|mod
expr_stmt|;
name|String
name|rev
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"rev"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|branch
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"branch"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|matcherName
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"matcher"
argument_list|)
argument_list|)
decl_stmt|;
name|PatternMatcher
name|matcher
init|=
name|matcherName
operator|==
literal|null
condition|?
name|defaultMatcher
else|:
name|settings
operator|.
name|getMatcher
argument_list|(
name|matcherName
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|==
literal|null
condition|)
block|{
name|addError
argument_list|(
literal|"unknown matcher: "
operator|+
name|matcherName
argument_list|)
expr_stmt|;
return|return;
block|}
name|getMd
argument_list|()
operator|.
name|addDependencyDescriptorMediator
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|mod
argument_list|)
argument_list|,
name|matcher
argument_list|,
operator|new
name|OverrideDependencyDescriptorMediator
argument_list|(
name|branch
argument_list|,
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|includeConfStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|ParseException
block|{
name|URL
name|url
init|=
name|settings
operator|.
name|getRelativeUrlResolver
argument_list|()
operator|.
name|getURL
argument_list|(
name|descriptorURL
argument_list|,
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"file"
argument_list|)
argument_list|)
argument_list|,
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"url"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"include tag must have a file or an url attribute"
argument_list|)
throw|;
block|}
comment|// create a new temporary parser to read the configurations from
comment|// the specified file.
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
name|getModuleDescriptorParser
argument_list|()
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setInput
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setMd
argument_list|(
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|getModuleDescriptorParser
argument_list|()
argument_list|,
operator|new
name|URLResource
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|XMLHelper
operator|.
name|parse
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
name|parser
argument_list|)
expr_stmt|;
comment|// add the configurations from this temporary parser to this module descriptor
name|Configuration
index|[]
name|configs
init|=
name|parser
operator|.
name|getModuleDescriptor
argument_list|()
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|getMd
argument_list|()
operator|.
name|addConfiguration
argument_list|(
name|configs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|.
name|getDefaultConfMapping
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"setting default conf mapping from imported configurations file: "
operator|+
name|parser
operator|.
name|getDefaultConfMapping
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultConfMapping
argument_list|(
name|parser
operator|.
name|getDefaultConfMapping
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|.
name|getDefaultConf
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"setting default conf from imported configurations file: "
operator|+
name|parser
operator|.
name|getDefaultConf
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultConf
argument_list|(
name|parser
operator|.
name|getDefaultConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|.
name|getMd
argument_list|()
operator|.
name|isMappingOverride
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"enabling mapping-override from imported configurations"
operator|+
literal|" file"
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|setMappingOverride
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|confStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|conf
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|State
operator|.
name|CONF
case|:
name|String
name|visibility
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"visibility"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|ext
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"extends"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|transitiveValue
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"transitive"
argument_list|)
decl_stmt|;
name|boolean
name|transitive
init|=
operator|(
name|transitiveValue
operator|==
literal|null
operator|)
condition|?
literal|true
else|:
name|Boolean
operator|.
name|valueOf
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"transitive"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|String
name|deprecated
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"deprecated"
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|,
name|Configuration
operator|.
name|Visibility
operator|.
name|getVisibility
argument_list|(
name|visibility
operator|==
literal|null
condition|?
literal|"public"
else|:
name|visibility
argument_list|)
argument_list|,
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"description"
argument_list|)
argument_list|)
argument_list|,
name|ext
operator|==
literal|null
condition|?
literal|null
else|:
name|ext
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|,
name|transitive
argument_list|,
name|deprecated
argument_list|)
decl_stmt|;
name|ExtendableItemHelper
operator|.
name|fillExtraAttributes
argument_list|(
name|settings
argument_list|,
name|configuration
argument_list|,
name|attributes
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"name"
block|,
literal|"visibility"
block|,
literal|"extends"
block|,
literal|"transitive"
block|,
literal|"description"
block|,
literal|"deprecated"
block|}
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
break|break;
case|case
name|State
operator|.
name|PUB
case|:
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|getMd
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|artifact
operator|.
name|addConfiguration
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addArtifact
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|artifact
operator|.
name|addConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addArtifact
argument_list|(
name|conf
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|State
operator|.
name|DEP
case|:
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|mappeds
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"mapped"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappeds
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|mapped
init|=
name|mappeds
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapped
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|conf
argument_list|,
name|mapped
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|State
operator|.
name|DEP_ARTIFACT
case|:
case|case
name|State
operator|.
name|ARTIFACT_INCLUDE
case|:
case|case
name|State
operator|.
name|ARTIFACT_EXCLUDE
case|:
name|addConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|validate
condition|)
block|{
name|addError
argument_list|(
literal|"conf tag found in invalid tag: "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|protected
name|void
name|dependencyStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|state
operator|=
name|State
operator|.
name|DEP
expr_stmt|;
name|String
name|org
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"org"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|==
literal|null
condition|)
block|{
name|org
operator|=
name|getMd
argument_list|()
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
expr_stmt|;
block|}
name|boolean
name|force
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"force"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|boolean
name|changing
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"changing"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|String
name|transitiveValue
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"transitive"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|transitive
init|=
operator|(
name|transitiveValue
operator|==
literal|null
operator|)
condition|?
literal|true
else|:
name|Boolean
operator|.
name|valueOf
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"transitive"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|branch
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"branch"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|branchConstraint
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"branchConstraint"
argument_list|)
argument_list|)
decl_stmt|;
comment|//            if (branchConstraint == null) {
comment|//                // there was no branch constraint before, so we should
comment|//                // set the branchConstraint to the current default branch
comment|//                branchConstraint = settings.getDefaultBranch(ModuleId.newInstance(org, name));
comment|//            }
name|String
name|rev
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"rev"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|revConstraint
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"revConstraint"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|extraAttributes
init|=
name|ExtendableItemHelper
operator|.
name|getExtraAttributes
argument_list|(
name|settings
argument_list|,
name|attributes
argument_list|,
name|DEPENDENCY_REGULAR_ATTRIBUTES
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|revId
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|name
argument_list|,
name|branch
argument_list|,
name|rev
argument_list|,
name|extraAttributes
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|dynamicId
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|revConstraint
operator|==
literal|null
operator|)
operator|&&
operator|(
name|branchConstraint
operator|==
literal|null
operator|)
condition|)
block|{
comment|// no dynamic constraints defined, so dynamicId equals revId
name|dynamicId
operator|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|name
argument_list|,
name|branch
argument_list|,
name|rev
argument_list|,
name|extraAttributes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|branchConstraint
operator|==
literal|null
condition|)
block|{
comment|// this situation occurs when there was no branch defined
comment|// in the original dependency descriptor. So the dynamicId
comment|// shouldn't contain a branch neither
name|dynamicId
operator|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|revConstraint
argument_list|,
name|extraAttributes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dynamicId
operator|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|name
argument_list|,
name|branchConstraint
argument_list|,
name|revConstraint
argument_list|,
name|extraAttributes
argument_list|)
expr_stmt|;
block|}
block|}
name|dd
operator|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|getMd
argument_list|()
argument_list|,
name|revId
argument_list|,
name|dynamicId
argument_list|,
name|force
argument_list|,
name|changing
argument_list|,
name|transitive
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|String
name|confs
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|confs
operator|!=
literal|null
operator|&&
name|confs
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|parseDepsConfs
argument_list|(
name|confs
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|artifactStarted
parameter_list|(
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|PUB
condition|)
block|{
comment|// this is a published artifact
name|String
name|artName
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
name|artName
operator|=
name|artName
operator|==
literal|null
condition|?
name|getMd
argument_list|()
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|artName
expr_stmt|;
name|String
name|type
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
name|type
operator|=
name|type
operator|==
literal|null
condition|?
literal|"jar"
else|:
name|type
expr_stmt|;
name|String
name|ext
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"ext"
argument_list|)
argument_list|)
decl_stmt|;
name|ext
operator|=
name|ext
operator|!=
literal|null
condition|?
name|ext
else|:
name|type
expr_stmt|;
name|String
name|url
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"url"
argument_list|)
argument_list|)
decl_stmt|;
name|artifact
operator|=
operator|new
name|MDArtifact
argument_list|(
name|getMd
argument_list|()
argument_list|,
name|artName
argument_list|,
name|type
argument_list|,
name|ext
argument_list|,
name|url
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|,
name|ExtendableItemHelper
operator|.
name|getExtraAttributes
argument_list|(
name|settings
argument_list|,
name|attributes
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ext"
block|,
literal|"type"
block|,
literal|"name"
block|,
literal|"conf"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|confs
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
decl_stmt|;
comment|// only add confs if they are specified. if they aren't, endElement will
comment|// handle this
comment|// only if there are no conf defined in sub elements
if|if
condition|(
name|confs
operator|!=
literal|null
operator|&&
name|confs
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|conf
decl_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|confs
argument_list|)
condition|)
block|{
name|conf
operator|=
name|getMd
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|=
name|confs
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|artifact
operator|.
name|addConfiguration
argument_list|(
name|conf
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addArtifact
argument_list|(
name|conf
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|DEP
condition|)
block|{
comment|// this is an artifact asked for a particular dependency
name|addDependencyArtifacts
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|validate
condition|)
block|{
name|addError
argument_list|(
literal|"artifact tag found in invalid tag: "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|dependenciesStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|state
operator|=
name|State
operator|.
name|DEPS
expr_stmt|;
name|String
name|defaultConf
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconf"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultConf
operator|!=
literal|null
condition|)
block|{
name|setDefaultConf
argument_list|(
name|defaultConf
argument_list|)
expr_stmt|;
block|}
name|defaultConf
operator|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconfmapping"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultConf
operator|!=
literal|null
condition|)
block|{
name|setDefaultConfMapping
argument_list|(
name|defaultConf
argument_list|)
expr_stmt|;
block|}
name|String
name|confMappingOverride
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"confmappingoverride"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|confMappingOverride
operator|!=
literal|null
condition|)
block|{
name|getMd
argument_list|()
operator|.
name|setMappingOverride
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|confMappingOverride
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkConfigurations
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|configurationStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|state
operator|=
name|State
operator|.
name|CONF
expr_stmt|;
name|setDefaultConfMapping
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconfmapping"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setDefaultConf
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"defaultconf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|setMappingOverride
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"confmappingoverride"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|infoStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|state
operator|=
name|State
operator|.
name|INFO
expr_stmt|;
name|String
name|org
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"organisation"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|module
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|revision
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"revision"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|branch
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"branch"
argument_list|)
argument_list|)
decl_stmt|;
name|getMd
argument_list|()
operator|.
name|setModuleRevisionId
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|module
argument_list|,
name|branch
argument_list|,
name|revision
argument_list|,
name|ExtendableItemHelper
operator|.
name|getExtraAttributes
argument_list|(
name|settings
argument_list|,
name|attributes
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"organisation"
block|,
literal|"module"
block|,
literal|"revision"
block|,
literal|"status"
block|,
literal|"publication"
block|,
literal|"branch"
block|,
literal|"namespace"
block|,
literal|"default"
block|,
literal|"resolver"
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|namespace
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"namespace"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|Namespace
name|ns
init|=
name|settings
operator|.
name|getNamespace
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"namespace not found for "
operator|+
name|getMd
argument_list|()
operator|.
name|getModuleRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|namespace
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getMd
argument_list|()
operator|.
name|setNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|status
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"status"
argument_list|)
argument_list|)
decl_stmt|;
name|getMd
argument_list|()
operator|.
name|setStatus
argument_list|(
name|status
operator|==
literal|null
condition|?
name|settings
operator|.
name|getStatusManager
argument_list|()
operator|.
name|getDefaultStatus
argument_list|()
else|:
name|status
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|setDefault
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|pubDate
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"publication"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pubDate
operator|!=
literal|null
operator|&&
name|pubDate
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|getMd
argument_list|()
operator|.
name|setPublicationDate
argument_list|(
name|DateUtil
operator|.
name|parse
argument_list|(
name|pubDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|addError
argument_list|(
literal|"invalid publication date format: "
operator|+
name|pubDate
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|setPublicationDate
argument_list|(
name|getDefaultPubDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getMd
argument_list|()
operator|.
name|setPublicationDate
argument_list|(
name|getDefaultPubDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|ivyModuleStarted
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|descriptorVersion
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"version"
argument_list|)
expr_stmt|;
name|int
name|versionIndex
init|=
name|ALLOWED_VERSIONS
operator|.
name|indexOf
argument_list|(
name|descriptorVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|addError
argument_list|(
literal|"invalid version "
operator|+
name|descriptorVersion
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"invalid version "
operator|+
name|descriptorVersion
argument_list|)
throw|;
block|}
if|if
condition|(
name|versionIndex
operator|>=
name|ALLOWED_VERSIONS
operator|.
name|indexOf
argument_list|(
literal|"1.3"
argument_list|)
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"post 1.3 ivy file: using "
operator|+
name|PatternMatcher
operator|.
name|EXACT
operator|+
literal|" as default matcher"
argument_list|)
expr_stmt|;
name|defaultMatcher
operator|=
name|settings
operator|.
name|getMatcher
argument_list|(
name|PatternMatcher
operator|.
name|EXACT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"pre 1.3 ivy file: using "
operator|+
name|PatternMatcher
operator|.
name|EXACT_OR_REGEXP
operator|+
literal|" as default matcher"
argument_list|)
expr_stmt|;
name|defaultMatcher
operator|=
name|settings
operator|.
name|getMatcher
argument_list|(
name|PatternMatcher
operator|.
name|EXACT_OR_REGEXP
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"xmlns:"
argument_list|)
condition|)
block|{
name|getMd
argument_list|()
operator|.
name|addExtraAttributeNamespace
argument_list|(
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|.
name|substring
argument_list|(
literal|"xmlns:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|addDependencyArtifacts
parameter_list|(
name|String
name|tag
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|state
operator|=
name|State
operator|.
name|DEP_ARTIFACT
expr_stmt|;
name|parseRule
argument_list|(
name|tag
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addIncludeRule
parameter_list|(
name|String
name|tag
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|state
operator|=
name|State
operator|.
name|ARTIFACT_INCLUDE
expr_stmt|;
name|parseRule
argument_list|(
name|tag
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addExcludeRule
parameter_list|(
name|String
name|tag
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|state
operator|=
name|State
operator|.
name|ARTIFACT_EXCLUDE
expr_stmt|;
name|parseRule
argument_list|(
name|tag
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|parseRule
parameter_list|(
name|String
name|tag
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|String
name|name
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"artifact"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"artifact"
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
condition|?
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
expr_stmt|;
block|}
block|}
name|String
name|type
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
literal|"artifact"
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
condition|?
literal|"jar"
else|:
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
expr_stmt|;
block|}
name|String
name|ext
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"ext"
argument_list|)
argument_list|)
decl_stmt|;
name|ext
operator|=
name|ext
operator|!=
literal|null
condition|?
name|ext
else|:
name|type
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|DEP_ARTIFACT
condition|)
block|{
name|String
name|url
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"url"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|extraAtt
init|=
name|ExtendableItemHelper
operator|.
name|getExtraAttributes
argument_list|(
name|settings
argument_list|,
name|attributes
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"name"
block|,
literal|"type"
block|,
literal|"ext"
block|,
literal|"url"
block|,
literal|"conf"
block|}
argument_list|)
decl_stmt|;
name|confAware
operator|=
operator|new
name|DefaultDependencyArtifactDescriptor
argument_list|(
name|dd
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|ext
argument_list|,
name|url
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|,
name|extraAtt
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|ARTIFACT_INCLUDE
condition|)
block|{
name|PatternMatcher
name|matcher
init|=
name|getPatternMatcher
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"matcher"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|org
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"org"
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|=
name|org
operator|==
literal|null
condition|?
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
else|:
name|org
expr_stmt|;
name|String
name|module
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
argument_list|)
decl_stmt|;
name|module
operator|=
name|module
operator|==
literal|null
condition|?
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
else|:
name|module
expr_stmt|;
name|ArtifactId
name|aid
init|=
operator|new
name|ArtifactId
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|module
argument_list|)
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
decl_stmt|;
name|Map
name|extraAtt
init|=
name|ExtendableItemHelper
operator|.
name|getExtraAttributes
argument_list|(
name|settings
argument_list|,
name|attributes
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"org"
block|,
literal|"module"
block|,
literal|"name"
block|,
literal|"type"
block|,
literal|"ext"
block|,
literal|"matcher"
block|,
literal|"conf"
block|}
argument_list|)
decl_stmt|;
name|confAware
operator|=
operator|new
name|DefaultIncludeRule
argument_list|(
name|aid
argument_list|,
name|matcher
argument_list|,
name|extraAtt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// _state == ARTIFACT_EXCLUDE || EXCLUDE
name|PatternMatcher
name|matcher
init|=
name|getPatternMatcher
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"matcher"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|org
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"org"
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|=
name|org
operator|==
literal|null
condition|?
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
else|:
name|org
expr_stmt|;
name|String
name|module
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"module"
argument_list|)
argument_list|)
decl_stmt|;
name|module
operator|=
name|module
operator|==
literal|null
condition|?
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
else|:
name|module
expr_stmt|;
name|ArtifactId
name|aid
init|=
operator|new
name|ArtifactId
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|org
argument_list|,
name|module
argument_list|)
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
decl_stmt|;
name|Map
name|extraAtt
init|=
name|ExtendableItemHelper
operator|.
name|getExtraAttributes
argument_list|(
name|settings
argument_list|,
name|attributes
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"org"
block|,
literal|"module"
block|,
literal|"name"
block|,
literal|"type"
block|,
literal|"ext"
block|,
literal|"matcher"
block|,
literal|"conf"
block|}
argument_list|)
decl_stmt|;
name|confAware
operator|=
operator|new
name|DefaultExcludeRule
argument_list|(
name|aid
argument_list|,
name|matcher
argument_list|,
name|extraAtt
argument_list|)
expr_stmt|;
block|}
name|String
name|confs
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
decl_stmt|;
comment|// only add confs if they are specified. if they aren't, endElement will handle this
comment|// only if there are no conf defined in sub elements
if|if
condition|(
name|confs
operator|!=
literal|null
operator|&&
name|confs
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|conf
decl_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|confs
argument_list|)
condition|)
block|{
name|conf
operator|=
name|getMd
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|=
name|confs
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|addConfiguration
argument_list|(
name|conf
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|addConfiguration
parameter_list|(
name|String
name|c
parameter_list|)
block|{
name|confAware
operator|.
name|addConfiguration
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|EXCLUDE
condition|)
block|{
comment|// we are adding a configuration to a module wide exclude rule
comment|// we have nothing special to do here, the rule has already been added to the module
comment|// descriptor
block|}
else|else
block|{
comment|// we are currently adding a configuration to either an include, exclude or artifact
comment|// element
comment|// of a dependency. This means that we have to add this element to the corresponding
comment|// conf
comment|// of the current dependency descriptor
if|if
condition|(
name|confAware
operator|instanceof
name|DependencyArtifactDescriptor
condition|)
block|{
name|dd
operator|.
name|addDependencyArtifact
argument_list|(
name|c
argument_list|,
operator|(
name|DependencyArtifactDescriptor
operator|)
name|confAware
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|confAware
operator|instanceof
name|IncludeRule
condition|)
block|{
name|dd
operator|.
name|addIncludeRule
argument_list|(
name|c
argument_list|,
operator|(
name|IncludeRule
operator|)
name|confAware
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|confAware
operator|instanceof
name|ExcludeRule
condition|)
block|{
name|dd
operator|.
name|addExcludeRule
argument_list|(
name|c
argument_list|,
operator|(
name|ExcludeRule
operator|)
name|confAware
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|PatternMatcher
name|getPatternMatcher
parameter_list|(
name|String
name|m
parameter_list|)
block|{
name|String
name|matcherName
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|PatternMatcher
name|matcher
init|=
name|matcherName
operator|==
literal|null
condition|?
name|defaultMatcher
else|:
name|settings
operator|.
name|getMatcher
argument_list|(
name|matcherName
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown matcher "
operator|+
name|matcherName
argument_list|)
throw|;
block|}
return|return
name|matcher
return|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|PUB
operator|&&
literal|"artifact"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|artifact
operator|.
name|getConfigurations
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|publicationsDefaultConf
operator|==
literal|null
condition|?
name|getMd
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
else|:
name|publicationsDefaultConf
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|artifact
operator|.
name|addConfiguration
argument_list|(
name|confs
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addArtifact
argument_list|(
name|confs
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"configurations"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|checkConfigurations
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|state
operator|==
name|State
operator|.
name|DEP_ARTIFACT
operator|&&
literal|"artifact"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|)
operator|||
operator|(
name|state
operator|==
name|State
operator|.
name|ARTIFACT_INCLUDE
operator|&&
literal|"include"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|)
operator|||
operator|(
name|state
operator|==
name|State
operator|.
name|ARTIFACT_EXCLUDE
operator|&&
literal|"exclude"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|)
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|DEP
expr_stmt|;
if|if
condition|(
name|confAware
operator|.
name|getConfigurations
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|getMd
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|addConfiguration
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|confAware
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
literal|"exclude"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|state
operator|==
name|State
operator|.
name|EXCLUDE
condition|)
block|{
if|if
condition|(
name|confAware
operator|.
name|getConfigurations
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|getMd
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|addConfiguration
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|confAware
operator|=
literal|null
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|DEPS
expr_stmt|;
block|}
if|else if
condition|(
literal|"dependency"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|state
operator|==
name|State
operator|.
name|DEP
condition|)
block|{
if|if
condition|(
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|parseDepsConfs
argument_list|(
name|getDefaultConf
argument_list|()
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
name|state
operator|=
name|State
operator|.
name|DEPS
expr_stmt|;
block|}
if|else if
condition|(
literal|"dependencies"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|state
operator|==
name|State
operator|.
name|DEPS
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|NONE
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|INFO
operator|&&
literal|"info"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|NONE
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|DESCRIPTION
operator|&&
literal|"description"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|getMd
argument_list|()
operator|.
name|setDescription
argument_list|(
name|buffer
operator|==
literal|null
condition|?
literal|""
else|:
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|=
literal|null
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|INFO
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|EXTRA_INFO
condition|)
block|{
name|getMd
argument_list|()
operator|.
name|addExtraInfo
argument_list|(
name|qName
argument_list|,
name|buffer
operator|==
literal|null
condition|?
literal|""
else|:
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|=
literal|null
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|INFO
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|==
name|State
operator|.
name|DESCRIPTION
condition|)
block|{
if|if
condition|(
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"<"
operator|+
name|qName
operator|+
literal|">"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|deleteCharAt
argument_list|(
name|buffer
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"</"
operator|+
name|qName
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|checkConfigurations
parameter_list|()
block|{
if|if
condition|(
name|getMd
argument_list|()
operator|.
name|getConfigurations
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|getMd
argument_list|()
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|replaceConfigurationWildcards
parameter_list|()
block|{
name|Configuration
index|[]
name|configs
init|=
name|getMd
argument_list|()
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|configs
index|[
name|i
index|]
operator|.
name|replaceWildcards
argument_list|(
name|getMd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* getters and setters available for extension only */
specifier|protected
name|ParserSettings
name|getSettings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
specifier|protected
name|URL
name|getDescriptorURL
parameter_list|()
block|{
return|return
name|descriptorURL
return|;
block|}
specifier|protected
name|InputStream
name|getDescriptorInput
parameter_list|()
block|{
return|return
name|descriptorInput
return|;
block|}
specifier|protected
name|int
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|protected
name|void
name|setState
parameter_list|(
name|int
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
specifier|protected
name|PatternMatcher
name|getDefaultMatcher
parameter_list|()
block|{
return|return
name|defaultMatcher
return|;
block|}
specifier|protected
name|DefaultDependencyDescriptor
name|getDd
parameter_list|()
block|{
return|return
name|dd
return|;
block|}
specifier|protected
name|void
name|setDd
parameter_list|(
name|DefaultDependencyDescriptor
name|dd
parameter_list|)
block|{
name|this
operator|.
name|dd
operator|=
name|dd
expr_stmt|;
block|}
specifier|protected
name|ConfigurationAware
name|getConfAware
parameter_list|()
block|{
return|return
name|confAware
return|;
block|}
specifier|protected
name|void
name|setConfAware
parameter_list|(
name|ConfigurationAware
name|confAware
parameter_list|)
block|{
name|this
operator|.
name|confAware
operator|=
name|confAware
expr_stmt|;
block|}
specifier|protected
name|MDArtifact
name|getArtifact
parameter_list|()
block|{
return|return
name|artifact
return|;
block|}
specifier|protected
name|void
name|setArtifact
parameter_list|(
name|MDArtifact
name|artifact
parameter_list|)
block|{
name|this
operator|.
name|artifact
operator|=
name|artifact
expr_stmt|;
block|}
specifier|protected
name|String
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|protected
name|void
name|setConf
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isArtifactsDeclared
parameter_list|()
block|{
return|return
name|artifactsDeclared
return|;
block|}
specifier|protected
name|void
name|setArtifactsDeclared
parameter_list|(
name|boolean
name|artifactsDeclared
parameter_list|)
block|{
name|this
operator|.
name|artifactsDeclared
operator|=
name|artifactsDeclared
expr_stmt|;
block|}
specifier|protected
name|StringBuffer
name|getBuffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
specifier|protected
name|void
name|setBuffer
parameter_list|(
name|StringBuffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
block|}
specifier|protected
name|String
name|getDescriptorVersion
parameter_list|()
block|{
return|return
name|descriptorVersion
return|;
block|}
specifier|protected
name|void
name|setDescriptorVersion
parameter_list|(
name|String
name|descriptorVersion
parameter_list|)
block|{
name|this
operator|.
name|descriptorVersion
operator|=
name|descriptorVersion
expr_stmt|;
block|}
specifier|protected
name|String
index|[]
name|getPublicationsDefaultConf
parameter_list|()
block|{
return|return
name|publicationsDefaultConf
return|;
block|}
specifier|protected
name|void
name|setPublicationsDefaultConf
parameter_list|(
name|String
index|[]
name|publicationsDefaultConf
parameter_list|)
block|{
name|this
operator|.
name|publicationsDefaultConf
operator|=
name|publicationsDefaultConf
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isValidate
parameter_list|()
block|{
return|return
name|validate
return|;
block|}
specifier|protected
name|URL
name|getSchemaURL
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"ivy.xsd"
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ivy parser"
return|;
block|}
block|}
end_class

end_unit

