begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|m2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ArtifactOrigin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
operator|.
name|Visibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyArtifactDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultExcludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ExtraInfoHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|MDArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|OverrideDependencyDescriptorMediator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ArtifactId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|ExactPatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|m2
operator|.
name|PomReader
operator|.
name|PomDependencyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Build a module descriptor. This class handle the complexity of the structure of an ivy  * ModuleDescriptor and isolate the PomModuleDescriptorParser from it.  */
end_comment

begin_class
specifier|public
class|class
name|PomModuleDescriptorBuilder
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEPENDENCY_MANAGEMENT_KEY_PARTS_COUNT
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Configuration
index|[]
name|MAVEN2_CONFIGURATIONS
init|=
operator|new
name|Configuration
index|[]
block|{
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"runtime dependencies and master artifact can be used with this conf"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"runtime"
block|,
literal|"master"
block|}
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"master"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"contains only the artifact published by this module itself, "
operator|+
literal|"with no transitive dependencies"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"compile"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"this is the default scope, used if none is specified. "
operator|+
literal|"Compile dependencies are available in all classpaths."
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"provided"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"this is much like compile, but indicates you expect the JDK or a container "
operator|+
literal|"to provide it. "
operator|+
literal|"It is only available on the compilation classpath, and is not transitive."
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"runtime"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"this scope indicates that the dependency is not required for compilation, "
operator|+
literal|"but is for execution. It is in the runtime and test classpaths, "
operator|+
literal|"but not the compile classpath."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"compile"
block|}
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"test"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"this scope indicates that the dependency is not required for normal use of "
operator|+
literal|"the application, and is only available for the test compilation and "
operator|+
literal|"execution phases."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"runtime"
block|}
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"system"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"this scope is similar to provided except that you have to provide the JAR "
operator|+
literal|"which contains it explicitly. The artifact is always available and is not "
operator|+
literal|"looked up in a repository."
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"sources"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"this configuration contains the source artifact of this module, if any."
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"javadoc"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"this configuration contains the javadoc artifact of this module, if any."
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"optional"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"contains all optional dependencies"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ConfMapper
argument_list|>
name|MAVEN2_CONF_MAPPING
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConfMapper
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEPENDENCY_MANAGEMENT
init|=
literal|"m:dependency.management"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTIES
init|=
literal|"m:properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTRA_INFO_DELIMITER
init|=
literal|"__"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|JAR_PACKAGINGS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ejb"
block|,
literal|"bundle"
block|,
literal|"maven-plugin"
block|,
literal|"eclipse-plugin"
block|,
literal|"jbi-component"
block|,
literal|"jbi-shared-library"
block|,
literal|"orbit"
block|,
literal|"hk2-jar"
block|}
argument_list|)
decl_stmt|;
specifier|static
interface|interface
name|ConfMapper
block|{
specifier|public
name|void
name|addMappingConfs
parameter_list|(
name|DefaultDependencyDescriptor
name|dd
parameter_list|,
name|boolean
name|isOptional
parameter_list|)
function_decl|;
block|}
static|static
block|{
name|MAVEN2_CONF_MAPPING
operator|.
name|put
argument_list|(
literal|"compile"
argument_list|,
operator|new
name|ConfMapper
argument_list|()
block|{
specifier|public
name|void
name|addMappingConfs
parameter_list|(
name|DefaultDependencyDescriptor
name|dd
parameter_list|,
name|boolean
name|isOptional
parameter_list|)
block|{
if|if
condition|(
name|isOptional
condition|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"optional"
argument_list|,
literal|"compile(*)"
argument_list|)
expr_stmt|;
comment|// dd.addDependencyConfiguration("optional", "provided(*)");
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"optional"
argument_list|,
literal|"master(*)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"compile"
argument_list|,
literal|"compile(*)"
argument_list|)
expr_stmt|;
comment|// dd.addDependencyConfiguration("compile", "provided(*)");
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"compile"
argument_list|,
literal|"master(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"runtime"
argument_list|,
literal|"runtime(*)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|MAVEN2_CONF_MAPPING
operator|.
name|put
argument_list|(
literal|"provided"
argument_list|,
operator|new
name|ConfMapper
argument_list|()
block|{
specifier|public
name|void
name|addMappingConfs
parameter_list|(
name|DefaultDependencyDescriptor
name|dd
parameter_list|,
name|boolean
name|isOptional
parameter_list|)
block|{
if|if
condition|(
name|isOptional
condition|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"optional"
argument_list|,
literal|"compile(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"optional"
argument_list|,
literal|"provided(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"optional"
argument_list|,
literal|"runtime(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"optional"
argument_list|,
literal|"master(*)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"provided"
argument_list|,
literal|"compile(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"provided"
argument_list|,
literal|"provided(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"provided"
argument_list|,
literal|"runtime(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"provided"
argument_list|,
literal|"master(*)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|MAVEN2_CONF_MAPPING
operator|.
name|put
argument_list|(
literal|"runtime"
argument_list|,
operator|new
name|ConfMapper
argument_list|()
block|{
specifier|public
name|void
name|addMappingConfs
parameter_list|(
name|DefaultDependencyDescriptor
name|dd
parameter_list|,
name|boolean
name|isOptional
parameter_list|)
block|{
if|if
condition|(
name|isOptional
condition|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"optional"
argument_list|,
literal|"compile(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"optional"
argument_list|,
literal|"provided(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"optional"
argument_list|,
literal|"master(*)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"runtime"
argument_list|,
literal|"compile(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"runtime"
argument_list|,
literal|"runtime(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"runtime"
argument_list|,
literal|"master(*)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|MAVEN2_CONF_MAPPING
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
operator|new
name|ConfMapper
argument_list|()
block|{
specifier|public
name|void
name|addMappingConfs
parameter_list|(
name|DefaultDependencyDescriptor
name|dd
parameter_list|,
name|boolean
name|isOptional
parameter_list|)
block|{
comment|// optional doesn't make sense in the test scope
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"test"
argument_list|,
literal|"runtime(*)"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"test"
argument_list|,
literal|"master(*)"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MAVEN2_CONF_MAPPING
operator|.
name|put
argument_list|(
literal|"system"
argument_list|,
operator|new
name|ConfMapper
argument_list|()
block|{
specifier|public
name|void
name|addMappingConfs
parameter_list|(
name|DefaultDependencyDescriptor
name|dd
parameter_list|,
name|boolean
name|isOptional
parameter_list|)
block|{
comment|// optional doesn't make sense in the system scope
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"system"
argument_list|,
literal|"master(*)"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|PomModuleDescriptor
name|ivyModuleDescriptor
decl_stmt|;
specifier|private
name|ModuleRevisionId
name|mrid
decl_stmt|;
specifier|private
name|DefaultArtifact
name|mainArtifact
decl_stmt|;
specifier|private
name|ParserSettings
name|parserSettings
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WRONG_NUMBER_OF_PARTS_MSG
init|=
literal|"what seemed to be a dependency "
operator|+
literal|"management extra info exclusion had the wrong number of parts (should have 2) "
decl_stmt|;
specifier|public
name|PomModuleDescriptorBuilder
parameter_list|(
name|ModuleDescriptorParser
name|parser
parameter_list|,
name|Resource
name|res
parameter_list|,
name|ParserSettings
name|ivySettings
parameter_list|)
block|{
name|ivyModuleDescriptor
operator|=
operator|new
name|PomModuleDescriptor
argument_list|(
name|parser
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|ivyModuleDescriptor
operator|.
name|setResolvedPublicationDate
argument_list|(
operator|new
name|Date
argument_list|(
name|res
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAVEN2_CONFIGURATIONS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ivyModuleDescriptor
operator|.
name|addConfiguration
argument_list|(
name|MAVEN2_CONFIGURATIONS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|ivyModuleDescriptor
operator|.
name|setMappingOverride
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ivyModuleDescriptor
operator|.
name|addExtraAttributeNamespace
argument_list|(
literal|"m"
argument_list|,
name|Ivy
operator|.
name|getIvyHomeURL
argument_list|()
operator|+
literal|"maven"
argument_list|)
expr_stmt|;
name|parserSettings
operator|=
name|ivySettings
expr_stmt|;
block|}
specifier|public
name|ModuleDescriptor
name|getModuleDescriptor
parameter_list|()
block|{
return|return
name|ivyModuleDescriptor
return|;
block|}
specifier|public
name|void
name|setModuleRevId
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|mrid
operator|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|ivyModuleDescriptor
operator|.
name|setModuleRevisionId
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|version
operator|==
literal|null
operator|)
operator|||
name|version
operator|.
name|endsWith
argument_list|(
literal|"SNAPSHOT"
argument_list|)
condition|)
block|{
name|ivyModuleDescriptor
operator|.
name|setStatus
argument_list|(
literal|"integration"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ivyModuleDescriptor
operator|.
name|setStatus
argument_list|(
literal|"release"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setHomePage
parameter_list|(
name|String
name|homePage
parameter_list|)
block|{
name|ivyModuleDescriptor
operator|.
name|setHomePage
argument_list|(
name|homePage
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|ivyModuleDescriptor
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLicenses
parameter_list|(
name|License
index|[]
name|licenses
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|licenses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ivyModuleDescriptor
operator|.
name|addLicense
argument_list|(
name|licenses
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addMainArtifact
parameter_list|(
name|String
name|artifactId
parameter_list|,
name|String
name|packaging
parameter_list|)
block|{
name|String
name|ext
decl_stmt|;
comment|/*          * TODO: we should make packaging to ext mapping configurable, since it's not possible to          * cover all cases.          */
if|if
condition|(
literal|"pom"
operator|.
name|equals
argument_list|(
name|packaging
argument_list|)
condition|)
block|{
comment|// no artifact defined! Add the default artifact if it exist.
name|DependencyResolver
name|resolver
init|=
name|parserSettings
operator|.
name|getResolver
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|DefaultArtifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
name|artifactId
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
decl_stmt|;
name|ArtifactOrigin
name|artifactOrigin
init|=
name|resolver
operator|.
name|locate
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ArtifactOrigin
operator|.
name|isUnknown
argument_list|(
name|artifactOrigin
argument_list|)
condition|)
block|{
name|mainArtifact
operator|=
name|artifact
expr_stmt|;
name|ivyModuleDescriptor
operator|.
name|addArtifact
argument_list|(
literal|"master"
argument_list|,
name|mainArtifact
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
if|else if
condition|(
name|JAR_PACKAGINGS
operator|.
name|contains
argument_list|(
name|packaging
argument_list|)
condition|)
block|{
name|ext
operator|=
literal|"jar"
expr_stmt|;
block|}
if|else if
condition|(
literal|"pear"
operator|.
name|equals
argument_list|(
name|packaging
argument_list|)
condition|)
block|{
name|ext
operator|=
literal|"phar"
expr_stmt|;
block|}
else|else
block|{
name|ext
operator|=
name|packaging
expr_stmt|;
block|}
name|mainArtifact
operator|=
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
name|artifactId
argument_list|,
name|packaging
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|ivyModuleDescriptor
operator|.
name|addArtifact
argument_list|(
literal|"master"
argument_list|,
name|mainArtifact
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDependency
parameter_list|(
name|Resource
name|res
parameter_list|,
name|PomDependencyData
name|dep
parameter_list|)
block|{
name|String
name|scope
init|=
name|dep
operator|.
name|getScope
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|scope
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|scope
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|!
name|MAVEN2_CONF_MAPPING
operator|.
name|containsKey
argument_list|(
name|scope
argument_list|)
condition|)
block|{
comment|// unknown scope, defaulting to 'compile'
name|scope
operator|=
literal|"compile"
expr_stmt|;
block|}
name|String
name|version
init|=
name|dep
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|version
operator|=
operator|(
name|version
operator|==
literal|null
operator|||
name|version
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
name|getDefaultVersion
argument_list|(
name|dep
argument_list|)
else|:
name|version
expr_stmt|;
name|ModuleRevisionId
name|moduleRevId
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|version
argument_list|)
decl_stmt|;
comment|// Some POMs depend on themselves; Ivy doesn't allow this. Don't add this dependency!
comment|// Example: https://repo1.maven.org/maven2/net/jini/jsk-platform/2.1/jsk-platform-2.1.pom
name|ModuleRevisionId
name|mRevId
init|=
name|ivyModuleDescriptor
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|mRevId
operator|!=
literal|null
operator|)
operator|&&
name|mRevId
operator|.
name|getModuleId
argument_list|()
operator|.
name|equals
argument_list|(
name|moduleRevId
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// experimentation shows the following, excluded modules are
comment|// inherited from parent POMs if either of the following is true:
comment|// the<exclusions> element is missing or the<exclusions> element
comment|// is present, but empty.
name|List
argument_list|<
name|ModuleId
argument_list|>
name|excluded
init|=
name|dep
operator|.
name|getExcludedModules
argument_list|()
decl_stmt|;
if|if
condition|(
name|excluded
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|excluded
operator|=
name|getDependencyMgtExclusions
argument_list|(
name|ivyModuleDescriptor
argument_list|,
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|excludeAllTransitiveDeps
init|=
name|shouldExcludeAllTransitiveDeps
argument_list|(
name|excluded
argument_list|)
decl_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|PomDependencyDescriptor
argument_list|(
name|dep
argument_list|,
name|ivyModuleDescriptor
argument_list|,
name|moduleRevId
argument_list|,
operator|!
name|excludeAllTransitiveDeps
argument_list|)
decl_stmt|;
name|scope
operator|=
operator|(
name|scope
operator|==
literal|null
operator|||
name|scope
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
name|getDefaultScope
argument_list|(
name|dep
argument_list|)
else|:
name|scope
expr_stmt|;
name|ConfMapper
name|mapping
init|=
name|MAVEN2_CONF_MAPPING
operator|.
name|get
argument_list|(
name|scope
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|addMappingConfs
argument_list|(
name|dd
argument_list|,
name|dep
operator|.
name|isOptional
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraAtt
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|dep
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
operator|(
name|dep
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|!
literal|"jar"
operator|.
name|equals
argument_list|(
name|dep
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|String
name|type
init|=
literal|"jar"
decl_stmt|;
if|if
condition|(
name|dep
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|dep
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
name|String
name|ext
init|=
name|type
decl_stmt|;
comment|// if type is 'test-jar', the extension is 'jar' and the classifier is 'tests'
comment|// Cfr. http://maven.apache.org/guides/mini/guide-attached-tests.html
if|if
condition|(
literal|"test-jar"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|ext
operator|=
literal|"jar"
expr_stmt|;
name|extraAtt
operator|.
name|put
argument_list|(
literal|"m:classifier"
argument_list|,
literal|"tests"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|JAR_PACKAGINGS
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|ext
operator|=
literal|"jar"
expr_stmt|;
block|}
comment|// we deal with classifiers by setting an extra attribute and forcing the
comment|// dependency to assume such an artifact is published
if|if
condition|(
name|dep
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extraAtt
operator|.
name|put
argument_list|(
literal|"m:classifier"
argument_list|,
name|dep
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DefaultDependencyArtifactDescriptor
name|depArtifact
init|=
operator|new
name|DefaultDependencyArtifactDescriptor
argument_list|(
name|dd
argument_list|,
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|,
name|ext
argument_list|,
literal|null
argument_list|,
name|extraAtt
argument_list|)
decl_stmt|;
comment|// here we have to assume a type and ext for the artifact, so this is a limitation
comment|// compared to how m2 behave with classifiers
name|String
name|optionalizedScope
init|=
name|dep
operator|.
name|isOptional
argument_list|()
condition|?
literal|"optional"
else|:
name|scope
decl_stmt|;
name|dd
operator|.
name|addDependencyArtifact
argument_list|(
name|optionalizedScope
argument_list|,
name|depArtifact
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ModuleId
name|excludedModule
range|:
name|excluded
control|)
block|{
comment|// This represents exclude all transitive dependencies, which we have already taken
comment|// in account while defining the DefaultDependencyDescriptor itself
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|excludedModule
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|&&
literal|"*"
operator|.
name|equals
argument_list|(
name|excludedModule
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|confs
init|=
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|confs
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|dd
operator|.
name|addExcludeRule
argument_list|(
name|confs
index|[
name|k
index|]
argument_list|,
operator|new
name|DefaultExcludeRule
argument_list|(
operator|new
name|ArtifactId
argument_list|(
name|excludedModule
argument_list|,
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
argument_list|,
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
argument_list|,
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
argument_list|)
argument_list|,
name|ExactPatternMatcher
operator|.
name|INSTANCE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ivyModuleDescriptor
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|shouldExcludeAllTransitiveDeps
parameter_list|(
specifier|final
name|List
argument_list|<
name|ModuleId
argument_list|>
name|exclusions
parameter_list|)
block|{
if|if
condition|(
name|exclusions
operator|==
literal|null
operator|||
name|exclusions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
specifier|final
name|ModuleId
name|exclusion
range|:
name|exclusions
control|)
block|{
if|if
condition|(
name|exclusion
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|exclusion
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|&&
literal|"*"
operator|.
name|equals
argument_list|(
name|exclusion
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|addDependency
parameter_list|(
name|DependencyDescriptor
name|descriptor
parameter_list|)
block|{
comment|// Some POMs depend on themselves through their parent pom, don't add this dependency
comment|// since Ivy doesn't allow this!
comment|// Example:
comment|// https://repo1.maven.org/maven2/com/atomikos/atomikos-util/3.6.4/atomikos-util-3.6.4.pom
name|ModuleId
name|dependencyId
init|=
name|descriptor
operator|.
name|getDependencyId
argument_list|()
decl_stmt|;
name|ModuleRevisionId
name|mRevId
init|=
name|ivyModuleDescriptor
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|mRevId
operator|!=
literal|null
operator|)
operator|&&
name|mRevId
operator|.
name|getModuleId
argument_list|()
operator|.
name|equals
argument_list|(
name|dependencyId
argument_list|)
condition|)
block|{
return|return;
block|}
name|ivyModuleDescriptor
operator|.
name|addDependency
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDependencyMgt
parameter_list|(
name|PomDependencyMgt
name|dep
parameter_list|)
block|{
name|ivyModuleDescriptor
operator|.
name|addDependencyManagement
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|getDependencyMgtExtraInfoKeyForVersion
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
name|overwriteExtraInfoIfExists
argument_list|(
name|key
argument_list|,
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dep
operator|.
name|getScope
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|scopeKey
init|=
name|getDependencyMgtExtraInfoKeyForScope
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
name|overwriteExtraInfoIfExists
argument_list|(
name|scopeKey
argument_list|,
name|dep
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dep
operator|.
name|getExcludedModules
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|exclusionPrefix
init|=
name|getDependencyMgtExtraInfoPrefixForExclusion
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ModuleId
name|excludedModule
range|:
name|dep
operator|.
name|getExcludedModules
argument_list|()
control|)
block|{
name|overwriteExtraInfoIfExists
argument_list|(
name|exclusionPrefix
operator|+
name|index
argument_list|,
name|excludedModule
operator|.
name|getOrganisation
argument_list|()
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|excludedModule
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|1
expr_stmt|;
block|}
block|}
comment|// dependency management info is also used for version mediation of transitive dependencies
name|ivyModuleDescriptor
operator|.
name|addDependencyDescriptorMediator
argument_list|(
name|ModuleId
operator|.
name|newInstance
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|,
name|ExactPatternMatcher
operator|.
name|INSTANCE
argument_list|,
operator|new
name|OverrideDependencyDescriptorMediator
argument_list|(
literal|null
argument_list|,
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPlugin
parameter_list|(
name|PomDependencyMgt
name|plugin
parameter_list|)
block|{
name|String
name|pluginValue
init|=
name|plugin
operator|.
name|getGroupId
argument_list|()
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|plugin
operator|.
name|getArtifactId
argument_list|()
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|plugin
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|ExtraInfoHolder
name|extraInfoByTagName
init|=
name|ivyModuleDescriptor
operator|.
name|getExtraInfoByTagName
argument_list|(
literal|"m:maven.plugins"
argument_list|)
decl_stmt|;
if|if
condition|(
name|extraInfoByTagName
operator|==
literal|null
condition|)
block|{
name|extraInfoByTagName
operator|=
operator|new
name|ExtraInfoHolder
argument_list|()
expr_stmt|;
name|extraInfoByTagName
operator|.
name|setName
argument_list|(
literal|"m:maven.plugins"
argument_list|)
expr_stmt|;
name|ivyModuleDescriptor
operator|.
name|addExtraInfo
argument_list|(
name|extraInfoByTagName
argument_list|)
expr_stmt|;
block|}
name|String
name|pluginExtraInfo
init|=
name|extraInfoByTagName
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|pluginExtraInfo
operator|==
literal|null
condition|)
block|{
name|pluginExtraInfo
operator|=
name|pluginValue
expr_stmt|;
block|}
else|else
block|{
name|pluginExtraInfo
operator|=
name|pluginExtraInfo
operator|+
literal|"|"
operator|+
name|pluginValue
expr_stmt|;
block|}
name|extraInfoByTagName
operator|.
name|setContent
argument_list|(
name|pluginExtraInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|PomDependencyMgt
argument_list|>
name|getPlugins
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
name|List
argument_list|<
name|PomDependencyMgt
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|PomDependencyMgt
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|plugins
init|=
name|md
operator|.
name|getExtraInfoContentByTagName
argument_list|(
literal|"m:maven.plugins"
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugins
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|PomDependencyMgt
argument_list|>
argument_list|()
return|;
block|}
name|String
index|[]
name|pluginsArray
init|=
name|plugins
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pluginsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|parts
init|=
name|pluginsArray
index|[
name|i
index|]
operator|.
name|split
argument_list|(
name|EXTRA_INFO_DELIMITER
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|PomPluginElement
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
class|class
name|PomPluginElement
implements|implements
name|PomDependencyMgt
block|{
specifier|private
name|String
name|groupId
decl_stmt|;
specifier|private
name|String
name|artifactId
decl_stmt|;
specifier|private
name|String
name|version
decl_stmt|;
specifier|public
name|PomPluginElement
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
name|this
operator|.
name|artifactId
operator|=
name|artifactId
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
return|return
name|groupId
return|;
block|}
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
return|return
name|artifactId
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|String
name|getScope
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|ModuleId
argument_list|>
name|getExcludedModules
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
comment|// probably not used?
block|}
block|}
specifier|private
name|String
name|getDefaultVersion
parameter_list|(
name|PomDependencyData
name|dep
parameter_list|)
block|{
name|ModuleId
name|moduleId
init|=
name|ModuleId
operator|.
name|newInstance
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ivyModuleDescriptor
operator|.
name|getDependencyManagementMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|moduleId
argument_list|)
condition|)
block|{
return|return
name|ivyModuleDescriptor
operator|.
name|getDependencyManagementMap
argument_list|()
operator|.
name|get
argument_list|(
name|moduleId
argument_list|)
operator|.
name|getVersion
argument_list|()
return|;
block|}
name|String
name|key
init|=
name|getDependencyMgtExtraInfoKeyForVersion
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ivyModuleDescriptor
operator|.
name|getExtraInfoContentByTagName
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
name|String
name|getDefaultScope
parameter_list|(
name|PomDependencyData
name|dep
parameter_list|)
block|{
name|String
name|result
decl_stmt|;
name|ModuleId
name|moduleId
init|=
name|ModuleId
operator|.
name|newInstance
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ivyModuleDescriptor
operator|.
name|getDependencyManagementMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|moduleId
argument_list|)
condition|)
block|{
name|result
operator|=
name|ivyModuleDescriptor
operator|.
name|getDependencyManagementMap
argument_list|()
operator|.
name|get
argument_list|(
name|moduleId
argument_list|)
operator|.
name|getScope
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|key
init|=
name|getDependencyMgtExtraInfoKeyForScope
argument_list|(
name|dep
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dep
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|ivyModuleDescriptor
operator|.
name|getExtraInfoContentByTagName
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|result
operator|==
literal|null
operator|)
operator|||
operator|!
name|MAVEN2_CONF_MAPPING
operator|.
name|containsKey
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
literal|"compile"
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|getDependencyMgtExtraInfoKeyForVersion
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifaceId
parameter_list|)
block|{
return|return
name|DEPENDENCY_MANAGEMENT
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|groupId
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|artifaceId
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
literal|"version"
return|;
block|}
specifier|private
specifier|static
name|String
name|getDependencyMgtExtraInfoKeyForScope
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifaceId
parameter_list|)
block|{
return|return
name|DEPENDENCY_MANAGEMENT
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|groupId
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|artifaceId
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
literal|"scope"
return|;
block|}
specifier|private
specifier|static
name|String
name|getPropertyExtraInfoKey
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
name|PROPERTIES
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|propertyName
return|;
block|}
specifier|private
specifier|static
name|String
name|getDependencyMgtExtraInfoPrefixForExclusion
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifaceId
parameter_list|)
block|{
return|return
name|DEPENDENCY_MANAGEMENT
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|groupId
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|artifaceId
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
literal|"exclusion_"
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|ModuleId
argument_list|>
name|getDependencyMgtExclusions
parameter_list|(
name|ModuleDescriptor
name|descriptor
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|)
block|{
if|if
condition|(
name|descriptor
operator|instanceof
name|PomModuleDescriptor
condition|)
block|{
name|PomDependencyMgt
name|dependencyMgt
init|=
operator|(
operator|(
name|PomModuleDescriptor
operator|)
name|descriptor
operator|)
operator|.
name|getDependencyManagementMap
argument_list|()
operator|.
name|get
argument_list|(
name|ModuleId
operator|.
name|newInstance
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependencyMgt
operator|!=
literal|null
condition|)
block|{
return|return
name|dependencyMgt
operator|.
name|getExcludedModules
argument_list|()
return|;
block|}
block|}
name|String
name|exclusionPrefix
init|=
name|getDependencyMgtExtraInfoPrefixForExclusion
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ModuleId
argument_list|>
name|exclusionIds
init|=
operator|new
name|LinkedList
argument_list|<
name|ModuleId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExtraInfoHolder
name|extraInfoHolder
range|:
name|descriptor
operator|.
name|getExtraInfos
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|extraInfoHolder
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|exclusionPrefix
argument_list|)
condition|)
block|{
name|String
name|fullExclusion
init|=
name|extraInfoHolder
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|String
index|[]
name|exclusionParts
init|=
name|fullExclusion
operator|.
name|split
argument_list|(
name|EXTRA_INFO_DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|exclusionParts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
name|WRONG_NUMBER_OF_PARTS_MSG
operator|+
name|exclusionParts
operator|.
name|length
operator|+
literal|" : "
operator|+
name|fullExclusion
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|exclusionIds
operator|.
name|add
argument_list|(
name|ModuleId
operator|.
name|newInstance
argument_list|(
name|exclusionParts
index|[
literal|0
index|]
argument_list|,
name|exclusionParts
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exclusionIds
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|ModuleId
argument_list|,
name|String
argument_list|>
name|getDependencyManagementMap
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
name|Map
argument_list|<
name|ModuleId
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|ModuleId
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|md
operator|instanceof
name|PomModuleDescriptor
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ModuleId
argument_list|,
name|PomDependencyMgt
argument_list|>
name|e
range|:
operator|(
operator|(
name|PomModuleDescriptor
operator|)
name|md
operator|)
operator|.
name|getDependencyManagementMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|PomDependencyMgt
name|dependencyMgt
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|dependencyMgt
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|ExtraInfoHolder
name|extraInfoHolder
range|:
name|md
operator|.
name|getExtraInfos
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|extraInfoHolder
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|key
operator|)
operator|.
name|startsWith
argument_list|(
name|DEPENDENCY_MANAGEMENT
argument_list|)
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|key
operator|.
name|split
argument_list|(
name|EXTRA_INFO_DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
name|DEPENDENCY_MANAGEMENT_KEY_PARTS_COUNT
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"what seem to be a dependency management extra info "
operator|+
literal|"doesn't match expected pattern: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|put
argument_list|(
name|ModuleId
operator|.
name|newInstance
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|extraInfoHolder
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|PomDependencyMgt
argument_list|>
name|getDependencyManagements
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
name|List
argument_list|<
name|PomDependencyMgt
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|PomDependencyMgt
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|md
operator|instanceof
name|PomModuleDescriptor
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|PomModuleDescriptor
operator|)
name|md
operator|)
operator|.
name|getDependencyManagementMap
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ExtraInfoHolder
name|extraInfoHolder
range|:
name|md
operator|.
name|getExtraInfos
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|extraInfoHolder
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|DEPENDENCY_MANAGEMENT
argument_list|)
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|key
operator|.
name|split
argument_list|(
name|EXTRA_INFO_DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
name|DEPENDENCY_MANAGEMENT_KEY_PARTS_COUNT
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"what seem to be a dependency management extra info "
operator|+
literal|"doesn't match expected pattern: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|versionKey
init|=
name|DEPENDENCY_MANAGEMENT
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|parts
index|[
literal|1
index|]
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|parts
index|[
literal|2
index|]
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
literal|"version"
decl_stmt|;
name|String
name|scopeKey
init|=
name|DEPENDENCY_MANAGEMENT
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|parts
index|[
literal|1
index|]
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
name|parts
index|[
literal|2
index|]
operator|+
name|EXTRA_INFO_DELIMITER
operator|+
literal|"scope"
decl_stmt|;
name|String
name|version
init|=
name|md
operator|.
name|getExtraInfoContentByTagName
argument_list|(
name|versionKey
argument_list|)
decl_stmt|;
name|String
name|scope
init|=
name|md
operator|.
name|getExtraInfoContentByTagName
argument_list|(
name|scopeKey
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ModuleId
argument_list|>
name|exclusions
init|=
name|getDependencyMgtExclusions
argument_list|(
name|md
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|DefaultPomDependencyMgt
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|,
name|version
argument_list|,
name|scope
argument_list|,
name|exclusions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|addExtraInfos
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraAttributes
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|extraAttributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addExtraInfo
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addExtraInfo
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|ivyModuleDescriptor
operator|.
name|getExtraInfoByTagName
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ivyModuleDescriptor
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExtraInfoHolder
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|overwriteExtraInfoIfExists
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ExtraInfoHolder
name|extraInfoHolder
range|:
name|ivyModuleDescriptor
operator|.
name|getExtraInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|extraInfoHolder
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|extraInfoHolder
operator|.
name|setContent
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|ivyModuleDescriptor
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExtraInfoHolder
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addExtraInfos
parameter_list|(
name|List
argument_list|<
name|ExtraInfoHolder
argument_list|>
name|extraInfosHolder
parameter_list|)
block|{
for|for
control|(
name|ExtraInfoHolder
name|extraInfoHolder
range|:
name|extraInfosHolder
control|)
block|{
name|addExtraInfo
argument_list|(
name|extraInfoHolder
operator|.
name|getName
argument_list|()
argument_list|,
name|extraInfoHolder
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extractPomProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraInfo
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|r
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraInfoEntry
range|:
name|extraInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|extraInfoEntry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PROPERTIES
argument_list|)
condition|)
block|{
name|String
name|prop
init|=
name|extraInfoEntry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|PROPERTIES
operator|.
name|length
argument_list|()
operator|+
name|EXTRA_INFO_DELIMITER
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|put
argument_list|(
name|prop
argument_list|,
name|extraInfoEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extractPomProperties
parameter_list|(
name|List
argument_list|<
name|ExtraInfoHolder
argument_list|>
name|extraInfos
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|r
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExtraInfoHolder
name|extraInfoHolder
range|:
name|extraInfos
control|)
block|{
if|if
condition|(
operator|(
name|extraInfoHolder
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|startsWith
argument_list|(
name|PROPERTIES
argument_list|)
condition|)
block|{
name|String
name|prop
init|=
operator|(
name|extraInfoHolder
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|substring
argument_list|(
name|PROPERTIES
operator|.
name|length
argument_list|()
operator|+
name|EXTRA_INFO_DELIMITER
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|put
argument_list|(
name|prop
argument_list|,
name|extraInfoHolder
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
specifier|public
name|void
name|addProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|addExtraInfo
argument_list|(
name|getPropertyExtraInfoKey
argument_list|(
name|propertyName
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Artifact
name|getMainArtifact
parameter_list|()
block|{
return|return
name|mainArtifact
return|;
block|}
specifier|public
name|Artifact
name|getSourceArtifact
parameter_list|()
block|{
return|return
operator|new
name|MDArtifact
argument_list|(
name|ivyModuleDescriptor
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|,
literal|"source"
argument_list|,
literal|"jar"
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"m:classifier"
argument_list|,
literal|"sources"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Artifact
name|getSrcArtifact
parameter_list|()
block|{
return|return
operator|new
name|MDArtifact
argument_list|(
name|ivyModuleDescriptor
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|,
literal|"source"
argument_list|,
literal|"jar"
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"m:classifier"
argument_list|,
literal|"src"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Artifact
name|getJavadocArtifact
parameter_list|()
block|{
return|return
operator|new
name|MDArtifact
argument_list|(
name|ivyModuleDescriptor
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|,
literal|"javadoc"
argument_list|,
literal|"jar"
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"m:classifier"
argument_list|,
literal|"javadoc"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|addSourceArtifact
parameter_list|()
block|{
name|ivyModuleDescriptor
operator|.
name|addArtifact
argument_list|(
literal|"sources"
argument_list|,
name|getSourceArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSrcArtifact
parameter_list|()
block|{
name|ivyModuleDescriptor
operator|.
name|addArtifact
argument_list|(
literal|"sources"
argument_list|,
name|getSrcArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addJavadocArtifact
parameter_list|()
block|{
name|ivyModuleDescriptor
operator|.
name|addArtifact
argument_list|(
literal|"javadoc"
argument_list|,
name|getJavadocArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *<code>DependencyDescriptor</code> that provides access to the original      *<code>PomDependencyData</code>.      */
specifier|public
specifier|static
class|class
name|PomDependencyDescriptor
extends|extends
name|DefaultDependencyDescriptor
block|{
specifier|private
specifier|final
name|PomDependencyData
name|pomDependencyData
decl_stmt|;
specifier|private
name|PomDependencyDescriptor
parameter_list|(
name|PomDependencyData
name|pomDependencyData
parameter_list|,
name|ModuleDescriptor
name|moduleDescriptor
parameter_list|,
name|ModuleRevisionId
name|revisionId
parameter_list|,
specifier|final
name|boolean
name|transitive
parameter_list|)
block|{
name|super
argument_list|(
name|moduleDescriptor
argument_list|,
name|revisionId
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|transitive
argument_list|)
expr_stmt|;
name|this
operator|.
name|pomDependencyData
operator|=
name|pomDependencyData
expr_stmt|;
block|}
comment|/**          * Get PomDependencyData.          *           * @return PomDependencyData          */
specifier|public
name|PomDependencyData
name|getPomDependencyData
parameter_list|()
block|{
return|return
name|pomDependencyData
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PomModuleDescriptor
extends|extends
name|DefaultModuleDescriptor
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|ModuleId
argument_list|,
name|PomDependencyMgt
argument_list|>
name|dependencyManagementMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|ModuleId
argument_list|,
name|PomDependencyMgt
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|PomModuleDescriptor
parameter_list|(
name|ModuleDescriptorParser
name|parser
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDependencyManagement
parameter_list|(
name|PomDependencyMgt
name|dependencyMgt
parameter_list|)
block|{
name|dependencyManagementMap
operator|.
name|put
argument_list|(
name|ModuleId
operator|.
name|newInstance
argument_list|(
name|dependencyMgt
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dependencyMgt
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|,
name|dependencyMgt
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|ModuleId
argument_list|,
name|PomDependencyMgt
argument_list|>
name|getDependencyManagementMap
parameter_list|()
block|{
return|return
name|dependencyManagementMap
return|;
block|}
block|}
block|}
end_class

end_unit

