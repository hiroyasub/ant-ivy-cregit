begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|m2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|ConfigurationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|PomModuleDescriptorWriter
block|{
specifier|private
name|PomModuleDescriptorWriter
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|File
name|output
parameter_list|,
name|PomWriterOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|output
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|output
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|getLicenseHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|options
operator|.
name|getLicenseHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|isPrintIvyInfo
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<!--"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   Apache Maven 2 POM generated by Apache Ivy"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|Ivy
operator|.
name|getIvyHomeURL
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"   Apache Ivy version: "
operator|+
name|Ivy
operator|.
name|getIvyVersion
argument_list|()
operator|+
literal|" "
operator|+
name|Ivy
operator|.
name|getIvyDate
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"-->"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<project xmlns=\"http://maven.apache.org/POM/4.0.0\" "
operator|+
literal|"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 "
operator|+
literal|"http://maven.apache.org/maven-v4_0_0.xsd\">\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<modelVersion>4.0.0</modelVersion>"
argument_list|)
expr_stmt|;
name|printModuleId
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|printDependencies
argument_list|(
name|md
argument_list|,
name|out
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</project>"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printModuleId
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|ModuleRevisionId
name|mrid
init|=
name|md
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<groupId>"
operator|+
name|mrid
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"</groupId>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<artifactId>"
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|"</artifactId>"
argument_list|)
expr_stmt|;
name|String
name|type
decl_stmt|;
name|Artifact
name|artifact
init|=
name|findArtifact
argument_list|(
name|md
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifact
operator|==
literal|null
condition|)
block|{
comment|// no suitable artifact found, default to 'pom'
name|type
operator|=
literal|"pom"
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|artifact
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<packaging>"
operator|+
name|type
operator|+
literal|"</packaging>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mrid
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<version>"
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
operator|+
literal|"</version>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|md
operator|.
name|getHomePage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<url>"
operator|+
name|md
operator|.
name|getHomePage
argument_list|()
operator|+
literal|"</url>"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the first artifact with the correct name and without a classifier.      */
specifier|private
specifier|static
name|Artifact
name|findArtifact
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getAllArtifacts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|artifacts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|artifacts
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|artifacts
index|[
name|i
index|]
operator|.
name|getAttribute
argument_list|(
literal|"classifier"
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|artifacts
index|[
name|i
index|]
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|printDependencies
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|PomWriterOptions
name|options
parameter_list|)
block|{
name|DependencyDescriptor
index|[]
name|dds
init|=
name|getDependencies
argument_list|(
name|md
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|dds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ConfigurationScopeMapping
name|mapping
init|=
name|options
operator|.
name|getMapping
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<dependencies>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ModuleRevisionId
name|mrid
init|=
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<dependency>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<groupId>"
operator|+
name|mrid
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"</groupId>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<artifactId>"
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|"</artifactId>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<version>"
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
operator|+
literal|"</version>"
argument_list|)
expr_stmt|;
name|String
name|scope
init|=
name|mapping
operator|.
name|getScope
argument_list|(
name|dds
index|[
name|i
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<scope>"
operator|+
name|scope
operator|+
literal|"</scope>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapping
operator|.
name|isOptional
argument_list|(
name|dds
index|[
name|i
index|]
operator|.
name|getModuleConfigurations
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<optional>true</optional>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</dependency>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</dependencies>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|DependencyDescriptor
index|[]
name|getDependencies
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|PomWriterOptions
name|options
parameter_list|)
block|{
name|String
index|[]
name|confs
init|=
name|ConfigurationUtils
operator|.
name|replaceWildcards
argument_list|(
name|options
operator|.
name|getConfs
argument_list|()
argument_list|,
name|md
argument_list|)
decl_stmt|;
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|DependencyDescriptor
index|[]
name|dds
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|depConfs
init|=
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyConfigurations
argument_list|(
name|confs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|depConfs
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|depConfs
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|dds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|DependencyDescriptor
index|[]
operator|)
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|DependencyDescriptor
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
name|ConfigurationScopeMapping
name|DEFAULT_MAPPING
init|=
operator|new
name|ConfigurationScopeMapping
argument_list|(
operator|new
name|HashMap
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"compile, runtime"
argument_list|,
literal|"compile"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"runtime"
argument_list|,
literal|"runtime"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"provided"
argument_list|,
literal|"provided"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"system"
argument_list|,
literal|"system"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|ConfigurationScopeMapping
block|{
specifier|private
name|Map
comment|/*<String,String>*/
name|scopes
decl_stmt|;
specifier|public
name|ConfigurationScopeMapping
parameter_list|(
name|Map
comment|/*<String,String>*/
name|scopesMapping
parameter_list|)
block|{
name|this
operator|.
name|scopes
operator|=
operator|new
name|HashMap
argument_list|(
name|scopesMapping
argument_list|)
expr_stmt|;
block|}
comment|/**          * Returns the scope mapped to the given configuration array.          *           * @param confs the configurations for which the scope should be returned          * @return the scope to which the conf is mapped          */
specifier|public
name|String
name|getScope
parameter_list|(
name|String
index|[]
name|confs
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|scopes
operator|.
name|get
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|confs
argument_list|,
literal|", "
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|(
name|String
index|[]
name|confs
parameter_list|)
block|{
return|return
name|getScope
argument_list|(
name|confs
argument_list|)
operator|==
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

