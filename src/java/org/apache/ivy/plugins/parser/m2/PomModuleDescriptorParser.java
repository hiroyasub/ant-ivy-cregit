begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|m2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyArtifactDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultExcludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
operator|.
name|Visibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ArtifactId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|ExactPatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|AbstractModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * A parser for Maven 2 POM.  *<p>  * The configurations used in the generated module descriptor mimics the behavior defined by maven 2  * scopes, as documented here:<br/>  * http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PomModuleDescriptorParser
extends|extends
name|AbstractModuleDescriptorParser
block|{
specifier|public
specifier|static
specifier|final
name|Configuration
index|[]
name|MAVEN2_CONFIGURATIONS
init|=
operator|new
name|Configuration
index|[]
block|{
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"runtime dependencies and master artifact can be used with this conf"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"runtime"
block|,
literal|"master"
block|}
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"master"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"contains only the artifact published by this module itself, "
operator|+
literal|"with no transitive dependencies"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"compile"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"this is the default scope, used if none is specified. "
operator|+
literal|"Compile dependencies are available in all classpaths."
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"provided"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"this is much like compile, but indicates you expect the JDK or a container "
operator|+
literal|"to provide it. "
operator|+
literal|"It is only available on the compilation classpath, and is not transitive."
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"runtime"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"this scope indicates that the dependency is not required for compilation, "
operator|+
literal|"but is for execution. It is in the runtime and test classpaths, "
operator|+
literal|"but not the compile classpath."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"compile"
block|}
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"test"
argument_list|,
name|Visibility
operator|.
name|PRIVATE
argument_list|,
literal|"this scope indicates that the dependency is not required for normal use of "
operator|+
literal|"the application, and is only available for the test compilation and "
operator|+
literal|"execution phases."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"runtime"
block|}
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,
operator|new
name|Configuration
argument_list|(
literal|"system"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"this scope is similar to provided except that you have to provide the JAR "
operator|+
literal|"which contains it explicitly. The artifact is always available and is not "
operator|+
literal|"looked up in a repository."
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
block|,                     }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Configuration
name|OPTIONAL_CONFIGURATION
init|=
operator|new
name|Configuration
argument_list|(
literal|"optional"
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|"contains all optional dependencies"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
name|MAVEN2_CONF_MAPPING
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
static|static
block|{
name|MAVEN2_CONF_MAPPING
operator|.
name|put
argument_list|(
literal|"compile"
argument_list|,
literal|"compile->@(*),master(*);runtime->@(*)"
argument_list|)
expr_stmt|;
name|MAVEN2_CONF_MAPPING
operator|.
name|put
argument_list|(
literal|"provided"
argument_list|,
literal|"provided->compile(*),provided(*),runtime(*),master(*)"
argument_list|)
expr_stmt|;
name|MAVEN2_CONF_MAPPING
operator|.
name|put
argument_list|(
literal|"runtime"
argument_list|,
literal|"runtime->compile(*),runtime(*),master(*)"
argument_list|)
expr_stmt|;
name|MAVEN2_CONF_MAPPING
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"test->compile(*),runtime(*),master(*)"
argument_list|)
expr_stmt|;
name|MAVEN2_CONF_MAPPING
operator|.
name|put
argument_list|(
literal|"system"
argument_list|,
literal|"system->master(*)"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|Parser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JAR_EXTENSION
init|=
literal|"jar"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEPENDENCY_MANAGEMENT
init|=
literal|"dependency.management"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEPENDENCY_MANAGEMENT_DELIMITER
init|=
literal|"__"
decl_stmt|;
specifier|private
name|ParserSettings
name|settings
decl_stmt|;
specifier|private
name|Stack
name|contextStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|String
name|organisation
decl_stmt|;
specifier|private
name|String
name|module
decl_stmt|;
specifier|private
name|String
name|revision
decl_stmt|;
specifier|private
name|String
name|scope
decl_stmt|;
specifier|private
name|String
name|classifier
decl_stmt|;
specifier|private
name|String
name|type
decl_stmt|;
specifier|private
name|String
name|ext
decl_stmt|;
specifier|private
name|boolean
name|optional
init|=
literal|false
decl_stmt|;
specifier|private
name|List
name|exclusions
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|DefaultDependencyDescriptor
name|dd
decl_stmt|;
specifier|private
name|Map
name|properties
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|private
name|String
name|relocationOrganisation
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|relocationModule
decl_stmt|;
specifier|private
name|String
name|relocationRevision
decl_stmt|;
specifier|private
name|String
name|dmGroupId
decl_stmt|;
specifier|private
name|String
name|dmArtifactId
decl_stmt|;
specifier|private
name|String
name|dmVersion
decl_stmt|;
specifier|public
name|Parser
parameter_list|(
name|ModuleDescriptorParser
name|parser
parameter_list|,
name|Resource
name|res
parameter_list|,
name|ParserSettings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|setResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|md
operator|.
name|setResolvedPublicationDate
argument_list|(
operator|new
name|Date
argument_list|(
name|res
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAVEN2_CONFIGURATIONS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|md
operator|.
name|addConfiguration
argument_list|(
name|MAVEN2_CONFIGURATIONS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|contextStack
operator|.
name|push
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|String
name|context
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"optional"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|optional
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
literal|"project/dependencies/dependency/exclusions"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
condition|)
block|{
if|if
condition|(
name|dd
operator|==
literal|null
condition|)
block|{
comment|// stores dd now cause exclusions will override org and module
name|dd
operator|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|md
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
name|revision
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|organisation
operator|=
literal|null
expr_stmt|;
name|module
operator|=
literal|null
expr_stmt|;
name|revision
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
literal|"project/dependencies"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
operator|||
literal|"project/profiles"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
operator|||
literal|"project/build"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|fillMrid
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|fillMrid
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|organisation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"no groupId found in pom"
argument_list|)
throw|;
block|}
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"no artifactId found in pom"
argument_list|)
throw|;
block|}
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
name|revision
operator|=
literal|"SNAPSHOT"
expr_stmt|;
block|}
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
name|revision
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"project.groupId"
argument_list|,
name|organisation
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"pom.groupId"
argument_list|,
name|organisation
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"project.artifactId"
argument_list|,
name|module
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"pom.artifactId"
argument_list|,
name|module
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"project.version"
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"pom.version"
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|revision
argument_list|)
expr_stmt|;
name|md
operator|.
name|setModuleRevisionId
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|JAR_EXTENSION
expr_stmt|;
name|ext
operator|=
name|JAR_EXTENSION
expr_stmt|;
block|}
name|md
operator|.
name|setModuleArtifact
argument_list|(
name|DefaultArtifact
operator|.
name|newPomArtifact
argument_list|(
name|mrid
argument_list|,
name|getDefaultPubDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|addArtifact
argument_list|(
literal|"master"
argument_list|,
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
name|getDefaultPubDate
argument_list|()
argument_list|,
name|module
argument_list|,
name|type
argument_list|,
name|ext
argument_list|)
argument_list|)
expr_stmt|;
name|organisation
operator|=
literal|null
expr_stmt|;
name|module
operator|=
literal|null
expr_stmt|;
name|revision
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|processTextContent
argument_list|()
expr_stmt|;
name|String
name|context
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|==
literal|null
operator|&&
operator|(
literal|"project"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
operator|)
condition|)
block|{
name|fillMrid
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"project/parent/version"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"parent.version"
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"project/parent/groupId"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"parent.groupId"
argument_list|,
name|organisation
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/parent"
argument_list|)
condition|)
block|{
name|parseParentPom
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|(
operator|(
name|organisation
operator|!=
literal|null
operator|&&
name|module
operator|!=
literal|null
operator|)
operator|||
name|dd
operator|!=
literal|null
operator|)
operator|&&
literal|"project/dependencies/dependency"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
condition|)
block|{
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
comment|// if the revision is null, see if we can get it from the dependency management
name|String
name|key
init|=
name|DEPENDENCY_MANAGEMENT
operator|+
name|DEPENDENCY_MANAGEMENT_DELIMITER
operator|+
name|organisation
operator|+
name|DEPENDENCY_MANAGEMENT_DELIMITER
operator|+
name|module
decl_stmt|;
name|revision
operator|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dd
operator|==
literal|null
condition|)
block|{
comment|// if we still don't have revision, then we are done.
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|dd
operator|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|md
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
name|revision
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|scope
operator|=
name|scope
operator|==
literal|null
condition|?
literal|"compile"
else|:
name|scope
expr_stmt|;
if|if
condition|(
name|optional
operator|&&
literal|"compile"
operator|.
name|equals
argument_list|(
name|scope
argument_list|)
condition|)
block|{
name|scope
operator|=
literal|"runtime"
expr_stmt|;
block|}
name|String
name|mapping
init|=
operator|(
name|String
operator|)
name|MAVEN2_CONF_MAPPING
operator|.
name|get
argument_list|(
name|scope
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"unknown scope "
operator|+
name|scope
operator|+
literal|" in "
operator|+
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|=
operator|(
name|String
operator|)
name|MAVEN2_CONF_MAPPING
operator|.
name|get
argument_list|(
literal|"compile"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|optional
condition|)
block|{
name|mapping
operator|=
name|mapping
operator|.
name|replaceAll
argument_list|(
name|scope
operator|+
literal|"\\-\\>"
argument_list|,
literal|"optional->"
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|.
name|getConfiguration
argument_list|(
literal|"optional"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|md
operator|.
name|addConfiguration
argument_list|(
name|OPTIONAL_CONFIGURATION
argument_list|)
expr_stmt|;
block|}
block|}
name|parseDepsConfs
argument_list|(
name|mapping
argument_list|,
name|dd
argument_list|)
expr_stmt|;
if|if
condition|(
name|classifier
operator|!=
literal|null
condition|)
block|{
comment|// we deal with classifiers by setting an extra attribute and forcing the
comment|// dependency to assume such an artifact is published
name|Map
name|extraAtt
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|extraAtt
operator|.
name|put
argument_list|(
literal|"classifier"
argument_list|,
name|classifier
argument_list|)
expr_stmt|;
name|String
index|[]
name|confs
init|=
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dd
operator|.
name|addDependencyArtifact
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
operator|new
name|DefaultDependencyArtifactDescriptor
argument_list|(
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|JAR_EXTENSION
argument_list|,
name|JAR_EXTENSION
argument_list|,
comment|/*                                      * here we have to assume a type and ext for the artifact, so                                      * this is a limitation compared to how m2 behave with                                      * classifiers                                      */
literal|null
argument_list|,
name|extraAtt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|exclusions
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleId
name|mid
init|=
operator|(
name|ModuleId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|confs
init|=
name|dd
operator|.
name|getModuleConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dd
operator|.
name|addExcludeRule
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
operator|new
name|DefaultExcludeRule
argument_list|(
operator|new
name|ArtifactId
argument_list|(
name|mid
argument_list|,
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
argument_list|,
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
argument_list|,
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
argument_list|)
argument_list|,
name|ExactPatternMatcher
operator|.
name|INSTANCE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|md
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|dd
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|organisation
operator|!=
literal|null
operator|&&
name|module
operator|!=
literal|null
operator|)
operator|&&
literal|"project/dependencies/dependency/exclusions/exclusion"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|exclusions
operator|.
name|add
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|)
argument_list|)
expr_stmt|;
name|organisation
operator|=
literal|null
expr_stmt|;
name|module
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
literal|"project/distributionManagement/relocation"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
condition|)
block|{
if|if
condition|(
name|relocationOrganisation
operator|==
literal|null
condition|)
block|{
name|relocationOrganisation
operator|=
name|organisation
expr_stmt|;
block|}
if|if
condition|(
name|relocationModule
operator|==
literal|null
condition|)
block|{
name|relocationModule
operator|=
name|module
expr_stmt|;
block|}
if|if
condition|(
name|relocationRevision
operator|==
literal|null
condition|)
block|{
name|relocationRevision
operator|=
name|revision
expr_stmt|;
block|}
name|ModuleRevisionId
name|myModuleRev
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
name|revision
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|relocationeModuleRev
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|relocationOrganisation
argument_list|,
name|relocationModule
argument_list|,
name|relocationRevision
argument_list|)
decl_stmt|;
name|md
operator|.
name|setModuleRevisionId
argument_list|(
name|myModuleRev
argument_list|)
expr_stmt|;
if|if
condition|(
name|relocationOrganisation
operator|.
name|equals
argument_list|(
name|organisation
argument_list|)
operator|&&
name|relocationModule
operator|.
name|equals
argument_list|(
name|module
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"Relocation to an other version number not supported in ivy : "
operator|+
name|myModuleRev
operator|+
literal|" relocated to "
operator|+
name|relocationModule
operator|+
literal|". Please update your dependency to directly use the right version."
argument_list|)
expr_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"Resolution will only pick dependencies of the relocated element."
operator|+
literal|"  Artefact and other metadata will be ignored."
argument_list|)
expr_stmt|;
name|Parser
name|relocationParser
init|=
name|parserOtherPom
argument_list|(
name|relocationeModuleRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|relocationParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Relocation can not be found : "
operator|+
name|relocationModule
argument_list|)
throw|;
block|}
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|relocationParser
operator|.
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|md
operator|.
name|addDependency
argument_list|(
name|dependencies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|info
argument_list|(
name|myModuleRev
operator|.
name|toString
argument_list|()
operator|+
literal|" is relocated to "
operator|+
name|relocationeModuleRev
operator|+
literal|". Please update your dependencies."
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"Relocated module will be considered as a dependency"
argument_list|)
expr_stmt|;
name|dd
operator|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|md
argument_list|,
name|relocationeModuleRev
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/*Map all public dependencies */
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"compile"
argument_list|,
literal|"compile"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"runtime"
argument_list|,
literal|"runtime"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"default"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"master"
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"provided"
argument_list|,
literal|"provided"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"system"
argument_list|,
literal|"system"
argument_list|)
expr_stmt|;
name|md
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|dd
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"project/dependencyManagement/dependencies/dependency"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
condition|)
block|{
if|if
condition|(
name|dmGroupId
operator|!=
literal|null
operator|&&
name|dmArtifactId
operator|!=
literal|null
operator|&&
name|dmVersion
operator|!=
literal|null
condition|)
block|{
comment|// Note: we can't use substitute pattern, fillMrid has not been called yet.
name|String
name|key
init|=
name|DEPENDENCY_MANAGEMENT
operator|+
name|DEPENDENCY_MANAGEMENT_DELIMITER
operator|+
name|dmGroupId
operator|+
name|DEPENDENCY_MANAGEMENT_DELIMITER
operator|+
name|dmArtifactId
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|dmVersion
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"project/dependencies/dependency"
operator|.
name|equals
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|organisation
operator|=
literal|null
expr_stmt|;
name|module
operator|=
literal|null
expr_stmt|;
name|revision
operator|=
literal|null
expr_stmt|;
name|scope
operator|=
literal|null
expr_stmt|;
name|classifier
operator|=
literal|null
expr_stmt|;
name|optional
operator|=
literal|false
expr_stmt|;
name|exclusions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|contextStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|processTextContent
parameter_list|()
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|String
name|txt
init|=
name|IvyPatternHelper
operator|.
name|substituteVariables
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|,
name|properties
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|buffer
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|txt
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|String
name|context
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/parent/groupId"
argument_list|)
operator|&&
name|organisation
operator|==
literal|null
condition|)
block|{
name|organisation
operator|=
name|txt
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/parent/version"
argument_list|)
operator|&&
name|revision
operator|==
literal|null
condition|)
block|{
name|revision
operator|=
name|txt
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/parent/artifactId"
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"parent.artifactId"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/parent/packaging"
argument_list|)
operator|&&
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|txt
expr_stmt|;
name|ext
operator|=
name|txt
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/distributionManagement/relocation/groupId"
argument_list|)
condition|)
block|{
name|relocationOrganisation
operator|=
name|txt
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/distributionManagement/relocation/artifactId"
argument_list|)
condition|)
block|{
name|relocationModule
operator|=
name|txt
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/distributionManagement/relocation/version"
argument_list|)
condition|)
block|{
name|relocationRevision
operator|=
name|txt
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|startsWith
argument_list|(
literal|"project/parent"
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/dependencyManagement/dependencies/dependency/groupId"
argument_list|)
condition|)
block|{
name|dmGroupId
operator|=
name|txt
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/dependencyManagement/dependencies/dependency/artifactId"
argument_list|)
condition|)
block|{
name|dmArtifactId
operator|=
name|txt
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/dependencyManagement/dependencies/dependency/version"
argument_list|)
condition|)
block|{
name|dmVersion
operator|=
name|txt
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|startsWith
argument_list|(
literal|"project/properties"
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|context
operator|.
name|substring
argument_list|(
literal|"project/properties/"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|startsWith
argument_list|(
literal|"project/dependencies/dependency"
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/groupId"
argument_list|)
condition|)
block|{
name|organisation
operator|=
name|txt
expr_stmt|;
block|}
if|else if
condition|(
name|organisation
operator|==
literal|null
operator|&&
name|context
operator|.
name|endsWith
argument_list|(
literal|"groupId"
argument_list|)
condition|)
block|{
name|organisation
operator|=
name|txt
expr_stmt|;
block|}
if|else if
condition|(
name|module
operator|==
literal|null
operator|&&
name|context
operator|.
name|endsWith
argument_list|(
literal|"artifactId"
argument_list|)
condition|)
block|{
name|module
operator|=
name|txt
expr_stmt|;
block|}
if|else if
condition|(
name|context
operator|.
name|equals
argument_list|(
literal|"project/version"
argument_list|)
operator|||
operator|(
name|revision
operator|==
literal|null
operator|&&
name|context
operator|.
name|endsWith
argument_list|(
literal|"version"
argument_list|)
operator|)
condition|)
block|{
name|revision
operator|=
name|txt
expr_stmt|;
block|}
if|else if
condition|(
name|revision
operator|==
literal|null
operator|&&
name|context
operator|.
name|endsWith
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
name|revision
operator|=
name|txt
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|==
literal|null
operator|&&
name|context
operator|.
name|endsWith
argument_list|(
literal|"packaging"
argument_list|)
condition|)
block|{
name|type
operator|=
name|txt
expr_stmt|;
name|ext
operator|=
name|txt
expr_stmt|;
block|}
if|else if
condition|(
name|scope
operator|==
literal|null
operator|&&
name|context
operator|.
name|endsWith
argument_list|(
literal|"scope"
argument_list|)
condition|)
block|{
name|scope
operator|=
name|txt
expr_stmt|;
block|}
if|else if
condition|(
name|classifier
operator|==
literal|null
operator|&&
name|context
operator|.
name|endsWith
argument_list|(
literal|"dependency/classifier"
argument_list|)
condition|)
block|{
name|classifier
operator|=
name|txt
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getContext
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|contextStack
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|ctx
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|ctx
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|setLength
argument_list|(
name|buf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|ModuleDescriptor
name|getDescriptor
parameter_list|()
block|{
if|if
condition|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|md
return|;
block|}
specifier|public
name|void
name|parseParentPom
parameter_list|()
throws|throws
name|SAXException
block|{
name|String
name|parentOrg
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"parent.groupId"
argument_list|)
decl_stmt|;
name|String
name|parentName
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"parent.artifactId"
argument_list|)
decl_stmt|;
name|String
name|parentVersion
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"parent.version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentOrg
operator|!=
literal|null
operator|&&
name|parentName
operator|!=
literal|null
operator|&&
name|parentVersion
operator|!=
literal|null
condition|)
block|{
name|ModuleRevisionId
name|parent
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|parentOrg
argument_list|,
name|parentName
argument_list|,
name|parentVersion
argument_list|)
decl_stmt|;
name|Parser
name|parser
init|=
name|parserOtherPom
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
comment|//see comments in parserOtherPom for case where parser==nul
return|return;
block|}
comment|// move the parent properties into ours
name|Map
name|parentProps
init|=
name|parser
operator|.
name|properties
decl_stmt|;
name|Set
name|keys
init|=
name|parentProps
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"pom"
argument_list|)
condition|)
block|{
comment|// don't see a need to copy pom values from parent...
comment|// ignore
block|}
if|else if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"parent"
argument_list|)
condition|)
block|{
comment|// don't see a need to copy parent values from parent...
comment|// ignore
block|}
else|else
block|{
comment|// the key may need the groupId substituted
name|String
name|fullKey
init|=
name|IvyPatternHelper
operator|.
name|substituteVariables
argument_list|(
name|key
argument_list|,
name|parentProps
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|fullValue
init|=
name|IvyPatternHelper
operator|.
name|substituteVariables
argument_list|(
name|parentProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|parentProps
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|fullKey
argument_list|,
name|fullValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Parser
name|parserOtherPom
parameter_list|(
name|ModuleRevisionId
name|other
parameter_list|)
throws|throws
name|SAXException
block|{
name|DependencyResolver
name|resolver
init|=
name|settings
operator|.
name|getResolver
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
comment|// TODO: Maybe log warning or throw exception here?
return|return
literal|null
return|;
block|}
name|DependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|other
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResolveData
name|data
init|=
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getResolveData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|ResolveEngine
name|engine
init|=
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getIvy
argument_list|()
operator|.
name|getResolveEngine
argument_list|()
decl_stmt|;
name|ResolveOptions
name|options
init|=
operator|new
name|ResolveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setDownload
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ResolveData
argument_list|(
name|engine
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
name|ResolvedResource
name|rr
init|=
name|resolver
operator|.
name|findIvyFileRef
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|rr
operator|==
literal|null
condition|)
block|{
comment|// parent not found. Maybe we should throw an exception here?
return|return
literal|null
return|;
block|}
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
name|getModuleDescriptorParser
argument_list|()
argument_list|,
name|rr
operator|.
name|getResource
argument_list|()
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|InputStream
name|pomStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pomStream
operator|=
name|rr
operator|.
name|getResource
argument_list|()
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|XMLHelper
operator|.
name|parse
argument_list|(
name|pomStream
argument_list|,
literal|null
argument_list|,
name|parser
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Error occurred while parsing parent"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Error occurred while parsing parent"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|pomStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|pomStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
return|return
name|parser
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|PomModuleDescriptorParser
name|INSTANCE
init|=
operator|new
name|PomModuleDescriptorParser
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|PomModuleDescriptorParser
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
specifier|private
name|PomModuleDescriptorParser
parameter_list|()
block|{
block|}
specifier|public
name|ModuleDescriptor
name|parseDescriptor
parameter_list|(
name|ParserSettings
name|settings
parameter_list|,
name|URL
name|descriptorURL
parameter_list|,
name|Resource
name|res
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
name|this
argument_list|,
name|res
argument_list|,
name|settings
argument_list|)
decl_stmt|;
try|try
block|{
name|XMLHelper
operator|.
name|parse
argument_list|(
name|descriptorURL
argument_list|,
literal|null
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|ex
parameter_list|)
block|{
name|ParseException
name|pe
init|=
operator|new
name|ParseException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in "
operator|+
name|descriptorURL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|pe
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|pe
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|ex
parameter_list|)
block|{
name|IllegalStateException
name|ise
init|=
operator|new
name|IllegalStateException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" in "
operator|+
name|descriptorURL
argument_list|)
decl_stmt|;
name|ise
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ise
throw|;
block|}
return|return
name|parser
operator|.
name|getDescriptor
argument_list|()
return|;
block|}
specifier|public
name|void
name|toIvyFile
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Resource
name|res
parameter_list|,
name|File
name|destFile
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
try|try
block|{
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|md
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
return|return
name|res
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".pom"
argument_list|)
operator|||
name|res
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"pom.xml"
argument_list|)
operator|||
name|res
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"project.xml"
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"pom parser"
return|;
block|}
specifier|public
name|Artifact
name|getMetadataArtifact
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
return|return
name|DefaultArtifact
operator|.
name|newPomArtifact
argument_list|(
name|mrid
argument_list|,
operator|new
name|Date
argument_list|(
name|res
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
literal|"pom"
return|;
block|}
block|}
end_class

end_unit

