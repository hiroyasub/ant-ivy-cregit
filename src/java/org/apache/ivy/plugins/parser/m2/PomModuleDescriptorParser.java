begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|m2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * A parser for Maven 2 POM.  *<p>  * The configurations used in the generated module descriptor mimics the behavior defined by maven 2  * scopes, as documented here:<br/>  * http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html  * The PomModuleDescriptorParser use a PomDomReader to read the pom, and the   * PomModuleDescriptorBuilder to write the ivy module descriptor using the info read by the   * PomDomReader.    */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PomModuleDescriptorParser
implements|implements
name|ModuleDescriptorParser
block|{
specifier|private
specifier|static
specifier|final
name|PomModuleDescriptorParser
name|INSTANCE
init|=
operator|new
name|PomModuleDescriptorParser
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|PomModuleDescriptorParser
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
specifier|private
name|PomModuleDescriptorParser
parameter_list|()
block|{
block|}
specifier|public
name|void
name|toIvyFile
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Resource
name|res
parameter_list|,
name|File
name|destFile
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
try|try
block|{
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|md
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
return|return
name|res
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".pom"
argument_list|)
operator|||
name|res
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"pom.xml"
argument_list|)
operator|||
name|res
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"project.xml"
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"pom parser"
return|;
block|}
specifier|public
name|Artifact
name|getMetadataArtifact
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
return|return
name|DefaultArtifact
operator|.
name|newPomArtifact
argument_list|(
name|mrid
argument_list|,
operator|new
name|Date
argument_list|(
name|res
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
literal|"pom"
return|;
block|}
specifier|public
name|ModuleDescriptor
name|parseDescriptor
parameter_list|(
name|ParserSettings
name|ivySettings
parameter_list|,
name|URL
name|descriptorURL
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|URLResource
name|resource
init|=
operator|new
name|URLResource
argument_list|(
name|descriptorURL
argument_list|)
decl_stmt|;
return|return
name|parseDescriptor
argument_list|(
name|ivySettings
argument_list|,
name|descriptorURL
argument_list|,
name|resource
argument_list|,
name|validate
argument_list|)
return|;
block|}
specifier|public
name|ModuleDescriptor
name|parseDescriptor
parameter_list|(
name|ParserSettings
name|ivySettings
parameter_list|,
name|URL
name|descriptorURL
parameter_list|,
name|Resource
name|res
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|PomModuleDescriptorBuilder
name|mdBuilder
init|=
operator|new
name|PomModuleDescriptorBuilder
argument_list|(
name|this
argument_list|,
name|res
argument_list|)
decl_stmt|;
try|try
block|{
name|PomReader
name|domReader
init|=
operator|new
name|PomReader
argument_list|(
name|descriptorURL
argument_list|,
name|res
argument_list|)
decl_stmt|;
name|domReader
operator|.
name|setProperty
argument_list|(
literal|"parent.version"
argument_list|,
name|domReader
operator|.
name|getParentVersion
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|groupId
init|=
name|domReader
operator|.
name|getGroupId
argument_list|()
decl_stmt|;
name|String
name|artifactId
init|=
name|domReader
operator|.
name|getArtifactId
argument_list|()
decl_stmt|;
name|String
name|version
init|=
name|domReader
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|mdBuilder
operator|.
name|setModuleRevId
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|relocation
init|=
name|domReader
operator|.
name|getRelocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|relocation
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|groupId
operator|!=
literal|null
operator|&&
name|artifactId
operator|!=
literal|null
operator|&&
name|artifactId
operator|.
name|equals
argument_list|(
name|relocation
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|groupId
operator|.
name|equals
argument_list|(
name|relocation
operator|.
name|getOrganisation
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"Relocation to an other version number not supported in ivy : "
operator|+
name|mdBuilder
operator|.
name|getModuleDescriptor
argument_list|()
operator|.
name|getModuleRevisionId
argument_list|()
operator|+
literal|" relocated to "
operator|+
name|relocation
operator|+
literal|". Please update your dependency to directly use the right version."
argument_list|)
expr_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"Resolution will only pick dependencies of the relocated element."
operator|+
literal|"  Artefact and other metadata will be ignored."
argument_list|)
expr_stmt|;
name|ResolvedModuleRevision
name|relocatedModule
init|=
name|parseOtherPom
argument_list|(
name|ivySettings
argument_list|,
name|relocation
argument_list|)
decl_stmt|;
name|DependencyDescriptor
index|[]
name|dds
init|=
name|relocatedModule
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mdBuilder
operator|.
name|addDependency
argument_list|(
name|dds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|info
argument_list|(
name|mdBuilder
operator|.
name|getModuleDescriptor
argument_list|()
operator|.
name|getModuleRevisionId
argument_list|()
operator|+
literal|" is relocated to "
operator|+
name|relocation
operator|+
literal|". Please update your dependencies."
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"Relocated module will be considered as a dependency"
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|mdBuilder
operator|.
name|getModuleDescriptor
argument_list|()
argument_list|,
name|relocation
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|/* Map all public dependencies */
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"compile"
argument_list|,
literal|"compile"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"runtime"
argument_list|,
literal|"runtime"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"default"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"master"
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"provided"
argument_list|,
literal|"provided"
argument_list|)
expr_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"system"
argument_list|,
literal|"system"
argument_list|)
expr_stmt|;
name|mdBuilder
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|domReader
operator|.
name|setProperty
argument_list|(
literal|"project.groupId"
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
name|domReader
operator|.
name|setProperty
argument_list|(
literal|"pom.groupId"
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
name|domReader
operator|.
name|setProperty
argument_list|(
literal|"project.artifactId"
argument_list|,
name|artifactId
argument_list|)
expr_stmt|;
name|domReader
operator|.
name|setProperty
argument_list|(
literal|"pom.artifactId"
argument_list|,
name|artifactId
argument_list|)
expr_stmt|;
name|domReader
operator|.
name|setProperty
argument_list|(
literal|"project.version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|domReader
operator|.
name|setProperty
argument_list|(
literal|"pom.version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|domReader
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|parentDescr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|domReader
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|domReader
operator|.
name|setProperty
argument_list|(
literal|"parent.version"
argument_list|,
name|domReader
operator|.
name|getParentVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|//Is there any other parent properties?
name|ModuleRevisionId
name|parentModRevID
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|domReader
operator|.
name|getParentGroupId
argument_list|()
argument_list|,
name|domReader
operator|.
name|getParentArtifactId
argument_list|()
argument_list|,
name|domReader
operator|.
name|getParentVersion
argument_list|()
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|parentModule
init|=
name|parseOtherPom
argument_list|(
name|ivySettings
argument_list|,
name|parentModRevID
argument_list|)
decl_stmt|;
name|parentDescr
operator|=
name|parentModule
operator|.
name|getDescriptor
argument_list|()
expr_stmt|;
block|}
name|Map
name|pomProperties
init|=
name|domReader
operator|.
name|getPomProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|pomProperties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|prop
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|domReader
operator|.
name|setProperty
argument_list|(
operator|(
name|String
operator|)
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|mdBuilder
operator|.
name|addProperty
argument_list|(
operator|(
name|String
operator|)
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentDescr
operator|!=
literal|null
condition|)
block|{
name|Map
name|parentPomProps
init|=
name|mdBuilder
operator|.
name|extractPomProperties
argument_list|(
name|parentDescr
operator|.
name|getExtraInfo
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|parentPomProps
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|prop
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|domReader
operator|.
name|setProperty
argument_list|(
operator|(
name|String
operator|)
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|domReader
operator|.
name|getDependencyMgt
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PomReader
operator|.
name|PomDependencyMgt
name|dep
init|=
operator|(
name|PomReader
operator|.
name|PomDependencyMgt
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|mdBuilder
operator|.
name|addDependencyMgt
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentDescr
operator|!=
literal|null
condition|)
block|{
name|mdBuilder
operator|.
name|addExtraInfos
argument_list|(
name|parentDescr
operator|.
name|getExtraInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|domReader
operator|.
name|getDependencies
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PomReader
operator|.
name|PomDependencyData
name|dep
init|=
operator|(
name|PomReader
operator|.
name|PomDependencyData
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|mdBuilder
operator|.
name|addDependency
argument_list|(
name|res
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentDescr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parentDescr
operator|.
name|getDependencies
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mdBuilder
operator|.
name|addDependency
argument_list|(
name|parentDescr
operator|.
name|getDependencies
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|mdBuilder
operator|.
name|addArtifact
argument_list|(
name|artifactId
argument_list|,
name|domReader
operator|.
name|getPackaging
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
name|newParserException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|mdBuilder
operator|.
name|getModuleDescriptor
argument_list|()
return|;
block|}
specifier|private
name|ResolvedModuleRevision
name|parseOtherPom
parameter_list|(
name|ParserSettings
name|ivySettings
parameter_list|,
name|ModuleRevisionId
name|parentModRevID
parameter_list|)
throws|throws
name|ParseException
block|{
name|DependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|parentModRevID
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResolveData
name|data
init|=
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getResolveData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|ResolveEngine
name|engine
init|=
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getIvy
argument_list|()
operator|.
name|getResolveEngine
argument_list|()
decl_stmt|;
name|ResolveOptions
name|options
init|=
operator|new
name|ResolveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setDownload
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ResolveData
argument_list|(
name|engine
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
name|DependencyResolver
name|resolver
init|=
name|ivySettings
operator|.
name|getResolver
argument_list|(
name|parentModRevID
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
comment|// TODO: Throw exception here?
return|return
literal|null
return|;
block|}
else|else
block|{
name|ResolvedModuleRevision
name|otherModule
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
return|return
name|otherModule
return|;
block|}
block|}
specifier|private
name|ParseException
name|newParserException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ParseException
name|pe
init|=
operator|new
name|ParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|pe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|pe
return|;
block|}
block|}
end_class

end_unit

