begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|m2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|URLHandlerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Provides the method to read some data out of the DOM tree of a pom file.  */
end_comment

begin_class
specifier|public
class|class
name|PomReader
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROFILES_ELEMENT
init|=
literal|"profiles"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGING
init|=
literal|"packaging"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEPENDENCY
init|=
literal|"dependency"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEPENDENCIES
init|=
literal|"dependencies"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEPENDENCY_MGT
init|=
literal|"dependencyManagement"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROJECT
init|=
literal|"project"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODEL
init|=
literal|"model"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_ID
init|=
literal|"groupId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ARTIFACT_ID
init|=
literal|"artifactId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"version"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"description"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOMEPAGE
init|=
literal|"url"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LICENSES
init|=
literal|"licenses"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LICENSE
init|=
literal|"license"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LICENSE_NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LICENSE_URL
init|=
literal|"url"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARENT
init|=
literal|"parent"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SCOPE
init|=
literal|"scope"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASSIFIER
init|=
literal|"classifier"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTIONAL
init|=
literal|"optional"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXCLUSIONS
init|=
literal|"exclusions"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXCLUSION
init|=
literal|"exclusion"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DISTRIBUTION_MGT
init|=
literal|"distributionManagement"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RELOCATION
init|=
literal|"relocation"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTIES
init|=
literal|"properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PLUGINS
init|=
literal|"plugins"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PLUGIN
init|=
literal|"plugin"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROFILE
init|=
literal|"profile"
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Element
name|projectElement
decl_stmt|;
specifier|private
specifier|final
name|Element
name|parentElement
decl_stmt|;
specifier|public
name|PomReader
parameter_list|(
specifier|final
name|URL
name|descriptorURL
parameter_list|,
specifier|final
name|Resource
name|res
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|InputStream
name|stream
init|=
operator|new
name|AddDTDFilterInputStream
argument_list|(
name|URLHandlerRegistry
operator|.
name|getDefault
argument_list|()
operator|.
name|openStream
argument_list|(
name|descriptorURL
argument_list|)
argument_list|)
decl_stmt|;
name|InputSource
name|source
init|=
operator|new
name|InputSource
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|source
operator|.
name|setSystemId
argument_list|(
name|XMLHelper
operator|.
name|toSystemId
argument_list|(
name|descriptorURL
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Document
name|pomDomDoc
init|=
name|XMLHelper
operator|.
name|parseToDom
argument_list|(
name|source
argument_list|,
operator|new
name|EntityResolver
argument_list|()
block|{
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|systemId
operator|!=
literal|null
operator|&&
name|systemId
operator|.
name|endsWith
argument_list|(
literal|"m2-entities.ent"
argument_list|)
condition|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|PomReader
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"m2-entities.ent"
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|projectElement
operator|=
name|pomDomDoc
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|PROJECT
operator|.
name|equals
argument_list|(
name|projectElement
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|&&
operator|!
name|MODEL
operator|.
name|equals
argument_list|(
name|projectElement
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SAXParseException
argument_list|(
literal|"project must be the root tag"
argument_list|,
name|res
operator|.
name|getName
argument_list|()
argument_list|,
name|res
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
throw|;
block|}
name|parentElement
operator|=
name|getFirstChildElement
argument_list|(
name|projectElement
argument_list|,
name|PARENT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// Both environment and system properties take precedence over properties set in
comment|// pom.xml. So we pre-populate our properties with the environment and system properties
comment|// here
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envEntry
range|:
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Maven let's users use "env." prefix for environment variables
name|this
operator|.
name|setProperty
argument_list|(
literal|"env."
operator|+
name|envEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|envEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add system properties
specifier|final
name|Properties
name|sysProps
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|sysProp
range|:
name|sysProps
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|this
operator|.
name|setProperty
argument_list|(
name|sysProp
argument_list|,
name|sysProps
operator|.
name|getProperty
argument_list|(
name|sysProp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasParent
parameter_list|()
block|{
return|return
name|parentElement
operator|!=
literal|null
return|;
block|}
comment|/**      * Add a property if not yet set and value is not null. This guarantees      * that property keeps the first value that is put on it and that the      * properties are never null.      *      * @param prop String      * @param val  String      */
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|prop
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|prop
argument_list|)
operator|&&
name|val
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|prop
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
name|String
name|groupId
init|=
name|getFirstChildText
argument_list|(
name|projectElement
argument_list|,
name|GROUP_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupId
operator|==
literal|null
condition|)
block|{
name|groupId
operator|=
name|getFirstChildText
argument_list|(
name|parentElement
argument_list|,
name|GROUP_ID
argument_list|)
expr_stmt|;
block|}
return|return
name|replaceProps
argument_list|(
name|groupId
argument_list|)
return|;
block|}
specifier|public
name|String
name|getParentGroupId
parameter_list|()
block|{
name|String
name|groupId
init|=
name|getFirstChildText
argument_list|(
name|parentElement
argument_list|,
name|GROUP_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupId
operator|==
literal|null
condition|)
block|{
name|groupId
operator|=
name|getFirstChildText
argument_list|(
name|projectElement
argument_list|,
name|GROUP_ID
argument_list|)
expr_stmt|;
block|}
return|return
name|replaceProps
argument_list|(
name|groupId
argument_list|)
return|;
block|}
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|projectElement
argument_list|,
name|ARTIFACT_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|getFirstChildText
argument_list|(
name|parentElement
argument_list|,
name|ARTIFACT_ID
argument_list|)
expr_stmt|;
block|}
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|String
name|getParentArtifactId
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|parentElement
argument_list|,
name|ARTIFACT_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|getFirstChildText
argument_list|(
name|projectElement
argument_list|,
name|ARTIFACT_ID
argument_list|)
expr_stmt|;
block|}
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|projectElement
argument_list|,
name|VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|getFirstChildText
argument_list|(
name|parentElement
argument_list|,
name|VERSION
argument_list|)
expr_stmt|;
block|}
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|String
name|getParentVersion
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|parentElement
argument_list|,
name|VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|getFirstChildText
argument_list|(
name|projectElement
argument_list|,
name|VERSION
argument_list|)
expr_stmt|;
block|}
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPackaging
parameter_list|()
block|{
specifier|final
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|projectElement
argument_list|,
name|PACKAGING
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|"jar"
return|;
block|}
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|String
name|getHomePage
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|projectElement
argument_list|,
name|HOMEPAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|projectElement
argument_list|,
name|DESCRIPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|val
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|public
name|License
index|[]
name|getLicenses
parameter_list|()
block|{
name|Element
name|licenses
init|=
name|getFirstChildElement
argument_list|(
name|projectElement
argument_list|,
name|LICENSES
argument_list|)
decl_stmt|;
if|if
condition|(
name|licenses
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|License
index|[
literal|0
index|]
return|;
block|}
name|licenses
operator|.
name|normalize
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|License
argument_list|>
name|lics
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|license
range|:
name|getAllChilds
argument_list|(
name|licenses
argument_list|)
control|)
block|{
if|if
condition|(
name|LICENSE
operator|.
name|equals
argument_list|(
name|license
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|getFirstChildText
argument_list|(
name|license
argument_list|,
name|LICENSE_NAME
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|getFirstChildText
argument_list|(
name|license
argument_list|,
name|LICENSE_URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|&&
name|url
operator|==
literal|null
condition|)
block|{
comment|// move to next license
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|// The license name is required in Ivy but not in a POM!
name|name
operator|=
literal|"Unknown License"
expr_stmt|;
block|}
name|lics
operator|.
name|add
argument_list|(
operator|new
name|License
argument_list|(
name|name
argument_list|,
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lics
operator|.
name|toArray
argument_list|(
operator|new
name|License
index|[
name|lics
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|ModuleRevisionId
name|getRelocation
parameter_list|()
block|{
name|Element
name|distrMgt
init|=
name|getFirstChildElement
argument_list|(
name|projectElement
argument_list|,
name|DISTRIBUTION_MGT
argument_list|)
decl_stmt|;
name|Element
name|relocation
init|=
name|getFirstChildElement
argument_list|(
name|distrMgt
argument_list|,
name|RELOCATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|relocation
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|String
name|relocGroupId
init|=
name|getFirstChildText
argument_list|(
name|relocation
argument_list|,
name|GROUP_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|relocGroupId
operator|==
literal|null
condition|)
block|{
name|relocGroupId
operator|=
name|getGroupId
argument_list|()
expr_stmt|;
block|}
name|String
name|relocArtId
init|=
name|getFirstChildText
argument_list|(
name|relocation
argument_list|,
name|ARTIFACT_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|relocArtId
operator|==
literal|null
condition|)
block|{
name|relocArtId
operator|=
name|getArtifactId
argument_list|()
expr_stmt|;
block|}
name|String
name|relocVersion
init|=
name|getFirstChildText
argument_list|(
name|relocation
argument_list|,
name|VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|relocVersion
operator|==
literal|null
condition|)
block|{
name|relocVersion
operator|=
name|getVersion
argument_list|()
expr_stmt|;
block|}
return|return
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|relocGroupId
argument_list|,
name|relocArtId
argument_list|,
name|relocVersion
argument_list|)
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|PomDependencyData
argument_list|>
name|getDependencies
parameter_list|()
block|{
return|return
name|getDependencies
argument_list|(
name|projectElement
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|PomDependencyData
argument_list|>
name|getDependencies
parameter_list|(
name|Element
name|parent
parameter_list|)
block|{
name|Element
name|dependenciesElement
init|=
name|getFirstChildElement
argument_list|(
name|parent
argument_list|,
name|DEPENDENCIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependenciesElement
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|PomDependencyData
argument_list|>
name|dependencies
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeList
name|children
init|=
name|dependenciesElement
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|sz
init|=
name|children
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
operator|&&
name|DEPENDENCY
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|dependencies
operator|.
name|add
argument_list|(
operator|new
name|PomDependencyData
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dependencies
return|;
block|}
specifier|public
name|List
argument_list|<
name|PomDependencyMgt
argument_list|>
name|getDependencyMgt
parameter_list|()
block|{
return|return
name|getDependencyMgt
argument_list|(
name|projectElement
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|PomDependencyMgt
argument_list|>
name|getDependencyMgt
parameter_list|(
name|Element
name|parent
parameter_list|)
block|{
name|Element
name|dependenciesElement
init|=
name|getFirstChildElement
argument_list|(
name|getFirstChildElement
argument_list|(
name|parent
argument_list|,
name|DEPENDENCY_MGT
argument_list|)
argument_list|,
name|DEPENDENCIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependenciesElement
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|PomDependencyMgt
argument_list|>
name|dependencies
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeList
name|children
init|=
name|dependenciesElement
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|sz
init|=
name|children
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
operator|&&
name|DEPENDENCY
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|dependencies
operator|.
name|add
argument_list|(
operator|new
name|PomDependencyMgtElement
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dependencies
return|;
block|}
specifier|public
name|List
argument_list|<
name|PomProfileElement
argument_list|>
name|getProfiles
parameter_list|()
block|{
name|Element
name|profilesElement
init|=
name|getFirstChildElement
argument_list|(
name|projectElement
argument_list|,
name|PROFILES_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|profilesElement
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|PomProfileElement
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeList
name|children
init|=
name|profilesElement
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|sz
init|=
name|children
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
operator|&&
name|PROFILE
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|PomProfileElement
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
class|class
name|PomDependencyMgtElement
implements|implements
name|PomDependencyMgt
block|{
specifier|private
specifier|final
name|Element
name|depElement
decl_stmt|;
specifier|public
name|PomDependencyMgtElement
parameter_list|(
name|PomDependencyMgtElement
name|copyFrom
parameter_list|)
block|{
name|this
argument_list|(
name|copyFrom
operator|.
name|depElement
argument_list|)
expr_stmt|;
block|}
name|PomDependencyMgtElement
parameter_list|(
name|Element
name|depElement
parameter_list|)
block|{
name|this
operator|.
name|depElement
operator|=
name|depElement
expr_stmt|;
block|}
comment|/*          * (non-Javadoc)          * @see org.apache.ivy.plugins.parser.m2.PomDependencyMgt#getGroupId()          */
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|depElement
argument_list|,
name|GROUP_ID
argument_list|)
decl_stmt|;
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
comment|/*          * (non-Javadoc)          * @see org.apache.ivy.plugins.parser.m2.PomDependencyMgt#getArtifaceId()          */
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|depElement
argument_list|,
name|ARTIFACT_ID
argument_list|)
decl_stmt|;
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
comment|/*          * (non-Javadoc)          * @see org.apache.ivy.plugins.parser.m2.PomDependencyMgt#getVersion()          */
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|depElement
argument_list|,
name|VERSION
argument_list|)
decl_stmt|;
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|String
name|getScope
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|depElement
argument_list|,
name|SCOPE
argument_list|)
decl_stmt|;
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ModuleId
argument_list|>
name|getExcludedModules
parameter_list|()
block|{
name|Element
name|exclusionsElement
init|=
name|getFirstChildElement
argument_list|(
name|depElement
argument_list|,
name|EXCLUSIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|exclusionsElement
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ModuleId
argument_list|>
name|exclusions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeList
name|children
init|=
name|exclusionsElement
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|sz
init|=
name|children
operator|.
name|getLength
argument_list|()
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
operator|&&
name|EXCLUSION
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|groupId
init|=
name|getFirstChildText
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|,
name|GROUP_ID
argument_list|)
decl_stmt|;
name|String
name|artifactId
init|=
name|getFirstChildText
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|,
name|ARTIFACT_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupId
operator|!=
literal|null
operator|&&
name|artifactId
operator|!=
literal|null
condition|)
block|{
name|exclusions
operator|.
name|add
argument_list|(
name|ModuleId
operator|.
name|newInstance
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|exclusions
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|PomPluginElement
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|getPlugins
argument_list|(
name|projectElement
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|PomPluginElement
argument_list|>
name|getPlugins
parameter_list|(
name|Element
name|parent
parameter_list|)
block|{
name|Element
name|buildElement
init|=
name|getFirstChildElement
argument_list|(
name|parent
argument_list|,
literal|"build"
argument_list|)
decl_stmt|;
name|Element
name|pluginsElement
init|=
name|getFirstChildElement
argument_list|(
name|buildElement
argument_list|,
name|PLUGINS
argument_list|)
decl_stmt|;
if|if
condition|(
name|pluginsElement
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|NodeList
name|children
init|=
name|pluginsElement
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PomPluginElement
argument_list|>
name|plugins
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
operator|&&
name|PLUGIN
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|plugins
operator|.
name|add
argument_list|(
operator|new
name|PomPluginElement
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|plugins
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|(
specifier|final
name|Element
name|parent
parameter_list|)
block|{
specifier|final
name|Element
name|propsEl
init|=
name|getFirstChildElement
argument_list|(
name|parent
argument_list|,
name|PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|propsEl
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|propsEl
operator|.
name|normalize
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Element
name|prop
range|:
name|getAllChilds
argument_list|(
name|propsEl
argument_list|)
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|getTextContent
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
specifier|public
class|class
name|PomPluginElement
implements|implements
name|PomDependencyMgt
block|{
specifier|private
name|Element
name|pluginElement
decl_stmt|;
name|PomPluginElement
parameter_list|(
name|Element
name|pluginElement
parameter_list|)
block|{
name|this
operator|.
name|pluginElement
operator|=
name|pluginElement
expr_stmt|;
block|}
specifier|public
name|String
name|getGroupId
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|pluginElement
argument_list|,
name|GROUP_ID
argument_list|)
decl_stmt|;
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|String
name|getArtifactId
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|pluginElement
argument_list|,
name|ARTIFACT_ID
argument_list|)
decl_stmt|;
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|pluginElement
argument_list|,
name|VERSION
argument_list|)
decl_stmt|;
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|String
name|getScope
parameter_list|()
block|{
return|return
literal|null
return|;
comment|// not used
block|}
specifier|public
name|List
argument_list|<
name|ModuleId
argument_list|>
name|getExcludedModules
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
comment|// probably not used?
block|}
block|}
specifier|public
class|class
name|PomDependencyData
extends|extends
name|PomDependencyMgtElement
block|{
specifier|private
specifier|final
name|Element
name|depElement
decl_stmt|;
specifier|public
name|PomDependencyData
parameter_list|(
name|PomDependencyData
name|copyFrom
parameter_list|)
block|{
name|this
argument_list|(
name|copyFrom
operator|.
name|depElement
argument_list|)
expr_stmt|;
block|}
name|PomDependencyData
parameter_list|(
name|Element
name|depElement
parameter_list|)
block|{
name|super
argument_list|(
name|depElement
argument_list|)
expr_stmt|;
name|this
operator|.
name|depElement
operator|=
name|depElement
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getScope
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|depElement
argument_list|,
name|SCOPE
argument_list|)
decl_stmt|;
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|String
name|getClassifier
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|depElement
argument_list|,
name|CLASSIFIER
argument_list|)
decl_stmt|;
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
name|String
name|val
init|=
name|getFirstChildText
argument_list|(
name|depElement
argument_list|,
name|TYPE
argument_list|)
decl_stmt|;
return|return
name|replaceProps
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|getFirstChildText
argument_list|(
name|depElement
argument_list|,
name|OPTIONAL
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|PomProfileElement
block|{
specifier|private
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"value"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY
init|=
literal|"property"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ID_ELEMENT
init|=
literal|"id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTIVATION_ELEMENT
init|=
literal|"activation"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACTIVE_BY_DEFAULT_ELEMENT
init|=
literal|"activeByDefault"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OS
init|=
literal|"os"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FAMILY
init|=
literal|"family"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"version"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ARCH
init|=
literal|"arch"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE
init|=
literal|"file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MISSING
init|=
literal|"missing"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXISTS
init|=
literal|"exists"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JDK
init|=
literal|"jdk"
decl_stmt|;
specifier|private
specifier|final
name|Element
name|profileElement
decl_stmt|;
name|PomProfileElement
parameter_list|(
name|Element
name|profileElement
parameter_list|)
block|{
name|this
operator|.
name|profileElement
operator|=
name|profileElement
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|getFirstChildText
argument_list|(
name|profileElement
argument_list|,
name|ID_ELEMENT
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|isActiveByDefault
argument_list|()
operator|||
name|isActivatedByProperty
argument_list|()
operator|||
name|isActiveByOS
argument_list|()
operator|||
name|isActiveByJDK
argument_list|()
operator|||
name|isActiveByFile
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isActiveByDefault
parameter_list|()
block|{
name|Element
name|activation
init|=
name|getFirstChildElement
argument_list|(
name|profileElement
argument_list|,
name|ACTIVATION_ELEMENT
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|getFirstChildText
argument_list|(
name|activation
argument_list|,
name|ACTIVE_BY_DEFAULT_ELEMENT
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isActiveByOS
parameter_list|()
block|{
specifier|final
name|Element
name|activation
init|=
name|getFirstChildElement
argument_list|(
name|profileElement
argument_list|,
name|ACTIVATION_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|activation
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Element
name|osActivation
init|=
name|getFirstChildElement
argument_list|(
name|activation
argument_list|,
name|OS
argument_list|)
decl_stmt|;
if|if
condition|(
name|osActivation
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|actualOS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|expectedOSName
init|=
name|getFirstChildText
argument_list|(
name|osActivation
argument_list|,
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedOSName
operator|!=
literal|null
operator|&&
operator|!
name|actualOS
operator|.
name|equals
argument_list|(
name|expectedOSName
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
comment|// os name is specified but doesn't match
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|expectedOSFamily
init|=
name|getFirstChildText
argument_list|(
name|osActivation
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedOSFamily
operator|!=
literal|null
operator|&&
operator|!
name|actualOS
operator|.
name|contains
argument_list|(
name|expectedOSFamily
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
comment|// os family is specified but doesn't match
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|expectedOSArch
init|=
name|getFirstChildText
argument_list|(
name|osActivation
argument_list|,
name|ARCH
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedOSArch
operator|!=
literal|null
operator|&&
operator|!
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.arch"
argument_list|)
operator|.
name|equals
argument_list|(
name|expectedOSArch
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
comment|// os arch is specified but doesn't match
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|expectedOSVersion
init|=
name|getFirstChildText
argument_list|(
name|osActivation
argument_list|,
name|VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedOSVersion
operator|!=
literal|null
operator|&&
operator|!
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.version"
argument_list|)
operator|.
name|equals
argument_list|(
name|expectedOSVersion
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
comment|// os version is specified but doesn't match
return|return
literal|false
return|;
block|}
comment|// reaching here implies that either no OS match rules were specified or
comment|// all of the OS rules that were specified were matched. So we just check to see
comment|// if any rules were specified at all, in which case, we consider the profile to be activated
comment|// by the OS element
return|return
operator|(
name|expectedOSName
operator|!=
literal|null
operator|||
name|expectedOSFamily
operator|!=
literal|null
operator|||
name|expectedOSArch
operator|!=
literal|null
operator|||
name|expectedOSVersion
operator|!=
literal|null
operator|)
return|;
block|}
specifier|public
name|boolean
name|isActiveByJDK
parameter_list|()
block|{
specifier|final
name|Element
name|activation
init|=
name|getFirstChildElement
argument_list|(
name|profileElement
argument_list|,
name|ACTIVATION_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|activation
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|expectedJDKRange
init|=
name|getFirstChildText
argument_list|(
name|activation
argument_list|,
name|JDK
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedJDKRange
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|boolean
name|negate
init|=
name|expectedJDKRange
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"!"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|nonNegatedRange
init|=
name|negate
condition|?
name|expectedJDKRange
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
else|:
name|expectedJDKRange
operator|.
name|trim
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|javaVersionInRange
init|=
name|MavenVersionRangeParser
operator|.
name|currentJavaVersionInRange
argument_list|(
name|nonNegatedRange
argument_list|)
decl_stmt|;
return|return
name|javaVersionInRange
operator|^
name|negate
return|;
block|}
specifier|public
name|boolean
name|isActiveByFile
parameter_list|()
block|{
specifier|final
name|Element
name|activation
init|=
name|getFirstChildElement
argument_list|(
name|profileElement
argument_list|,
name|ACTIVATION_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|activation
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Element
name|fileActivation
init|=
name|getFirstChildElement
argument_list|(
name|activation
argument_list|,
name|FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileActivation
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|expectedMissing
init|=
name|getFirstChildText
argument_list|(
name|fileActivation
argument_list|,
name|MISSING
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedMissing
operator|!=
literal|null
operator|&&
operator|new
name|File
argument_list|(
name|expectedMissing
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// the file was specified and expected to be missing, but it exists
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|expectedExists
init|=
name|getFirstChildText
argument_list|(
name|fileActivation
argument_list|,
name|EXISTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedExists
operator|!=
literal|null
operator|&&
operator|!
operator|(
operator|new
name|File
argument_list|(
name|expectedExists
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
operator|)
condition|)
block|{
comment|// the file was specified and expected to be existing, but it doesn't
return|return
literal|false
return|;
block|}
comment|// reaching here implies that either no file match rules were specified or
comment|// all of the file rules that were specified were matched. So we just check to see
comment|// if any rules were specified at all, in which case, we consider the profile to be activated
comment|// by the file element
return|return
operator|(
name|expectedMissing
operator|!=
literal|null
operator|||
name|expectedExists
operator|!=
literal|null
operator|)
return|;
block|}
specifier|public
name|boolean
name|isActivatedByProperty
parameter_list|()
block|{
name|Element
name|activation
init|=
name|getFirstChildElement
argument_list|(
name|profileElement
argument_list|,
name|ACTIVATION_ELEMENT
argument_list|)
decl_stmt|;
name|Element
name|propertyActivation
init|=
name|getFirstChildElement
argument_list|(
name|activation
argument_list|,
name|PROPERTY
argument_list|)
decl_stmt|;
name|String
name|propertyName
init|=
name|getFirstChildText
argument_list|(
name|propertyActivation
argument_list|,
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|negate
init|=
name|propertyName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'!'
decl_stmt|;
if|if
condition|(
name|negate
condition|)
block|{
name|propertyName
operator|=
name|propertyName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|propertyValue
init|=
name|getFirstChildText
argument_list|(
name|propertyActivation
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|matched
decl_stmt|;
if|if
condition|(
name|propertyValue
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|propertyValue
argument_list|)
condition|)
block|{
name|matched
operator|=
name|PomReader
operator|.
name|this
operator|.
name|properties
operator|.
name|containsKey
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matched
operator|=
name|propertyValue
operator|.
name|equals
argument_list|(
name|PomReader
operator|.
name|this
operator|.
name|properties
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|matched
operator|^
name|negate
return|;
block|}
specifier|public
name|List
argument_list|<
name|PomDependencyData
argument_list|>
name|getDependencies
parameter_list|()
block|{
return|return
name|PomReader
operator|.
name|this
operator|.
name|getDependencies
argument_list|(
name|profileElement
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|PomDependencyMgt
argument_list|>
name|getDependencyMgt
parameter_list|()
block|{
return|return
name|PomReader
operator|.
name|this
operator|.
name|getDependencyMgt
argument_list|(
name|profileElement
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|PomPluginElement
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|PomReader
operator|.
name|this
operator|.
name|getPlugins
argument_list|(
name|profileElement
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProfileProperties
parameter_list|()
block|{
return|return
name|PomReader
operator|.
name|getProperties
argument_list|(
name|profileElement
argument_list|)
return|;
block|}
block|}
comment|/**      * @return the content of the properties tag into the pom.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPomProperties
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|getProperties
argument_list|(
name|projectElement
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|replaceProps
parameter_list|(
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|IvyPatternHelper
operator|.
name|substituteVariables
argument_list|(
name|val
argument_list|,
name|properties
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getTextContent
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|NodeList
name|childNodes
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|result
operator|.
name|append
argument_list|(
name|child
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getFirstChildText
parameter_list|(
name|Element
name|parentElem
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Element
name|node
init|=
name|getFirstChildElement
argument_list|(
name|parentElem
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|getTextContent
argument_list|(
name|node
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|Element
name|getFirstChildElement
parameter_list|(
name|Element
name|parentElem
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|parentElem
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NodeList
name|childs
init|=
name|parentElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|childs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|node
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Element
argument_list|>
name|getAllChilds
parameter_list|(
name|Element
name|parent
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|r
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|NodeList
name|childs
init|=
name|parent
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|childs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|r
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|AddDTDFilterInputStream
extends|extends
name|FilterInputStream
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MARK
init|=
literal|10000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCTYPE
init|=
literal|"<!DOCTYPE project SYSTEM \"m2-entities.ent\">\n"
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|byte
index|[]
name|prefix
init|=
name|DOCTYPE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
name|AddDTDFilterInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|in
operator|.
name|mark
argument_list|(
name|MARK
argument_list|)
expr_stmt|;
comment|// TODO: we should really find a better solution for this...
comment|// maybe we could use a FilterReader instead of a FilterInputStream?
name|int
name|byte1
init|=
name|this
operator|.
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|byte2
init|=
name|this
operator|.
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|byte3
init|=
name|this
operator|.
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|byte1
operator|==
literal|239
operator|&&
name|byte2
operator|==
literal|187
operator|&&
name|byte3
operator|==
literal|191
condition|)
block|{
comment|// skip the UTF-8 BOM
name|this
operator|.
name|in
operator|.
name|mark
argument_list|(
name|MARK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|int
name|bytesToSkip
init|=
literal|0
decl_stmt|;
name|LineNumberReader
name|reader
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|this
operator|.
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|String
name|firstLine
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstLine
operator|!=
literal|null
condition|)
block|{
name|String
name|trimmed
init|=
name|firstLine
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|trimmed
operator|.
name|startsWith
argument_list|(
literal|"<?xml "
argument_list|)
condition|)
block|{
name|int
name|endIndex
init|=
name|trimmed
operator|.
name|indexOf
argument_list|(
literal|"?>"
argument_list|)
decl_stmt|;
name|String
name|xmlDecl
init|=
name|trimmed
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|endIndex
operator|+
literal|2
argument_list|)
decl_stmt|;
name|prefix
operator|=
operator|(
name|xmlDecl
operator|+
literal|"\n"
operator|+
name|DOCTYPE
operator|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|bytesToSkip
operator|=
name|xmlDecl
operator|.
name|getBytes
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
block|}
else|else
block|{
name|prefix
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
name|this
operator|.
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesToSkip
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|<
name|prefix
operator|.
name|length
condition|)
block|{
return|return
name|prefix
index|[
name|count
operator|++
index|]
return|;
block|}
return|return
name|super
operator|.
name|read
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|else if
condition|(
name|off
operator|<
literal|0
operator|||
name|off
operator|>
name|b
operator|.
name|length
operator|||
name|len
operator|<
literal|0
operator|||
operator|(
name|off
operator|+
name|len
operator|)
operator|>
name|b
operator|.
name|length
operator|||
operator|(
name|off
operator|+
name|len
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|else if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|nbrBytesCopied
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|count
operator|<
name|prefix
operator|.
name|length
condition|)
block|{
name|int
name|nbrBytesFromPrefix
init|=
name|Math
operator|.
name|min
argument_list|(
name|prefix
operator|.
name|length
operator|-
name|count
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|prefix
argument_list|,
name|count
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|nbrBytesFromPrefix
argument_list|)
expr_stmt|;
name|nbrBytesCopied
operator|=
name|nbrBytesFromPrefix
expr_stmt|;
block|}
if|if
condition|(
name|nbrBytesCopied
operator|<
name|len
condition|)
block|{
name|nbrBytesCopied
operator|+=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
operator|+
name|nbrBytesCopied
argument_list|,
name|len
operator|-
name|nbrBytesCopied
argument_list|)
expr_stmt|;
block|}
name|count
operator|+=
name|nbrBytesCopied
expr_stmt|;
return|return
name|nbrBytesCopied
return|;
block|}
block|}
block|}
end_class

end_unit

