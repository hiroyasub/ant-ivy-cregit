begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|AbstractRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|BasicResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|ChainedRepository
extends|extends
name|AbstractRepository
block|{
specifier|private
name|List
comment|/* Repository */
name|repositories
decl_stmt|;
specifier|public
name|void
name|setRepositories
parameter_list|(
name|List
comment|/* Repository */
name|repositories
parameter_list|)
block|{
name|this
operator|.
name|repositories
operator|=
name|repositories
expr_stmt|;
block|}
specifier|public
name|Resource
name|getResource
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
name|it
init|=
name|repositories
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Repository
name|repository
init|=
operator|(
name|Repository
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|logTry
argument_list|(
name|repository
argument_list|)
expr_stmt|;
try|try
block|{
name|Resource
name|r
init|=
name|repository
operator|.
name|getResource
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logSuccess
argument_list|(
name|repository
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logFailed
argument_list|(
name|repository
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// resource that basically doesn't exists
return|return
operator|new
name|BasicResource
argument_list|(
name|source
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|void
name|get
parameter_list|(
name|String
name|source
parameter_list|,
name|File
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
name|it
init|=
name|repositories
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Repository
name|repository
init|=
operator|(
name|Repository
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|logTry
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|repository
operator|.
name|get
argument_list|(
name|source
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logFailed
argument_list|(
name|repository
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ok
condition|)
block|{
name|logSuccess
argument_list|(
name|repository
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
throw|throw
name|newIOEFail
argument_list|(
literal|"copy "
operator|+
name|source
operator|+
literal|" into "
operator|+
name|destination
argument_list|)
throw|;
block|}
specifier|public
name|List
name|list
parameter_list|(
name|String
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
name|it
init|=
name|repositories
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Repository
name|repository
init|=
operator|(
name|Repository
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|logTry
argument_list|(
name|repository
argument_list|)
expr_stmt|;
try|try
block|{
name|List
name|list
init|=
name|repository
operator|.
name|list
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|logSuccess
argument_list|(
name|repository
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logFailed
argument_list|(
name|repository
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
name|newIOEFail
argument_list|(
literal|"list contents in "
operator|+
name|parent
argument_list|)
throw|;
block|}
specifier|private
name|void
name|logTry
parameter_list|(
name|Repository
name|repository
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"Mirrored repository "
operator|+
name|getName
argument_list|()
operator|+
literal|": trying "
operator|+
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logFailed
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"Mirrored repository "
operator|+
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|repository
operator|.
name|getName
argument_list|()
operator|+
literal|" is not available"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"Trying the next one in the mirror list..."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logSuccess
parameter_list|(
name|Repository
name|repository
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"Mirrored repository "
operator|+
name|getName
argument_list|()
operator|+
literal|": success with "
operator|+
name|repository
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|IOException
name|newIOEFail
parameter_list|(
name|String
name|action
parameter_list|)
block|{
return|return
operator|new
name|IOException
argument_list|(
literal|"Mirrored repository "
operator|+
name|getName
argument_list|()
operator|+
literal|": fail to "
operator|+
name|action
operator|+
literal|" with every listed mirror"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

