begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Resource for SSH Ivy Repository  */
end_comment

begin_class
specifier|public
class|class
name|SshResource
implements|implements
name|Resource
block|{
specifier|private
name|boolean
name|resolved
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|uri
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|bExists
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|len
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|lastModified
init|=
literal|0
decl_stmt|;
specifier|private
name|SshRepository
name|repository
init|=
literal|null
decl_stmt|;
specifier|public
name|SshResource
parameter_list|()
block|{
name|resolved
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|SshResource
parameter_list|(
name|SshRepository
name|repository
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
name|resolved
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|SshResource
parameter_list|(
name|SshRepository
name|repository
parameter_list|,
name|String
name|uri
parameter_list|,
name|boolean
name|bExists
parameter_list|,
name|long
name|len
parameter_list|,
name|long
name|lastModified
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|bExists
operator|=
name|bExists
expr_stmt|;
name|this
operator|.
name|len
operator|=
name|len
expr_stmt|;
name|this
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
name|resolved
operator|=
literal|true
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.ivy.repository.Resource#exists()      */
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
if|if
condition|(
operator|!
name|resolved
condition|)
block|{
name|resolve
argument_list|()
expr_stmt|;
block|}
return|return
name|bExists
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.ivy.repository.Resource#getContentLength()      */
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
if|if
condition|(
operator|!
name|resolved
condition|)
block|{
name|resolve
argument_list|()
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.ivy.repository.Resource#getLastModified()      */
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
if|if
condition|(
operator|!
name|resolved
condition|)
block|{
name|resolve
argument_list|()
expr_stmt|;
block|}
return|return
name|lastModified
return|;
block|}
specifier|private
name|void
name|resolve
parameter_list|()
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"SShResource: resolving "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|SshResource
name|res
init|=
name|repository
operator|.
name|resolveResource
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|len
operator|=
name|res
operator|.
name|getContentLength
argument_list|()
expr_stmt|;
name|lastModified
operator|=
name|res
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
name|bExists
operator|=
name|res
operator|.
name|exists
argument_list|()
expr_stmt|;
name|resolved
operator|=
literal|true
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"SShResource: resolved "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.ivy.repository.Resource#getName()      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SshResource:"
operator|+
name|uri
operator|+
literal|" ("
operator|+
name|len
operator|+
literal|")]"
return|;
block|}
specifier|public
name|boolean
name|isLocal
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|Resource
name|clone
parameter_list|(
name|String
name|cloneName
parameter_list|)
block|{
return|return
operator|new
name|SshResource
argument_list|(
name|repository
argument_list|,
name|cloneName
argument_list|)
return|;
block|}
specifier|public
name|InputStream
name|openStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|repository
operator|.
name|openStream
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

