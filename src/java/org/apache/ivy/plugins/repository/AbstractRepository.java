begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|EventListenerList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|TimeoutConstraint
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRepository
implements|implements
name|Repository
block|{
specifier|private
name|EventListenerList
name|listeners
init|=
operator|new
name|EventListenerList
argument_list|()
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|TransferEvent
name|evt
decl_stmt|;
specifier|private
specifier|final
name|TimeoutConstraint
name|timeoutConstraint
decl_stmt|;
specifier|public
name|AbstractRepository
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AbstractRepository
parameter_list|(
specifier|final
name|TimeoutConstraint
name|timeoutConstraint
parameter_list|)
block|{
name|this
operator|.
name|timeoutConstraint
operator|=
name|timeoutConstraint
expr_stmt|;
block|}
specifier|public
name|void
name|addTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|TransferListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|TransferListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|listeners
operator|.
name|getListeners
argument_list|(
name|TransferListener
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|listener
argument_list|)
return|;
block|}
specifier|protected
name|void
name|fireTransferInitiated
parameter_list|(
name|Resource
name|res
parameter_list|,
name|int
name|requestType
parameter_list|)
block|{
name|evt
operator|=
operator|new
name|TransferEvent
argument_list|(
name|this
argument_list|,
name|res
argument_list|,
name|TransferEvent
operator|.
name|TRANSFER_INITIATED
argument_list|,
name|requestType
argument_list|)
expr_stmt|;
name|fireTransferEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireTransferStarted
parameter_list|()
block|{
name|evt
operator|.
name|setEventType
argument_list|(
name|TransferEvent
operator|.
name|TRANSFER_STARTED
argument_list|)
expr_stmt|;
name|fireTransferEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireTransferStarted
parameter_list|(
name|long
name|totalLength
parameter_list|)
block|{
name|evt
operator|.
name|setEventType
argument_list|(
name|TransferEvent
operator|.
name|TRANSFER_STARTED
argument_list|)
expr_stmt|;
name|evt
operator|.
name|setTotalLength
argument_list|(
name|totalLength
argument_list|)
expr_stmt|;
name|evt
operator|.
name|setTotalLengthSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fireTransferEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireTransferProgress
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|evt
operator|.
name|setEventType
argument_list|(
name|TransferEvent
operator|.
name|TRANSFER_PROGRESS
argument_list|)
expr_stmt|;
name|evt
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|evt
operator|.
name|isTotalLengthSet
argument_list|()
condition|)
block|{
name|evt
operator|.
name|setTotalLength
argument_list|(
name|evt
operator|.
name|getTotalLength
argument_list|()
operator|+
name|length
argument_list|)
expr_stmt|;
block|}
name|fireTransferEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireTransferCompleted
parameter_list|()
block|{
name|evt
operator|.
name|setEventType
argument_list|(
name|TransferEvent
operator|.
name|TRANSFER_COMPLETED
argument_list|)
expr_stmt|;
if|if
condition|(
name|evt
operator|.
name|getTotalLength
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|evt
operator|.
name|isTotalLengthSet
argument_list|()
condition|)
block|{
name|evt
operator|.
name|setTotalLengthSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|fireTransferEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireTransferCompleted
parameter_list|(
name|long
name|totalLength
parameter_list|)
block|{
name|evt
operator|.
name|setEventType
argument_list|(
name|TransferEvent
operator|.
name|TRANSFER_COMPLETED
argument_list|)
expr_stmt|;
name|evt
operator|.
name|setTotalLength
argument_list|(
name|totalLength
argument_list|)
expr_stmt|;
name|evt
operator|.
name|setTotalLengthSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fireTransferEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireTransferError
parameter_list|()
block|{
name|evt
operator|.
name|setEventType
argument_list|(
name|TransferEvent
operator|.
name|TRANSFER_ERROR
argument_list|)
expr_stmt|;
name|fireTransferEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireTransferError
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|evt
operator|.
name|setEventType
argument_list|(
name|TransferEvent
operator|.
name|TRANSFER_ERROR
argument_list|)
expr_stmt|;
name|evt
operator|.
name|setException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|fireTransferEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireTransferEvent
parameter_list|(
name|TransferEvent
name|evt
parameter_list|)
block|{
name|Object
index|[]
name|listeners
init|=
name|this
operator|.
name|listeners
operator|.
name|getListenerList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|listeners
operator|.
name|length
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|-=
literal|2
control|)
block|{
if|if
condition|(
name|listeners
index|[
name|i
index|]
operator|==
name|TransferListener
operator|.
name|class
condition|)
block|{
operator|(
operator|(
name|TransferListener
operator|)
name|listeners
index|[
name|i
operator|+
literal|1
index|]
operator|)
operator|.
name|transferProgress
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getFileSeparator
parameter_list|()
block|{
return|return
literal|"/"
return|;
block|}
specifier|public
name|String
name|standardize
parameter_list|(
name|String
name|source
parameter_list|)
block|{
return|return
name|source
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|TimeoutConstraint
name|getTimeoutConstraint
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeoutConstraint
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|source
parameter_list|,
name|String
name|destination
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|source
argument_list|,
name|destination
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|put
parameter_list|(
name|File
name|source
parameter_list|,
name|String
name|destination
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"put in not supported by "
operator|+
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

