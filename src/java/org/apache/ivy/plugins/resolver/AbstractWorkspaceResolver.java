begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultWorkspaceModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ExcludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|License
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|WorkspaceModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|MetadataArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|ManifestHeaderElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|ManifestHeaderValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractWorkspaceResolver
extends|extends
name|AbstractResolver
block|{
specifier|private
name|boolean
name|ignoreBranch
decl_stmt|;
specifier|private
name|boolean
name|ignoreVersion
decl_stmt|;
specifier|public
name|void
name|setIgnoreBranch
parameter_list|(
name|boolean
name|ignoreBranch
parameter_list|)
block|{
name|this
operator|.
name|ignoreBranch
operator|=
name|ignoreBranch
expr_stmt|;
block|}
specifier|public
name|void
name|setIgnoreVersion
parameter_list|(
name|boolean
name|ignoreVersion
parameter_list|)
block|{
name|this
operator|.
name|ignoreVersion
operator|=
name|ignoreVersion
expr_stmt|;
block|}
specifier|protected
name|ResolvedModuleRevision
name|checkCandidate
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|workspaceModuleName
parameter_list|)
block|{
if|if
condition|(
name|workspaceModuleName
operator|==
literal|null
condition|)
block|{
name|workspaceModuleName
operator|=
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|ModuleRevisionId
name|dependencyMrid
init|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|String
name|org
init|=
name|dependencyMrid
operator|.
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
decl_stmt|;
name|String
name|module
init|=
name|dependencyMrid
operator|.
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|VersionMatcher
name|versionMatcher
init|=
name|getSettings
argument_list|()
operator|.
name|getVersionMatcher
argument_list|()
decl_stmt|;
name|ModuleRevisionId
name|candidateMrid
init|=
name|md
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
comment|// search a match on the organization and the module name
switch|switch
condition|(
name|org
condition|)
block|{
case|case
name|BundleInfo
operator|.
name|BUNDLE_TYPE
case|:
comment|// looking for an OSGi bundle via its symbolic name
name|String
name|sn
init|=
name|md
operator|.
name|getExtraInfoContentByTagName
argument_list|(
literal|"Bundle-SymbolicName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|==
literal|null
operator|||
operator|!
name|module
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
condition|)
block|{
comment|// not found, skip to next
return|return
literal|null
return|;
block|}
break|break;
case|case
name|BundleInfo
operator|.
name|PACKAGE_TYPE
case|:
comment|// looking for an OSGi bundle via its exported package
name|String
name|exportedPackages
init|=
name|md
operator|.
name|getExtraInfoContentByTagName
argument_list|(
literal|"Export-Package"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exportedPackages
operator|==
literal|null
condition|)
block|{
comment|// not found, skip to next
return|return
literal|null
return|;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|String
name|version
init|=
literal|null
decl_stmt|;
name|ManifestHeaderValue
name|exportElements
decl_stmt|;
try|try
block|{
name|exportElements
operator|=
operator|new
name|ManifestHeaderValue
argument_list|(
name|exportedPackages
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// wrong OSGi header: skip it
return|return
literal|null
return|;
block|}
for|for
control|(
name|ManifestHeaderElement
name|exportElement
range|:
name|exportElements
operator|.
name|getElements
argument_list|()
control|)
block|{
if|if
condition|(
name|exportElement
operator|.
name|getValues
argument_list|()
operator|.
name|contains
argument_list|(
name|module
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|version
operator|=
name|exportElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
comment|// not found, skip to next
return|return
literal|null
return|;
block|}
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
comment|// no version means anything can match. Let's trick the version matcher by
comment|// setting the exact expected version
name|version
operator|=
name|dependencyMrid
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
name|md
operator|.
name|setResolvedModuleRevisionId
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|module
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
operator|!
name|candidateMrid
operator|.
name|getModuleId
argument_list|()
operator|.
name|equals
argument_list|(
name|dependencyMrid
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
comment|// it doesn't match org#module, skip to next
return|return
literal|null
return|;
block|}
break|break;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"Workspace resolver found potential matching workspace module "
operator|+
name|workspaceModuleName
operator|+
literal|" with module "
operator|+
name|candidateMrid
operator|+
literal|" for module "
operator|+
name|dependencyMrid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ignoreBranch
condition|)
block|{
name|ModuleId
name|mid
init|=
name|dependencyMrid
operator|.
name|getModuleId
argument_list|()
decl_stmt|;
name|String
name|defaultBranch
init|=
name|getSettings
argument_list|()
operator|.
name|getDefaultBranch
argument_list|(
name|mid
argument_list|)
decl_stmt|;
name|String
name|dependencyBranch
init|=
name|dependencyMrid
operator|.
name|getBranch
argument_list|()
decl_stmt|;
name|String
name|candidateBranch
init|=
name|candidateMrid
operator|.
name|getBranch
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependencyBranch
operator|==
literal|null
condition|)
block|{
name|dependencyBranch
operator|=
name|defaultBranch
expr_stmt|;
block|}
if|if
condition|(
name|candidateBranch
operator|==
literal|null
condition|)
block|{
name|candidateBranch
operator|=
name|defaultBranch
expr_stmt|;
block|}
if|if
condition|(
name|dependencyBranch
operator|!=
name|candidateBranch
condition|)
block|{
comment|// Both cannot be null
if|if
condition|(
name|dependencyBranch
operator|==
literal|null
operator|||
name|candidateBranch
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\trejected since branches doesn't match (one is set, the other isn't)"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|dependencyBranch
operator|.
name|equals
argument_list|(
name|candidateBranch
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\trejected since branches doesn't match"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
comment|// Found one; check if it is for the module we need
if|if
condition|(
operator|!
name|ignoreVersion
operator|&&
operator|!
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
argument_list|)
operator|&&
operator|!
name|versionMatcher
operator|.
name|accept
argument_list|(
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|md
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\treject as version didn't match"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|ignoreVersion
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\tmatched (version are ignored)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\tversion matched"
argument_list|)
expr_stmt|;
block|}
name|WorkspaceModuleDescriptor
name|workspaceMd
init|=
name|createWorkspaceMd
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|Artifact
name|mdaf
init|=
name|md
operator|.
name|getMetadataArtifact
argument_list|()
decl_stmt|;
if|if
condition|(
name|mdaf
operator|==
literal|null
condition|)
block|{
name|mdaf
operator|=
operator|new
name|DefaultArtifact
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|md
operator|.
name|getPublicationDate
argument_list|()
argument_list|,
name|workspaceModuleName
argument_list|,
literal|"ivy"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|MetadataArtifactDownloadReport
name|madr
init|=
operator|new
name|MetadataArtifactDownloadReport
argument_list|(
name|mdaf
argument_list|)
decl_stmt|;
name|madr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setSearched
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|ResolvedModuleRevision
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|workspaceMd
argument_list|,
name|madr
argument_list|)
return|;
block|}
specifier|protected
name|WorkspaceModuleDescriptor
name|createWorkspaceMd
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
name|DefaultWorkspaceModuleDescriptor
name|newMd
init|=
operator|new
name|DefaultWorkspaceModuleDescriptor
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
literal|"release"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|newMd
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
name|ModuleDescriptor
operator|.
name|DEFAULT_CONFIGURATION
argument_list|)
argument_list|)
expr_stmt|;
name|newMd
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|newMd
operator|.
name|setDescription
argument_list|(
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|newMd
operator|.
name|setHomePage
argument_list|(
name|md
operator|.
name|getHomePage
argument_list|()
argument_list|)
expr_stmt|;
name|newMd
operator|.
name|setLastModified
argument_list|(
name|md
operator|.
name|getLastModified
argument_list|()
argument_list|)
expr_stmt|;
name|newMd
operator|.
name|setPublicationDate
argument_list|(
name|md
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
expr_stmt|;
name|newMd
operator|.
name|setResolvedPublicationDate
argument_list|(
name|md
operator|.
name|getResolvedPublicationDate
argument_list|()
argument_list|)
expr_stmt|;
name|newMd
operator|.
name|setStatus
argument_list|(
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
index|[]
name|allConfs
init|=
name|md
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|af
range|:
name|createWorkspaceArtifacts
argument_list|(
name|md
argument_list|)
control|)
block|{
if|if
condition|(
name|allConfs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|newMd
operator|.
name|addArtifact
argument_list|(
name|ModuleDescriptor
operator|.
name|DEFAULT_CONFIGURATION
argument_list|,
name|af
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Configuration
name|conf
range|:
name|allConfs
control|)
block|{
name|newMd
operator|.
name|addConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|newMd
operator|.
name|addArtifact
argument_list|(
name|conf
operator|.
name|getName
argument_list|()
argument_list|,
name|af
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|DependencyDescriptor
name|dependency
range|:
name|md
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|newMd
operator|.
name|addDependency
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExcludeRule
name|excludeRule
range|:
name|md
operator|.
name|getAllExcludeRules
argument_list|()
control|)
block|{
name|newMd
operator|.
name|addExcludeRule
argument_list|(
name|excludeRule
argument_list|)
expr_stmt|;
block|}
name|newMd
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|addAll
argument_list|(
name|md
operator|.
name|getExtraInfos
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|License
name|license
range|:
name|md
operator|.
name|getLicenses
argument_list|()
control|)
block|{
name|newMd
operator|.
name|addLicense
argument_list|(
name|license
argument_list|)
expr_stmt|;
block|}
return|return
name|newMd
return|;
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|Artifact
argument_list|>
name|createWorkspaceArtifacts
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
function_decl|;
specifier|public
name|void
name|publish
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|src
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"publish not supported by "
operator|+
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|ResolvedResource
name|findIvyFileRef
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

