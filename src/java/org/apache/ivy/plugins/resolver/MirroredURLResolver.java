begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheResourceOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
operator|.
name|RelativeURLRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|ChainedRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|MirroredURLResolver
extends|extends
name|RepositoryResolver
block|{
specifier|private
name|URL
name|mirrorListUrl
decl_stmt|;
specifier|public
name|MirroredURLResolver
parameter_list|()
block|{
name|setRepository
argument_list|(
operator|new
name|ChainedRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMirrorListUrl
parameter_list|(
name|URL
name|mirrorListUrl
parameter_list|)
block|{
name|this
operator|.
name|mirrorListUrl
operator|=
name|mirrorListUrl
expr_stmt|;
block|}
specifier|private
name|void
name|setupMirrors
parameter_list|()
block|{
name|File
name|mirrorListFile
init|=
name|downloadMirrorList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mirrorBaseUrls
decl_stmt|;
try|try
block|{
name|mirrorBaseUrls
operator|=
name|readMirrorList
argument_list|(
name|mirrorListFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The mirror list could not be read from "
operator|+
name|mirrorListUrl
operator|+
literal|" ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Repository
argument_list|>
name|repositories
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|baseUrl
range|:
name|mirrorBaseUrls
control|)
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"In the mirror list from "
operator|+
name|mirrorListUrl
operator|+
literal|", an incorrect url has been found and will then not be used: "
operator|+
name|baseUrl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RelativeURLRepository
name|repo
init|=
operator|new
name|RelativeURLRepository
argument_list|(
name|url
argument_list|,
name|this
operator|.
name|getTimeoutConstraint
argument_list|()
argument_list|)
decl_stmt|;
name|repositories
operator|.
name|add
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|ChainedRepository
operator|)
name|getRepository
argument_list|()
operator|)
operator|.
name|setRepositories
argument_list|(
name|repositories
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|downloadMirrorList
parameter_list|()
block|{
specifier|final
name|URLRepository
name|urlRepository
init|=
operator|new
name|URLRepository
argument_list|(
name|this
operator|.
name|getTimeoutConstraint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getEventManager
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|urlRepository
operator|.
name|addTransferListener
argument_list|(
name|getEventManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|URLResource
name|mirrorResource
init|=
operator|new
name|URLResource
argument_list|(
name|mirrorListUrl
argument_list|,
name|this
operator|.
name|getTimeoutConstraint
argument_list|()
argument_list|)
decl_stmt|;
name|CacheResourceOptions
name|options
init|=
operator|new
name|CacheResourceOptions
argument_list|()
decl_stmt|;
name|ArtifactDownloadReport
name|report
init|=
name|getRepositoryCacheManager
argument_list|()
operator|.
name|downloadRepositoryResource
argument_list|(
name|mirrorResource
argument_list|,
literal|"mirrorlist"
argument_list|,
literal|"text"
argument_list|,
literal|"txt"
argument_list|,
name|options
argument_list|,
name|urlRepository
argument_list|)
decl_stmt|;
return|return
name|report
operator|.
name|getLocalFile
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|readMirrorList
parameter_list|(
name|File
name|mirrorListFile
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|mirrorListFile
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"mirroredurl"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|()
block|{
name|super
operator|.
name|validate
argument_list|()
expr_stmt|;
name|setupMirrors
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

