begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ArtifactOrigin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheDownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheMetadataOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|DownloadListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|RepositoryCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|download
operator|.
name|EndArtifactDownloadEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|download
operator|.
name|NeedArtifactEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|download
operator|.
name|StartArtifactDownloadEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|DefaultModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|DownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|IvyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|ModuleEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|OrganisationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|RevisionEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParserRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|ArtifactResourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|ResourceDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|MDResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResourceMDParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|ChecksumHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|HostUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BasicResolver
extends|extends
name|AbstractResolver
block|{
specifier|public
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
decl_stmt|;
specifier|private
name|String
name|workspaceName
decl_stmt|;
comment|/**      * True if the files resolved are dependent of the environment from which they have been      * resolved, false otherwise. In general, relative paths are dependent of the environment, and      * absolute paths including machine reference are not.      */
specifier|private
name|boolean
name|envDependent
init|=
literal|true
decl_stmt|;
specifier|private
name|List
name|ivyattempts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|artattempts
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Boolean
name|checkmodified
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|checkconsistency
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|allownomd
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|checksums
init|=
literal|null
decl_stmt|;
specifier|private
name|EventManager
name|eventManager
init|=
literal|null
decl_stmt|;
comment|// may remain null
specifier|private
name|URLRepository
name|extartifactrep
init|=
operator|new
name|URLRepository
argument_list|()
decl_stmt|;
comment|// used only to download
comment|// external artifacts
specifier|public
name|BasicResolver
parameter_list|()
block|{
name|workspaceName
operator|=
name|HostUtil
operator|.
name|getLocalHostName
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getWorkspaceName
parameter_list|()
block|{
return|return
name|workspaceName
return|;
block|}
specifier|public
name|void
name|setWorkspaceName
parameter_list|(
name|String
name|workspaceName
parameter_list|)
block|{
name|this
operator|.
name|workspaceName
operator|=
name|workspaceName
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnvDependent
parameter_list|()
block|{
return|return
name|envDependent
return|;
block|}
specifier|public
name|void
name|setEnvDependent
parameter_list|(
name|boolean
name|envDependent
parameter_list|)
block|{
name|this
operator|.
name|envDependent
operator|=
name|envDependent
expr_stmt|;
block|}
specifier|public
name|void
name|setEventManager
parameter_list|(
name|EventManager
name|eventManager
parameter_list|)
block|{
name|this
operator|.
name|eventManager
operator|=
name|eventManager
expr_stmt|;
block|}
specifier|public
name|EventManager
name|getEventManager
parameter_list|()
block|{
return|return
name|eventManager
return|;
block|}
comment|/**      * True if this resolver should check lastmodified date to know if ivy files are up to date.      *       * @return      */
specifier|public
name|boolean
name|isCheckmodified
parameter_list|()
block|{
if|if
condition|(
name|checkmodified
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|check
init|=
name|getSettings
argument_list|()
operator|.
name|getVariable
argument_list|(
literal|"ivy.resolver.default.check.modified"
argument_list|)
decl_stmt|;
return|return
name|check
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|valueOf
argument_list|(
name|check
argument_list|)
operator|.
name|booleanValue
argument_list|()
else|:
literal|false
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
name|checkmodified
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|setCheckmodified
parameter_list|(
name|boolean
name|check
parameter_list|)
block|{
name|checkmodified
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|check
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResolvedModuleRevision
name|getDependency
parameter_list|(
name|DependencyDescriptor
name|dde
parameter_list|,
name|ResolveData
name|data
parameter_list|)
throws|throws
name|ParseException
block|{
name|IvyContext
name|context
init|=
name|IvyContext
operator|.
name|pushNewCopyContext
argument_list|()
decl_stmt|;
name|DependencyDescriptor
name|systemDd
init|=
name|dde
decl_stmt|;
name|DependencyDescriptor
name|nsDd
init|=
name|fromSystem
argument_list|(
name|dde
argument_list|)
decl_stmt|;
name|context
operator|.
name|setDependencyDescriptor
argument_list|(
name|systemDd
argument_list|)
expr_stmt|;
name|context
operator|.
name|setResolveData
argument_list|(
name|data
argument_list|)
expr_stmt|;
try|try
block|{
name|clearIvyAttempts
argument_list|()
expr_stmt|;
name|clearArtifactAttempts
argument_list|()
expr_stmt|;
name|boolean
name|downloaded
init|=
literal|false
decl_stmt|;
name|boolean
name|searched
init|=
literal|false
decl_stmt|;
name|ModuleRevisionId
name|systemMrid
init|=
name|systemDd
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|ModuleRevisionId
name|nsMrid
init|=
name|nsDd
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
comment|// check revision
name|int
name|index
init|=
name|systemMrid
operator|.
name|getRevision
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"@"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|systemMrid
operator|.
name|getRevision
argument_list|()
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|workspaceName
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": unhandled revision => "
operator|+
name|systemMrid
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|boolean
name|isDynamic
init|=
name|getSettings
argument_list|()
operator|.
name|getVersionMatcher
argument_list|()
operator|.
name|isDynamic
argument_list|(
name|systemMrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDynamic
operator|&&
operator|!
name|acceptLatest
argument_list|()
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"dynamic revisions not handled by "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|". impossible to resolve "
operator|+
name|systemMrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|boolean
name|isChangingRevision
init|=
name|getChangingMatcher
argument_list|()
operator|.
name|matches
argument_list|(
name|systemMrid
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isChangingDependency
init|=
name|isChangingRevision
operator|||
name|systemDd
operator|.
name|isChanging
argument_list|()
decl_stmt|;
comment|// if we do not have to check modified and if the revision is exact and not changing,
comment|// we first search for it in cache
name|ResolvedModuleRevision
name|cachedRmr
init|=
literal|null
decl_stmt|;
name|boolean
name|checkedCache
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isDynamic
operator|&&
operator|!
name|isCheckmodified
argument_list|()
operator|&&
operator|!
name|isChangingDependency
condition|)
block|{
name|cachedRmr
operator|=
name|findModuleInCache
argument_list|(
name|data
argument_list|,
name|systemMrid
argument_list|)
expr_stmt|;
name|checkedCache
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cachedRmr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cachedRmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
operator|&&
name|cachedRmr
operator|.
name|getResolver
argument_list|()
operator|!=
name|this
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": found revision in cache: "
operator|+
name|systemMrid
operator|+
literal|" (resolved by "
operator|+
name|cachedRmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"): but it's a default one, maybe we can find a better one"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache: "
operator|+
name|systemMrid
argument_list|)
expr_stmt|;
return|return
name|cachedRmr
return|;
block|}
block|}
block|}
name|checkInterrupted
argument_list|()
expr_stmt|;
name|ResolvedResource
name|ivyRef
init|=
name|findIvyFileRef
argument_list|(
name|nsDd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|checkInterrupted
argument_list|()
expr_stmt|;
name|searched
operator|=
literal|true
expr_stmt|;
comment|// get module descriptor
specifier|final
name|ModuleDescriptorParser
name|parser
decl_stmt|;
name|ModuleDescriptor
name|nsMd
decl_stmt|;
name|ModuleDescriptor
name|systemMd
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ivyRef
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isAllownomd
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": no ivy file found for "
operator|+
name|systemMrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|parser
operator|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|nsMd
operator|=
name|DefaultModuleDescriptor
operator|.
name|newDefaultInstance
argument_list|(
name|nsMrid
argument_list|,
name|nsDd
operator|.
name|getAllDependencyArtifacts
argument_list|()
argument_list|)
expr_stmt|;
name|ResolvedResource
name|artifactRef
init|=
name|findFirstArtifactRef
argument_list|(
name|nsMd
argument_list|,
name|nsDd
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|checkInterrupted
argument_list|()
expr_stmt|;
if|if
condition|(
name|artifactRef
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": no ivy file nor artifact found for "
operator|+
name|systemMrid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|checkedCache
condition|)
block|{
name|cachedRmr
operator|=
name|findModuleInCache
argument_list|(
name|data
argument_list|,
name|systemMrid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cachedRmr
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache: "
operator|+
name|systemMrid
argument_list|)
expr_stmt|;
return|return
name|cachedRmr
return|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
name|long
name|lastModified
init|=
name|artifactRef
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastModified
operator|!=
literal|0
operator|&&
name|nsMd
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
operator|(
operator|(
name|DefaultModuleDescriptor
operator|)
name|nsMd
operator|)
operator|.
name|setLastModified
argument_list|(
name|lastModified
argument_list|)
expr_stmt|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": no ivy file found for "
operator|+
name|systemMrid
operator|+
literal|": using default data"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDynamic
condition|)
block|{
name|nsMd
operator|.
name|setResolvedModuleRevisionId
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|nsMrid
argument_list|,
name|artifactRef
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|ResolvedModuleRevision
name|rmr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ivyRef
operator|instanceof
name|MDResolvedResource
condition|)
block|{
name|rmr
operator|=
operator|(
operator|(
name|MDResolvedResource
operator|)
name|ivyRef
operator|)
operator|.
name|getResolvedModuleRevision
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rmr
operator|==
literal|null
condition|)
block|{
name|rmr
operator|=
name|parse
argument_list|(
name|ivyRef
argument_list|,
name|systemDd
argument_list|,
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|rmr
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
operator|!
name|rmr
operator|.
name|isDownloaded
argument_list|()
condition|)
block|{
return|return
name|toSystem
argument_list|(
name|rmr
argument_list|)
return|;
block|}
else|else
block|{
name|nsMd
operator|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
expr_stmt|;
name|parser
operator|=
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getParser
argument_list|(
name|ivyRef
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// check descriptor data is in sync with resource revision and names
name|systemMd
operator|=
name|toSystem
argument_list|(
name|nsMd
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkconsistency
condition|)
block|{
name|checkDescriptorConsistency
argument_list|(
name|systemMrid
argument_list|,
name|systemMd
argument_list|,
name|ivyRef
argument_list|)
expr_stmt|;
name|checkDescriptorConsistency
argument_list|(
name|nsMrid
argument_list|,
name|nsMd
argument_list|,
name|ivyRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|nsMd
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
name|String
name|revision
init|=
name|getRevision
argument_list|(
name|ivyRef
argument_list|,
name|nsMrid
argument_list|,
name|nsMd
argument_list|)
decl_stmt|;
operator|(
operator|(
name|DefaultModuleDescriptor
operator|)
name|nsMd
operator|)
operator|.
name|setModuleRevisionId
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|nsMrid
argument_list|,
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"consistency disabled with instance of non DefaultModuleDescriptor..."
operator|+
literal|" module info can't be updated, so consistency check will be done"
argument_list|)
expr_stmt|;
name|checkDescriptorConsistency
argument_list|(
name|nsMrid
argument_list|,
name|nsMd
argument_list|,
name|ivyRef
argument_list|)
expr_stmt|;
name|checkDescriptorConsistency
argument_list|(
name|systemMrid
argument_list|,
name|systemMd
argument_list|,
name|ivyRef
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|systemMd
operator|==
literal|null
condition|)
block|{
name|systemMd
operator|=
name|toSystem
argument_list|(
name|nsMd
argument_list|)
expr_stmt|;
block|}
comment|// resolve revision
name|ModuleRevisionId
name|resolvedMrid
init|=
name|nsMrid
decl_stmt|;
if|if
condition|(
name|isDynamic
condition|)
block|{
name|resolvedMrid
operator|=
name|nsMd
operator|.
name|getResolvedModuleRevisionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|resolvedMrid
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|resolvedMrid
operator|.
name|getRevision
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|ivyRef
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
operator|||
name|ivyRef
operator|.
name|getRevision
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|resolvedMrid
operator|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|resolvedMrid
argument_list|,
literal|"working@"
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resolvedMrid
operator|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|resolvedMrid
argument_list|,
name|ivyRef
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\t["
operator|+
name|toSystem
argument_list|(
name|resolvedMrid
argument_list|)
operator|.
name|getRevision
argument_list|()
operator|+
literal|"] "
operator|+
name|systemMrid
operator|.
name|getModuleId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nsMd
operator|.
name|setResolvedModuleRevisionId
argument_list|(
name|resolvedMrid
argument_list|)
expr_stmt|;
comment|// keep system md in sync with ns md
name|systemMd
operator|.
name|setResolvedModuleRevisionId
argument_list|(
name|toSystem
argument_list|(
name|resolvedMrid
argument_list|)
argument_list|)
expr_stmt|;
comment|// check module descriptor revision
if|if
condition|(
operator|!
name|getSettings
argument_list|()
operator|.
name|getVersionMatcher
argument_list|()
operator|.
name|accept
argument_list|(
name|systemMrid
argument_list|,
name|systemMd
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": unacceptable revision => was="
operator|+
name|systemMd
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|" required="
operator|+
name|systemMrid
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// resolve and check publication date
if|if
condition|(
name|data
operator|.
name|getDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|long
name|pubDate
init|=
name|getPublicationDate
argument_list|(
name|systemMd
argument_list|,
name|systemDd
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|pubDate
operator|>
name|data
operator|.
name|getDate
argument_list|()
operator|.
name|getTime
argument_list|()
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": unacceptable publication date => was="
operator|+
operator|new
name|Date
argument_list|(
name|pubDate
argument_list|)
operator|+
literal|" required="
operator|+
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|pubDate
operator|==
operator|-
literal|1
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": impossible to guess publication date: artifact missing for "
operator|+
name|systemMrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|nsMd
operator|.
name|setResolvedPublicationDate
argument_list|(
operator|new
name|Date
argument_list|(
name|pubDate
argument_list|)
argument_list|)
expr_stmt|;
name|systemMd
operator|.
name|setResolvedPublicationDate
argument_list|(
operator|new
name|Date
argument_list|(
name|pubDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|nsMd
operator|.
name|isDefault
argument_list|()
operator|&&
name|data
operator|.
name|getSettings
argument_list|()
operator|.
name|logNotConvertedExclusionRule
argument_list|()
operator|&&
name|nsMd
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
name|DefaultModuleDescriptor
name|dmd
init|=
operator|(
name|DefaultModuleDescriptor
operator|)
name|nsMd
decl_stmt|;
if|if
condition|(
name|dmd
operator|.
name|isNamespaceUseful
argument_list|()
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"the module descriptor "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|" has information which can't be converted into "
operator|+
literal|"the system namespace. "
operator|+
literal|"It will require the availability of the namespace '"
operator|+
name|getNamespace
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' to be fully usable."
argument_list|)
expr_stmt|;
block|}
block|}
name|RepositoryCacheManager
name|cacheManager
init|=
name|data
operator|.
name|getCacheManager
argument_list|()
decl_stmt|;
comment|// the metadata artifact which was used to cache the original metadata file
name|Artifact
name|requestedMetadataArtifact
init|=
name|ivyRef
operator|==
literal|null
condition|?
name|systemMd
operator|.
name|getMetadataArtifact
argument_list|()
else|:
name|parser
operator|.
name|getMetadataArtifact
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|systemMrid
argument_list|,
name|ivyRef
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|,
name|ivyRef
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
name|cacheManager
operator|.
name|originalToCachedModuleDescriptor
argument_list|(
name|this
argument_list|,
name|ivyRef
argument_list|,
name|requestedMetadataArtifact
argument_list|,
name|systemMd
argument_list|,
operator|new
name|ModuleDescriptorWriter
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|ResolvedResource
name|originalMdResource
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|,
name|File
name|src
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
if|if
condition|(
name|originalMdResource
operator|==
literal|null
condition|)
block|{
comment|// a basic ivy file is written containing default data
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|md
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// copy and update ivy file from source to cache
name|parser
operator|.
name|toIvyFile
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
argument_list|,
name|originalMdResource
operator|.
name|getResource
argument_list|()
argument_list|,
name|dest
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|long
name|repLastModified
init|=
name|originalMdResource
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|repLastModified
operator|>
literal|0
condition|)
block|{
name|dest
operator|.
name|setLastModified
argument_list|(
name|repLastModified
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|DefaultModuleRevision
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|systemMd
argument_list|,
name|searched
argument_list|,
name|downloaded
argument_list|)
return|;
block|}
finally|finally
block|{
name|IvyContext
operator|.
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getRevision
parameter_list|(
name|ResolvedResource
name|ivyRef
parameter_list|,
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|revision
init|=
name|ivyRef
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"no revision found in reference for "
operator|+
name|askedMrid
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSettings
argument_list|()
operator|.
name|getVersionMatcher
argument_list|()
operator|.
name|isDynamic
argument_list|(
name|askedMrid
argument_list|)
condition|)
block|{
if|if
condition|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|"working@"
operator|+
name|getName
argument_list|()
return|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"using  "
operator|+
name|askedMrid
argument_list|)
expr_stmt|;
name|revision
operator|=
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"using  "
operator|+
name|askedMrid
argument_list|)
expr_stmt|;
name|revision
operator|=
name|askedMrid
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|revision
return|;
block|}
specifier|public
name|ResolvedModuleRevision
name|parse
parameter_list|(
specifier|final
name|ResolvedResource
name|mdRef
parameter_list|,
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
throws|throws
name|ParseException
block|{
name|DependencyDescriptor
name|nsDd
init|=
name|dd
decl_stmt|;
name|dd
operator|=
name|toSystem
argument_list|(
name|nsDd
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|ModuleDescriptorParser
name|parser
init|=
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getParser
argument_list|(
name|mdRef
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"no module descriptor parser available for "
operator|+
name|mdRef
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": found md file for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\t=> "
operator|+
name|mdRef
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tparser = "
operator|+
name|parser
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|resolvedMrid
init|=
name|mrid
decl_stmt|;
comment|// first check if this dependency has not yet been resolved
if|if
condition|(
name|getSettings
argument_list|()
operator|.
name|getVersionMatcher
argument_list|()
operator|.
name|isDynamic
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|resolvedMrid
operator|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mrid
argument_list|,
name|mdRef
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|IvyNode
name|node
init|=
name|data
operator|.
name|getNode
argument_list|(
name|resolvedMrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getModuleRevision
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this revision has already be resolved : return it
if|if
condition|(
name|node
operator|.
name|getDescriptor
argument_list|()
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": found already resolved revision: "
operator|+
name|resolvedMrid
operator|+
literal|": but it's a default one, maybe we can find a better one"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision already resolved: "
operator|+
name|resolvedMrid
argument_list|)
expr_stmt|;
return|return
name|DefaultModuleRevision
operator|.
name|searchedRmr
argument_list|(
name|node
operator|.
name|getModuleRevision
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
name|Artifact
name|moduleArtifact
init|=
name|parser
operator|.
name|getMetadataArtifact
argument_list|(
name|resolvedMrid
argument_list|,
name|mdRef
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isChangingRevision
init|=
name|getChangingMatcher
argument_list|()
operator|.
name|matches
argument_list|(
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isChangingDependency
init|=
name|isChangingRevision
operator|||
name|dd
operator|.
name|isChanging
argument_list|()
decl_stmt|;
return|return
name|data
operator|.
name|getCacheManager
argument_list|()
operator|.
name|cacheModuleDescriptor
argument_list|(
name|this
argument_list|,
name|mdRef
argument_list|,
name|moduleArtifact
argument_list|,
name|downloader
argument_list|,
operator|(
name|CacheMetadataOptions
operator|)
operator|new
name|CacheMetadataOptions
argument_list|()
operator|.
name|setChanging
argument_list|(
name|isChangingDependency
argument_list|)
operator|.
name|setCheckmodified
argument_list|(
name|isCheckmodified
argument_list|()
argument_list|)
operator|.
name|setValidate
argument_list|(
name|doValidate
argument_list|(
name|data
argument_list|)
argument_list|)
operator|.
name|setNamespace
argument_list|(
name|getNamespace
argument_list|()
argument_list|)
operator|.
name|setListener
argument_list|(
name|downloadListener
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|ResourceMDParser
name|getRMDParser
parameter_list|(
specifier|final
name|DependencyDescriptor
name|dd
parameter_list|,
specifier|final
name|ResolveData
name|data
parameter_list|)
block|{
return|return
operator|new
name|ResourceMDParser
argument_list|()
block|{
specifier|public
name|MDResolvedResource
name|parse
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|String
name|rev
parameter_list|)
block|{
try|try
block|{
name|ResolvedModuleRevision
name|rmr
init|=
name|BasicResolver
operator|.
name|this
operator|.
name|parse
argument_list|(
operator|new
name|ResolvedResource
argument_list|(
name|resource
argument_list|,
name|rev
argument_list|)
argument_list|,
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmr
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|MDResolvedResource
argument_list|(
name|resource
argument_list|,
name|rev
argument_list|,
name|rmr
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
return|;
block|}
specifier|protected
name|ResourceMDParser
name|getDefaultRMDParser
parameter_list|(
specifier|final
name|ModuleId
name|mid
parameter_list|)
block|{
return|return
operator|new
name|ResourceMDParser
argument_list|()
block|{
specifier|public
name|MDResolvedResource
name|parse
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|String
name|rev
parameter_list|)
block|{
return|return
operator|new
name|MDResolvedResource
argument_list|(
name|resource
argument_list|,
name|rev
argument_list|,
operator|new
name|DefaultModuleRevision
argument_list|(
name|BasicResolver
operator|.
name|this
argument_list|,
name|BasicResolver
operator|.
name|this
argument_list|,
name|DefaultModuleDescriptor
operator|.
name|newDefaultInstance
argument_list|(
operator|new
name|ModuleRevisionId
argument_list|(
name|mid
argument_list|,
name|rev
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|// private boolean isResolved(ResolveData data, ModuleRevisionId mrid) {
comment|// IvyNode node = getSystemNode(data, mrid);
comment|// return node != null&& node.getModuleRevision() != null;
comment|// }
comment|//
specifier|private
name|void
name|checkDescriptorConsistency
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|,
name|ResolvedResource
name|ivyRef
parameter_list|)
throws|throws
name|ParseException
block|{
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
name|StringBuffer
name|errors
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mrid
operator|.
name|getOrganisation
argument_list|()
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": bad organisation found in "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": expected='"
operator|+
name|mrid
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"' found='"
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|errors
operator|.
name|append
argument_list|(
literal|"bad organisation: expected='"
operator|+
name|mrid
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"' found='"
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"'; "
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mrid
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": bad module name found in "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": expected='"
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|" found='"
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|errors
operator|.
name|append
argument_list|(
literal|"bad module name: expected='"
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|"' found='"
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'; "
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|ivyRef
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ivyRef
operator|.
name|getRevision
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"working@"
argument_list|)
condition|)
block|{
name|ModuleRevisionId
name|expectedMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mrid
argument_list|,
name|ivyRef
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getSettings
argument_list|()
operator|.
name|getVersionMatcher
argument_list|()
operator|.
name|accept
argument_list|(
name|expectedMrid
argument_list|,
name|md
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": bad revision found in "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": expected='"
operator|+
name|ivyRef
operator|.
name|getRevision
argument_list|()
operator|+
literal|" found='"
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|errors
operator|.
name|append
argument_list|(
literal|"bad revision: expected='"
operator|+
name|ivyRef
operator|.
name|getRevision
argument_list|()
operator|+
literal|"' found='"
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|"'; "
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|getSettings
argument_list|()
operator|.
name|getStatusManager
argument_list|()
operator|.
name|isStatus
argument_list|(
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": bad status found in "
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": '"
operator|+
name|md
operator|.
name|getStatus
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|errors
operator|.
name|append
argument_list|(
literal|"bad status: '"
operator|+
name|md
operator|.
name|getStatus
argument_list|()
operator|+
literal|"'; "
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"inconsistent module descriptor file found in '"
operator|+
name|ivyRef
operator|.
name|getResource
argument_list|()
operator|+
literal|"': "
operator|+
name|errors
argument_list|,
literal|0
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|clearIvyAttempts
parameter_list|()
block|{
name|ivyattempts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clearArtifactAttempts
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|logIvyAttempt
parameter_list|(
name|String
name|attempt
parameter_list|)
block|{
name|ivyattempts
operator|.
name|add
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\ttried "
operator|+
name|attempt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|logArtifactAttempt
parameter_list|(
name|Artifact
name|art
parameter_list|,
name|String
name|attempt
parameter_list|)
block|{
name|List
name|attempts
init|=
operator|(
name|List
operator|)
name|artattempts
operator|.
name|get
argument_list|(
name|art
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempts
operator|==
literal|null
condition|)
block|{
name|attempts
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|artattempts
operator|.
name|put
argument_list|(
name|art
argument_list|,
name|attempts
argument_list|)
expr_stmt|;
block|}
name|attempts
operator|.
name|add
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\ttried "
operator|+
name|attempt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|logAttempt
parameter_list|(
name|String
name|attempt
parameter_list|)
block|{
name|Artifact
name|currentArtifact
init|=
operator|(
name|Artifact
operator|)
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
name|getName
argument_list|()
operator|+
literal|".artifact"
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentArtifact
operator|!=
literal|null
condition|)
block|{
name|logArtifactAttempt
argument_list|(
name|currentArtifact
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logIvyAttempt
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|reportFailure
parameter_list|()
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"==== "
operator|+
name|getName
argument_list|()
operator|+
literal|": tried"
argument_list|)
expr_stmt|;
for|for
control|(
name|ListIterator
name|iter
init|=
name|ivyattempts
operator|.
name|listIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|m
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"  "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|artattempts
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|art
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
name|attempts
init|=
operator|(
name|List
operator|)
name|artattempts
operator|.
name|get
argument_list|(
name|art
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempts
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"  -- artifact "
operator|+
name|art
operator|+
literal|":"
argument_list|)
expr_stmt|;
for|for
control|(
name|ListIterator
name|iterator
init|=
name|attempts
operator|.
name|listIterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|m
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"  "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|reportFailure
parameter_list|(
name|Artifact
name|art
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"==== "
operator|+
name|getName
argument_list|()
operator|+
literal|": tried"
argument_list|)
expr_stmt|;
name|List
name|attempts
init|=
operator|(
name|List
operator|)
name|artattempts
operator|.
name|get
argument_list|(
name|art
argument_list|)
decl_stmt|;
if|if
condition|(
name|attempts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ListIterator
name|iter
init|=
name|attempts
operator|.
name|listIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|m
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"  "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|acceptLatest
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|DownloadReport
name|download
parameter_list|(
name|Artifact
index|[]
name|artifacts
parameter_list|,
name|DownloadOptions
name|options
parameter_list|)
block|{
name|RepositoryCacheManager
name|cacheManager
init|=
name|options
operator|.
name|getCacheManager
argument_list|()
decl_stmt|;
name|clearArtifactAttempts
argument_list|()
expr_stmt|;
name|DownloadReport
name|dr
init|=
operator|new
name|DownloadReport
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|artifacts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ArtifactDownloadReport
name|adr
init|=
name|cacheManager
operator|.
name|download
argument_list|(
name|artifacts
index|[
name|i
index|]
argument_list|,
name|artifactResourceResolver
argument_list|,
name|downloader
argument_list|,
operator|new
name|CacheDownloadOptions
argument_list|()
operator|.
name|setListener
argument_list|(
name|downloadListener
argument_list|)
operator|.
name|setUseOrigin
argument_list|(
name|options
operator|.
name|isUseOrigin
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|DownloadStatus
operator|.
name|FAILED
operator|==
name|adr
operator|.
name|getDownloadStatus
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ArtifactDownloadReport
operator|.
name|MISSING_ARTIFACT
operator|.
name|equals
argument_list|(
name|adr
operator|.
name|getDownloadDetails
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"\t"
operator|+
name|adr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|adr
argument_list|)
expr_stmt|;
block|}
name|dr
operator|.
name|addArtifactReport
argument_list|(
name|adr
argument_list|)
expr_stmt|;
name|checkInterrupted
argument_list|()
expr_stmt|;
block|}
return|return
name|dr
return|;
block|}
specifier|protected
name|void
name|clearArtifactAttempts
parameter_list|()
block|{
name|artattempts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|ResolvedResource
name|artifactRef
init|=
name|getArtifactRef
argument_list|(
name|artifact
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactRef
operator|!=
literal|null
condition|)
block|{
return|return
name|artifactRef
operator|.
name|getResource
argument_list|()
operator|.
name|exists
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|long
name|getPublicationDate
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
if|if
condition|(
name|md
operator|.
name|getPublicationDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|md
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
name|ResolvedResource
name|artifactRef
init|=
name|findFirstArtifactRef
argument_list|(
name|md
argument_list|,
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactRef
operator|!=
literal|null
condition|)
block|{
return|return
name|artifactRef
operator|.
name|getLastModified
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
index|[]
name|listTokenValues
parameter_list|(
name|String
name|token
parameter_list|,
name|Map
name|otherTokenValues
parameter_list|)
block|{
name|Collection
name|ret
init|=
name|findNames
argument_list|(
name|otherTokenValues
argument_list|,
name|token
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
index|[]
operator|)
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|OrganisationEntry
index|[]
name|listOrganisations
parameter_list|()
block|{
name|Collection
name|names
init|=
name|findNames
argument_list|(
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|)
decl_stmt|;
name|OrganisationEntry
index|[]
name|ret
init|=
operator|new
name|OrganisationEntry
index|[
name|names
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|org
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
operator|new
name|OrganisationEntry
argument_list|(
name|this
argument_list|,
name|org
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|ModuleEntry
index|[]
name|listModules
parameter_list|(
name|OrganisationEntry
name|org
parameter_list|)
block|{
name|Map
name|tokenValues
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|org
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
name|findNames
argument_list|(
name|tokenValues
argument_list|,
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
decl_stmt|;
name|ModuleEntry
index|[]
name|ret
init|=
operator|new
name|ModuleEntry
index|[
name|names
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
operator|new
name|ModuleEntry
argument_list|(
name|org
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|RevisionEntry
index|[]
name|listRevisions
parameter_list|(
name|ModuleEntry
name|mod
parameter_list|)
block|{
name|Map
name|tokenValues
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|mod
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|mod
operator|.
name|getModule
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
name|findNames
argument_list|(
name|tokenValues
argument_list|,
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|)
decl_stmt|;
name|RevisionEntry
index|[]
name|ret
init|=
operator|new
name|RevisionEntry
index|[
name|names
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
operator|new
name|RevisionEntry
argument_list|(
name|mod
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
specifier|abstract
name|Collection
name|findNames
parameter_list|(
name|Map
name|tokenValues
parameter_list|,
name|String
name|token
parameter_list|)
function_decl|;
specifier|protected
name|ResolvedResource
name|findFirstArtifactRef
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
name|ResolvedResource
name|ret
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|conf
init|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getArtifacts
argument_list|(
name|conf
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|artifacts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|ret
operator|=
name|getArtifactRef
argument_list|(
name|artifacts
index|[
name|j
index|]
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|long
name|getAndCheck
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|size
init|=
name|get
argument_list|(
name|resource
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|String
index|[]
name|checksums
init|=
name|getChecksumAlgorithms
argument_list|()
decl_stmt|;
name|boolean
name|checked
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|checksums
operator|.
name|length
operator|&&
operator|!
name|checked
condition|;
name|i
operator|++
control|)
block|{
name|checked
operator|=
name|check
argument_list|(
name|resource
argument_list|,
name|dest
argument_list|,
name|checksums
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**      * Checks the given resource checksum if a checksum resource exists.      *       * @param resource      *            the resource to check      * @param dest      *            the file where the resource has been downloaded      * @param algorithm      *            the checksum algorithm to use      * @return true if the checksum has been successfully checked, false if the checksum wasn't      *         available      * @throws IOException      *             if a checksum exist but do not match the downloaded file checksum      */
specifier|private
name|boolean
name|check
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|File
name|dest
parameter_list|,
name|String
name|algorithm
parameter_list|)
throws|throws
name|IOException
block|{
name|Resource
name|csRes
init|=
name|resource
operator|.
name|clone
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|algorithm
argument_list|)
decl_stmt|;
if|if
condition|(
name|csRes
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|algorithm
operator|+
literal|" file found for "
operator|+
name|resource
operator|+
literal|": checking..."
argument_list|)
expr_stmt|;
name|File
name|csFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"ivytmp"
argument_list|,
name|algorithm
argument_list|)
decl_stmt|;
try|try
block|{
name|get
argument_list|(
name|csRes
argument_list|,
name|csFile
argument_list|)
expr_stmt|;
try|try
block|{
name|ChecksumHelper
operator|.
name|check
argument_list|(
name|dest
argument_list|,
name|csFile
argument_list|,
name|algorithm
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
name|algorithm
operator|+
literal|" OK for "
operator|+
name|resource
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
finally|finally
block|{
name|csFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|ResolvedResource
name|getArtifactRef
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|set
argument_list|(
name|getName
argument_list|()
operator|+
literal|".artifact"
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
try|try
block|{
name|ResolvedResource
name|ret
init|=
name|findArtifactRef
argument_list|(
name|artifact
argument_list|,
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
operator|&&
name|artifact
operator|.
name|getUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|URL
name|url
init|=
name|artifact
operator|.
name|getUrl
argument_list|()
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tusing url for "
operator|+
name|artifact
operator|+
literal|": "
operator|+
name|url
argument_list|)
expr_stmt|;
name|logArtifactAttempt
argument_list|(
name|artifact
argument_list|,
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|new
name|ResolvedResource
argument_list|(
operator|new
name|URLResource
argument_list|(
name|url
argument_list|)
argument_list|,
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|set
argument_list|(
name|getName
argument_list|()
operator|+
literal|".artifact"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|ResolvedResource
name|findArtifactRef
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Date
name|date
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|long
name|get
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|public
name|boolean
name|isCheckconsistency
parameter_list|()
block|{
return|return
name|checkconsistency
return|;
block|}
specifier|public
name|void
name|setCheckconsistency
parameter_list|(
name|boolean
name|checkConsitency
parameter_list|)
block|{
name|checkconsistency
operator|=
name|checkConsitency
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllownomd
parameter_list|()
block|{
return|return
name|allownomd
return|;
block|}
specifier|public
name|void
name|setAllownomd
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|allownomd
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getChecksumAlgorithms
parameter_list|()
block|{
name|String
name|csDef
init|=
name|checksums
operator|==
literal|null
condition|?
name|getSettings
argument_list|()
operator|.
name|getVariable
argument_list|(
literal|"ivy.checksums"
argument_list|)
else|:
name|checksums
decl_stmt|;
if|if
condition|(
name|csDef
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
comment|// csDef is a comma separated list of checksum algorithms to use with this resolver
comment|// we parse and return it as a String[]
name|String
index|[]
name|checksums
init|=
name|csDef
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
name|algos
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|checksums
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cs
init|=
name|checksums
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|cs
argument_list|)
operator|&&
operator|!
literal|"none"
operator|.
name|equals
argument_list|(
name|cs
argument_list|)
condition|)
block|{
name|algos
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|algos
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|algos
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|setChecksums
parameter_list|(
name|String
name|checksums
parameter_list|)
block|{
name|this
operator|.
name|checksums
operator|=
name|checksums
expr_stmt|;
block|}
specifier|private
specifier|final
name|ArtifactResourceResolver
name|artifactResourceResolver
init|=
operator|new
name|ArtifactResourceResolver
argument_list|()
block|{
specifier|public
name|ResolvedResource
name|resolve
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|artifact
operator|=
name|fromSystem
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
return|return
name|getArtifactRef
argument_list|(
name|artifact
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|ResourceDownloader
name|downloader
init|=
operator|new
name|ResourceDownloader
argument_list|()
block|{
specifier|public
name|void
name|download
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dest
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|File
name|part
init|=
operator|new
name|File
argument_list|(
name|dest
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".part"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|artifact
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|extartifactrep
operator|.
name|get
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getAndCheck
argument_list|(
name|resource
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|part
operator|.
name|renameTo
argument_list|(
name|dest
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"impossible to move part file to definitive one: "
operator|+
name|part
operator|+
literal|" -> "
operator|+
name|dest
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|DownloadListener
name|downloadListener
init|=
operator|new
name|DownloadListener
argument_list|()
block|{
specifier|public
name|void
name|needArtifact
parameter_list|(
name|RepositoryCacheManager
name|cache
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
if|if
condition|(
name|eventManager
operator|!=
literal|null
condition|)
block|{
name|eventManager
operator|.
name|fireIvyEvent
argument_list|(
operator|new
name|NeedArtifactEvent
argument_list|(
name|BasicResolver
operator|.
name|this
argument_list|,
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startArtifactDownload
parameter_list|(
name|RepositoryCacheManager
name|cache
parameter_list|,
name|ResolvedResource
name|rres
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|)
block|{
if|if
condition|(
name|artifact
operator|.
name|isMetadata
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"downloading "
operator|+
name|rres
operator|.
name|getResource
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"downloading "
operator|+
name|rres
operator|.
name|getResource
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eventManager
operator|!=
literal|null
condition|)
block|{
name|eventManager
operator|.
name|fireIvyEvent
argument_list|(
operator|new
name|StartArtifactDownloadEvent
argument_list|(
name|BasicResolver
operator|.
name|this
argument_list|,
name|artifact
argument_list|,
name|origin
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endArtifactDownload
parameter_list|(
name|RepositoryCacheManager
name|cache
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|ArtifactDownloadReport
name|adr
parameter_list|,
name|File
name|archiveFile
parameter_list|)
block|{
if|if
condition|(
name|eventManager
operator|!=
literal|null
condition|)
block|{
name|eventManager
operator|.
name|fireIvyEvent
argument_list|(
operator|new
name|EndArtifactDownloadEvent
argument_list|(
name|BasicResolver
operator|.
name|this
argument_list|,
name|artifact
argument_list|,
name|adr
argument_list|,
name|archiveFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

