begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ArtifactOrigin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|DownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|ModuleEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|OrganisationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|RevisionEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|MavenTimedSnapshotVersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|ContextualSAXHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * IBiblioResolver is a resolver which can be used to resolve dependencies found in the ibiblio  * maven repository, or similar repositories.  *<p>  * For more flexibility with url and patterns, see  * {@link org.apache.ivy.plugins.resolver.URLResolver}.  */
end_comment

begin_class
specifier|public
class|class
name|IBiblioResolver
extends|extends
name|URLResolver
block|{
specifier|private
specifier|static
specifier|final
name|String
name|M2_PER_MODULE_PATTERN
init|=
literal|"[revision]/[artifact]-[revision](-[classifier]).[ext]"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|M2_PATTERN
init|=
literal|"[organisation]/[module]/"
operator|+
name|M2_PER_MODULE_PATTERN
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PATTERN
init|=
literal|"[module]/[type]s/[artifact]-[revision].[ext]"
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROOT
init|=
literal|"http://www.ibiblio.org/maven/"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_M2_ROOT
init|=
literal|"https://repo1.maven.org/maven2/"
decl_stmt|;
specifier|private
name|String
name|root
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|pattern
init|=
literal|null
decl_stmt|;
comment|// use poms if m2 compatible is true
specifier|private
name|boolean
name|usepoms
init|=
literal|true
decl_stmt|;
comment|// use maven-metadata.xml is exists to list revisions
specifier|private
name|boolean
name|useMavenMetadata
init|=
literal|true
decl_stmt|;
specifier|public
name|IBiblioResolver
parameter_list|()
block|{
comment|// SNAPSHOT revisions are changing revisions
name|setChangingMatcher
argument_list|(
name|PatternMatcher
operator|.
name|REGEXP
argument_list|)
expr_stmt|;
name|setChangingPattern
argument_list|(
literal|".*-SNAPSHOT"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ResolvedResource
name|findIvyFileRef
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isM2compatible
argument_list|()
operator|||
operator|!
name|isUsepoms
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ModuleRevisionId
name|mrid
init|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|mrid
operator|=
name|convertM2IdForResourceSearch
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
specifier|final
name|String
name|revision
init|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
decl_stmt|;
specifier|final
name|MavenTimedSnapshotVersionMatcher
operator|.
name|MavenSnapshotRevision
name|snapshotRevision
init|=
name|MavenTimedSnapshotVersionMatcher
operator|.
name|computeIfSnapshot
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotRevision
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ResolvedResource
name|rres
init|=
name|findSnapshotDescriptor
argument_list|(
name|dd
argument_list|,
name|data
argument_list|,
name|mrid
argument_list|,
name|snapshotRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|rres
operator|!=
literal|null
condition|)
block|{
return|return
name|rres
return|;
block|}
block|}
return|return
name|findResourceUsingPatterns
argument_list|(
name|mrid
argument_list|,
name|getIvyPatterns
argument_list|()
argument_list|,
name|DefaultArtifact
operator|.
name|newPomArtifact
argument_list|(
name|mrid
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|,
name|getRMDParser
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResolvedResource
name|findArtifactRef
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|isM2compatible
argument_list|()
condition|)
block|{
name|mrid
operator|=
name|convertM2IdForResourceSearch
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|revision
init|=
name|artifact
operator|.
name|getId
argument_list|()
operator|.
name|getRevision
argument_list|()
decl_stmt|;
specifier|final
name|MavenTimedSnapshotVersionMatcher
operator|.
name|MavenSnapshotRevision
name|snapshotRevision
init|=
name|MavenTimedSnapshotVersionMatcher
operator|.
name|computeIfSnapshot
argument_list|(
name|revision
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotRevision
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ResolvedResource
name|rres
init|=
name|findSnapshotArtifact
argument_list|(
name|artifact
argument_list|,
name|date
argument_list|,
name|mrid
argument_list|,
name|snapshotRevision
argument_list|)
decl_stmt|;
if|if
condition|(
name|rres
operator|!=
literal|null
condition|)
block|{
return|return
name|rres
return|;
block|}
block|}
return|return
name|findResourceUsingPatterns
argument_list|(
name|mrid
argument_list|,
name|getArtifactPatterns
argument_list|()
argument_list|,
name|artifact
argument_list|,
name|getDefaultRMDParser
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
argument_list|,
name|date
argument_list|)
return|;
block|}
specifier|private
name|ResolvedResource
name|findSnapshotArtifact
parameter_list|(
specifier|final
name|Artifact
name|artifact
parameter_list|,
specifier|final
name|Date
name|date
parameter_list|,
specifier|final
name|ModuleRevisionId
name|mrid
parameter_list|,
specifier|final
name|MavenTimedSnapshotVersionMatcher
operator|.
name|MavenSnapshotRevision
name|snapshotRevision
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isM2compatible
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|snapshotArtifactPattern
decl_stmt|;
if|if
condition|(
name|snapshotRevision
operator|.
name|isTimestampedSnapshot
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|mrid
operator|+
literal|" has been identified as a (Maven) timestamped snapshot revision"
argument_list|)
expr_stmt|;
comment|// this is a Maven timestamped snapshot revision. Something like 1.0.0-<timestampedRev>
comment|// We now get the base revision from it, which is "1.0.0" and append the "-SNAPSHOT" to it.
specifier|final
name|String
name|inferredSnapshotRevision
init|=
name|snapshotRevision
operator|.
name|getBaseRevision
argument_list|()
operator|+
literal|"-SNAPSHOT"
decl_stmt|;
comment|// we replace the "/[revision]" in the descriptor pattern with the "inferred" snapshot revision
comment|// which is like "1.0.0-SNAPSHOT".
comment|// Ultimately, this will translate to something like org/module/1.0.0-SNAPSHOT/artifact-1.0.0-<timestampedRev>(-[classifier]).ext
name|snapshotArtifactPattern
operator|=
name|getWholePattern
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"/\\[revision\\]"
argument_list|,
literal|"/"
operator|+
name|inferredSnapshotRevision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// it's not a timestamped revision, but a regular snapshot. Try and find
comment|// any potential timestamped revisions of this regular snapshot, by looking into the maven metadata
specifier|final
name|String
name|timestampedRev
init|=
name|findTimestampedSnapshotVersion
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestampedRev
operator|==
literal|null
condition|)
block|{
comment|// no timestamped snapshots found and instead this is just a regular snapshot
comment|// version. So let's just fallback to our logic of finding resources using configured
comment|// artifact pattern(s)
return|return
literal|null
return|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
name|mrid
operator|+
literal|" has been identified as a snapshot revision which has a timestamped snapshot revision "
operator|+
name|timestampedRev
argument_list|)
expr_stmt|;
comment|// we have found a timestamped revision for a snapshot. So we replace the "-[revision]" in the artifact file name to use the
comment|// timestamped revision.
comment|// Ultimately, this will translate to something like org/module/1.0.0-SNAPSHOT/artifact-1.0.0-<timestampedRev>(-[classifier]).ext
name|snapshotArtifactPattern
operator|=
name|getWholePattern
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"\\-\\[revision\\]"
argument_list|,
literal|"-"
operator|+
name|timestampedRev
argument_list|)
expr_stmt|;
block|}
return|return
name|findResourceUsingPattern
argument_list|(
name|mrid
argument_list|,
name|snapshotArtifactPattern
argument_list|,
name|artifact
argument_list|,
name|getDefaultRMDParser
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
argument_list|,
name|date
argument_list|)
return|;
block|}
specifier|private
name|ResolvedResource
name|findSnapshotDescriptor
parameter_list|(
specifier|final
name|DependencyDescriptor
name|dd
parameter_list|,
specifier|final
name|ResolveData
name|data
parameter_list|,
specifier|final
name|ModuleRevisionId
name|mrid
parameter_list|,
specifier|final
name|MavenTimedSnapshotVersionMatcher
operator|.
name|MavenSnapshotRevision
name|snapshotRevision
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isM2compatible
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|snapshotDescriptorPattern
decl_stmt|;
if|if
condition|(
name|snapshotRevision
operator|.
name|isTimestampedSnapshot
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|mrid
operator|+
literal|" has been identified as a (Maven) timestamped snapshot revision"
argument_list|)
expr_stmt|;
comment|// this is a Maven timestamped snapshot revision. Something like 1.0.0-<timestampedRev>
comment|// We now get the base revision from it, which is "1.0.0" and append the "-SNAPSHOT" to it.
specifier|final
name|String
name|inferredSnapshotRevision
init|=
name|snapshotRevision
operator|.
name|getBaseRevision
argument_list|()
operator|+
literal|"-SNAPSHOT"
decl_stmt|;
comment|// we replace the "/[revision]" in the descriptor pattern with the "inferred" snapshot revision
comment|// which is like "1.0.0-SNAPSHOT".
comment|// Ultimately, this will translate to something like org/module/1.0.0-SNAPSHOT/artifact-1.0.0-<timestampedRev>(-[classifier]).ext
name|snapshotDescriptorPattern
operator|=
name|getWholePattern
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"/\\[revision\\]"
argument_list|,
literal|"/"
operator|+
name|inferredSnapshotRevision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// it's not a timestamped revision, but a regular snapshot. Try and find
comment|// any potential timestamped revisions of this regular snapshot, by looking into the maven metadata
specifier|final
name|String
name|timestampedRev
init|=
name|findTimestampedSnapshotVersion
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestampedRev
operator|==
literal|null
condition|)
block|{
comment|// no timestamped snapshots found and instead this is just a regular snapshot
comment|// version. So let's just fallback to our logic of finding resources using configured
comment|// Ivy pattern(s)
return|return
literal|null
return|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
name|mrid
operator|+
literal|" has been identified as a snapshot revision which has a timestamped snapshot revision "
operator|+
name|timestampedRev
argument_list|)
expr_stmt|;
comment|// we have found a timestamped revision for a snapshot. So we replace the "-[revision]" in the artifact file name to use the
comment|// timestamped revision.
comment|// Ultimately, this will translate to something like org/module/1.0.0-SNAPSHOT/artifact-1.0.0-<timestampedRev>(-[classifier]).ext
name|snapshotDescriptorPattern
operator|=
name|getWholePattern
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"\\-\\[revision\\]"
argument_list|,
literal|"-"
operator|+
name|timestampedRev
argument_list|)
expr_stmt|;
block|}
comment|// find the descriptor using the snapshot descriptor pattern
return|return
name|findResourceUsingPattern
argument_list|(
name|mrid
argument_list|,
name|snapshotDescriptorPattern
argument_list|,
name|DefaultArtifact
operator|.
name|newPomArtifact
argument_list|(
name|mrid
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|,
name|getRMDParser
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|findTimestampedSnapshotVersion
parameter_list|(
specifier|final
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isM2compatible
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|shouldUseMavenMetadata
argument_list|(
name|getWholePattern
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
specifier|final
name|String
name|metadataLocation
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|root
operator|+
literal|"[organisation]/[module]/[revision]/maven-metadata.xml"
argument_list|,
name|mrid
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|metadata
init|=
name|getRepository
argument_list|()
operator|.
name|getResource
argument_list|(
name|metadataLocation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|metadata
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tmaven-metadata not available for: "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
init|(
specifier|final
name|InputStream
name|metadataStream
init|=
name|metadata
operator|.
name|openStream
argument_list|()
init|)
block|{
specifier|final
name|StringBuffer
name|timestamp
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|final
name|StringBuffer
name|buildNumber
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|XMLHelper
operator|.
name|parse
argument_list|(
name|metadataStream
argument_list|,
literal|null
argument_list|,
operator|new
name|ContextualSAXHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"metadata/versioning/snapshot/timestamp"
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
condition|)
block|{
name|timestamp
operator|.
name|append
argument_list|(
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"metadata/versioning/snapshot/buildNumber"
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
condition|)
block|{
name|buildNumber
operator|.
name|append
argument_list|(
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|timestamp
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// we have found a timestamp, so this is a snapshot unique version
name|String
name|rev
init|=
name|mrid
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|rev
operator|=
name|rev
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rev
operator|.
name|length
argument_list|()
operator|-
literal|"SNAPSHOT"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rev
operator|+=
name|timestamp
operator|.
name|toString
argument_list|()
operator|+
literal|"-"
operator|+
name|buildNumber
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|rev
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SAXException
decl||
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"impossible to access maven metadata file, ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setM2compatible
parameter_list|(
name|boolean
name|m2compatible
parameter_list|)
block|{
name|super
operator|.
name|setM2compatible
argument_list|(
name|m2compatible
argument_list|)
expr_stmt|;
if|if
condition|(
name|m2compatible
condition|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|root
operator|=
name|DEFAULT_M2_ROOT
expr_stmt|;
block|}
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
name|pattern
operator|=
name|M2_PATTERN
expr_stmt|;
block|}
name|updateWholePattern
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|ensureConfigured
parameter_list|(
name|ResolverSettings
name|settings
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|!=
literal|null
operator|&&
operator|(
name|root
operator|==
literal|null
operator|||
name|pattern
operator|==
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|String
name|root
init|=
name|settings
operator|.
name|getVariable
argument_list|(
literal|"ivy.ibiblio.default.artifact.root"
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
else|else
block|{
name|settings
operator|.
name|configureRepositories
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|settings
operator|.
name|getVariable
argument_list|(
literal|"ivy.ibiblio.default.artifact.root"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|settings
operator|.
name|getVariable
argument_list|(
literal|"ivy.ibiblio.default.artifact.pattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
else|else
block|{
name|settings
operator|.
name|configureRepositories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|settings
operator|.
name|getVariable
argument_list|(
literal|"ivy.ibiblio.default.artifact.pattern"
argument_list|)
expr_stmt|;
block|}
block|}
name|updateWholePattern
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getModuleDescriptorExtension
parameter_list|()
block|{
return|return
literal|"pom"
return|;
block|}
specifier|private
name|String
name|getWholePattern
parameter_list|()
block|{
return|return
name|root
operator|+
name|pattern
return|;
block|}
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"pattern must not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
name|updateWholePattern
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
comment|/**      * Sets the root of the maven like repository. The maven like repository is necessarily an http      * repository.      *      * @param root the root of the maven like repository      * @throws IllegalArgumentException if root does not start with "http://"      */
specifier|public
name|void
name|setRoot
parameter_list|(
name|String
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"root must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|root
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|this
operator|.
name|root
operator|=
name|root
operator|+
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
name|updateWholePattern
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateWholePattern
parameter_list|()
block|{
if|if
condition|(
name|isM2compatible
argument_list|()
operator|&&
name|isUsepoms
argument_list|()
condition|)
block|{
name|setIvyPatterns
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|getWholePattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setIvyPatterns
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setArtifactPatterns
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|getWholePattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|publish
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|src
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"publish not supported by IBiblioResolver"
argument_list|)
throw|;
block|}
comment|// we do not allow to list organisations on ibiblio, nor modules in ibiblio 1
annotation|@
name|Override
specifier|public
name|String
index|[]
name|listTokenValues
parameter_list|(
name|String
name|token
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherTokenValues
parameter_list|)
block|{
if|if
condition|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
if|if
condition|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
operator|&&
operator|!
name|isM2compatible
argument_list|()
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|listTokenValues
argument_list|(
name|token
argument_list|,
name|otherTokenValues
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
index|[]
name|listTokenValues
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
if|if
condition|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
operator|&&
operator|!
name|isM2compatible
argument_list|()
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
comment|// let's see if we should use maven metadata for this listing...
if|if
condition|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
operator|&&
name|shouldUseMavenMetadata
argument_list|(
name|getWholePattern
argument_list|()
argument_list|)
condition|)
block|{
comment|// now we must use metadata if available
comment|/*              * we substitute tokens with ext token only in the m2 per module pattern, to match has              * has been done in the given pattern              */
name|String
name|partiallyResolvedM2PerModulePattern
init|=
name|IvyPatternHelper
operator|.
name|substituteTokens
argument_list|(
name|M2_PER_MODULE_PATTERN
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|IvyPatternHelper
operator|.
name|EXT_KEY
argument_list|,
literal|"pom"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|endsWith
argument_list|(
name|partiallyResolvedM2PerModulePattern
argument_list|)
condition|)
block|{
comment|/*                  * the given pattern already contain resolved org and module, we just have to                  * replace the per module pattern at the end by 'maven-metadata.xml' to have the                  * maven metadata file location                  */
name|String
name|metadataLocation
init|=
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pattern
operator|.
name|lastIndexOf
argument_list|(
name|partiallyResolvedM2PerModulePattern
argument_list|)
argument_list|)
operator|+
literal|"maven-metadata.xml"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|revs
init|=
name|listRevisionsWithMavenMetadata
argument_list|(
name|getRepository
argument_list|()
argument_list|,
name|metadataLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|revs
operator|!=
literal|null
condition|)
block|{
return|return
name|revs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|revs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|/*                  * this is probably because the given pattern has been substituted with jar ext, if                  * this resolver has optional module descriptors. But since we have to use maven                  * metadata, we don't care about this case, maven metadata has already been used                  * when looking for revisions with the pattern substituted with ext=xml for the                  * "ivy" pattern.                  */
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
return|return
name|super
operator|.
name|listTokenValues
argument_list|(
name|pattern
argument_list|,
name|token
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OrganisationEntry
index|[]
name|listOrganisations
parameter_list|()
block|{
return|return
operator|new
name|OrganisationEntry
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|ModuleEntry
index|[]
name|listModules
parameter_list|(
name|OrganisationEntry
name|org
parameter_list|)
block|{
if|if
condition|(
name|isM2compatible
argument_list|()
condition|)
block|{
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|listModules
argument_list|(
name|org
argument_list|)
return|;
block|}
return|return
operator|new
name|ModuleEntry
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|RevisionEntry
index|[]
name|listRevisions
parameter_list|(
name|ModuleEntry
name|mod
parameter_list|)
block|{
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|listRevisions
argument_list|(
name|mod
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ResolvedResource
index|[]
name|listResources
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|pattern
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
if|if
condition|(
name|shouldUseMavenMetadata
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|revs
init|=
name|listRevisionsWithMavenMetadata
argument_list|(
name|repository
argument_list|,
name|mrid
operator|.
name|getModuleId
argument_list|()
operator|.
name|getAttributes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|revs
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tfound revs: "
operator|+
name|revs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResolvedResource
argument_list|>
name|rres
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|rev
range|:
name|revs
control|)
block|{
name|ModuleRevisionId
name|historicalMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mrid
argument_list|,
name|rev
argument_list|)
decl_stmt|;
name|String
name|patternForRev
init|=
name|pattern
decl_stmt|;
if|if
condition|(
name|rev
operator|.
name|endsWith
argument_list|(
literal|"SNAPSHOT"
argument_list|)
condition|)
block|{
name|String
name|snapshotVersion
init|=
name|findTimestampedSnapshotVersion
argument_list|(
name|historicalMrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotVersion
operator|!=
literal|null
condition|)
block|{
name|patternForRev
operator|=
name|pattern
operator|.
name|replaceFirst
argument_list|(
literal|"\\-\\[revision\\]"
argument_list|,
literal|"-"
operator|+
name|snapshotVersion
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|resolvedPattern
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|patternForRev
argument_list|,
name|historicalMrid
argument_list|,
name|artifact
argument_list|)
decl_stmt|;
try|try
block|{
name|Resource
name|res
init|=
name|repository
operator|.
name|getResource
argument_list|(
name|resolvedPattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
comment|// we do not test if the resource actually exist here, it would cause
comment|// a lot of checks which are not always necessary depending on the usage
comment|// which is done of the returned ResolvedResource array
name|rres
operator|.
name|add
argument_list|(
operator|new
name|ResolvedResource
argument_list|(
name|res
argument_list|,
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"impossible to get resource from name listed by maven-metadata.xml:"
operator|+
name|rres
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rres
operator|.
name|toArray
argument_list|(
operator|new
name|ResolvedResource
index|[
name|rres
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
else|else
block|{
comment|// maven metadata not available or something went wrong,
comment|// use default listing capability
return|return
name|super
operator|.
name|listResources
argument_list|(
name|repository
argument_list|,
name|mrid
argument_list|,
name|pattern
argument_list|,
name|artifact
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|super
operator|.
name|listResources
argument_list|(
name|repository
argument_list|,
name|mrid
argument_list|,
name|pattern
argument_list|,
name|artifact
argument_list|)
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|listRevisionsWithMavenMetadata
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokenValues
parameter_list|)
block|{
name|String
name|metadataLocation
init|=
name|IvyPatternHelper
operator|.
name|substituteTokens
argument_list|(
name|root
operator|+
literal|"[organisation]/[module]/maven-metadata.xml"
argument_list|,
name|tokenValues
argument_list|)
decl_stmt|;
return|return
name|listRevisionsWithMavenMetadata
argument_list|(
name|repository
argument_list|,
name|metadataLocation
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|listRevisionsWithMavenMetadata
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|String
name|metadataLocation
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|revs
init|=
literal|null
decl_stmt|;
name|InputStream
name|metadataStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Resource
name|metadata
init|=
name|repository
operator|.
name|getResource
argument_list|(
name|metadataLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tlisting revisions from maven-metadata: "
operator|+
name|metadata
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|metadataRevs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|metadataStream
operator|=
name|metadata
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|XMLHelper
operator|.
name|parse
argument_list|(
name|metadataStream
argument_list|,
literal|null
argument_list|,
operator|new
name|ContextualSAXHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"metadata/versioning/versions/version"
operator|.
name|equals
argument_list|(
name|getContext
argument_list|()
argument_list|)
condition|)
block|{
name|metadataRevs
operator|.
name|add
argument_list|(
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|revs
operator|=
name|metadataRevs
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tmaven-metadata not available: "
operator|+
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"impossible to access maven metadata file, ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
decl||
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"impossible to parse maven metadata file, ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|metadataStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|metadataStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
block|}
block|}
return|return
name|revs
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|findTokenValues
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokenValues
parameter_list|,
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
if|if
condition|(
name|shouldUseMavenMetadata
argument_list|(
name|getWholePattern
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|revs
init|=
name|listRevisionsWithMavenMetadata
argument_list|(
name|getRepository
argument_list|()
argument_list|,
name|tokenValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|revs
operator|!=
literal|null
condition|)
block|{
name|names
operator|.
name|addAll
argument_list|(
name|filterNames
argument_list|(
name|revs
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|super
operator|.
name|findTokenValues
argument_list|(
name|names
argument_list|,
name|patterns
argument_list|,
name|tokenValues
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|shouldUseMavenMetadata
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|isUseMavenMetadata
argument_list|()
operator|&&
name|isM2compatible
argument_list|()
operator|&&
name|pattern
operator|.
name|endsWith
argument_list|(
name|M2_PATTERN
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"ibiblio"
return|;
block|}
comment|// override some methods to ensure configuration
annotation|@
name|Override
specifier|public
name|ResolvedModuleRevision
name|getDependency
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
throws|throws
name|ParseException
block|{
name|ensureConfigured
argument_list|(
name|data
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getDependency
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DownloadReport
name|download
parameter_list|(
name|Artifact
index|[]
name|artifacts
parameter_list|,
name|DownloadOptions
name|options
parameter_list|)
block|{
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|download
argument_list|(
name|artifacts
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|exists
argument_list|(
name|artifact
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ArtifactOrigin
name|locate
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|locate
argument_list|(
name|artifact
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getArtifactPatterns
parameter_list|()
block|{
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getArtifactPatterns
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isUsepoms
parameter_list|()
block|{
return|return
name|usepoms
return|;
block|}
specifier|public
name|void
name|setUsepoms
parameter_list|(
name|boolean
name|usepoms
parameter_list|)
block|{
name|this
operator|.
name|usepoms
operator|=
name|usepoms
expr_stmt|;
name|updateWholePattern
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseMavenMetadata
parameter_list|()
block|{
return|return
name|useMavenMetadata
return|;
block|}
specifier|public
name|void
name|setUseMavenMetadata
parameter_list|(
name|boolean
name|useMavenMetadata
parameter_list|)
block|{
name|this
operator|.
name|useMavenMetadata
operator|=
name|useMavenMetadata
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dumpSettings
parameter_list|()
block|{
name|ensureConfigured
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|dumpSettings
argument_list|()
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\troot: "
operator|+
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tpattern: "
operator|+
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tusepoms: "
operator|+
name|usepoms
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tuseMavenMetadata: "
operator|+
name|useMavenMetadata
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

