begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|LogOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|RelativeUrlResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ArtifactOrigin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheDownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheMetadataOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|DownloadListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|RepositoryCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ResolutionCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|download
operator|.
name|EndArtifactDownloadEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|download
operator|.
name|NeedArtifactEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|download
operator|.
name|StartArtifactDownloadEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|status
operator|.
name|StatusManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|MetadataArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|DownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|IvyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|ModuleEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|OrganisationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|RevisionEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|TimeoutConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|Validatable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|ConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|ArtifactInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|LatestStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|NameSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|ChainResolver
operator|.
name|ResolvedModuleRevisionArtifactInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|HasLatestStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Checks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * This abstract resolver only provides handling for resolver name  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractResolver
implements|implements
name|DependencyResolver
implements|,
name|HasLatestStrategy
implements|,
name|Validatable
block|{
comment|/**      * True if parsed ivy files should be validated against xsd, false if they should not, null if      * default behavior should be used      */
specifier|private
name|Boolean
name|validate
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|ResolverSettings
name|settings
decl_stmt|;
specifier|private
name|EventManager
name|eventManager
init|=
literal|null
decl_stmt|;
comment|// may remain null
comment|/**      * The latest strategy to use to find latest among several artifacts      */
specifier|private
name|LatestStrategy
name|latestStrategy
decl_stmt|;
specifier|private
name|String
name|latestStrategyName
decl_stmt|;
comment|/**      * The namespace to which this resolver belongs      */
specifier|private
name|Namespace
name|namespace
decl_stmt|;
specifier|private
name|String
name|namespaceName
decl_stmt|;
specifier|private
name|String
name|cacheManagerName
decl_stmt|;
specifier|private
name|RepositoryCacheManager
name|repositoryCacheManager
decl_stmt|;
comment|// used to store default values for nested cache
specifier|private
name|String
name|changingMatcherName
decl_stmt|;
specifier|private
name|String
name|changingPattern
decl_stmt|;
specifier|private
name|Boolean
name|checkmodified
decl_stmt|;
specifier|private
name|String
name|timeoutConstraintName
decl_stmt|;
specifier|private
name|TimeoutConstraint
name|timeoutConstraint
decl_stmt|;
specifier|public
name|ResolverSettings
name|getSettings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
specifier|public
name|ParserSettings
name|getParserSettings
parameter_list|()
block|{
return|return
operator|new
name|ResolverParserSettings
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSettings
parameter_list|(
name|ResolverSettings
name|ivy
parameter_list|)
block|{
name|settings
operator|=
name|ivy
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * this method should remove sensitive information from a location to be displayed in a log      *      * @param name      *            location      * @return location with sensitive data replaced by stars      */
specifier|public
name|String
name|hidePassword
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
return|;
block|}
specifier|protected
name|boolean
name|doValidate
parameter_list|(
name|ResolveData
name|data
parameter_list|)
block|{
if|if
condition|(
name|validate
operator|!=
literal|null
condition|)
block|{
return|return
name|validate
return|;
block|}
else|else
block|{
return|return
name|data
operator|.
name|isValidate
argument_list|()
return|;
block|}
block|}
specifier|public
name|boolean
name|isValidate
parameter_list|()
block|{
return|return
name|validate
operator|==
literal|null
operator|||
name|validate
return|;
block|}
specifier|public
name|void
name|setValidate
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
name|this
operator|.
name|validate
operator|=
name|validate
expr_stmt|;
block|}
specifier|protected
name|void
name|checkInterrupted
parameter_list|()
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getIvy
argument_list|()
operator|.
name|checkInterrupted
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reportFailure
parameter_list|()
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"no failure report implemented by "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reportFailure
parameter_list|(
name|Artifact
name|art
parameter_list|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"no failure report implemented by "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|listTokenValues
parameter_list|(
name|String
name|token
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherTokenValues
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|listTokenValues
parameter_list|(
name|String
index|[]
name|tokens
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|criteria
parameter_list|)
block|{
return|return
operator|new
name|Map
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|OrganisationEntry
index|[]
name|listOrganisations
parameter_list|()
block|{
return|return
operator|new
name|OrganisationEntry
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|ModuleEntry
index|[]
name|listModules
parameter_list|(
name|OrganisationEntry
name|org
parameter_list|)
block|{
return|return
operator|new
name|ModuleEntry
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|RevisionEntry
index|[]
name|listRevisions
parameter_list|(
name|ModuleEntry
name|module
parameter_list|)
block|{
return|return
operator|new
name|RevisionEntry
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|public
name|void
name|dumpSettings
parameter_list|()
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|" ["
operator|+
name|getTypeName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tcache: "
operator|+
name|cacheManagerName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|TimeoutConstraint
name|getTimeoutConstraint
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeoutConstraint
return|;
block|}
specifier|public
name|void
name|setTimeoutConstraint
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|timeoutConstraintName
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Default implementation downloads the artifact without taking advantage of its location      *      * @param artifact ArtifactOrigin      * @param options DownloadOptions      * @return ArtifactDownloadReport      */
specifier|public
name|ArtifactDownloadReport
name|download
parameter_list|(
name|ArtifactOrigin
name|artifact
parameter_list|,
name|DownloadOptions
name|options
parameter_list|)
block|{
name|DownloadReport
name|r
init|=
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
name|artifact
operator|.
name|getArtifact
argument_list|()
block|}
argument_list|,
name|options
argument_list|)
decl_stmt|;
return|return
name|r
operator|.
name|getArtifactReport
argument_list|(
name|artifact
operator|.
name|getArtifact
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|locate
argument_list|(
name|artifact
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Default implementation actually download the artifact Subclasses should overwrite this to      * avoid the download      *      * @param artifact ArtifactOrigin      * @return ArtifactOrigin      */
specifier|public
name|ArtifactOrigin
name|locate
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|DownloadReport
name|dr
init|=
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
name|artifact
block|}
argument_list|,
operator|new
name|DownloadOptions
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dr
operator|==
literal|null
condition|)
block|{
comment|/*              * according to IVY-831, it seems that this actually happen sometime, while the              * contract of DependencyResolver says that it should never return null              */
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"null download report returned by "
operator|+
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
operator|+
literal|" when trying to download "
operator|+
name|artifact
argument_list|)
throw|;
block|}
name|ArtifactDownloadReport
name|adr
init|=
name|dr
operator|.
name|getArtifactReport
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|adr
operator|.
name|getDownloadStatus
argument_list|()
operator|==
name|DownloadStatus
operator|.
name|FAILED
condition|?
literal|null
else|:
name|adr
operator|.
name|getArtifactOrigin
argument_list|()
return|;
block|}
specifier|public
name|LatestStrategy
name|getLatestStrategy
parameter_list|()
block|{
if|if
condition|(
name|latestStrategy
operator|==
literal|null
condition|)
block|{
name|initLatestStrategyFromSettings
argument_list|()
expr_stmt|;
block|}
return|return
name|latestStrategy
return|;
block|}
specifier|private
name|void
name|initLatestStrategyFromSettings
parameter_list|()
block|{
if|if
condition|(
name|getSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|latestStrategyName
operator|!=
literal|null
operator|&&
operator|!
literal|"default"
operator|.
name|equals
argument_list|(
name|latestStrategyName
argument_list|)
condition|)
block|{
name|latestStrategy
operator|=
name|getSettings
argument_list|()
operator|.
name|getLatestStrategy
argument_list|(
name|latestStrategyName
argument_list|)
expr_stmt|;
if|if
condition|(
name|latestStrategy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown latest strategy '"
operator|+
name|latestStrategyName
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|latestStrategy
operator|=
name|getSettings
argument_list|()
operator|.
name|getDefaultLatestStrategy
argument_list|()
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": no latest strategy defined: using default"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no ivy instance found: "
operator|+
literal|"impossible to get a latest strategy without ivy instance"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setLatestStrategy
parameter_list|(
name|LatestStrategy
name|latestStrategy
parameter_list|)
block|{
name|this
operator|.
name|latestStrategy
operator|=
name|latestStrategy
expr_stmt|;
block|}
specifier|public
name|void
name|setLatest
parameter_list|(
name|String
name|strategyName
parameter_list|)
block|{
name|latestStrategyName
operator|=
name|strategyName
expr_stmt|;
block|}
specifier|public
name|String
name|getLatest
parameter_list|()
block|{
if|if
condition|(
name|latestStrategyName
operator|==
literal|null
condition|)
block|{
name|latestStrategyName
operator|=
literal|"default"
expr_stmt|;
block|}
return|return
name|latestStrategyName
return|;
block|}
specifier|public
name|Namespace
name|getNamespace
parameter_list|()
block|{
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|initNamespaceFromSettings
argument_list|()
expr_stmt|;
block|}
return|return
name|namespace
return|;
block|}
specifier|private
name|void
name|initNamespaceFromSettings
parameter_list|()
block|{
if|if
condition|(
name|getSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|namespaceName
operator|!=
literal|null
condition|)
block|{
name|namespace
operator|=
name|getSettings
argument_list|()
operator|.
name|getNamespace
argument_list|(
name|namespaceName
argument_list|)
expr_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown namespace '"
operator|+
name|namespaceName
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|namespace
operator|=
name|getSettings
argument_list|()
operator|.
name|getSystemNamespace
argument_list|()
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|": no namespace defined: using system"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
name|getName
argument_list|()
operator|+
literal|": no namespace defined nor ivy instance: using system namespace"
argument_list|)
expr_stmt|;
name|namespace
operator|=
name|Namespace
operator|.
name|SYSTEM_NAMESPACE
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setNamespace
parameter_list|(
name|String
name|namespaceName
parameter_list|)
block|{
name|this
operator|.
name|namespaceName
operator|=
name|namespaceName
expr_stmt|;
block|}
comment|// Namespace conversion methods
specifier|protected
name|ModuleDescriptor
name|toSystem
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
return|return
name|NameSpaceHelper
operator|.
name|toSystem
argument_list|(
name|md
argument_list|,
name|getNamespace
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Artifact
name|fromSystem
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|artifact
argument_list|,
name|getNamespace
argument_list|()
operator|.
name|getFromSystemTransformer
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Artifact
name|toSystem
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|artifact
argument_list|,
name|getNamespace
argument_list|()
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|MetadataArtifactDownloadReport
name|toSystem
parameter_list|(
name|MetadataArtifactDownloadReport
name|report
parameter_list|)
block|{
return|return
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|report
argument_list|,
name|getNamespace
argument_list|()
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|ResolvedModuleRevision
name|toSystem
parameter_list|(
name|ResolvedModuleRevision
name|rmr
parameter_list|)
block|{
return|return
name|NameSpaceHelper
operator|.
name|toSystem
argument_list|(
name|rmr
argument_list|,
name|getNamespace
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|ModuleRevisionId
name|toSystem
parameter_list|(
name|ModuleRevisionId
name|resolvedMrid
parameter_list|)
block|{
return|return
name|getNamespace
argument_list|()
operator|.
name|getToSystemTransformer
argument_list|()
operator|.
name|transform
argument_list|(
name|resolvedMrid
argument_list|)
return|;
block|}
specifier|protected
name|DependencyDescriptor
name|fromSystem
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|)
block|{
return|return
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|dd
argument_list|,
name|getNamespace
argument_list|()
operator|.
name|getFromSystemTransformer
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|DependencyDescriptor
name|toSystem
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|)
block|{
return|return
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|dd
argument_list|,
name|getNamespace
argument_list|()
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|IvyNode
name|getSystemNode
parameter_list|(
name|ResolveData
name|data
parameter_list|,
name|ModuleRevisionId
name|resolvedMrid
parameter_list|)
block|{
return|return
name|data
operator|.
name|getNode
argument_list|(
name|toSystem
argument_list|(
name|resolvedMrid
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|ResolvedModuleRevision
name|findModuleInCache
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
return|return
name|findModuleInCache
argument_list|(
name|dd
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|ResolvedModuleRevision
name|findModuleInCache
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|,
name|boolean
name|anyResolver
parameter_list|)
block|{
name|ResolvedModuleRevision
name|rmr
init|=
name|getRepositoryCacheManager
argument_list|()
operator|.
name|findModuleInCache
argument_list|(
name|dd
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|getCacheOptions
argument_list|(
name|data
argument_list|)
argument_list|,
name|anyResolver
condition|?
literal|null
else|:
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmr
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|data
operator|.
name|getReport
argument_list|()
operator|!=
literal|null
operator|&&
name|data
operator|.
name|isBlacklisted
argument_list|(
name|data
operator|.
name|getReport
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|rmr
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": found revision in cache: "
operator|+
name|rmr
operator|.
name|getId
argument_list|()
operator|+
literal|" for "
operator|+
name|dd
operator|+
literal|", but it is blacklisted"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|rmr
return|;
block|}
specifier|public
name|void
name|setChangingMatcher
parameter_list|(
name|String
name|changingMatcherName
parameter_list|)
block|{
name|this
operator|.
name|changingMatcherName
operator|=
name|changingMatcherName
expr_stmt|;
block|}
specifier|protected
name|String
name|getChangingMatcherName
parameter_list|()
block|{
return|return
name|changingMatcherName
return|;
block|}
specifier|public
name|void
name|setChangingPattern
parameter_list|(
name|String
name|changingPattern
parameter_list|)
block|{
name|this
operator|.
name|changingPattern
operator|=
name|changingPattern
expr_stmt|;
block|}
specifier|protected
name|String
name|getChangingPattern
parameter_list|()
block|{
return|return
name|changingPattern
return|;
block|}
specifier|public
name|void
name|setCheckmodified
parameter_list|(
name|boolean
name|check
parameter_list|)
block|{
name|checkmodified
operator|=
name|check
expr_stmt|;
block|}
specifier|public
name|RepositoryCacheManager
name|getRepositoryCacheManager
parameter_list|()
block|{
if|if
condition|(
name|repositoryCacheManager
operator|==
literal|null
condition|)
block|{
name|initRepositoryCacheManagerFromSettings
argument_list|()
expr_stmt|;
block|}
return|return
name|repositoryCacheManager
return|;
block|}
specifier|private
name|void
name|initRepositoryCacheManagerFromSettings
parameter_list|()
block|{
if|if
condition|(
name|cacheManagerName
operator|==
literal|null
condition|)
block|{
name|repositoryCacheManager
operator|=
name|settings
operator|.
name|getDefaultRepositoryCacheManager
argument_list|()
expr_stmt|;
if|if
condition|(
name|repositoryCacheManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no default cache manager defined with current settings"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|repositoryCacheManager
operator|=
name|settings
operator|.
name|getRepositoryCacheManager
argument_list|(
name|cacheManagerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|repositoryCacheManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown cache manager '"
operator|+
name|cacheManagerName
operator|+
literal|"'. Available caches are "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|settings
operator|.
name|getRepositoryCacheManagers
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|initTimeoutConstraintFromSettings
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|timeoutConstraintName
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|timeoutConstraint
operator|=
name|settings
operator|.
name|getTimeoutConstraint
argument_list|(
name|this
operator|.
name|timeoutConstraintName
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|timeoutConstraint
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown timeout constraint '"
operator|+
name|this
operator|.
name|timeoutConstraintName
operator|+
literal|"' "
operator|+
literal|"on resolver '"
operator|+
name|this
operator|.
name|name
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setRepositoryCacheManager
parameter_list|(
name|RepositoryCacheManager
name|repositoryCacheManager
parameter_list|)
block|{
name|this
operator|.
name|cacheManagerName
operator|=
name|repositoryCacheManager
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|repositoryCacheManager
operator|=
name|repositoryCacheManager
expr_stmt|;
block|}
specifier|public
name|void
name|setCache
parameter_list|(
name|String
name|cacheName
parameter_list|)
block|{
name|cacheManagerName
operator|=
name|cacheName
expr_stmt|;
block|}
specifier|public
name|void
name|setEventManager
parameter_list|(
name|EventManager
name|eventManager
parameter_list|)
block|{
name|this
operator|.
name|eventManager
operator|=
name|eventManager
expr_stmt|;
block|}
specifier|public
name|EventManager
name|getEventManager
parameter_list|()
block|{
return|return
name|eventManager
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|()
block|{
name|initRepositoryCacheManagerFromSettings
argument_list|()
expr_stmt|;
name|initNamespaceFromSettings
argument_list|()
expr_stmt|;
name|initLatestStrategyFromSettings
argument_list|()
expr_stmt|;
name|initTimeoutConstraintFromSettings
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|CacheMetadataOptions
name|getCacheOptions
parameter_list|(
name|ResolveData
name|data
parameter_list|)
block|{
return|return
operator|(
name|CacheMetadataOptions
operator|)
operator|new
name|CacheMetadataOptions
argument_list|()
operator|.
name|setChangingMatcherName
argument_list|(
name|getChangingMatcherName
argument_list|()
argument_list|)
operator|.
name|setChangingPattern
argument_list|(
name|getChangingPattern
argument_list|()
argument_list|)
operator|.
name|setCheckTTL
argument_list|(
operator|!
name|data
operator|.
name|getOptions
argument_list|()
operator|.
name|isUseCacheOnly
argument_list|()
argument_list|)
operator|.
name|setCheckmodified
argument_list|(
name|data
operator|.
name|getOptions
argument_list|()
operator|.
name|isUseCacheOnly
argument_list|()
condition|?
name|Boolean
operator|.
name|FALSE
else|:
name|checkmodified
argument_list|)
operator|.
name|setValidate
argument_list|(
name|doValidate
argument_list|(
name|data
argument_list|)
argument_list|)
operator|.
name|setNamespace
argument_list|(
name|getNamespace
argument_list|()
argument_list|)
operator|.
name|setUseCacheOnly
argument_list|(
name|data
operator|.
name|getOptions
argument_list|()
operator|.
name|isUseCacheOnly
argument_list|()
argument_list|)
operator|.
name|setForce
argument_list|(
name|data
operator|.
name|getOptions
argument_list|()
operator|.
name|isRefresh
argument_list|()
argument_list|)
operator|.
name|setListener
argument_list|(
name|getDownloadListener
argument_list|(
name|getDownloadOptions
argument_list|(
name|data
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|CacheDownloadOptions
name|getCacheDownloadOptions
parameter_list|(
name|DownloadOptions
name|options
parameter_list|)
block|{
name|CacheDownloadOptions
name|cacheDownloadOptions
init|=
operator|new
name|CacheDownloadOptions
argument_list|()
decl_stmt|;
name|cacheDownloadOptions
operator|.
name|setListener
argument_list|(
name|getDownloadListener
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cacheDownloadOptions
return|;
block|}
specifier|protected
name|DownloadOptions
name|getDownloadOptions
parameter_list|(
name|ResolveOptions
name|options
parameter_list|)
block|{
return|return
operator|(
name|DownloadOptions
operator|)
operator|new
name|DownloadOptions
argument_list|()
operator|.
name|setLog
argument_list|(
name|options
operator|.
name|getLog
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|abortPublishTransaction
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* Default implementation is a no-op */
block|}
specifier|public
name|void
name|commitPublishTransaction
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* Default implementation is a no-op */
block|}
specifier|public
name|void
name|beginPublishTransaction
parameter_list|(
name|ModuleRevisionId
name|module
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* Default implementation is a no-op */
block|}
specifier|private
name|DownloadListener
name|getDownloadListener
parameter_list|(
specifier|final
name|DownloadOptions
name|options
parameter_list|)
block|{
return|return
operator|new
name|DownloadListener
argument_list|()
block|{
specifier|public
name|void
name|needArtifact
parameter_list|(
name|RepositoryCacheManager
name|cache
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
if|if
condition|(
name|eventManager
operator|!=
literal|null
condition|)
block|{
name|eventManager
operator|.
name|fireIvyEvent
argument_list|(
operator|new
name|NeedArtifactEvent
argument_list|(
name|AbstractResolver
operator|.
name|this
argument_list|,
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startArtifactDownload
parameter_list|(
name|RepositoryCacheManager
name|cache
parameter_list|,
name|ResolvedResource
name|rres
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|)
block|{
if|if
condition|(
name|artifact
operator|.
name|isMetadata
argument_list|()
operator|||
name|LogOptions
operator|.
name|LOG_QUIET
operator|.
name|equals
argument_list|(
name|options
operator|.
name|getLog
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"downloading "
operator|+
name|rres
operator|.
name|getResource
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"downloading "
operator|+
name|rres
operator|.
name|getResource
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eventManager
operator|!=
literal|null
condition|)
block|{
name|eventManager
operator|.
name|fireIvyEvent
argument_list|(
operator|new
name|StartArtifactDownloadEvent
argument_list|(
name|AbstractResolver
operator|.
name|this
argument_list|,
name|artifact
argument_list|,
name|origin
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endArtifactDownload
parameter_list|(
name|RepositoryCacheManager
name|cache
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|ArtifactDownloadReport
name|adr
parameter_list|,
name|File
name|archiveFile
parameter_list|)
block|{
if|if
condition|(
name|eventManager
operator|!=
literal|null
condition|)
block|{
name|eventManager
operator|.
name|fireIvyEvent
argument_list|(
operator|new
name|EndArtifactDownloadEvent
argument_list|(
name|AbstractResolver
operator|.
name|this
argument_list|,
name|artifact
argument_list|,
name|adr
argument_list|,
name|archiveFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
comment|/**      * Returns true if rmr1 is after rmr2, using the latest strategy to determine which is the      * latest      *      * @param rmr1 ResolvedModuleRevision      * @param rmr2 ResolvedModuleRevision      * @param date Date      * @return boolean      */
specifier|protected
name|boolean
name|isAfter
parameter_list|(
name|ResolvedModuleRevision
name|rmr1
parameter_list|,
name|ResolvedModuleRevision
name|rmr2
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|ArtifactInfo
index|[]
name|ais
init|=
operator|new
name|ArtifactInfo
index|[]
block|{
operator|new
name|ResolvedModuleRevisionArtifactInfo
argument_list|(
name|rmr1
argument_list|)
block|,
operator|new
name|ResolvedModuleRevisionArtifactInfo
argument_list|(
name|rmr2
argument_list|)
block|}
decl_stmt|;
return|return
name|getLatestStrategy
argument_list|()
operator|.
name|findLatest
argument_list|(
name|ais
argument_list|,
name|date
argument_list|)
operator|==
name|ais
index|[
literal|0
index|]
return|;
block|}
specifier|protected
name|ResolvedModuleRevision
name|checkLatest
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolvedModuleRevision
name|newModuleFound
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|dd
argument_list|,
literal|"dd"
argument_list|)
expr_stmt|;
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|data
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
comment|// always cache dynamic mrids because we can store per-resolver values
name|saveModuleRevisionIfNeeded
argument_list|(
name|dd
argument_list|,
name|newModuleFound
argument_list|)
expr_stmt|;
comment|// check if latest is asked and compare to return the most recent
name|ResolvedModuleRevision
name|previousModuleFound
init|=
name|data
operator|.
name|getCurrentResolvedModuleRevision
argument_list|()
decl_stmt|;
name|String
name|newModuleDesc
init|=
name|describe
argument_list|(
name|newModuleFound
argument_list|)
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tchecking "
operator|+
name|newModuleDesc
operator|+
literal|" against "
operator|+
name|describe
argument_list|(
name|previousModuleFound
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousModuleFound
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tmodule revision kept as first found: "
operator|+
name|newModuleDesc
argument_list|)
expr_stmt|;
return|return
name|newModuleFound
return|;
block|}
if|else if
condition|(
name|isAfter
argument_list|(
name|newModuleFound
argument_list|,
name|previousModuleFound
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tmodule revision kept as younger: "
operator|+
name|newModuleDesc
argument_list|)
expr_stmt|;
return|return
name|newModuleFound
return|;
block|}
if|else if
condition|(
operator|!
name|newModuleFound
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
operator|&&
name|previousModuleFound
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tmodule revision kept as better (not default): "
operator|+
name|newModuleDesc
argument_list|)
expr_stmt|;
return|return
name|newModuleFound
return|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tmodule revision discarded as older: "
operator|+
name|newModuleDesc
argument_list|)
expr_stmt|;
return|return
name|previousModuleFound
return|;
block|}
block|}
specifier|protected
name|void
name|saveModuleRevisionIfNeeded
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolvedModuleRevision
name|newModuleFound
parameter_list|)
block|{
if|if
condition|(
name|newModuleFound
operator|!=
literal|null
operator|&&
name|getSettings
argument_list|()
operator|.
name|getVersionMatcher
argument_list|()
operator|.
name|isDynamic
argument_list|(
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|)
condition|)
block|{
name|getRepositoryCacheManager
argument_list|()
operator|.
name|saveResolvedRevision
argument_list|(
name|getName
argument_list|()
argument_list|,
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|newModuleFound
operator|.
name|getId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|describe
parameter_list|(
name|ResolvedModuleRevision
name|rmr
parameter_list|)
block|{
if|if
condition|(
name|rmr
operator|==
literal|null
condition|)
block|{
return|return
literal|"[none]"
return|;
block|}
return|return
name|rmr
operator|.
name|getId
argument_list|()
operator|+
operator|(
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
condition|?
literal|"[default]"
else|:
literal|""
operator|)
operator|+
literal|" from "
operator|+
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|private
class|class
name|ResolverParserSettings
implements|implements
name|ParserSettings
block|{
specifier|public
name|ConflictManager
name|getConflictManager
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|getConflictManager
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Namespace
name|getContextNamespace
parameter_list|()
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getNamespace
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDefaultBranch
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|)
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|getDefaultBranch
argument_list|(
name|moduleId
argument_list|)
return|;
block|}
specifier|public
name|PatternMatcher
name|getMatcher
parameter_list|(
name|String
name|matcherName
parameter_list|)
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|getMatcher
argument_list|(
name|matcherName
argument_list|)
return|;
block|}
specifier|public
name|Namespace
name|getNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|getNamespace
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|public
name|RelativeUrlResolver
name|getRelativeUrlResolver
parameter_list|()
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|getRelativeUrlResolver
argument_list|()
return|;
block|}
specifier|public
name|ResolutionCacheManager
name|getResolutionCacheManager
parameter_list|()
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|getResolutionCacheManager
argument_list|()
return|;
block|}
specifier|public
name|DependencyResolver
name|getResolver
parameter_list|(
name|ModuleRevisionId
name|mRevId
parameter_list|)
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|getResolver
argument_list|(
name|mRevId
argument_list|)
return|;
block|}
specifier|public
name|StatusManager
name|getStatusManager
parameter_list|()
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|getStatusManager
argument_list|()
return|;
block|}
specifier|public
name|File
name|resolveFile
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|resolveFile
argument_list|(
name|filename
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|substitute
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|strings
parameter_list|)
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|substitute
argument_list|(
name|strings
argument_list|)
return|;
block|}
specifier|public
name|String
name|substitute
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|substitute
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
name|String
name|getVariable
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|getVariable
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TimeoutConstraint
name|getTimeoutConstraint
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|AbstractResolver
operator|.
name|this
operator|.
name|getSettings
argument_list|()
operator|.
name|getTimeoutConstraint
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

