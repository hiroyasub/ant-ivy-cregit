begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|packager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * Simple utility class for executing subprocesses. Handles I/O streams  * by closing standard input and relaying standard output and error.  */
end_comment

begin_class
specifier|public
class|class
name|SubProcess
block|{
specifier|private
specifier|static
specifier|final
name|int
name|BUFSIZE
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|cmd
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|env
decl_stmt|;
specifier|private
specifier|final
name|File
name|dir
decl_stmt|;
comment|/**      * Constructor.      *      * @param cmd command parameters      * @param env command environment      * @param dir command working directory      * @see Runtime.exec(String[], String[], File)      */
specifier|public
name|SubProcess
parameter_list|(
name|String
index|[]
name|cmd
parameter_list|,
name|String
index|[]
name|env
parameter_list|,
name|File
name|dir
parameter_list|)
block|{
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|this
operator|.
name|env
operator|=
name|env
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
block|}
comment|/**      * Execute the process and wait for it to complete.      *      * @return exit value from process      */
specifier|public
name|int
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Process
name|proc
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|this
operator|.
name|cmd
argument_list|,
name|this
operator|.
name|env
argument_list|,
name|this
operator|.
name|dir
argument_list|)
decl_stmt|;
name|proc
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
name|relay1
init|=
name|startRelay
argument_list|(
name|proc
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|Thread
name|relay2
init|=
name|startRelay
argument_list|(
name|proc
operator|.
name|getErrorStream
argument_list|()
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|int
name|result
decl_stmt|;
name|relay1
operator|.
name|join
argument_list|()
expr_stmt|;
name|relay2
operator|.
name|join
argument_list|()
expr_stmt|;
return|return
name|proc
operator|.
name|waitFor
argument_list|()
return|;
block|}
comment|/**      * Create and start a separate thread that copies input to output and closes      * the input when done.      *      * @param in input stream to read from      * @param out output stream to copy to      * @return thread doing the work      */
specifier|public
specifier|static
name|Thread
name|startRelay
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|OutputStream
name|out
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|relayStream
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|thread
return|;
block|}
comment|/**      * Copy from input to output. Does not close either stream when finished.      *      * @param in input stream to read from      * @param out output stream to copy to      */
specifier|public
specifier|static
name|void
name|relayStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|BUFSIZE
index|]
decl_stmt|;
name|int
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

