begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
package|;
end_package

begin_comment
comment|/**  * BintrayResolver is a resolver which can be used to resolve dependencies found in the Bintray  * artifacts repository.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ClassTooDeepInInheritanceTree"
argument_list|)
specifier|public
class|class
name|BintrayResolver
extends|extends
name|IBiblioResolver
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JCENTER
init|=
literal|"https://jcenter.bintray.com/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DL_BINTRAY
init|=
literal|"https://dl.bintray.com/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_NAME
init|=
literal|"bintray/jcenter"
decl_stmt|;
specifier|private
name|String
name|subject
decl_stmt|;
specifier|private
name|String
name|repo
decl_stmt|;
specifier|private
name|boolean
name|isNameUpdatable
decl_stmt|;
comment|// Whether resolver's name was not originally specified and can
comment|// be updated.
specifier|public
name|BintrayResolver
parameter_list|()
block|{
name|setRoot
argument_list|(
name|JCENTER
argument_list|)
expr_stmt|;
name|updateName
argument_list|(
name|DEFAULT_NAME
argument_list|)
expr_stmt|;
name|setM2compatible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setUsepoms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setUseMavenMetadata
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|updateRoot
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setRepo
parameter_list|(
name|String
name|repo
parameter_list|)
block|{
name|this
operator|.
name|repo
operator|=
name|repo
expr_stmt|;
name|updateRoot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"MethodWithMultipleReturnPoints"
argument_list|)
specifier|private
name|void
name|updateRoot
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|subject
argument_list|)
operator|||
name|isEmpty
argument_list|(
name|repo
argument_list|)
condition|)
block|{
return|return;
block|}
name|setRoot
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s%s/%s/"
argument_list|,
name|DL_BINTRAY
argument_list|,
name|subject
argument_list|,
name|repo
argument_list|)
argument_list|)
expr_stmt|;
name|updateName
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"bintray/%s/%s"
argument_list|,
name|subject
argument_list|,
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateName
parameter_list|(
name|String
name|defaultName
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|defaultName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Default resolver name must not be null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isEmpty
argument_list|(
name|getName
argument_list|()
argument_list|)
operator|||
name|isNameUpdatable
condition|)
block|{
name|isNameUpdatable
operator|=
literal|true
expr_stmt|;
name|setName
argument_list|(
name|defaultName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isEmpty
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|(
operator|(
name|s
operator|==
literal|null
operator|)
operator|||
operator|(
name|s
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<
literal|1
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

