begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|TimeoutConstraint
import|;
end_import

begin_comment
comment|/**  * A {@link TimeoutConstraint} which determines the timeouts by invoking the {@link AbstractResolver underlying resolver}'s  * {@link AbstractResolver#getTimeoutConstraint()}, whenever the timeouts are requested for.  * This class can be used when the {@link TimeoutConstraint} is to be created but the underlying resolver, which decides the timeouts,  * hasn't yet been fully initialized  */
end_comment

begin_class
specifier|final
class|class
name|LazyTimeoutConstraint
implements|implements
name|TimeoutConstraint
block|{
specifier|private
specifier|final
name|AbstractResolver
name|resolver
decl_stmt|;
specifier|public
name|LazyTimeoutConstraint
parameter_list|(
specifier|final
name|AbstractResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getConnectionTimeout
parameter_list|()
block|{
specifier|final
name|TimeoutConstraint
name|resolverTimeoutConstraint
init|=
name|resolver
operator|.
name|getTimeoutConstraint
argument_list|()
decl_stmt|;
return|return
name|resolverTimeoutConstraint
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|resolverTimeoutConstraint
operator|.
name|getConnectionTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReadTimeout
parameter_list|()
block|{
specifier|final
name|TimeoutConstraint
name|resolverTimeoutConstraint
init|=
name|resolver
operator|.
name|getTimeoutConstraint
argument_list|()
decl_stmt|;
return|return
name|resolverTimeoutConstraint
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|resolverTimeoutConstraint
operator|.
name|getReadTimeout
argument_list|()
return|;
block|}
block|}
end_class

end_unit

