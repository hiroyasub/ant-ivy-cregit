begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|report
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ResolutionCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ConfigurationResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * A Report outputter implementation using {@link XmlReportWriter} to write xml reports to the  * resolution cache.  */
end_comment

begin_class
specifier|public
class|class
name|XmlReportOutputter
implements|implements
name|ReportOutputter
block|{
specifier|private
name|XmlReportWriter
name|writer
init|=
operator|new
name|XmlReportWriter
argument_list|()
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|XML
return|;
block|}
specifier|public
name|void
name|output
parameter_list|(
name|ResolveReport
name|report
parameter_list|,
name|ResolutionCacheManager
name|cacheMgr
parameter_list|,
name|ResolveOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|confs
init|=
name|report
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|conf
range|:
name|confs
control|)
block|{
name|output
argument_list|(
name|report
operator|.
name|getConfigurationReport
argument_list|(
name|conf
argument_list|)
argument_list|,
name|report
operator|.
name|getResolveId
argument_list|()
argument_list|,
name|confs
argument_list|,
name|cacheMgr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|output
parameter_list|(
name|ConfigurationResolveReport
name|report
parameter_list|,
name|String
name|resolveId
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|ResolutionCacheManager
name|cacheMgr
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|reportFile
init|=
name|cacheMgr
operator|.
name|getConfigurationResolveReportInCache
argument_list|(
name|resolveId
argument_list|,
name|report
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|reportParentDir
init|=
name|reportFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|reportParentDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|OutputStream
name|stream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|reportFile
argument_list|)
decl_stmt|;
name|writer
operator|.
name|output
argument_list|(
name|report
argument_list|,
name|confs
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\treport for "
operator|+
name|report
operator|.
name|getModuleDescriptor
argument_list|()
operator|.
name|getModuleRevisionId
argument_list|()
operator|+
literal|" "
operator|+
name|report
operator|.
name|getConfiguration
argument_list|()
operator|+
literal|" produced in "
operator|+
name|reportFile
argument_list|)
expr_stmt|;
name|File
name|reportXsl
init|=
operator|new
name|File
argument_list|(
name|reportParentDir
argument_list|,
literal|"ivy-report.xsl"
argument_list|)
decl_stmt|;
name|File
name|reportCss
init|=
operator|new
name|File
argument_list|(
name|reportParentDir
argument_list|,
literal|"ivy-report.css"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reportXsl
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|XmlReportOutputter
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"ivy-report.xsl"
argument_list|)
argument_list|,
name|reportXsl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reportCss
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|XmlReportOutputter
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"ivy-report.css"
argument_list|)
argument_list|,
name|reportCss
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

