begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_comment
comment|/**  * A pattern matcher matching input using regular expressions.  *   * @see Pattern  */
end_comment

begin_class
specifier|public
specifier|final
comment|/* @Immutable */
class|class
name|RegexpPatternMatcher
extends|extends
name|AbstractPatternMatcher
block|{
specifier|public
specifier|static
specifier|final
name|RegexpPatternMatcher
name|INSTANCE
init|=
operator|new
name|RegexpPatternMatcher
argument_list|()
decl_stmt|;
comment|/*      * NOTE: Regexp compiler does ~200K compilation/s - If necessary look into using ThreadLocal      * Pattern to cut on useless object creation - If expression are reused over and over a LRU      * cache could make sense      */
specifier|public
name|RegexpPatternMatcher
parameter_list|()
block|{
name|super
argument_list|(
name|REGEXP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Matcher
name|newMatcher
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
return|return
operator|new
name|RegexpMatcher
argument_list|(
name|expression
argument_list|)
return|;
block|}
specifier|private
specifier|static
comment|/* @Immutable */
class|class
name|RegexpMatcher
implements|implements
name|Matcher
block|{
specifier|private
name|Pattern
name|pattern
decl_stmt|;
specifier|private
name|String
name|expression
decl_stmt|;
specifier|private
name|Boolean
name|exact
decl_stmt|;
specifier|public
name|RegexpMatcher
parameter_list|(
name|String
name|expression
parameter_list|)
throws|throws
name|PatternSyntaxException
block|{
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isExact
parameter_list|()
block|{
if|if
condition|(
name|exact
operator|==
literal|null
condition|)
block|{
name|exact
operator|=
name|calculateExact
argument_list|()
expr_stmt|;
block|}
return|return
name|exact
return|;
block|}
specifier|private
name|Boolean
name|calculateExact
parameter_list|()
block|{
name|Boolean
name|result
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
name|char
index|[]
name|expressionChars
init|=
name|expression
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expressionChars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|expressionChars
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|ch
argument_list|)
operator|&&
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|ch
argument_list|)
operator|&&
operator|(
literal|'-'
operator|!=
name|ch
operator|)
operator|&&
operator|(
literal|'_'
operator|!=
name|ch
operator|)
condition|)
block|{
name|result
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

