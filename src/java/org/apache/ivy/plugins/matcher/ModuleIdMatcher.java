begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_class
specifier|public
class|class
name|ModuleIdMatcher
block|{
comment|// TODO this class should be moved out of this package
specifier|private
name|Matcher
name|orgMatcher
decl_stmt|;
specifier|private
name|Matcher
name|moduleMatcher
decl_stmt|;
specifier|private
name|ModuleId
name|mid
decl_stmt|;
specifier|private
name|PatternMatcher
name|pm
decl_stmt|;
specifier|public
name|ModuleIdMatcher
parameter_list|(
name|ModuleId
name|mid
parameter_list|,
name|PatternMatcher
name|pm
parameter_list|)
block|{
name|this
operator|.
name|mid
operator|=
name|mid
expr_stmt|;
name|this
operator|.
name|pm
operator|=
name|pm
expr_stmt|;
name|this
operator|.
name|orgMatcher
operator|=
name|pm
operator|.
name|getMatcher
argument_list|(
name|mid
operator|.
name|getOrganisation
argument_list|()
operator|==
literal|null
condition|?
name|PatternMatcher
operator|.
name|ANY_EXPRESSION
else|:
name|mid
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|moduleMatcher
operator|=
name|pm
operator|.
name|getMatcher
argument_list|(
name|mid
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|ModuleId
name|mid
parameter_list|)
block|{
return|return
name|orgMatcher
operator|.
name|matches
argument_list|(
name|mid
operator|.
name|getOrganisation
argument_list|()
argument_list|)
operator|&&
name|moduleMatcher
operator|.
name|matches
argument_list|(
name|mid
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|mid
operator|+
literal|" ("
operator|+
name|pm
operator|.
name|getName
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

