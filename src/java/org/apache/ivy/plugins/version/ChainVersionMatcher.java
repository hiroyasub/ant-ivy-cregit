begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|IvySettingsAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Checks
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link VersionMatcher} chaining several version matchers, and implemeting  * the {@link VersionMatcher} interface by returning results from the first matcher in the chain  * accepting the version.  */
end_comment

begin_class
specifier|public
class|class
name|ChainVersionMatcher
extends|extends
name|AbstractVersionMatcher
block|{
comment|/**      * The list of version matchers in the chain. This list will be queried in order, so the last      * matcher will be used only if no other matcher accept the revision before.      */
specifier|private
name|List
comment|/*<VersionMatcher> */
name|matchers
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
comment|/**      * Unique Constructor.      */
specifier|public
name|ChainVersionMatcher
parameter_list|()
block|{
name|super
argument_list|(
literal|"chain"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a {@link VersionMatcher} to the chain.      *       * @param matcher      *            the version matcher to add. Must not be null      */
specifier|public
name|void
name|add
parameter_list|(
name|VersionMatcher
name|matcher
parameter_list|)
block|{
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|matcher
argument_list|,
literal|"matcher"
argument_list|)
expr_stmt|;
name|matchers
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSettings
argument_list|()
operator|!=
literal|null
operator|&&
name|matcher
operator|instanceof
name|IvySettingsAware
condition|)
block|{
operator|(
operator|(
name|IvySettingsAware
operator|)
name|matcher
operator|)
operator|.
name|setSettings
argument_list|(
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the settings this matcher will use, and set to the matcher in the chain which implements      * {@link IvySettingsAware}.      *       * @param settings      *            the settings to use in the whole chain. Must not be null.      */
specifier|public
name|void
name|setSettings
parameter_list|(
name|IvySettings
name|settings
parameter_list|)
block|{
name|super
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|matchers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|VersionMatcher
name|matcher
init|=
operator|(
name|VersionMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matcher
operator|instanceof
name|IvySettingsAware
condition|)
block|{
operator|(
operator|(
name|IvySettingsAware
operator|)
name|matcher
operator|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns the list of matchers in the chain.      *<p>      * The list is returned as an unmodifiable view on the actual list of matchers, and will thus      * reflect futher changes made in the chain.      *       * @return the list of matchers in the chain. Is never null.      */
specifier|public
name|List
name|getMatchers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|matchers
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDynamic
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|)
block|{
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|askedMrid
argument_list|,
literal|"askedMrid"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|matchers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|VersionMatcher
name|matcher
init|=
operator|(
name|VersionMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|isDynamic
argument_list|(
name|askedMrid
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleRevisionId
name|foundMrid
parameter_list|,
name|Comparator
name|staticComparator
parameter_list|)
block|{
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|askedMrid
argument_list|,
literal|"askedMrid"
argument_list|)
expr_stmt|;
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|foundMrid
argument_list|,
literal|"foundMrid"
argument_list|)
expr_stmt|;
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|staticComparator
argument_list|,
literal|"staticComparator"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|matchers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|VersionMatcher
name|matcher
init|=
operator|(
name|VersionMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|isDynamic
argument_list|(
name|askedMrid
argument_list|)
condition|)
block|{
return|return
name|matcher
operator|.
name|compare
argument_list|(
name|askedMrid
argument_list|,
name|foundMrid
argument_list|,
name|staticComparator
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"impossible to compare revisions: askedMrid is not dynamic: "
operator|+
name|askedMrid
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleRevisionId
name|foundMrid
parameter_list|)
block|{
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|askedMrid
argument_list|,
literal|"askedMrid"
argument_list|)
expr_stmt|;
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|foundMrid
argument_list|,
literal|"foundMrid"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|matchers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|VersionMatcher
name|matcher
init|=
operator|(
name|VersionMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
operator|||
name|matcher
operator|.
name|isDynamic
argument_list|(
name|askedMrid
argument_list|)
condition|)
block|{
return|return
name|matcher
operator|.
name|accept
argument_list|(
name|askedMrid
argument_list|,
name|foundMrid
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|needModuleDescriptor
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleRevisionId
name|foundMrid
parameter_list|)
block|{
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|askedMrid
argument_list|,
literal|"askedMrid"
argument_list|)
expr_stmt|;
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|foundMrid
argument_list|,
literal|"foundMrid"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|matchers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|VersionMatcher
name|matcher
init|=
operator|(
name|VersionMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
operator|||
name|matcher
operator|.
name|isDynamic
argument_list|(
name|askedMrid
argument_list|)
condition|)
block|{
return|return
name|matcher
operator|.
name|needModuleDescriptor
argument_list|(
name|askedMrid
argument_list|,
name|foundMrid
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleDescriptor
name|foundMD
parameter_list|)
block|{
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|askedMrid
argument_list|,
literal|"askedMrid"
argument_list|)
expr_stmt|;
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|foundMD
argument_list|,
literal|"foundMD"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|matchers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|VersionMatcher
name|matcher
init|=
operator|(
name|VersionMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
operator|||
name|matcher
operator|.
name|isDynamic
argument_list|(
name|askedMrid
argument_list|)
condition|)
block|{
return|return
name|matcher
operator|.
name|accept
argument_list|(
name|askedMrid
argument_list|,
name|foundMD
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

