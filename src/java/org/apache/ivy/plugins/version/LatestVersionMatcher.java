begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|status
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|status
operator|.
name|StatusManager
import|;
end_import

begin_class
specifier|public
class|class
name|LatestVersionMatcher
extends|extends
name|AbstractVersionMatcher
block|{
specifier|public
name|LatestVersionMatcher
parameter_list|()
block|{
name|super
argument_list|(
literal|"latest"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDynamic
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|)
block|{
return|return
name|askedMrid
operator|.
name|getRevision
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"latest."
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleRevisionId
name|foundMrid
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|needModuleDescriptor
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleRevisionId
name|foundMrid
parameter_list|)
block|{
name|List
argument_list|<
name|Status
argument_list|>
name|statuses
init|=
name|StatusManager
operator|.
name|getCurrent
argument_list|()
operator|.
name|getStatuses
argument_list|()
decl_stmt|;
name|Status
name|lowest
init|=
operator|(
name|Status
operator|)
name|statuses
operator|.
name|get
argument_list|(
name|statuses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|latestLowest
init|=
literal|"latest."
operator|+
name|lowest
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|!
name|latestLowest
operator|.
name|equals
argument_list|(
name|askedMrid
operator|.
name|getRevision
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleDescriptor
name|foundMD
parameter_list|)
block|{
name|String
name|askedBranch
init|=
name|askedMrid
operator|.
name|getBranch
argument_list|()
decl_stmt|;
name|String
name|foundBranch
init|=
name|foundMD
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getBranch
argument_list|()
decl_stmt|;
name|boolean
name|sameBranch
init|=
operator|(
name|askedBranch
operator|==
literal|null
operator|)
condition|?
name|foundBranch
operator|==
literal|null
else|:
name|askedBranch
operator|.
name|equals
argument_list|(
name|foundBranch
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sameBranch
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|askedStatus
init|=
name|askedMrid
operator|.
name|getRevision
argument_list|()
operator|.
name|substring
argument_list|(
literal|"latest."
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|StatusManager
operator|.
name|getCurrent
argument_list|()
operator|.
name|getPriority
argument_list|(
name|askedStatus
argument_list|)
operator|>=
name|StatusManager
operator|.
name|getCurrent
argument_list|()
operator|.
name|getPriority
argument_list|(
name|foundMD
operator|.
name|getStatus
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * If we don't need a module descriptor we can consider the dynamic revision to be greater. If      * we need a module descriptor then we can't know which one is greater and return 0.      */
specifier|public
name|int
name|compare
parameter_list|(
name|ModuleRevisionId
name|askedMrid
parameter_list|,
name|ModuleRevisionId
name|foundMrid
parameter_list|,
name|Comparator
name|staticComparator
parameter_list|)
block|{
return|return
name|needModuleDescriptor
argument_list|(
name|askedMrid
argument_list|,
name|foundMrid
argument_list|)
condition|?
literal|0
else|:
literal|1
return|;
block|}
block|}
end_class

end_unit

