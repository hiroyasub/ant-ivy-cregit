begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|signer
operator|.
name|bouncycastle
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|signer
operator|.
name|SignatureGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|ArmoredOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|bcpg
operator|.
name|BCPGOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPPrivateKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKeyRing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSecretKeyRingCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPSignatureGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|PGPUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|PBESecretKeyDecryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|bc
operator|.
name|BcKeyFingerprintCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|bc
operator|.
name|BcPBESecretKeyDecryptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|bc
operator|.
name|BcPGPContentSignerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openpgp
operator|.
name|operator
operator|.
name|bc
operator|.
name|BcPGPDigestCalculatorProvider
import|;
end_import

begin_class
specifier|public
class|class
name|OpenPGPSignatureGenerator
implements|implements
name|SignatureGenerator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|MASK
init|=
literal|0xFFFFFFFFL
decl_stmt|;
static|static
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|secring
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|String
name|keyId
decl_stmt|;
specifier|private
name|PGPSecretKey
name|pgpSec
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getExtension
parameter_list|()
block|{
return|return
literal|"asc"
return|;
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
specifier|public
name|void
name|setSecring
parameter_list|(
name|String
name|secring
parameter_list|)
block|{
name|this
operator|.
name|secring
operator|=
name|secring
expr_stmt|;
block|}
specifier|public
name|void
name|setKeyId
parameter_list|(
name|String
name|keyId
parameter_list|)
block|{
if|if
condition|(
operator|!
literal|"auto"
operator|.
name|equals
argument_list|(
name|keyId
argument_list|)
condition|)
block|{
name|this
operator|.
name|keyId
operator|=
name|keyId
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|sign
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|InputStream
name|keyIn
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|secring
operator|==
literal|null
condition|)
block|{
name|secring
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
literal|"/.gnupg/secring.gpg"
expr_stmt|;
block|}
if|if
condition|(
name|pgpSec
operator|==
literal|null
condition|)
block|{
name|keyIn
operator|=
operator|new
name|FileInputStream
argument_list|(
name|secring
argument_list|)
expr_stmt|;
name|pgpSec
operator|=
name|readSecretKey
argument_list|(
name|keyIn
argument_list|)
expr_stmt|;
block|}
name|PBESecretKeyDecryptor
name|decryptor
init|=
operator|new
name|BcPBESecretKeyDecryptorBuilder
argument_list|(
operator|new
name|BcPGPDigestCalculatorProvider
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|PGPPrivateKey
name|pgpPrivKey
init|=
name|pgpSec
operator|.
name|extractPrivateKey
argument_list|(
name|decryptor
argument_list|)
decl_stmt|;
name|PGPSignatureGenerator
name|sGen
init|=
operator|new
name|PGPSignatureGenerator
argument_list|(
operator|new
name|BcPGPContentSignerBuilder
argument_list|(
name|pgpSec
operator|.
name|getPublicKey
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
argument_list|,
name|PGPUtil
operator|.
name|SHA1
argument_list|)
argument_list|)
decl_stmt|;
name|sGen
operator|.
name|init
argument_list|(
name|PGPSignature
operator|.
name|BINARY_DOCUMENT
argument_list|,
name|pgpPrivKey
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BCPGOutputStream
argument_list|(
operator|new
name|ArmoredOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|sGen
operator|.
name|update
argument_list|(
operator|(
name|byte
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|sGen
operator|.
name|generate
argument_list|()
operator|.
name|encode
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PGPException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|keyIn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|keyIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
specifier|private
name|PGPSecretKey
name|readSecretKey
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|PGPException
block|{
name|in
operator|=
name|PGPUtil
operator|.
name|getDecoderStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|PGPSecretKeyRingCollection
name|pgpSec
init|=
operator|new
name|PGPSecretKeyRingCollection
argument_list|(
name|in
argument_list|,
operator|new
name|BcKeyFingerprintCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|PGPSecretKey
name|key
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|PGPSecretKeyRing
argument_list|>
name|it
init|=
name|pgpSec
operator|.
name|getKeyRings
argument_list|()
decl_stmt|;
while|while
condition|(
name|key
operator|==
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPSecretKeyRing
name|kRing
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PGPSecretKey
argument_list|>
name|it2
init|=
name|kRing
operator|.
name|getSecretKeys
argument_list|()
decl_stmt|;
while|while
condition|(
name|key
operator|==
literal|null
operator|&&
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PGPSecretKey
name|k
init|=
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyId
operator|==
literal|null
operator|&&
name|k
operator|.
name|isSigningKey
argument_list|()
condition|)
block|{
name|key
operator|=
name|k
expr_stmt|;
block|}
if|if
condition|(
name|keyId
operator|!=
literal|null
operator|&&
name|Long
operator|.
name|valueOf
argument_list|(
name|keyId
argument_list|,
literal|16
argument_list|)
operator|==
operator|(
name|k
operator|.
name|getKeyID
argument_list|()
operator|&
name|MASK
operator|)
condition|)
block|{
name|key
operator|=
name|k
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find encryption key"
operator|+
operator|(
name|keyId
operator|!=
literal|null
condition|?
literal|" '"
operator|+
name|keyId
operator|+
literal|"' "
else|:
literal|" "
operator|)
operator|+
literal|"in key ring."
argument_list|)
throw|;
block|}
return|return
name|key
return|;
block|}
block|}
end_class

end_unit

