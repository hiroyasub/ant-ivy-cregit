begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|FileBasedLockStrategy
extends|extends
name|AbstractLockStrategy
block|{
specifier|private
specifier|static
specifier|final
name|int
name|SLEEP_TIME
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_TIMEOUT
init|=
literal|2
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/**      * The locker to use to make file lock attempts.      */
specifier|private
name|FileLocker
name|locker
decl_stmt|;
specifier|private
name|long
name|timeout
init|=
name|DEFAULT_TIMEOUT
decl_stmt|;
comment|/**      * Lock counter list must be static: locks are implicitly shared to the entire process, so the      * list too much be.      */
specifier|private
specifier|static
name|ConcurrentMap
comment|/*<File, Map<Thread, Integer>> */
name|currentLockHolders
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|protected
name|FileBasedLockStrategy
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|CreateFileLocker
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|FileBasedLockStrategy
parameter_list|(
name|boolean
name|debugLocking
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|CreateFileLocker
argument_list|(
name|debugLocking
argument_list|)
argument_list|,
name|debugLocking
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|FileBasedLockStrategy
parameter_list|(
name|FileLocker
name|locker
parameter_list|,
name|boolean
name|debugLocking
parameter_list|)
block|{
name|super
argument_list|(
name|debugLocking
argument_list|)
expr_stmt|;
name|this
operator|.
name|locker
operator|=
name|locker
expr_stmt|;
block|}
specifier|protected
name|boolean
name|acquireLock
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Thread
name|currentThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDebugLocking
argument_list|()
condition|)
block|{
name|debugLocking
argument_list|(
literal|"acquiring lock on "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
do|do
block|{
synchronized|synchronized
init|(
name|currentLockHolders
init|)
block|{
if|if
condition|(
name|isDebugLocking
argument_list|()
condition|)
block|{
name|debugLocking
argument_list|(
literal|"entered synchronized area (locking)"
argument_list|)
expr_stmt|;
block|}
name|int
name|lockCount
init|=
name|hasLock
argument_list|(
name|file
argument_list|,
name|currentThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDebugLocking
argument_list|()
condition|)
block|{
name|debugLocking
argument_list|(
literal|"current status for "
operator|+
name|file
operator|+
literal|" is "
operator|+
name|lockCount
operator|+
literal|" held locks: "
operator|+
name|getCurrentLockHolderNames
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockCount
operator|<
literal|0
condition|)
block|{
comment|/* Another thread in this process holds the lock; we need to wait */
if|if
condition|(
name|isDebugLocking
argument_list|()
condition|)
block|{
name|debugLocking
argument_list|(
literal|"waiting for another thread to release the lock: "
operator|+
name|getCurrentLockHolderNames
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|lockCount
operator|>
literal|0
condition|)
block|{
name|int
name|holdLocks
init|=
name|incrementLock
argument_list|(
name|file
argument_list|,
name|currentThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDebugLocking
argument_list|()
condition|)
block|{
name|debugLocking
argument_list|(
literal|"reentrant lock acquired on "
operator|+
name|file
operator|+
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms"
operator|+
literal|" - hold locks = "
operator|+
name|holdLocks
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
comment|/* No prior lock on this file is held at all */
if|if
condition|(
name|locker
operator|.
name|tryLock
argument_list|(
name|file
argument_list|)
condition|)
block|{
if|if
condition|(
name|isDebugLocking
argument_list|()
condition|)
block|{
name|debugLocking
argument_list|(
literal|"lock acquired on "
operator|+
name|file
operator|+
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
name|incrementLock
argument_list|(
name|file
argument_list|,
name|currentThread
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|isDebugLocking
argument_list|()
condition|)
block|{
name|debugLocking
argument_list|(
literal|"failed to acquire lock; sleeping for retry..."
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|timeout
condition|)
do|;
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|releaseLock
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|Thread
name|currentThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDebugLocking
argument_list|()
condition|)
block|{
name|debugLocking
argument_list|(
literal|"releasing lock on "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|currentLockHolders
init|)
block|{
if|if
condition|(
name|isDebugLocking
argument_list|()
condition|)
block|{
name|debugLocking
argument_list|(
literal|"entered synchronized area (unlocking)"
argument_list|)
expr_stmt|;
block|}
name|int
name|holdLocks
init|=
name|decrementLock
argument_list|(
name|file
argument_list|,
name|currentThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|holdLocks
operator|==
literal|0
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDebugLocking
argument_list|()
condition|)
block|{
name|debugLocking
argument_list|(
literal|"lock released on "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isDebugLocking
argument_list|()
condition|)
block|{
name|debugLocking
argument_list|(
literal|"reentrant lock released on "
operator|+
name|file
operator|+
literal|" - hold locks = "
operator|+
name|holdLocks
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|debugLocking
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|Message
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
literal|" "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|" "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determine the state of the lockfile.      *       * Must be called from within a synchronized block.      *       * Three possibilities exist: - The lock is held by the current thread (>0) - The lock is held      * by one or more different threads (-1) - The lock is not held at all (0).      *       * @param file      *            file to lock      * @param forThread      *            thread for which lock status is being queried      */
specifier|private
name|int
name|hasLock
parameter_list|(
name|File
name|file
parameter_list|,
name|Thread
name|forThread
parameter_list|)
block|{
name|Map
name|locksPerThread
init|=
operator|(
name|Map
operator|)
name|currentLockHolders
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|locksPerThread
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|locksPerThread
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Integer
name|counterObj
init|=
operator|(
name|Integer
operator|)
name|locksPerThread
operator|.
name|get
argument_list|(
name|forThread
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
name|counterObj
operator|==
literal|null
condition|?
literal|0
else|:
name|counterObj
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|counter
operator|>
literal|0
condition|)
block|{
return|return
name|counter
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Record that this thread holds the lock.      *       * Asserts that the lock has been previously grabbed by this thread. Must be called from a      * synchronized block in which the lock was grabbed.      *       * @param file      *            file which has been locked      * @param forThread      *            thread for which locking occurred      * @return number of times this thread has grabbed the lock      */
specifier|private
name|int
name|incrementLock
parameter_list|(
name|File
name|file
parameter_list|,
name|Thread
name|forThread
parameter_list|)
block|{
name|Map
name|locksPerThread
init|=
operator|(
name|Map
operator|)
name|currentLockHolders
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|locksPerThread
operator|==
literal|null
condition|)
block|{
name|locksPerThread
operator|=
operator|new
name|ConcurrentHashMap
argument_list|()
expr_stmt|;
name|currentLockHolders
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|locksPerThread
argument_list|)
expr_stmt|;
block|}
name|Integer
name|c
init|=
operator|(
name|Integer
operator|)
name|locksPerThread
operator|.
name|get
argument_list|(
name|forThread
argument_list|)
decl_stmt|;
name|int
name|holdLocks
init|=
name|c
operator|==
literal|null
condition|?
literal|1
else|:
name|c
operator|.
name|intValue
argument_list|()
operator|+
literal|1
decl_stmt|;
name|locksPerThread
operator|.
name|put
argument_list|(
name|forThread
argument_list|,
operator|new
name|Integer
argument_list|(
name|holdLocks
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|holdLocks
return|;
block|}
comment|/**      * Decrease depth of this thread's lock.      *       * Must be called within a synchronized block.      *       * If this returns 0, the caller is responsible for releasing the lock within that same block.      *       * @param file      *            file for which lock depth is being decreased      * @param forThread      *            thread for which lock depth is being decreased      * @return remaining depth of this lock      */
specifier|private
name|int
name|decrementLock
parameter_list|(
name|File
name|file
parameter_list|,
name|Thread
name|forThread
parameter_list|)
block|{
name|ConcurrentHashMap
name|locksPerThread
init|=
operator|(
name|ConcurrentHashMap
operator|)
name|currentLockHolders
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|locksPerThread
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Calling decrementLock on a thread which holds no locks"
argument_list|)
throw|;
block|}
name|Integer
name|c
init|=
operator|(
name|Integer
operator|)
name|locksPerThread
operator|.
name|get
argument_list|(
name|forThread
argument_list|)
decl_stmt|;
name|int
name|oldHeldLocks
init|=
name|c
operator|==
literal|null
condition|?
literal|0
else|:
name|c
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldHeldLocks
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Calling decrementLock on a thread which holds no locks"
argument_list|)
throw|;
block|}
name|int
name|newHeldLocks
init|=
name|oldHeldLocks
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|newHeldLocks
operator|>
literal|0
condition|)
block|{
name|locksPerThread
operator|.
name|put
argument_list|(
name|forThread
argument_list|,
operator|new
name|Integer
argument_list|(
name|newHeldLocks
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|locksPerThread
operator|.
name|remove
argument_list|(
name|forThread
argument_list|)
expr_stmt|;
block|}
return|return
name|newHeldLocks
return|;
block|}
comment|/**      * Return a string naming the threads which currently hold this lock.      */
specifier|protected
name|String
name|getCurrentLockHolderNames
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|ConcurrentHashMap
name|m
init|=
operator|(
name|ConcurrentHashMap
operator|)
name|currentLockHolders
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|"(NULL)"
return|;
block|}
name|Enumeration
name|threads
init|=
name|m
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|threads
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Thread
name|t
init|=
operator|(
name|Thread
operator|)
name|threads
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|threads
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
interface|interface
name|FileLocker
block|{
name|boolean
name|tryLock
parameter_list|(
name|File
name|f
parameter_list|)
function_decl|;
name|void
name|unlock
parameter_list|(
name|File
name|f
parameter_list|)
function_decl|;
block|}
comment|/**      * "locks" a file by creating it if it doesn't exist, relying on the      * {@link File#createNewFile()} atomicity.      */
specifier|public
specifier|static
class|class
name|CreateFileLocker
implements|implements
name|FileLocker
block|{
specifier|private
name|boolean
name|debugLocking
decl_stmt|;
specifier|public
name|CreateFileLocker
parameter_list|(
name|boolean
name|debugLocking
parameter_list|)
block|{
name|this
operator|.
name|debugLocking
operator|=
name|debugLocking
expr_stmt|;
block|}
specifier|public
name|boolean
name|tryLock
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|DeleteOnExitHook
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|debugLocking
condition|)
block|{
name|debugLocking
argument_list|(
literal|"file creation failed "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignored
name|Message
operator|.
name|verbose
argument_list|(
literal|"file creation failed due to an exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" ("
operator|+
name|file
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|unlock
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|DeleteOnExitHook
operator|.
name|remove
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Locks a file using the {@link FileLock} mechanism.      */
specifier|public
specifier|static
class|class
name|NIOFileLocker
implements|implements
name|FileLocker
block|{
specifier|private
name|Map
name|locks
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|debugLocking
decl_stmt|;
specifier|public
name|NIOFileLocker
parameter_list|(
name|boolean
name|debugLocking
parameter_list|)
block|{
name|this
operator|.
name|debugLocking
operator|=
name|debugLocking
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|LockData
block|{
specifier|private
name|RandomAccessFile
name|raf
decl_stmt|;
specifier|private
name|FileLock
name|l
decl_stmt|;
name|LockData
parameter_list|(
name|RandomAccessFile
name|raf
parameter_list|,
name|FileLock
name|l
parameter_list|)
block|{
name|this
operator|.
name|raf
operator|=
name|raf
expr_stmt|;
name|this
operator|.
name|l
operator|=
name|l
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|tryLock
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
operator|||
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
comment|// this must not be closed until unlock
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|FileLock
name|l
init|=
name|raf
operator|.
name|getChannel
argument_list|()
operator|.
name|tryLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|locks
operator|.
name|put
argument_list|(
name|file
argument_list|,
operator|new
name|LockData
argument_list|(
name|raf
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|debugLocking
condition|)
block|{
name|debugLocking
argument_list|(
literal|"failed to acquire lock on "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignored
name|Message
operator|.
name|verbose
argument_list|(
literal|"file lock failed due to an exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" ("
operator|+
name|file
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|unlock
parameter_list|(
name|File
name|file
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|LockData
name|data
init|=
operator|(
name|LockData
operator|)
name|locks
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"file not previously locked: "
operator|+
name|file
argument_list|)
throw|;
block|}
try|try
block|{
name|locks
operator|.
name|remove
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|data
operator|.
name|l
operator|.
name|release
argument_list|()
expr_stmt|;
name|data
operator|.
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"problem while releasing lock on "
operator|+
name|file
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

