begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ResolutionCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|deliver
operator|.
name|DeliverOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|publish
operator|.
name|PublishOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveProcessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|retrieve
operator|.
name|RetrieveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|m2
operator|.
name|PomModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|m2
operator|.
name|PomWriterOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|report
operator|.
name|XmlReportParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|DefaultMessageLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|PropertiesFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|FilterHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|CredentialsStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|TimeoutConstrainedURLHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|URLHandlerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|URLHandlerRegistry
import|;
end_import

begin_comment
comment|/**  * Class used to launch ivy as a standalone tool.  *<p>  * Valid arguments can be obtained with the -? argument.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Main
block|{
specifier|private
specifier|static
specifier|final
name|int
name|HELP_WIDTH
init|=
literal|80
decl_stmt|;
specifier|static
name|CommandLineParser
name|getParser
parameter_list|()
block|{
return|return
operator|new
name|CommandLineParser
argument_list|()
operator|.
name|addCategory
argument_list|(
literal|"settings options"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"settings"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"settingsfile|url"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given file or URL for settings"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"propertiesfile"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given file for properties not specified in settings"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"cache"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"cachedir"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given directory for cache"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"novalidate"
argument_list|)
operator|.
name|description
argument_list|(
literal|"do not validate ivy files against xsd"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"m2compatible"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use Maven 2 compatibility"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"conf"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"settingsfile"
argument_list|)
operator|.
name|deprecated
argument_list|()
operator|.
name|description
argument_list|(
literal|"use given file for settings"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"useOrigin"
argument_list|)
operator|.
name|deprecated
argument_list|()
operator|.
name|description
argument_list|(
literal|"use original artifact location "
operator|+
literal|"with local resolvers instead of copying to the cache"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addCategory
argument_list|(
literal|"resolve options"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"ivy"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"ivyfile"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given file as ivy file"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"refresh"
argument_list|)
operator|.
name|description
argument_list|(
literal|"refresh dynamic resolved revisions"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"dependency"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"organisation"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"module"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"revision"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use this instead of ivy file to do the rest "
operator|+
literal|"of the work with this as a dependency."
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"confs"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"configurations"
argument_list|)
operator|.
name|countArgs
argument_list|(
literal|false
argument_list|)
operator|.
name|description
argument_list|(
literal|"resolve given configurations"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"types"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"types"
argument_list|)
operator|.
name|countArgs
argument_list|(
literal|false
argument_list|)
operator|.
name|description
argument_list|(
literal|"accepted artifact types"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"mode"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"resolvemode"
argument_list|)
operator|.
name|description
argument_list|(
literal|"the resolve mode to use"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"notransitive"
argument_list|)
operator|.
name|description
argument_list|(
literal|"do not resolve dependencies transitively"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addCategory
argument_list|(
literal|"retrieve options"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"retrieve"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"retrievepattern"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given pattern as retrieve pattern"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"ivypattern"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"pattern"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given pattern to copy the ivy files"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"sync"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use sync mode for retrieve"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"symlink"
argument_list|)
operator|.
name|description
argument_list|(
literal|"create symbolic links"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"overwriteMode"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"overwriteMode"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given overwrite mode for retrieve"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addCategory
argument_list|(
literal|"cache path options"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"cachepath"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"cachepathfile"
argument_list|)
operator|.
name|description
argument_list|(
literal|"outputs a classpath consisting of all dependencies in cache "
operator|+
literal|"(including transitive ones) "
operator|+
literal|"of the given ivy file to the given cachepathfile"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addCategory
argument_list|(
literal|"deliver options"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"deliverto"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"ivypattern"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given pattern as resolved ivy file pattern"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addCategory
argument_list|(
literal|"publish options"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"publish"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"resolvername"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given resolver to publish to"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"publishpattern"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"artpattern"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given pattern to find artifacts to publish"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"revision"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"revision"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given revision to publish the module"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"status"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"status"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given status to publish the module"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"overwrite"
argument_list|)
operator|.
name|description
argument_list|(
literal|"overwrite files in the repository if they exist"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addCategory
argument_list|(
literal|"makepom options"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"makepom"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"pomfilepath"
argument_list|)
operator|.
name|description
argument_list|(
literal|"create a POM file for the module"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addCategory
argument_list|(
literal|"http auth options"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"realm"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"realm"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given realm for HTTP AUTH"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"host"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"host"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given host for HTTP AUTH"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"username"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"username"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given username for HTTP AUTH"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"passwd"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"passwd"
argument_list|)
operator|.
name|description
argument_list|(
literal|"use given password for HTTP AUTH"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addCategory
argument_list|(
literal|"launcher options"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"main"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"main"
argument_list|)
operator|.
name|description
argument_list|(
literal|"the FQCN of the main class to launch"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"args"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"args"
argument_list|)
operator|.
name|countArgs
argument_list|(
literal|false
argument_list|)
operator|.
name|description
argument_list|(
literal|"the arguments to give to the launched process"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"cp"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"cp"
argument_list|)
operator|.
name|description
argument_list|(
literal|"extra classpath to use when launching process"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addCategory
argument_list|(
literal|"message options"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"debug"
argument_list|)
operator|.
name|description
argument_list|(
literal|"set message level to debug"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"verbose"
argument_list|)
operator|.
name|description
argument_list|(
literal|"set message level to verbose"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"warn"
argument_list|)
operator|.
name|description
argument_list|(
literal|"set message level to warn"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"error"
argument_list|)
operator|.
name|description
argument_list|(
literal|"set message level to error"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addCategory
argument_list|(
literal|"help options"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"?"
argument_list|)
operator|.
name|description
argument_list|(
literal|"display this help"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"deprecated"
argument_list|)
operator|.
name|description
argument_list|(
literal|"show deprecated options"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|OptionBuilder
argument_list|(
literal|"version"
argument_list|)
operator|.
name|description
argument_list|(
literal|"displays version information"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|run
argument_list|(
name|args
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A method that allows to run embedded Ivy as if it were launched from CLI      * (e.g., for use with REPL in Java 9+).      *      * @param args an array of command line arguments      * @return null if asked for usage or version, or if anything fails during resolve, publish or      * launch; a ResolveReport on success      * @throws Exception if something goes wrong      */
specifier|public
specifier|static
name|ResolveReport
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|run
argument_list|(
name|args
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/*      * For backwards compatibility and testing      */
specifier|static
name|void
name|run
parameter_list|(
name|CommandLineParser
name|parser
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
operator|.
name|contains
argument_list|(
literal|"-?"
argument_list|)
condition|)
block|{
name|usage
argument_list|(
name|parser
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|run
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ResolveReport
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|boolean
name|isCli
parameter_list|)
throws|throws
name|Exception
block|{
name|CommandLineParser
name|parser
init|=
name|getParser
argument_list|()
decl_stmt|;
comment|// parse the command line arguments
name|CommandLine
name|line
decl_stmt|;
try|try
block|{
name|line
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
comment|// display usage and and rethrow
name|usage
argument_list|(
name|parser
argument_list|,
literal|false
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|(
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|usage
argument_list|(
name|parser
argument_list|,
name|line
operator|.
name|hasOption
argument_list|(
literal|"deprecated"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|run
argument_list|(
name|line
argument_list|,
name|isCli
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
specifier|static
name|ResolveReport
name|run
parameter_list|(
name|CommandLine
name|line
parameter_list|,
name|boolean
name|isCli
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Apache Ivy "
operator|+
name|Ivy
operator|.
name|getIvyVersion
argument_list|()
operator|+
literal|" - "
operator|+
name|Ivy
operator|.
name|getIvyDate
argument_list|()
operator|+
literal|" :: "
operator|+
name|Ivy
operator|.
name|getIvyHomeURL
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|boolean
name|validate
init|=
operator|!
name|line
operator|.
name|hasOption
argument_list|(
literal|"novalidate"
argument_list|)
decl_stmt|;
name|Ivy
name|ivy
init|=
name|Ivy
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|initMessage
argument_list|(
name|line
argument_list|,
name|ivy
argument_list|)
expr_stmt|;
name|IvySettings
name|settings
init|=
name|initSettings
argument_list|(
name|line
argument_list|,
name|ivy
argument_list|)
decl_stmt|;
name|ivy
operator|.
name|pushContext
argument_list|()
expr_stmt|;
name|File
name|cache
init|=
operator|new
name|File
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"cache"
argument_list|,
name|settings
operator|.
name|getDefaultCache
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"cache"
argument_list|)
condition|)
block|{
comment|// override default cache path with user supplied cache path
name|settings
operator|.
name|setDefaultCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cache
operator|.
name|exists
argument_list|()
condition|)
block|{
name|cache
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|cache
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|error
argument_list|(
name|cache
operator|+
literal|" is not a directory"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|confs
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"confs"
argument_list|)
condition|)
block|{
name|confs
operator|=
name|line
operator|.
name|getOptionValues
argument_list|(
literal|"confs"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|confs
operator|=
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
expr_stmt|;
block|}
name|File
name|ivyfile
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"dependency"
argument_list|)
condition|)
block|{
name|String
index|[]
name|dep
init|=
name|line
operator|.
name|getOptionValues
argument_list|(
literal|"dependency"
argument_list|)
decl_stmt|;
name|ivyfile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"ivy"
argument_list|,
literal|".xml"
argument_list|)
expr_stmt|;
name|ivyfile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|DefaultModuleDescriptor
name|md
init|=
name|DefaultModuleDescriptor
operator|.
name|newDefaultInstance
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|dep
index|[
literal|0
index|]
argument_list|,
name|dep
index|[
literal|1
index|]
operator|+
literal|"-caller"
argument_list|,
literal|"working"
argument_list|)
argument_list|)
decl_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|md
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|dep
index|[
literal|0
index|]
argument_list|,
name|dep
index|[
literal|1
index|]
argument_list|,
name|dep
index|[
literal|2
index|]
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|conf
range|:
name|confs
control|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"default"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|md
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|md
argument_list|,
name|ivyfile
argument_list|)
expr_stmt|;
name|confs
operator|=
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
expr_stmt|;
block|}
else|else
block|{
name|ivyfile
operator|=
operator|new
name|File
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"ivy"
argument_list|,
literal|"ivy.xml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ivyfile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|error
argument_list|(
literal|"ivy file not found: "
operator|+
name|ivyfile
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ivyfile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|error
argument_list|(
literal|"ivy file is not a file: "
operator|+
name|ivyfile
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"useOrigin"
argument_list|)
condition|)
block|{
name|ivy
operator|.
name|getSettings
argument_list|()
operator|.
name|useDeprecatedUseOrigin
argument_list|()
expr_stmt|;
block|}
name|ResolveOptions
name|resolveOptions
init|=
operator|new
name|ResolveOptions
argument_list|()
operator|.
name|setConfs
argument_list|(
name|confs
argument_list|)
operator|.
name|setValidate
argument_list|(
name|validate
argument_list|)
operator|.
name|setResolveMode
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
operator|.
name|setArtifactFilter
argument_list|(
name|FilterHelper
operator|.
name|getArtifactTypeFilter
argument_list|(
name|line
operator|.
name|getOptionValues
argument_list|(
literal|"types"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"notransitive"
argument_list|)
condition|)
block|{
name|resolveOptions
operator|.
name|setTransitive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"refresh"
argument_list|)
condition|)
block|{
name|resolveOptions
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ResolveReport
name|report
init|=
name|ivy
operator|.
name|resolve
argument_list|(
name|ivyfile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|resolveOptions
argument_list|)
decl_stmt|;
if|if
condition|(
name|report
operator|.
name|hasError
argument_list|()
condition|)
block|{
if|if
condition|(
name|isCli
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|problem
range|:
name|report
operator|.
name|getAllProblemMessages
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|problem
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ResolveProcessException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|ModuleDescriptor
name|md
init|=
name|report
operator|.
name|getModuleDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|confs
operator|.
name|length
operator|==
literal|1
operator|&&
literal|"*"
operator|.
name|equals
argument_list|(
name|confs
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|confs
operator|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"retrieve"
argument_list|)
condition|)
block|{
name|String
name|retrievePattern
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"retrieve"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|retrievePattern
operator|.
name|contains
argument_list|(
literal|"["
argument_list|)
condition|)
block|{
name|retrievePattern
operator|+=
literal|"/lib/[conf]/[artifact].[ext]"
expr_stmt|;
block|}
name|String
name|ivyPattern
init|=
name|settings
operator|.
name|substitute
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"ivypattern"
argument_list|)
argument_list|)
decl_stmt|;
name|ivy
operator|.
name|retrieve
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
operator|new
name|RetrieveOptions
argument_list|()
operator|.
name|setConfs
argument_list|(
name|confs
argument_list|)
operator|.
name|setSync
argument_list|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"sync"
argument_list|)
argument_list|)
operator|.
name|setUseOrigin
argument_list|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"useOrigin"
argument_list|)
argument_list|)
operator|.
name|setDestArtifactPattern
argument_list|(
name|retrievePattern
argument_list|)
operator|.
name|setDestIvyPattern
argument_list|(
name|ivyPattern
argument_list|)
operator|.
name|setOverwriteMode
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"overwriteMode"
argument_list|)
argument_list|)
operator|.
name|setArtifactFilter
argument_list|(
name|FilterHelper
operator|.
name|getArtifactTypeFilter
argument_list|(
name|line
operator|.
name|getOptionValues
argument_list|(
literal|"types"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMakeSymlinks
argument_list|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"symlink"
argument_list|)
argument_list|)
operator|.
name|setMakeSymlinksInMass
argument_list|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"symlinkmass"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"cachepath"
argument_list|)
condition|)
block|{
name|outputCachePath
argument_list|(
name|ivy
argument_list|,
name|cache
argument_list|,
name|md
argument_list|,
name|confs
argument_list|,
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"cachepath"
argument_list|,
literal|"ivycachepath.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"revision"
argument_list|)
condition|)
block|{
name|ivy
operator|.
name|deliver
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|,
name|settings
operator|.
name|substitute
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"revision"
argument_list|)
argument_list|)
argument_list|,
name|settings
operator|.
name|substitute
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"deliverto"
argument_list|,
literal|"ivy-[revision].xml"
argument_list|)
argument_list|)
argument_list|,
name|DeliverOptions
operator|.
name|newInstance
argument_list|(
name|settings
argument_list|)
operator|.
name|setStatus
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"status"
argument_list|,
literal|"release"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setValidate
argument_list|(
name|validate
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"publish"
argument_list|)
condition|)
block|{
name|ivy
operator|.
name|publish
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"publishpattern"
argument_list|,
literal|"distrib/[type]s/[artifact]-[revision].[ext]"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"publish"
argument_list|)
argument_list|,
operator|new
name|PublishOptions
argument_list|()
operator|.
name|setPubrevision
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"revision"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setValidate
argument_list|(
name|validate
argument_list|)
operator|.
name|setSrcIvyPattern
argument_list|(
name|settings
operator|.
name|substitute
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"deliverto"
argument_list|,
literal|"ivy-[revision].xml"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setOverwrite
argument_list|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"overwrite"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"makepom"
argument_list|)
condition|)
block|{
specifier|final
name|String
name|pomFilePath
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"makepom"
argument_list|,
literal|"pom.xml"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|pomFilePath
argument_list|)
decl_stmt|;
name|PomModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|md
argument_list|,
name|pomFile
argument_list|,
operator|new
name|PomWriterOptions
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"Generated a pom file for module at "
operator|+
name|pomFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"main"
argument_list|)
condition|)
block|{
comment|// check if the option cp has been set
name|List
argument_list|<
name|File
argument_list|>
name|fileList
init|=
name|getExtraClasspathFileList
argument_list|(
name|line
argument_list|)
decl_stmt|;
comment|// merge -args and left over args
name|String
index|[]
name|fargs
init|=
name|line
operator|.
name|getOptionValues
argument_list|(
literal|"args"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fargs
operator|==
literal|null
condition|)
block|{
name|fargs
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
name|String
index|[]
name|extra
init|=
name|line
operator|.
name|getLeftOverArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|extra
operator|==
literal|null
condition|)
block|{
name|extra
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[
name|fargs
operator|.
name|length
operator|+
name|extra
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|fargs
argument_list|,
literal|0
argument_list|,
name|params
argument_list|,
literal|0
argument_list|,
name|fargs
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|extra
argument_list|,
literal|0
argument_list|,
name|params
argument_list|,
name|fargs
operator|.
name|length
argument_list|,
name|extra
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// invoke with given main class and merged params
name|invoke
argument_list|(
name|ivy
argument_list|,
name|cache
argument_list|,
name|md
argument_list|,
name|confs
argument_list|,
name|fileList
argument_list|,
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"main"
argument_list|)
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|ivy
operator|.
name|getLoggerEngine
argument_list|()
operator|.
name|popLogger
argument_list|()
expr_stmt|;
name|ivy
operator|.
name|popContext
argument_list|()
expr_stmt|;
return|return
name|report
return|;
block|}
comment|/**      * Parses the<code>cp</code> option from the command line, and returns a list of {@link File}.      *<p>      * All the files contained in the returned List exist, non existing files are simply skipped      * with a warning.      *</p>      *      * @param line      *            the command line in which the cp option should be parsed      * @return a List of files to include as extra classpath entries, or<code>null</code> if no cp      *         option was provided.      */
specifier|private
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|getExtraClasspathFileList
parameter_list|(
name|CommandLine
name|line
parameter_list|)
block|{
name|List
argument_list|<
name|File
argument_list|>
name|fileList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"cp"
argument_list|)
condition|)
block|{
name|fileList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|cp
range|:
name|line
operator|.
name|getOptionValues
argument_list|(
literal|"cp"
argument_list|)
control|)
block|{
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|cp
argument_list|,
name|File
operator|.
name|pathSeparator
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fileList
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"Skipping extra classpath '"
operator|+
name|file
operator|+
literal|"' as it does not exist."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|fileList
return|;
block|}
specifier|private
specifier|static
name|IvySettings
name|initSettings
parameter_list|(
name|CommandLine
name|line
parameter_list|,
name|Ivy
name|ivy
parameter_list|)
throws|throws
name|java
operator|.
name|text
operator|.
name|ParseException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|IvySettings
name|settings
init|=
name|ivy
operator|.
name|getSettings
argument_list|()
decl_stmt|;
name|settings
operator|.
name|addAllVariables
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"properties"
argument_list|)
condition|)
block|{
name|settings
operator|.
name|addAllVariables
argument_list|(
operator|new
name|PropertiesFile
argument_list|(
operator|new
name|File
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"properties"
argument_list|)
argument_list|)
argument_list|,
literal|"additional properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"m2compatible"
argument_list|)
condition|)
block|{
name|settings
operator|.
name|setVariable
argument_list|(
literal|"ivy.default.configuration.m2compatible"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|configureURLHandler
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"realm"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"host"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"username"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"passwd"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|settingsPath
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"settings"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|settingsPath
argument_list|)
condition|)
block|{
name|settingsPath
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"conf"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|settingsPath
argument_list|)
condition|)
block|{
name|Message
operator|.
name|deprecated
argument_list|(
literal|"-conf is deprecated, use -settings instead"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|settingsPath
argument_list|)
condition|)
block|{
name|ivy
operator|.
name|configureDefault
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|URI
name|confUri
init|=
name|getSettingsURI
argument_list|(
name|settingsPath
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|confUri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|conffile
init|=
operator|new
name|File
argument_list|(
name|confUri
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conffile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ivy configuration file not found: "
operator|+
name|conffile
argument_list|)
throw|;
block|}
if|else if
condition|(
name|conffile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ivy configuration file is not a file: "
operator|+
name|conffile
argument_list|)
throw|;
block|}
name|ivy
operator|.
name|configure
argument_list|(
name|conffile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|ivy
operator|.
name|configure
argument_list|(
name|confUri
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ivy configuration failed to load from: "
operator|+
name|settingsPath
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|settings
return|;
block|}
specifier|private
specifier|static
name|URI
name|getSettingsURI
parameter_list|(
name|String
name|settingsPath
parameter_list|)
block|{
name|URI
name|settingsUri
decl_stmt|;
try|try
block|{
name|settingsUri
operator|=
operator|new
name|URI
argument_list|(
name|settingsPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|settingsUri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|settingsUri
operator|=
operator|new
name|File
argument_list|(
name|settingsPath
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|badUriEx
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|settingsPath
argument_list|)
operator|.
name|toURI
argument_list|()
return|;
block|}
return|return
name|settingsUri
return|;
block|}
specifier|private
specifier|static
name|void
name|initMessage
parameter_list|(
name|CommandLine
name|line
parameter_list|,
name|Ivy
name|ivy
parameter_list|)
block|{
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"debug"
argument_list|)
condition|)
block|{
name|ivy
operator|.
name|getLoggerEngine
argument_list|()
operator|.
name|pushLogger
argument_list|(
operator|new
name|DefaultMessageLogger
argument_list|(
name|Message
operator|.
name|MSG_DEBUG
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"verbose"
argument_list|)
condition|)
block|{
name|ivy
operator|.
name|getLoggerEngine
argument_list|()
operator|.
name|pushLogger
argument_list|(
operator|new
name|DefaultMessageLogger
argument_list|(
name|Message
operator|.
name|MSG_VERBOSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"warn"
argument_list|)
condition|)
block|{
name|ivy
operator|.
name|getLoggerEngine
argument_list|()
operator|.
name|pushLogger
argument_list|(
operator|new
name|DefaultMessageLogger
argument_list|(
name|Message
operator|.
name|MSG_WARN
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"error"
argument_list|)
condition|)
block|{
name|ivy
operator|.
name|getLoggerEngine
argument_list|()
operator|.
name|pushLogger
argument_list|(
operator|new
name|DefaultMessageLogger
argument_list|(
name|Message
operator|.
name|MSG_ERR
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ivy
operator|.
name|getLoggerEngine
argument_list|()
operator|.
name|pushLogger
argument_list|(
operator|new
name|DefaultMessageLogger
argument_list|(
name|Message
operator|.
name|MSG_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|outputCachePath
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|File
name|cache
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|String
name|outFile
parameter_list|)
block|{
try|try
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ArtifactDownloadReport
argument_list|>
name|all
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ResolutionCacheManager
name|cacheMgr
init|=
name|ivy
operator|.
name|getResolutionCacheManager
argument_list|()
decl_stmt|;
name|XmlReportParser
name|parser
init|=
operator|new
name|XmlReportParser
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|conf
range|:
name|confs
control|)
block|{
name|String
name|resolveId
init|=
name|ResolveOptions
operator|.
name|getDefaultResolveId
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|File
name|report
init|=
name|cacheMgr
operator|.
name|getConfigurationResolveReportInCache
argument_list|(
name|resolveId
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|all
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parser
operator|.
name|getArtifactReports
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ArtifactDownloadReport
name|artifact
range|:
name|all
control|)
block|{
if|if
condition|(
name|artifact
operator|.
name|getLocalFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|artifact
operator|.
name|getLocalFile
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
block|}
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|setLength
argument_list|(
name|buf
operator|.
name|length
argument_list|()
operator|-
name|File
operator|.
name|pathSeparator
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"cachepath output to "
operator|+
name|outFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"impossible to build ivy cache path: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
specifier|private
specifier|static
name|void
name|invoke
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|File
name|cache
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|fileList
parameter_list|,
name|String
name|mainclass
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add option cp (extra classpath) urls
if|if
condition|(
name|fileList
operator|!=
literal|null
operator|&&
name|fileList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|fileList
control|)
block|{
try|try
block|{
name|urls
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// Should not happen, just ignore.
block|}
block|}
block|}
try|try
block|{
name|Collection
argument_list|<
name|ArtifactDownloadReport
argument_list|>
name|all
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ResolutionCacheManager
name|cacheMgr
init|=
name|ivy
operator|.
name|getResolutionCacheManager
argument_list|()
decl_stmt|;
name|XmlReportParser
name|parser
init|=
operator|new
name|XmlReportParser
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|conf
range|:
name|confs
control|)
block|{
name|String
name|resolveId
init|=
name|ResolveOptions
operator|.
name|getDefaultResolveId
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|File
name|report
init|=
name|cacheMgr
operator|.
name|getConfigurationResolveReportInCache
argument_list|(
name|resolveId
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|all
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parser
operator|.
name|getArtifactReports
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ArtifactDownloadReport
name|artifact
range|:
name|all
control|)
block|{
if|if
condition|(
name|artifact
operator|.
name|getLocalFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|urls
operator|.
name|add
argument_list|(
name|artifact
operator|.
name|getLocalFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"impossible to build ivy cache path: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|URLClassLoader
name|classLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
name|urls
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
name|urls
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|Main
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|mainclass
argument_list|)
decl_stmt|;
name|Method
name|mainMethod
init|=
name|c
operator|.
name|getMethod
argument_list|(
literal|"main"
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
name|mainMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|(
name|args
operator|==
literal|null
condition|?
operator|new
name|String
index|[
literal|0
index|]
else|:
name|args
operator|)
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find class: "
operator|+
name|mainclass
argument_list|,
name|cnfe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
decl||
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find main method: "
operator|+
name|mainclass
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No permissions to invoke main method: "
operator|+
name|mainclass
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected exception invoking main method: "
operator|+
name|mainclass
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|configureURLHandler
parameter_list|(
name|String
name|realm
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|passwd
parameter_list|)
block|{
name|CredentialsStore
operator|.
name|INSTANCE
operator|.
name|addCredentials
argument_list|(
name|realm
argument_list|,
name|host
argument_list|,
name|username
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
name|URLHandlerDispatcher
name|dispatcher
init|=
operator|new
name|URLHandlerDispatcher
argument_list|()
decl_stmt|;
name|TimeoutConstrainedURLHandler
name|httpHandler
init|=
name|URLHandlerRegistry
operator|.
name|getHttp
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|setDownloader
argument_list|(
literal|"http"
argument_list|,
name|httpHandler
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|setDownloader
argument_list|(
literal|"https"
argument_list|,
name|httpHandler
argument_list|)
expr_stmt|;
name|URLHandlerRegistry
operator|.
name|setDefault
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|void
name|usage
parameter_list|(
name|CommandLineParser
name|parser
parameter_list|,
name|boolean
name|showDeprecated
parameter_list|)
block|{
comment|// automatically generate the help statement
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|parser
operator|.
name|printHelp
argument_list|(
name|pw
argument_list|,
name|HELP_WIDTH
argument_list|,
literal|"ivy"
argument_list|,
name|showDeprecated
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Main
parameter_list|()
block|{
block|}
block|}
end_class

end_unit

