begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|pack
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_class
specifier|public
class|class
name|Pack200Packing
extends|extends
name|StreamPacking
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NAMES
init|=
block|{
literal|"pack200"
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getNames
parameter_list|()
block|{
return|return
name|NAMES
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUnpackedExtension
parameter_list|(
name|String
name|ext
parameter_list|)
block|{
if|if
condition|(
name|ext
operator|.
name|endsWith
argument_list|(
literal|"pack.gz"
argument_list|)
condition|)
block|{
name|ext
operator|=
name|ext
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ext
operator|.
name|length
argument_list|()
operator|-
literal|7
argument_list|)
expr_stmt|;
if|if
condition|(
name|ext
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|ext
operator|=
name|ext
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ext
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ext
operator|.
name|endsWith
argument_list|(
literal|"pack"
argument_list|)
condition|)
block|{
name|ext
operator|=
name|ext
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ext
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|ext
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|ext
operator|=
name|ext
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ext
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ext
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|unpack
parameter_list|(
name|InputStream
name|packed
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileUtil
operator|.
name|unwrapPack200
argument_list|(
name|packed
argument_list|)
return|;
block|}
block|}
end_class

end_unit

