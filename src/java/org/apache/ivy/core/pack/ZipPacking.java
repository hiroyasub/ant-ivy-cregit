begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|pack
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|ZipPacking
extends|extends
name|ArchivePacking
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NAMES
init|=
block|{
literal|"zip"
block|,
literal|"jar"
block|,
literal|"war"
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getNames
parameter_list|()
block|{
return|return
name|NAMES
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUnpackedExtension
parameter_list|(
name|String
name|ext
parameter_list|)
block|{
if|if
condition|(
name|ext
operator|.
name|endsWith
argument_list|(
literal|"zip"
argument_list|)
operator|||
name|ext
operator|.
name|endsWith
argument_list|(
literal|"jar"
argument_list|)
operator|||
name|ext
operator|.
name|endsWith
argument_list|(
literal|"war"
argument_list|)
condition|)
block|{
name|ext
operator|=
name|ext
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ext
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|ext
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|ext
operator|=
name|ext
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ext
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ext
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unpack
parameter_list|(
name|InputStream
name|packed
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipInputStream
name|zip
init|=
literal|null
decl_stmt|;
try|try
block|{
name|zip
operator|=
operator|new
name|ZipInputStream
argument_list|(
name|packed
argument_list|)
expr_stmt|;
name|ZipEntry
name|entry
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
operator|(
name|entry
operator|=
name|zip
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
operator|)
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dest
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\texpanding "
operator|+
name|entry
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|f
argument_list|)
expr_stmt|;
comment|// create intermediary directories - sometimes zip don't add them
name|File
name|dirF
init|=
name|f
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirF
operator|!=
literal|null
condition|)
block|{
name|dirF
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|f
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|zip
argument_list|,
name|out
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
name|f
operator|.
name|setLastModified
argument_list|(
name|entry
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|zip
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

