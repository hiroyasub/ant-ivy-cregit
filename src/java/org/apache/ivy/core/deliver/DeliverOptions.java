begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|deliver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_comment
comment|/**  * A set of options used to do a deliver.  */
end_comment

begin_class
specifier|public
class|class
name|DeliverOptions
block|{
specifier|private
name|String
name|_status
decl_stmt|;
specifier|private
name|Date
name|_pubdate
decl_stmt|;
specifier|private
name|CacheManager
name|_cache
decl_stmt|;
specifier|private
name|PublishingDependencyRevisionResolver
name|_pdrResolver
init|=
operator|new
name|DefaultPublishingDRResolver
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|_validate
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|_resolveDynamicRevisions
init|=
literal|true
decl_stmt|;
comment|/** 	 * Returns an instance of DeliverOptions with options corresponding to default values 	 * taken from the given settings. 	 *  	 * @param settings The settings to use to get default option values 	 * @return a DeliverOptions instance ready to be used or customized 	 */
specifier|public
specifier|static
name|DeliverOptions
name|newInstance
parameter_list|(
name|IvySettings
name|settings
parameter_list|)
block|{
return|return
operator|new
name|DeliverOptions
argument_list|(
literal|null
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
name|CacheManager
operator|.
name|getInstance
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|DefaultPublishingDRResolver
argument_list|()
argument_list|,
name|settings
operator|.
name|doValidate
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** 	 * Creates an instance of DeliverOptions which require to be configured 	 * using the appropriate setters. 	 */
specifier|public
name|DeliverOptions
parameter_list|()
block|{
block|}
comment|/** 	 * Creates an instance of DeliverOptions with all options explicitly set. 	 */
specifier|public
name|DeliverOptions
parameter_list|(
name|String
name|status
parameter_list|,
name|Date
name|pubDate
parameter_list|,
name|CacheManager
name|cache
parameter_list|,
name|PublishingDependencyRevisionResolver
name|pdrResolver
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|resolveDynamicRevisions
parameter_list|)
block|{
name|_status
operator|=
name|status
expr_stmt|;
name|_pubdate
operator|=
name|pubDate
expr_stmt|;
name|_cache
operator|=
name|cache
expr_stmt|;
name|_pdrResolver
operator|=
name|pdrResolver
expr_stmt|;
name|_validate
operator|=
name|validate
expr_stmt|;
name|_resolveDynamicRevisions
operator|=
name|resolveDynamicRevisions
expr_stmt|;
block|}
specifier|public
name|CacheManager
name|getCache
parameter_list|()
block|{
return|return
name|_cache
return|;
block|}
specifier|public
name|DeliverOptions
name|setCache
parameter_list|(
name|CacheManager
name|cache
parameter_list|)
block|{
name|_cache
operator|=
name|cache
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Return the pdrResolver that will be used during deliver for each  	 * dependency to get its published information.  	 * This can particularly useful 	 * when the deliver is made for a release, and when we wish to deliver each 	 * dependency which is still in integration. The PublishingDependencyRevisionResolver 	 * can then do the delivering work for the dependency and return the new (delivered) 	 * dependency info (with the delivered revision). Note that  	 * PublishingDependencyRevisionResolver is only called for each<b>direct</b> dependency. 	 * @return the pdrResolver that will be used during deliver 	 */
specifier|public
name|PublishingDependencyRevisionResolver
name|getPdrResolver
parameter_list|()
block|{
return|return
name|_pdrResolver
return|;
block|}
comment|/** 	 * Sets the pdrResolver that will be used during deliver for each  	 * dependency to get its published information.  	 * This can particularly useful 	 * when the deliver is made for a release, and when we wish to deliver each 	 * dependency which is still in integration. The PublishingDependencyRevisionResolver 	 * can then do the delivering work for the dependency and return the new (delivered) 	 * dependency info (with the delivered revision). Note that  	 * PublishingDependencyRevisionResolver is only called for each<b>direct</b> dependency. 	 * @return the instance of DeliverOptions on which the method has been called,  	 * for easy method chaining  	 */
specifier|public
name|DeliverOptions
name|setPdrResolver
parameter_list|(
name|PublishingDependencyRevisionResolver
name|pdrResolver
parameter_list|)
block|{
name|_pdrResolver
operator|=
name|pdrResolver
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isResolveDynamicRevisions
parameter_list|()
block|{
return|return
name|_resolveDynamicRevisions
return|;
block|}
specifier|public
name|DeliverOptions
name|setResolveDynamicRevisions
parameter_list|(
name|boolean
name|resolveDynamicRevisions
parameter_list|)
block|{
name|_resolveDynamicRevisions
operator|=
name|resolveDynamicRevisions
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isValidate
parameter_list|()
block|{
return|return
name|_validate
return|;
block|}
specifier|public
name|DeliverOptions
name|setValidate
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
name|_validate
operator|=
name|validate
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Date
name|getPubdate
parameter_list|()
block|{
return|return
name|_pubdate
return|;
block|}
specifier|public
name|DeliverOptions
name|setPubdate
parameter_list|(
name|Date
name|pubdate
parameter_list|)
block|{
name|_pubdate
operator|=
name|pubdate
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Returns the status to which the module should be delivered, 	 * or null if the current status should be kept. 	 * @return the status to which the module should be delivered 	 */
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|_status
return|;
block|}
comment|/** 	 * Sets the status to which the module should be delivered, 	 * use null if the current status should be kept. 	 * @return the instance of DeliverOptions on which the method has been called,  	 * for easy method chaining  	 */
specifier|public
name|DeliverOptions
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|_status
operator|=
name|status
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"status="
operator|+
name|_status
operator|+
literal|" pubdate="
operator|+
name|_pubdate
operator|+
literal|" validate="
operator|+
name|_validate
operator|+
literal|" resolveDynamicRevisions="
operator|+
name|_resolveDynamicRevisions
operator|+
literal|" cache="
operator|+
name|_cache
return|;
block|}
block|}
end_class

end_unit

