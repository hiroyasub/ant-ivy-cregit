begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|resolve
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_class
specifier|public
class|class
name|EndResolveDependencyEvent
extends|extends
name|ResolveDependencyEvent
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"post-resolve-dependency"
decl_stmt|;
specifier|private
name|ResolvedModuleRevision
name|module
decl_stmt|;
specifier|public
name|EndResolveDependencyEvent
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|,
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolvedModuleRevision
name|module
parameter_list|)
block|{
name|super
argument_list|(
name|NAME
argument_list|,
name|resolver
argument_list|,
name|dd
argument_list|)
expr_stmt|;
name|this
operator|.
name|module
operator|=
name|module
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|module
operator|!=
literal|null
condition|)
block|{
comment|// override revision from the dependency descriptor
name|addAttribute
argument_list|(
literal|"revision"
argument_list|,
name|this
operator|.
name|module
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|addAttribute
argument_list|(
literal|"resolved"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addAttribute
argument_list|(
literal|"resolved"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ResolvedModuleRevision
name|getModule
parameter_list|()
block|{
return|return
name|module
return|;
block|}
block|}
end_class

end_unit

