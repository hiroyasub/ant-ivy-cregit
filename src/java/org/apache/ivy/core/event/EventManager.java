begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|EventListenerList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|TransferEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|TransferListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_class
specifier|public
class|class
name|EventManager
implements|implements
name|TransferListener
block|{
specifier|private
name|EventListenerList
name|listeners
init|=
operator|new
name|EventListenerList
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addIvyListener
parameter_list|(
name|IvyListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|IvyListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addIvyListener
parameter_list|(
name|IvyListener
name|listener
parameter_list|,
name|String
name|eventName
parameter_list|)
block|{
name|addIvyListener
argument_list|(
name|listener
argument_list|,
operator|new
name|IvyEventFilter
argument_list|(
name|eventName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addIvyListener
parameter_list|(
name|IvyListener
name|listener
parameter_list|,
name|Filter
argument_list|<
name|IvyEvent
argument_list|>
name|filter
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|IvyListener
operator|.
name|class
argument_list|,
operator|new
name|FilteredIvyListener
argument_list|(
name|listener
argument_list|,
name|filter
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeIvyListener
parameter_list|(
name|IvyListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|IvyListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|IvyListener
index|[]
name|listeners
init|=
name|this
operator|.
name|listeners
operator|.
name|getListeners
argument_list|(
name|IvyListener
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|IvyListener
name|listen
range|:
name|listeners
control|)
block|{
if|if
condition|(
name|listen
operator|instanceof
name|FilteredIvyListener
condition|)
block|{
if|if
condition|(
name|listener
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|FilteredIvyListener
operator|)
name|listen
operator|)
operator|.
name|getIvyListener
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|listeners
operator|.
name|remove
argument_list|(
name|IvyListener
operator|.
name|class
argument_list|,
name|listen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|hasIvyListener
parameter_list|(
name|IvyListener
name|listener
parameter_list|)
block|{
name|IvyListener
index|[]
name|listeners
init|=
name|this
operator|.
name|listeners
operator|.
name|getListeners
argument_list|(
name|IvyListener
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|IvyListener
name|listen
range|:
name|listeners
control|)
block|{
if|if
condition|(
name|listen
operator|instanceof
name|FilteredIvyListener
condition|)
block|{
if|if
condition|(
name|listener
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|FilteredIvyListener
operator|)
name|listen
operator|)
operator|.
name|getIvyListener
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|fireIvyEvent
parameter_list|(
name|IvyEvent
name|evt
parameter_list|)
block|{
name|Object
index|[]
name|listeners
init|=
name|this
operator|.
name|listeners
operator|.
name|getListenerList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|listeners
operator|.
name|length
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|-=
literal|2
control|)
block|{
if|if
condition|(
name|listeners
index|[
name|i
index|]
operator|==
name|IvyListener
operator|.
name|class
condition|)
block|{
operator|(
operator|(
name|IvyListener
operator|)
name|listeners
index|[
name|i
operator|+
literal|1
index|]
operator|)
operator|.
name|progress
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|addTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|TransferListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|TransferListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTransferListener
parameter_list|(
name|TransferListener
name|listener
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|listeners
operator|.
name|getListeners
argument_list|(
name|TransferListener
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|listener
argument_list|)
return|;
block|}
specifier|protected
name|void
name|fireTransferEvent
parameter_list|(
name|TransferEvent
name|evt
parameter_list|)
block|{
name|Object
index|[]
name|listeners
init|=
name|this
operator|.
name|listeners
operator|.
name|getListenerList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|listeners
operator|.
name|length
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|-=
literal|2
control|)
block|{
if|if
condition|(
name|listeners
index|[
name|i
index|]
operator|==
name|TransferListener
operator|.
name|class
condition|)
block|{
operator|(
operator|(
name|TransferListener
operator|)
name|listeners
index|[
name|i
operator|+
literal|1
index|]
operator|)
operator|.
name|transferProgress
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|transferProgress
parameter_list|(
name|TransferEvent
name|evt
parameter_list|)
block|{
name|fireTransferEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
name|fireIvyEvent
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

