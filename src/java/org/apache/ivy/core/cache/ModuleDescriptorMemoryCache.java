begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Cache ModuleDescriptors so that when the same module is used twice (in multi-module build for  * instance), it is parsed only once. This cache is has a limited size, and keep the most recently  * used entries. The entry in the cache are invalidated if there is a change to one variable used in  * the module descriptor.  */
end_comment

begin_class
class|class
name|ModuleDescriptorMemoryCache
block|{
specifier|private
specifier|final
name|int
name|maxSize
decl_stmt|;
specifier|private
specifier|final
name|LinkedHashMap
comment|/*<File,CacheEntry> */
name|valueMap
decl_stmt|;
comment|/**      * Create a cache of the given size      *       * @param size int      */
specifier|public
name|ModuleDescriptorMemoryCache
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|valueMap
operator|=
operator|new
name|LinkedHashMap
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModuleDescriptor
name|get
parameter_list|(
name|File
name|ivyFile
parameter_list|,
name|ParserSettings
name|ivySettings
parameter_list|,
name|boolean
name|validated
parameter_list|,
name|ModuleDescriptorProvider
name|mdProvider
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptor
name|descriptor
init|=
name|getFromCache
argument_list|(
name|ivyFile
argument_list|,
name|ivySettings
argument_list|,
name|validated
argument_list|)
decl_stmt|;
if|if
condition|(
name|descriptor
operator|==
literal|null
condition|)
block|{
name|descriptor
operator|=
name|getStale
argument_list|(
name|ivyFile
argument_list|,
name|ivySettings
argument_list|,
name|validated
argument_list|,
name|mdProvider
argument_list|)
expr_stmt|;
block|}
return|return
name|descriptor
return|;
block|}
comment|/**      * Get the module descriptor from the mdProvider and store it into the cache.      */
specifier|public
name|ModuleDescriptor
name|getStale
parameter_list|(
name|File
name|ivyFile
parameter_list|,
name|ParserSettings
name|ivySettings
parameter_list|,
name|boolean
name|validated
parameter_list|,
name|ModuleDescriptorProvider
name|mdProvider
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ParserSettingsMonitor
name|settingsMonitor
init|=
operator|new
name|ParserSettingsMonitor
argument_list|(
name|ivySettings
argument_list|)
decl_stmt|;
name|ModuleDescriptor
name|descriptor
init|=
name|mdProvider
operator|.
name|provideModule
argument_list|(
name|settingsMonitor
operator|.
name|getMonitoredSettings
argument_list|()
argument_list|,
name|ivyFile
argument_list|,
name|validated
argument_list|)
decl_stmt|;
name|putInCache
argument_list|(
name|ivyFile
argument_list|,
name|settingsMonitor
argument_list|,
name|validated
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
return|return
name|descriptor
return|;
block|}
name|ModuleDescriptor
name|getFromCache
parameter_list|(
name|File
name|ivyFile
parameter_list|,
name|ParserSettings
name|ivySettings
parameter_list|,
name|boolean
name|validated
parameter_list|)
block|{
if|if
condition|(
name|maxSize
operator|<=
literal|0
condition|)
block|{
comment|// cache is disabled
return|return
literal|null
return|;
block|}
name|CacheEntry
name|entry
init|=
operator|(
name|CacheEntry
operator|)
name|valueMap
operator|.
name|get
argument_list|(
name|ivyFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|isStale
argument_list|(
name|validated
argument_list|,
name|ivySettings
argument_list|)
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"Entry is found in the ModuleDescriptorCache but entry should be "
operator|+
literal|"reevaluated : "
operator|+
name|ivyFile
argument_list|)
expr_stmt|;
name|valueMap
operator|.
name|remove
argument_list|(
name|ivyFile
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// Move the entry at the end of the list
name|valueMap
operator|.
name|remove
argument_list|(
name|ivyFile
argument_list|)
expr_stmt|;
name|valueMap
operator|.
name|put
argument_list|(
name|ivyFile
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"Entry is found in the ModuleDescriptorCache : "
operator|+
name|ivyFile
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|md
return|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"No entry is found in the ModuleDescriptorCache : "
operator|+
name|ivyFile
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|void
name|putInCache
parameter_list|(
name|File
name|url
parameter_list|,
name|ParserSettingsMonitor
name|ivySettingsMonitor
parameter_list|,
name|boolean
name|validated
parameter_list|,
name|ModuleDescriptor
name|descriptor
parameter_list|)
block|{
if|if
condition|(
name|maxSize
operator|<=
literal|0
condition|)
block|{
comment|// cache is disabled
return|return;
block|}
if|if
condition|(
name|valueMap
operator|.
name|size
argument_list|()
operator|>=
name|maxSize
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"ModuleDescriptorCache is full, remove one entry"
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|valueMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|valueMap
operator|.
name|put
argument_list|(
name|url
argument_list|,
operator|new
name|CacheEntry
argument_list|(
name|descriptor
argument_list|,
name|validated
argument_list|,
name|ivySettingsMonitor
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|CacheEntry
block|{
specifier|private
specifier|final
name|ModuleDescriptor
name|md
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|validated
decl_stmt|;
specifier|private
specifier|final
name|ParserSettingsMonitor
name|parserSettingsMonitor
decl_stmt|;
name|CacheEntry
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|boolean
name|validated
parameter_list|,
name|ParserSettingsMonitor
name|parserSettingsMonitor
parameter_list|)
block|{
name|this
operator|.
name|md
operator|=
name|md
expr_stmt|;
name|this
operator|.
name|validated
operator|=
name|validated
expr_stmt|;
name|this
operator|.
name|parserSettingsMonitor
operator|=
name|parserSettingsMonitor
expr_stmt|;
block|}
name|boolean
name|isStale
parameter_list|(
name|boolean
name|validated
parameter_list|,
name|ParserSettings
name|newParserSettings
parameter_list|)
block|{
return|return
operator|(
name|validated
operator|&&
operator|!
name|this
operator|.
name|validated
operator|)
operator|||
name|parserSettingsMonitor
operator|.
name|hasChanged
argument_list|(
name|newParserSettings
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

