begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ArtifactRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|pack
operator|.
name|PackagingManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|MetadataArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|IvySettingsAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|lock
operator|.
name|LockStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|ExactPatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|MapMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|NoMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|NameSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParserRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|ArtifactResourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|LocalizableResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|ResourceDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|AbstractResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Checks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|HexEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|PropertiesFile
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultRepositoryCacheManager
implements|implements
name|RepositoryCacheManager
implements|,
name|IvySettingsAware
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_ARTIFACT_PATTERN
init|=
literal|"[organisation]/[module](/[branch])/[type]s/[artifact]-[revision](-[classifier])(.[ext])"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DATA_FILE_PATTERN
init|=
literal|"[organisation]/[module](/[branch])/ivydata-[revision].properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_IVY_PATTERN
init|=
literal|"[organisation]/[module](/[branch])/ivy-[revision].xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MEMORY_CACHE_SIZE
init|=
literal|150
decl_stmt|;
specifier|private
specifier|static
name|MessageDigest
name|SHA_DIGEST
decl_stmt|;
static|static
block|{
try|try
block|{
name|SHA_DIGEST
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The SHA1 algorithm is not available in your classpath"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|IvySettings
name|settings
decl_stmt|;
specifier|private
name|File
name|basedir
decl_stmt|;
specifier|private
name|LockStrategy
name|lockStrategy
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|ivyPattern
decl_stmt|;
specifier|private
name|String
name|dataFilePattern
init|=
name|DEFAULT_DATA_FILE_PATTERN
decl_stmt|;
specifier|private
name|String
name|artifactPattern
decl_stmt|;
specifier|private
name|String
name|lockStrategyName
decl_stmt|;
specifier|private
name|String
name|changingPattern
decl_stmt|;
specifier|private
name|String
name|changingMatcherName
init|=
name|PatternMatcher
operator|.
name|EXACT_OR_REGEXP
decl_stmt|;
specifier|private
name|Boolean
name|checkmodified
decl_stmt|;
specifier|private
name|Boolean
name|useOrigin
decl_stmt|;
specifier|private
name|ModuleRules
argument_list|<
name|Long
argument_list|>
name|ttlRules
init|=
operator|new
name|ModuleRules
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Long
name|defaultTTL
init|=
literal|null
decl_stmt|;
specifier|private
name|ModuleDescriptorMemoryCache
name|memoryModuleDescrCache
decl_stmt|;
specifier|private
name|PackagingManager
name|packagingManager
init|=
operator|new
name|PackagingManager
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ConfiguredTTL
argument_list|>
name|configuredTTLs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|DefaultRepositoryCacheManager
parameter_list|()
block|{
block|}
specifier|public
name|DefaultRepositoryCacheManager
parameter_list|(
name|String
name|name
parameter_list|,
name|IvySettings
name|settings
parameter_list|,
name|File
name|basedir
parameter_list|)
block|{
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|setBasedir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IvySettings
name|getSettings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
specifier|public
name|void
name|setSettings
parameter_list|(
specifier|final
name|IvySettings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|packagingManager
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// process and setup the configured TTLs (which weren't yet processed since they needed a settings instance to be present)
for|for
control|(
specifier|final
name|ConfiguredTTL
name|configuredTTL
range|:
name|configuredTTLs
control|)
block|{
name|this
operator|.
name|addTTL
argument_list|(
name|configuredTTL
operator|.
name|attributes
argument_list|,
name|configuredTTL
operator|.
name|matcher
operator|==
literal|null
condition|?
name|ExactPatternMatcher
operator|.
name|INSTANCE
else|:
name|settings
operator|.
name|getMatcher
argument_list|(
name|configuredTTL
operator|.
name|matcher
argument_list|)
argument_list|,
name|configuredTTL
operator|.
name|duration
argument_list|)
expr_stmt|;
block|}
comment|// clear off the configured TTLs since we have now processed them and created TTL rules out of them
name|this
operator|.
name|configuredTTLs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|File
name|getIvyFileInCache
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|String
name|file
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|getIvyPattern
argument_list|()
argument_list|,
name|DefaultArtifact
operator|.
name|newIvyArtifact
argument_list|(
name|mrid
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|getRepositoryCacheRoot
argument_list|()
argument_list|,
name|file
argument_list|)
return|;
block|}
specifier|public
name|String
name|getIvyPattern
parameter_list|()
block|{
if|if
condition|(
name|ivyPattern
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|settings
operator|!=
literal|null
condition|)
block|{
name|ivyPattern
operator|=
name|settings
operator|.
name|getDefaultCacheIvyPattern
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ivyPattern
operator|==
literal|null
condition|)
block|{
name|ivyPattern
operator|=
name|DEFAULT_IVY_PATTERN
expr_stmt|;
block|}
block|}
return|return
name|ivyPattern
return|;
block|}
specifier|public
name|String
name|getArtifactPattern
parameter_list|()
block|{
if|if
condition|(
name|artifactPattern
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|settings
operator|!=
literal|null
condition|)
block|{
name|artifactPattern
operator|=
name|settings
operator|.
name|getDefaultCacheArtifactPattern
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|artifactPattern
operator|==
literal|null
condition|)
block|{
name|artifactPattern
operator|=
name|DEFAULT_ARTIFACT_PATTERN
expr_stmt|;
block|}
block|}
return|return
name|artifactPattern
return|;
block|}
specifier|public
name|void
name|setArtifactPattern
parameter_list|(
name|String
name|artifactPattern
parameter_list|)
block|{
name|CacheUtil
operator|.
name|checkCachePattern
argument_list|(
name|artifactPattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifactPattern
operator|=
name|artifactPattern
expr_stmt|;
block|}
specifier|public
name|File
name|getBasedir
parameter_list|()
block|{
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
name|basedir
operator|=
name|settings
operator|.
name|getDefaultRepositoryCacheBasedir
argument_list|()
expr_stmt|;
block|}
return|return
name|basedir
return|;
block|}
specifier|public
name|void
name|setBasedir
parameter_list|(
name|File
name|cache
parameter_list|)
block|{
name|this
operator|.
name|basedir
operator|=
name|cache
expr_stmt|;
block|}
specifier|public
name|long
name|getDefaultTTL
parameter_list|()
block|{
if|if
condition|(
name|defaultTTL
operator|==
literal|null
condition|)
block|{
name|defaultTTL
operator|=
name|parseDuration
argument_list|(
name|settings
operator|.
name|getVariable
argument_list|(
literal|"ivy.cache.ttl.default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultTTL
return|;
block|}
specifier|public
name|void
name|setDefaultTTL
parameter_list|(
name|long
name|defaultTTL
parameter_list|)
block|{
name|this
operator|.
name|defaultTTL
operator|=
name|defaultTTL
expr_stmt|;
block|}
specifier|public
name|void
name|setDefaultTTL
parameter_list|(
name|String
name|defaultTTL
parameter_list|)
block|{
name|this
operator|.
name|defaultTTL
operator|=
name|parseDuration
argument_list|(
name|defaultTTL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDataFilePattern
parameter_list|()
block|{
return|return
name|dataFilePattern
return|;
block|}
specifier|public
name|void
name|setDataFilePattern
parameter_list|(
name|String
name|dataFilePattern
parameter_list|)
block|{
name|CacheUtil
operator|.
name|checkCachePattern
argument_list|(
name|dataFilePattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataFilePattern
operator|=
name|dataFilePattern
expr_stmt|;
block|}
specifier|public
name|void
name|setIvyPattern
parameter_list|(
name|String
name|ivyPattern
parameter_list|)
block|{
name|CacheUtil
operator|.
name|checkCachePattern
argument_list|(
name|ivyPattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|ivyPattern
operator|=
name|ivyPattern
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getChangingMatcherName
parameter_list|()
block|{
return|return
name|changingMatcherName
return|;
block|}
specifier|public
name|void
name|setChangingMatcher
parameter_list|(
name|String
name|changingMatcherName
parameter_list|)
block|{
name|this
operator|.
name|changingMatcherName
operator|=
name|changingMatcherName
expr_stmt|;
block|}
specifier|public
name|String
name|getChangingPattern
parameter_list|()
block|{
return|return
name|changingPattern
return|;
block|}
specifier|public
name|void
name|setChangingPattern
parameter_list|(
name|String
name|changingPattern
parameter_list|)
block|{
name|this
operator|.
name|changingPattern
operator|=
name|changingPattern
expr_stmt|;
block|}
specifier|public
name|void
name|addTTL
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|,
name|PatternMatcher
name|matcher
parameter_list|,
name|long
name|duration
parameter_list|)
block|{
name|ttlRules
operator|.
name|defineRule
argument_list|(
operator|new
name|MapMatcher
argument_list|(
name|attributes
argument_list|,
name|matcher
argument_list|)
argument_list|,
name|duration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfiguredTtl
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|)
block|{
specifier|final
name|String
name|durationValue
init|=
name|attributes
operator|.
name|get
argument_list|(
literal|"duration"
argument_list|)
decl_stmt|;
if|if
condition|(
name|durationValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'duration' attribute is mandatory for ttl"
argument_list|)
throw|;
block|}
specifier|final
name|long
name|duration
init|=
name|parseDuration
argument_list|(
name|durationValue
argument_list|)
decl_stmt|;
specifier|final
name|ConfiguredTTL
name|configuredTTL
init|=
operator|new
name|ConfiguredTTL
argument_list|(
name|duration
argument_list|,
name|attributes
operator|.
name|get
argument_list|(
literal|"matcher"
argument_list|)
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
comment|// Processing TTLs requires access to an initialized/usable IvySettings instance.
comment|// we keep track of these configured TTLs and process them when the IvySettings instance becomes usable
name|this
operator|.
name|configuredTTLs
operator|.
name|add
argument_list|(
name|configuredTTL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMemorySize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|memoryModuleDescrCache
operator|=
operator|new
name|ModuleDescriptorMemoryCache
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModuleDescriptorMemoryCache
name|getMemoryCache
parameter_list|()
block|{
if|if
condition|(
name|memoryModuleDescrCache
operator|==
literal|null
condition|)
block|{
name|memoryModuleDescrCache
operator|=
operator|new
name|ModuleDescriptorMemoryCache
argument_list|(
name|DEFAULT_MEMORY_CACHE_SIZE
argument_list|)
expr_stmt|;
block|}
return|return
name|memoryModuleDescrCache
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|DURATION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?:(\\d+)d)? ?(?:(\\d+)h)? ?(?:(\\d+)m)? ?(?:(\\d+)s)? ?(?:(\\d+)ms)?"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MILLIS_IN_SECONDS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MILLIS_IN_MINUTES
init|=
literal|60
operator|*
name|MILLIS_IN_SECONDS
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MILLIS_IN_HOUR
init|=
literal|60
operator|*
name|MILLIS_IN_MINUTES
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MILLIS_IN_DAY
init|=
literal|24
operator|*
name|MILLIS_IN_HOUR
decl_stmt|;
specifier|private
name|long
name|parseDuration
parameter_list|(
name|String
name|duration
parameter_list|)
block|{
if|if
condition|(
name|duration
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
literal|"eternal"
operator|.
name|equals
argument_list|(
name|duration
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
name|m
init|=
name|DURATION_PATTERN
operator|.
name|matcher
argument_list|(
name|duration
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// CheckStyle:MagicNumber| OFF
name|int
name|days
init|=
name|getGroupIntValue
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|hours
init|=
name|getGroupIntValue
argument_list|(
name|m
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|minutes
init|=
name|getGroupIntValue
argument_list|(
name|m
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
name|seconds
init|=
name|getGroupIntValue
argument_list|(
name|m
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|millis
init|=
name|getGroupIntValue
argument_list|(
name|m
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// CheckStyle:MagicNumber| ON
return|return
name|days
operator|*
name|MILLIS_IN_DAY
operator|+
name|hours
operator|*
name|MILLIS_IN_HOUR
operator|+
name|minutes
operator|*
name|MILLIS_IN_MINUTES
operator|+
name|seconds
operator|*
name|MILLIS_IN_SECONDS
operator|+
name|millis
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid duration '"
operator|+
name|duration
operator|+
literal|"': it must match "
operator|+
name|DURATION_PATTERN
operator|.
name|pattern
argument_list|()
operator|+
literal|" or 'eternal'"
argument_list|)
throw|;
block|}
specifier|private
name|int
name|getGroupIntValue
parameter_list|(
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
name|m
parameter_list|,
name|int
name|groupNumber
parameter_list|)
block|{
name|String
name|g
init|=
name|m
operator|.
name|group
argument_list|(
name|groupNumber
argument_list|)
decl_stmt|;
return|return
name|g
operator|==
literal|null
operator|||
name|g
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|0
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|g
argument_list|)
return|;
block|}
comment|/**      * True if this cache should check lastmodified date to know if ivy files are up to date.      *      * @return boolean      */
specifier|public
name|boolean
name|isCheckmodified
parameter_list|()
block|{
if|if
condition|(
name|checkmodified
operator|==
literal|null
condition|)
block|{
return|return
name|getSettings
argument_list|()
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|getSettings
argument_list|()
operator|.
name|getVariable
argument_list|(
literal|"ivy.resolver.default.check.modified"
argument_list|)
argument_list|)
return|;
block|}
return|return
name|checkmodified
return|;
block|}
specifier|public
name|void
name|setCheckmodified
parameter_list|(
name|boolean
name|check
parameter_list|)
block|{
name|checkmodified
operator|=
name|check
expr_stmt|;
block|}
comment|/**      * True if this cache should use artifacts original location when possible, false if they should      * be copied to cache.      *      * @return boolean      */
specifier|public
name|boolean
name|isUseOrigin
parameter_list|()
block|{
if|if
condition|(
name|useOrigin
operator|==
literal|null
condition|)
block|{
return|return
name|getSettings
argument_list|()
operator|!=
literal|null
operator|&&
name|getSettings
argument_list|()
operator|.
name|isDefaultUseOrigin
argument_list|()
return|;
block|}
return|return
name|useOrigin
return|;
block|}
specifier|public
name|void
name|setUseOrigin
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|useOrigin
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * Returns a File object pointing to where the artifact can be found on the local file system.      * This is usually in the cache, but it can be directly in the repository if it is local and if      * the resolve has been done with useOrigin = true      *      * @param artifact Artifact      * @return File      */
specifier|public
name|File
name|getArchiveFileInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|ArtifactOrigin
name|origin
init|=
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
return|;
block|}
comment|/**      * Returns a File object pointing to where the artifact can be found on the local file system.      * This is usually in the cache, but it can be directly in the repository if it is local and if      * the resolve has been done with useOrigin = true      *      * @param artifact Artifact      * @param origin ArtifactOrigin      * @return File      */
specifier|public
name|File
name|getArchiveFileInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|)
block|{
name|File
name|archive
init|=
operator|new
name|File
argument_list|(
name|getRepositoryCacheRoot
argument_list|()
argument_list|,
name|getArchivePathInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|archive
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|ArtifactOrigin
operator|.
name|isUnknown
argument_list|(
name|origin
argument_list|)
operator|&&
name|origin
operator|.
name|isLocal
argument_list|()
condition|)
block|{
name|File
name|original
init|=
name|Checks
operator|.
name|checkAbsolute
argument_list|(
name|origin
operator|.
name|getLocation
argument_list|()
argument_list|,
name|artifact
operator|+
literal|" origin location"
argument_list|)
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|original
return|;
block|}
block|}
return|return
name|archive
return|;
block|}
comment|/**      * Returns a File object pointing to where the artifact can be found on the local file system,      * using or not the original location depending on the availability of origin information      * provided as parameter and the setting of useOrigin. If useOrigin is false, this method will      * always return the file in the cache.      *      * @param artifact Artifact      * @param origin ArtifactOrigin      * @param useOrigin boolean      * @return File      */
specifier|private
name|File
name|getArchiveFileInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|,
name|boolean
name|useOrigin
parameter_list|)
block|{
if|if
condition|(
name|useOrigin
operator|&&
operator|!
name|ArtifactOrigin
operator|.
name|isUnknown
argument_list|(
name|origin
argument_list|)
operator|&&
name|origin
operator|.
name|isLocal
argument_list|()
condition|)
block|{
return|return
name|Checks
operator|.
name|checkAbsolute
argument_list|(
name|origin
operator|.
name|getLocation
argument_list|()
argument_list|,
name|artifact
operator|+
literal|" origin location"
argument_list|)
return|;
block|}
return|return
operator|new
name|File
argument_list|(
name|getRepositoryCacheRoot
argument_list|()
argument_list|,
name|getArchivePathInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getArchivePathInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|getArtifactPattern
argument_list|()
argument_list|,
name|artifact
argument_list|)
return|;
block|}
specifier|public
name|String
name|getArchivePathInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|)
block|{
if|if
condition|(
name|isOriginalMetadataArtifact
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
return|return
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|getIvyPattern
argument_list|()
operator|+
literal|".original"
argument_list|,
name|artifact
argument_list|,
name|origin
argument_list|)
return|;
block|}
return|return
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|getArtifactPattern
argument_list|()
argument_list|,
name|artifact
argument_list|,
name|origin
argument_list|)
return|;
block|}
comment|/**      * Saves the information of which resolver was used to resolve a md, so that this info can be      * retrieve later (even after a jvm restart) by getSavedResolverName(ModuleDescriptor md)      *      * @param md      *            the module descriptor resolved      * @param name      *            resolver name      */
specifier|private
name|void
name|saveResolver
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|name
parameter_list|)
block|{
comment|// should always be called with a lock on module metadata artifact
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
literal|"resolver"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|/**      * Saves the information of which resolver was used to resolve a md, so that this info can be      * retrieve later (even after a jvm restart) by getSavedArtResolverName(ModuleDescriptor md)      *      * @param md      *            the module descriptor resolved      * @param metadataResolverName      *            metadata resolver name      * @param artifactResolverName      *            artifact resolver name      */
specifier|public
name|void
name|saveResolvers
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|metadataResolverName
parameter_list|,
name|String
name|artifactResolverName
parameter_list|)
block|{
name|ModuleRevisionId
name|mrid
init|=
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to acquire lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
literal|"resolver"
argument_list|,
name|metadataResolverName
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
literal|"artifact.resolver"
argument_list|,
name|artifactResolverName
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getSavedResolverName
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
comment|// should always be called with a lock on module metadata artifact
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
return|return
name|cdf
operator|.
name|getProperty
argument_list|(
literal|"resolver"
argument_list|)
return|;
block|}
specifier|private
name|String
name|getSavedArtResolverName
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
comment|// should always be called with a lock on module metadata artifact
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
return|return
name|cdf
operator|.
name|getProperty
argument_list|(
literal|"artifact.resolver"
argument_list|)
return|;
block|}
name|void
name|saveArtifactOrigin
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|)
block|{
comment|// should always be called with a lock on module metadata artifact
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
name|getIsLocalKey
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|origin
operator|.
name|isLocal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
name|getLocationKey
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|origin
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
name|getOriginalKey
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|getPrefixKey
argument_list|(
name|origin
operator|.
name|getArtifact
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|origin
operator|.
name|getLastChecked
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cdf
operator|.
name|setProperty
argument_list|(
name|getLastCheckedKey
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|origin
operator|.
name|getLastChecked
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cdf
operator|.
name|setProperty
argument_list|(
name|getExistsKey
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|origin
operator|.
name|isExists
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|removeSavedArtifactOrigin
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
comment|// should always be called with a lock on module metadata artifact
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|remove
argument_list|(
name|getLocationKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|remove
argument_list|(
name|getIsLocalKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|remove
argument_list|(
name|getLastCheckedKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|remove
argument_list|(
name|getOriginalKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|ARTIFACT_KEY_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*:(.*)#(.*)#(.*)#(.*)(\\.location)?"
argument_list|)
decl_stmt|;
specifier|public
name|ArtifactOrigin
name|getSavedArtifactOrigin
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|ModuleRevisionId
name|mrid
init|=
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to acquire lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
name|ArtifactOrigin
operator|.
name|unknown
argument_list|(
name|artifact
argument_list|)
return|;
block|}
try|try
block|{
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|cdf
operator|.
name|getProperty
argument_list|(
name|getLocationKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|local
init|=
name|cdf
operator|.
name|getProperty
argument_list|(
name|getIsLocalKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lastChecked
init|=
name|cdf
operator|.
name|getProperty
argument_list|(
name|getLastCheckedKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|exists
init|=
name|cdf
operator|.
name|getProperty
argument_list|(
name|getExistsKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|original
init|=
name|cdf
operator|.
name|getProperty
argument_list|(
name|getOriginalKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isLocal
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|local
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
comment|// origin has not been specified, return null
return|return
name|ArtifactOrigin
operator|.
name|unknown
argument_list|(
name|artifact
argument_list|)
return|;
block|}
if|if
condition|(
name|original
operator|!=
literal|null
condition|)
block|{
comment|// original artifact key artifact:[name]#[type]#[ext]#[hashcode]
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
name|m
init|=
name|ARTIFACT_KEY_PATTERN
operator|.
name|matcher
argument_list|(
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|origName
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|origType
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|origExt
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|ArtifactRevisionId
name|originArtifactId
init|=
name|ArtifactRevisionId
operator|.
name|newInstance
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|origName
argument_list|,
name|origType
argument_list|,
name|origExt
argument_list|)
decl_stmt|;
comment|// second check: verify the hashcode of the cached artifact
if|if
condition|(
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
operator|+
name|originArtifactId
operator|.
name|hashCode
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|artifact
operator|=
operator|new
name|DefaultArtifact
argument_list|(
name|originArtifactId
argument_list|,
name|artifact
operator|.
name|getPublicationDate
argument_list|()
argument_list|,
operator|new
name|URL
argument_list|(
name|location
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// Fallback if cached with old version:
comment|// if the origin artifact has another extension (e.g. .pom) then make a synthetic
comment|// origin artifact for it
if|if
condition|(
operator|!
name|location
operator|.
name|endsWith
argument_list|(
literal|"."
operator|+
name|artifact
operator|.
name|getExt
argument_list|()
argument_list|)
condition|)
block|{
comment|// try to find other cached artifact info with same location. This must be the
comment|// origin. We must parse the key as we do not know for sure what the original
comment|// artifact is named.
name|String
name|ownLocationKey
init|=
name|getLocationKey
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|cdf
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|location
argument_list|)
operator|&&
operator|!
name|ownLocationKey
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// found a match, key is
comment|// artifact:[name]#[type]#[ext]#[hashcode].location
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
name|m
init|=
name|ARTIFACT_KEY_PATTERN
operator|.
name|matcher
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|origName
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|origType
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|origExt
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// first check: the type should end in .original
if|if
condition|(
operator|!
name|origType
operator|.
name|endsWith
argument_list|(
literal|".original"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ArtifactRevisionId
name|originArtifactId
init|=
name|ArtifactRevisionId
operator|.
name|newInstance
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|origName
argument_list|,
name|origType
argument_list|,
name|origExt
argument_list|)
decl_stmt|;
comment|// second check: verify the hashcode of the cached artifact
if|if
condition|(
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
operator|+
name|originArtifactId
operator|.
name|hashCode
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|artifact
operator|=
operator|new
name|DefaultArtifact
argument_list|(
name|originArtifactId
argument_list|,
name|artifact
operator|.
name|getPublicationDate
argument_list|()
argument_list|,
operator|new
name|URL
argument_list|(
name|location
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
block|}
block|}
block|}
name|ArtifactOrigin
name|origin
init|=
operator|new
name|ArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|isLocal
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastChecked
operator|!=
literal|null
condition|)
block|{
name|origin
operator|.
name|setLastChecked
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|lastChecked
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exists
operator|!=
literal|null
condition|)
block|{
name|origin
operator|.
name|setExist
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|exists
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|origin
return|;
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates the unique prefix key that will reference the artifact within the properties.      *      * @param artifact      *            the artifact to create the unique key from. Cannot be null.      * @return the unique prefix key as a string.      */
specifier|private
name|String
name|getPrefixKey
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
comment|// use the hashcode as a uuid for the artifact (fingers crossed)
name|int
name|hashCode
init|=
name|artifact
operator|.
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
comment|// use just some visual cue
return|return
literal|"artifact:"
operator|+
name|artifact
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|artifact
operator|.
name|getType
argument_list|()
operator|+
literal|"#"
operator|+
name|artifact
operator|.
name|getExt
argument_list|()
operator|+
literal|"#"
operator|+
name|hashCode
return|;
block|}
comment|/**      * Returns the key used to identify the location of the artifact.      *      * @param artifact      *            the artifact to generate the key from. Cannot be null.      * @return the key to be used to reference the artifact location.      */
specifier|private
name|String
name|getLocationKey
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefixKey
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|prefix
operator|+
literal|".location"
return|;
block|}
comment|/**      * Returns the key used to identify if the artifact is local.      *      * @param artifact      *            the artifact to generate the key from. Cannot be null.      * @return the key to be used to reference the artifact locality.      */
specifier|private
name|String
name|getIsLocalKey
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefixKey
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|prefix
operator|+
literal|".is-local"
return|;
block|}
comment|/**      * Returns the key used to identify the last time the artifact was checked to be up to date.      *      * @param artifact      *            the artifact to generate the key from. Cannot be null.      * @return the key to be used to reference the artifact's last check date.      */
specifier|private
name|String
name|getLastCheckedKey
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefixKey
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|prefix
operator|+
literal|".lastchecked"
return|;
block|}
comment|/**      * Returns the key used to identify the existence of the remote artifact.      *      * @param artifact      *            the artifact to generate the key from. Cannot be null.      * @return the key to be used to reference the existence of the artifact.      */
specifier|private
name|String
name|getExistsKey
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefixKey
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|prefix
operator|+
literal|".exists"
return|;
block|}
comment|/**      * Returns the key used to identify the original artifact.      *      * @param artifact      *            the artifact to generate the key from. Cannot be null.      * @return the key to be used to reference the original artifact.      */
specifier|private
name|String
name|getOriginalKey
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefixKey
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|prefix
operator|+
literal|".original"
return|;
block|}
specifier|private
name|PropertiesFile
name|getCachedDataFile
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
return|return
name|getCachedDataFile
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|PropertiesFile
name|getCachedDataFile
parameter_list|(
name|ModuleRevisionId
name|mRevId
parameter_list|)
block|{
return|return
operator|new
name|PropertiesFile
argument_list|(
operator|new
name|File
argument_list|(
name|getRepositoryCacheRoot
argument_list|()
argument_list|,
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|getDataFilePattern
argument_list|()
argument_list|,
name|mRevId
argument_list|)
argument_list|)
argument_list|,
literal|"ivy cached data file for "
operator|+
name|mRevId
argument_list|)
return|;
block|}
comment|/**      * A resolver-specific ivydata file, only used for caching dynamic revisions, e.g.      * integration-repo.      */
specifier|private
name|PropertiesFile
name|getCachedDataFile
parameter_list|(
name|String
name|resolverName
parameter_list|,
name|ModuleRevisionId
name|mRevId
parameter_list|)
block|{
comment|// we append ".${resolverName} onto the end of the regular ivydata location
return|return
operator|new
name|PropertiesFile
argument_list|(
operator|new
name|File
argument_list|(
name|getRepositoryCacheRoot
argument_list|()
argument_list|,
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|getDataFilePattern
argument_list|()
argument_list|,
name|mRevId
argument_list|)
operator|+
literal|"."
operator|+
name|resolverName
argument_list|)
argument_list|,
literal|"ivy cached data file for "
operator|+
name|mRevId
argument_list|)
return|;
block|}
specifier|public
name|ResolvedModuleRevision
name|findModuleInCache
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ModuleRevisionId
name|requestedRevisionId
parameter_list|,
name|CacheMetadataOptions
name|options
parameter_list|,
name|String
name|expectedResolver
parameter_list|)
block|{
if|if
condition|(
name|isCheckmodified
argument_list|(
name|dd
argument_list|,
name|requestedRevisionId
argument_list|,
name|options
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"don't use cache for "
operator|+
name|requestedRevisionId
operator|+
literal|": checkModified=true"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|options
operator|.
name|isUseCacheOnly
argument_list|()
operator|&&
name|isChanging
argument_list|(
name|dd
argument_list|,
name|requestedRevisionId
argument_list|,
name|options
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"don't use cache for "
operator|+
name|requestedRevisionId
operator|+
literal|": changing=true"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|doFindModuleInCache
argument_list|(
name|requestedRevisionId
argument_list|,
name|options
argument_list|,
name|expectedResolver
argument_list|)
return|;
block|}
specifier|private
name|ResolvedModuleRevision
name|doFindModuleInCache
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|CacheMetadataOptions
name|options
parameter_list|,
name|String
name|expectedResolver
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to acquire lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|boolean
name|unlock
init|=
literal|true
decl_stmt|;
try|try
block|{
if|if
condition|(
name|settings
operator|.
name|getVersionMatcher
argument_list|()
operator|.
name|isDynamic
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|String
name|resolvedRevision
init|=
name|getResolvedRevision
argument_list|(
name|expectedResolver
argument_list|,
name|mrid
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedRevision
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"found resolved revision in cache: "
operator|+
name|mrid
operator|+
literal|" => "
operator|+
name|resolvedRevision
argument_list|)
expr_stmt|;
comment|// we have found another module in the cache, make sure we unlock
comment|// the original module
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
name|mrid
operator|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mrid
argument_list|,
name|resolvedRevision
argument_list|)
expr_stmt|;
comment|// don't forget to request a lock on the new module!
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to acquire lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
comment|// we couldn't lock the new module, so no need to unlock it
name|unlock
operator|=
literal|false
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|File
name|ivyFile
init|=
name|getIvyFileInCache
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ivyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// found in cache !
try|try
block|{
name|ModuleDescriptorParser
name|parser
init|=
name|getModuleDescriptorParser
argument_list|(
name|ivyFile
argument_list|)
decl_stmt|;
name|ModuleDescriptor
name|depMD
init|=
name|getMdFromCache
argument_list|(
name|parser
argument_list|,
name|options
argument_list|,
name|ivyFile
argument_list|)
decl_stmt|;
name|String
name|resolverName
init|=
name|getSavedResolverName
argument_list|(
name|depMD
argument_list|)
decl_stmt|;
name|String
name|artResolverName
init|=
name|getSavedArtResolverName
argument_list|(
name|depMD
argument_list|)
decl_stmt|;
name|DependencyResolver
name|resolver
init|=
name|settings
operator|.
name|getResolver
argument_list|(
name|resolverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tresolver not found: "
operator|+
name|resolverName
operator|+
literal|" => trying to use the one configured for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|resolver
operator|=
name|settings
operator|.
name|getResolver
argument_list|(
name|depMD
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tconfigured resolver found for "
operator|+
name|depMD
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|resolver
operator|.
name|getName
argument_list|()
operator|+
literal|": saving this data"
argument_list|)
expr_stmt|;
name|saveResolver
argument_list|(
name|depMD
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|DependencyResolver
name|artResolver
init|=
name|settings
operator|.
name|getResolver
argument_list|(
name|artResolverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|artResolver
operator|==
literal|null
condition|)
block|{
name|artResolver
operator|=
name|resolver
expr_stmt|;
block|}
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tfound ivy file in cache for "
operator|+
name|mrid
operator|+
literal|" (resolved by "
operator|+
name|resolver
operator|.
name|getName
argument_list|()
operator|+
literal|"): "
operator|+
name|ivyFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedResolver
operator|==
literal|null
operator|||
name|expectedResolver
operator|.
name|equals
argument_list|(
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|MetadataArtifactDownloadReport
name|madr
init|=
operator|new
name|MetadataArtifactDownloadReport
argument_list|(
name|depMD
operator|.
name|getMetadataArtifact
argument_list|()
argument_list|)
decl_stmt|;
name|madr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setSearched
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setLocalFile
argument_list|(
name|ivyFile
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setSize
argument_list|(
name|ivyFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setArtifactOrigin
argument_list|(
name|getSavedArtifactOrigin
argument_list|(
name|depMD
operator|.
name|getMetadataArtifact
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|madr
operator|.
name|getArtifactOrigin
argument_list|()
operator|.
name|isExists
argument_list|()
condition|)
block|{
if|if
condition|(
name|madr
operator|.
name|getArtifactOrigin
argument_list|()
operator|.
name|isLocal
argument_list|()
operator|&&
name|madr
operator|.
name|getArtifactOrigin
argument_list|()
operator|.
name|getArtifact
argument_list|()
operator|.
name|getUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|madr
operator|.
name|setOriginalLocalFile
argument_list|(
operator|new
name|File
argument_list|(
name|madr
operator|.
name|getArtifactOrigin
argument_list|()
operator|.
name|getArtifact
argument_list|()
operator|.
name|getUrl
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// find locally cached file
name|madr
operator|.
name|setOriginalLocalFile
argument_list|(
name|getArchiveFileInCache
argument_list|(
name|madr
operator|.
name|getArtifactOrigin
argument_list|()
operator|.
name|getArtifact
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ResolvedModuleRevision
argument_list|(
name|resolver
argument_list|,
name|artResolver
argument_list|,
name|depMD
argument_list|,
name|madr
argument_list|)
return|;
block|}
name|Message
operator|.
name|debug
argument_list|(
literal|"found module in cache but with a different resolver: "
operator|+
literal|"discarding: "
operator|+
name|mrid
operator|+
literal|"; expected resolver="
operator|+
name|expectedResolver
operator|+
literal|"; resolver="
operator|+
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tresolver not found: "
operator|+
name|resolverName
operator|+
literal|" => cannot use cached ivy file for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// will try with resolver
name|Message
operator|.
name|debug
argument_list|(
literal|"\tproblem while parsing cached ivy file for: "
operator|+
name|mrid
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tno ivy file in cache for "
operator|+
name|mrid
operator|+
literal|": tried "
operator|+
name|ivyFile
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|unlock
condition|)
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Choose write module descriptor parser for a given moduleDescriptor      *      * @param moduleDescriptorFile      *            a given module descriptor      * @return ModuleDescriptorParser      */
specifier|protected
name|ModuleDescriptorParser
name|getModuleDescriptorParser
parameter_list|(
name|File
name|moduleDescriptorFile
parameter_list|)
block|{
return|return
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
return|;
block|}
specifier|private
class|class
name|MyModuleDescriptorProvider
implements|implements
name|ModuleDescriptorProvider
block|{
specifier|private
specifier|final
name|ModuleDescriptorParser
name|mdParser
decl_stmt|;
specifier|private
specifier|final
name|ParserSettings
name|settings
decl_stmt|;
specifier|public
name|MyModuleDescriptorProvider
parameter_list|(
name|ModuleDescriptorParser
name|mdParser
parameter_list|,
name|ParserSettings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|mdParser
operator|=
name|mdParser
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
specifier|public
name|ModuleDescriptor
name|provideModule
parameter_list|(
name|ParserSettings
name|ivySettings
parameter_list|,
name|File
name|descriptorURL
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|mdParser
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|descriptorURL
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|validate
argument_list|)
return|;
block|}
block|}
specifier|private
name|ModuleDescriptor
name|getMdFromCache
parameter_list|(
name|ModuleDescriptorParser
name|mdParser
parameter_list|,
name|CacheMetadataOptions
name|options
parameter_list|,
name|File
name|ivyFile
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorMemoryCache
name|cache
init|=
name|getMemoryCache
argument_list|()
decl_stmt|;
name|ModuleDescriptorProvider
name|mdProvider
init|=
operator|new
name|MyModuleDescriptorProvider
argument_list|(
name|mdParser
argument_list|,
name|settings
argument_list|)
decl_stmt|;
return|return
name|cache
operator|.
name|get
argument_list|(
name|ivyFile
argument_list|,
name|settings
argument_list|,
name|options
operator|.
name|isValidate
argument_list|()
argument_list|,
name|mdProvider
argument_list|)
return|;
block|}
specifier|private
name|ModuleDescriptor
name|getStaledMd
parameter_list|(
name|ModuleDescriptorParser
name|mdParser
parameter_list|,
name|CacheMetadataOptions
name|options
parameter_list|,
name|File
name|ivyFile
parameter_list|,
name|ParserSettings
name|parserSettings
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|ModuleDescriptorMemoryCache
name|cache
init|=
name|getMemoryCache
argument_list|()
decl_stmt|;
name|ModuleDescriptorProvider
name|mdProvider
init|=
operator|new
name|MyModuleDescriptorProvider
argument_list|(
name|mdParser
argument_list|,
name|parserSettings
argument_list|)
decl_stmt|;
return|return
name|cache
operator|.
name|getStale
argument_list|(
name|ivyFile
argument_list|,
name|settings
argument_list|,
name|options
operator|.
name|isValidate
argument_list|()
argument_list|,
name|mdProvider
argument_list|)
return|;
block|}
comment|/**      * Called by doFindModuleInCache to lookup the dynamic {@code mrid} in the ivycache's ivydata      * file.      */
specifier|private
name|String
name|getResolvedRevision
parameter_list|(
name|String
name|expectedResolver
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|,
name|CacheMetadataOptions
name|options
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to acquire lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
if|if
condition|(
name|options
operator|.
name|isForce
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"refresh mode: no check for cached resolved revision for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// If a resolver is asking for its specific dynamic revision, avoid looking at a different one
name|PropertiesFile
name|cachedResolvedRevision
decl_stmt|;
if|if
condition|(
name|expectedResolver
operator|!=
literal|null
condition|)
block|{
name|cachedResolvedRevision
operator|=
name|getCachedDataFile
argument_list|(
name|expectedResolver
argument_list|,
name|mrid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cachedResolvedRevision
operator|=
name|getCachedDataFile
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
name|String
name|resolvedRevision
init|=
name|cachedResolvedRevision
operator|.
name|getProperty
argument_list|(
literal|"resolved.revision"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedRevision
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
name|getName
argument_list|()
operator|+
literal|": no cached resolved revision for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|resolvedTime
init|=
name|cachedResolvedRevision
operator|.
name|getProperty
argument_list|(
literal|"resolved.time"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedTime
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
name|getName
argument_list|()
operator|+
literal|": inconsistent or old cache: no cached resolved time for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|saveResolvedRevision
argument_list|(
name|expectedResolver
argument_list|,
name|mrid
argument_list|,
name|resolvedRevision
argument_list|)
expr_stmt|;
return|return
name|resolvedRevision
return|;
block|}
if|if
condition|(
name|options
operator|.
name|isCheckTTL
argument_list|()
condition|)
block|{
name|long
name|expiration
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|resolvedTime
argument_list|)
operator|+
name|getTTL
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|expiration
operator|>
literal|0
comment|// negative expiration means that Long.MAX_VALUE has been
comment|// exceeded
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|expiration
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
name|getName
argument_list|()
operator|+
literal|": cached resolved revision expired for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|resolvedRevision
return|;
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|saveResolvedRevision
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
name|saveResolvedRevision
argument_list|(
literal|null
argument_list|,
name|mrid
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|saveResolvedRevision
parameter_list|(
name|String
name|resolverName
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to acquire lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|PropertiesFile
name|cachedResolvedRevision
decl_stmt|;
if|if
condition|(
name|resolverName
operator|==
literal|null
condition|)
block|{
name|cachedResolvedRevision
operator|=
name|getCachedDataFile
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cachedResolvedRevision
operator|=
name|getCachedDataFile
argument_list|(
name|resolverName
argument_list|,
name|mrid
argument_list|)
expr_stmt|;
block|}
name|cachedResolvedRevision
operator|.
name|setProperty
argument_list|(
literal|"resolved.time"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cachedResolvedRevision
operator|.
name|setProperty
argument_list|(
literal|"resolved.revision"
argument_list|,
name|revision
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolverName
operator|!=
literal|null
condition|)
block|{
name|cachedResolvedRevision
operator|.
name|setProperty
argument_list|(
literal|"resolver"
argument_list|,
name|resolverName
argument_list|)
expr_stmt|;
block|}
name|cachedResolvedRevision
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getTTL
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|Long
name|ttl
init|=
name|ttlRules
operator|.
name|getRule
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
return|return
name|ttl
operator|==
literal|null
condition|?
name|getDefaultTTL
argument_list|()
else|:
name|ttl
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|File
name|getRepositoryCacheRoot
parameter_list|()
block|{
return|return
name|getBasedir
argument_list|()
return|;
block|}
specifier|public
name|LockStrategy
name|getLockStrategy
parameter_list|()
block|{
if|if
condition|(
name|lockStrategy
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lockStrategyName
operator|!=
literal|null
condition|)
block|{
name|lockStrategy
operator|=
name|settings
operator|.
name|getLockStrategy
argument_list|(
name|lockStrategyName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lockStrategy
operator|=
name|settings
operator|.
name|getDefaultLockStrategy
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|lockStrategy
return|;
block|}
specifier|public
name|void
name|setLockStrategy
parameter_list|(
name|LockStrategy
name|lockStrategy
parameter_list|)
block|{
name|this
operator|.
name|lockStrategy
operator|=
name|lockStrategy
expr_stmt|;
block|}
specifier|public
name|void
name|setLockStrategy
parameter_list|(
name|String
name|lockStrategyName
parameter_list|)
block|{
name|this
operator|.
name|lockStrategyName
operator|=
name|lockStrategyName
expr_stmt|;
block|}
specifier|public
name|ArtifactDownloadReport
name|download
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactResourceResolver
name|resourceResolver
parameter_list|,
name|ResourceDownloader
name|resourceDownloader
parameter_list|,
name|CacheDownloadOptions
name|options
parameter_list|)
block|{
specifier|final
name|ArtifactDownloadReport
name|adr
init|=
operator|new
name|ArtifactDownloadReport
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|boolean
name|useOrigin
init|=
name|isUseOrigin
argument_list|()
decl_stmt|;
comment|// TODO: see if we could lock on the artifact to download only, instead of the module
comment|// metadata artifact. We'd need to store artifact origin and is local in artifact specific
comment|// file to do so, or lock the metadata artifact only to update artifact origin, which would
comment|// mean acquiring nested locks, which can be a dangerous thing
name|ModuleRevisionId
name|mrid
init|=
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadDetails
argument_list|(
literal|"impossible to get lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
name|adr
return|;
block|}
try|try
block|{
name|DownloadListener
name|listener
init|=
name|options
operator|.
name|getListener
argument_list|()
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|needArtifact
argument_list|(
name|this
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
name|ArtifactOrigin
name|origin
init|=
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
comment|// if we can use origin file, we just ask ivy for the file in cache, and it will
comment|// return the original one if possible. If we are not in useOrigin mode, we use the
comment|// getArchivePath method which always return a path in the actual cache
name|File
name|archiveFile
init|=
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|,
name|useOrigin
argument_list|)
decl_stmt|;
if|if
condition|(
name|archiveFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|options
operator|.
name|isForce
argument_list|()
condition|)
block|{
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|archiveFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setArtifactOrigin
argument_list|(
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setLocalFile
argument_list|(
name|archiveFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|ResolvedResource
name|artifactRef
init|=
name|resourceResolver
operator|.
name|resolve
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactRef
operator|!=
literal|null
condition|)
block|{
name|Resource
name|artifactRes
init|=
name|artifactRef
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|origin
operator|=
operator|new
name|ArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|artifactRes
operator|.
name|isLocal
argument_list|()
argument_list|,
name|artifactRes
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useOrigin
operator|&&
name|artifactRes
operator|.
name|isLocal
argument_list|()
condition|)
block|{
if|if
condition|(
name|artifactRes
operator|instanceof
name|LocalizableResource
condition|)
block|{
name|origin
operator|.
name|setLocation
argument_list|(
operator|(
operator|(
name|LocalizableResource
operator|)
name|artifactRes
operator|)
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|saveArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|archiveFile
operator|=
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|archiveFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setArtifactOrigin
argument_list|(
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setLocalFile
argument_list|(
name|archiveFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// refresh archive file now that we better now its origin
name|archiveFile
operator|=
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|,
name|useOrigin
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResourceHelper
operator|.
name|equals
argument_list|(
name|artifactRes
argument_list|,
name|archiveFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"invalid settings for '"
operator|+
name|resourceResolver
operator|+
literal|"': pointing repository to ivy cache is forbidden !"
argument_list|)
throw|;
block|}
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|startArtifactDownload
argument_list|(
name|this
argument_list|,
name|artifactRef
argument_list|,
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
name|resourceDownloader
operator|.
name|download
argument_list|(
name|artifact
argument_list|,
name|artifactRes
argument_list|,
name|archiveFile
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|archiveFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|saveArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadTimeMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setArtifactOrigin
argument_list|(
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setLocalFile
argument_list|(
name|archiveFile
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadDetails
argument_list|(
name|ArtifactDownloadReport
operator|.
name|MISSING_ARTIFACT
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadTimeMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadDetails
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadTimeMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|adr
operator|.
name|getDownloadStatus
argument_list|()
operator|!=
name|DownloadStatus
operator|.
name|FAILED
condition|)
block|{
name|unpackArtifact
argument_list|(
name|artifact
argument_list|,
name|adr
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|endArtifactDownload
argument_list|(
name|this
argument_list|,
name|artifact
argument_list|,
name|adr
argument_list|,
name|archiveFile
argument_list|)
expr_stmt|;
block|}
return|return
name|adr
return|;
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|unpackArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactDownloadReport
name|adr
parameter_list|,
name|CacheDownloadOptions
name|options
parameter_list|)
block|{
name|Artifact
name|unpacked
init|=
name|packagingManager
operator|.
name|getUnpackedArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|unpacked
operator|==
literal|null
condition|)
block|{
comment|// nothing to unpack
return|return;
block|}
name|File
name|archiveFile
init|=
name|getArchiveFileInCache
argument_list|(
name|unpacked
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|archiveFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|options
operator|.
name|isForce
argument_list|()
condition|)
block|{
name|adr
operator|.
name|setUnpackedLocalFile
argument_list|(
name|archiveFile
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setUnpackedArtifact
argument_list|(
name|unpacked
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"\tUnpacking "
operator|+
name|artifact
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Artifact
name|unpackedArtifact
init|=
name|packagingManager
operator|.
name|unpackArtifact
argument_list|(
name|artifact
argument_list|,
name|adr
operator|.
name|getLocalFile
argument_list|()
argument_list|,
name|archiveFile
argument_list|)
decl_stmt|;
name|adr
operator|.
name|setUnpackedLocalFile
argument_list|(
name|archiveFile
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setUnpackedArtifact
argument_list|(
name|unpackedArtifact
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadDetails
argument_list|(
literal|"The packed artifact "
operator|+
name|artifact
operator|.
name|getId
argument_list|()
operator|+
literal|" could not be unpacked ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ArtifactDownloadReport
name|downloadRepositoryResource
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|extension
parameter_list|,
name|CacheResourceOptions
name|options
parameter_list|,
name|Repository
name|repository
parameter_list|)
block|{
name|String
name|hash
init|=
name|computeResourceNameHash
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"_repository_metadata_"
argument_list|,
name|hash
argument_list|,
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
literal|null
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|extension
argument_list|)
decl_stmt|;
specifier|final
name|ArtifactDownloadReport
name|adr
init|=
operator|new
name|ArtifactDownloadReport
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|boolean
name|useOrigin
init|=
name|isUseOrigin
argument_list|()
decl_stmt|;
try|try
block|{
name|DownloadListener
name|listener
init|=
name|options
operator|.
name|getListener
argument_list|()
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|needArtifact
argument_list|(
name|this
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
name|ArtifactOrigin
name|savedOrigin
init|=
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|archiveFile
init|=
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|savedOrigin
argument_list|,
name|useOrigin
argument_list|)
decl_stmt|;
name|ArtifactOrigin
name|origin
init|=
operator|new
name|ArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|resource
operator|.
name|isLocal
argument_list|()
argument_list|,
name|resource
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|options
operator|.
name|isForce
argument_list|()
comment|// if the local file has been checked to be up to date enough recently, don't download
operator|&&
name|checkCacheUptodate
argument_list|(
name|archiveFile
argument_list|,
name|resource
argument_list|,
name|savedOrigin
argument_list|,
name|origin
argument_list|,
name|options
operator|.
name|getTtl
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|archiveFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|saveArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|archiveFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setArtifactOrigin
argument_list|(
name|savedOrigin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setLocalFile
argument_list|(
name|archiveFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we trust the cache to says that the resource doesn't exist
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadDetails
argument_list|(
literal|"Remote resource is known to not exist"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|origin
operator|.
name|setLastChecked
argument_list|(
name|start
argument_list|)
expr_stmt|;
try|try
block|{
name|ResolvedResource
name|artifactRef
init|=
operator|new
name|ResolvedResource
argument_list|(
name|resource
argument_list|,
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|useOrigin
operator|&&
name|resource
operator|.
name|isLocal
argument_list|()
condition|)
block|{
name|saveArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|archiveFile
operator|=
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|archiveFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setArtifactOrigin
argument_list|(
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setLocalFile
argument_list|(
name|archiveFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|startArtifactDownload
argument_list|(
name|this
argument_list|,
name|artifactRef
argument_list|,
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
comment|// actual download
if|if
condition|(
name|archiveFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|archiveFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|File
name|part
init|=
operator|new
name|File
argument_list|(
name|archiveFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".part"
argument_list|)
decl_stmt|;
name|repository
operator|.
name|get
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
argument_list|,
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|part
operator|.
name|renameTo
argument_list|(
name|archiveFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"impossible to move part file to definitive one: "
operator|+
name|part
operator|+
literal|" -> "
operator|+
name|archiveFile
argument_list|)
throw|;
block|}
name|adr
operator|.
name|setSize
argument_list|(
name|archiveFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|saveArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadTimeMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setArtifactOrigin
argument_list|(
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setLocalFile
argument_list|(
name|archiveFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|origin
operator|.
name|setExist
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|saveArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadDetails
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadTimeMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|endArtifactDownload
argument_list|(
name|this
argument_list|,
name|artifact
argument_list|,
name|adr
argument_list|,
name|archiveFile
argument_list|)
expr_stmt|;
block|}
return|return
name|adr
return|;
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Compute a SHA1 of the resource name, encoded in base64, so we can use it as a file name.      *      * @param resource      *            the resource which name will be hashed      * @return the hash      */
specifier|private
name|String
name|computeResourceNameHash
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
try|try
block|{
name|byte
index|[]
name|shaDigest
init|=
name|SHA_DIGEST
operator|.
name|digest
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|HexEncoder
operator|.
name|encode
argument_list|(
name|shaDigest
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"UTF-8 not supported"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Check that a cached file can be considered up to date and thus not downloaded      *      * @param archiveFile      *            the file in the cache      * @param resource      *            the remote resource to check      * @param savedOrigin      *            the saved origin which contains that last checked date      * @param origin      *            the origin in which to store the new last checked date      * @param ttl      *            the time to live to consider the cache up to date      * @return<code>true</code> if the cache is considered up to date      */
specifier|private
name|boolean
name|checkCacheUptodate
parameter_list|(
name|File
name|archiveFile
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|ArtifactOrigin
name|savedOrigin
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|,
name|long
name|ttl
parameter_list|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|savedOrigin
operator|.
name|getLastChecked
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|time
operator|-
name|savedOrigin
operator|.
name|getLastChecked
argument_list|()
operator|)
operator|<
name|ttl
condition|)
block|{
comment|// still in the ttl period, no need to check, trust the cache
return|return
name|archiveFile
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|savedOrigin
operator|.
name|isExists
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|archiveFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// the the file doesn't exist in the cache, obviously not up to date
return|return
literal|false
return|;
block|}
name|origin
operator|.
name|setLastChecked
argument_list|(
name|time
argument_list|)
expr_stmt|;
comment|// check if the local resource is up to date regarding the remote one
return|return
name|archiveFile
operator|.
name|lastModified
argument_list|()
operator|>=
name|resource
operator|.
name|getLastModified
argument_list|()
return|;
block|}
specifier|public
name|void
name|originalToCachedModuleDescriptor
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|,
name|ResolvedResource
name|originalMetadataRef
parameter_list|,
name|Artifact
name|requestedMetadataArtifact
parameter_list|,
name|ResolvedModuleRevision
name|rmr
parameter_list|,
name|ModuleDescriptorWriter
name|writer
parameter_list|)
block|{
name|ModuleDescriptor
name|md
init|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
name|Artifact
name|originalMetadataArtifact
init|=
name|getOriginalMetadataArtifact
argument_list|(
name|requestedMetadataArtifact
argument_list|)
decl_stmt|;
name|File
name|mdFileInCache
init|=
name|getIvyFileInCache
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|requestedMetadataArtifact
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"impossible to acquire lock for: "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|File
name|originalFileInCache
init|=
name|getArchiveFileInCache
argument_list|(
name|originalMetadataArtifact
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|originalMetadataRef
argument_list|,
name|md
argument_list|,
name|originalFileInCache
argument_list|,
name|mdFileInCache
argument_list|)
expr_stmt|;
name|getMemoryCache
argument_list|()
operator|.
name|putInCache
argument_list|(
name|mdFileInCache
argument_list|,
operator|new
name|ParserSettingsMonitor
argument_list|(
name|settings
argument_list|)
argument_list|,
literal|true
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|saveResolvers
argument_list|(
name|md
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|md
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|rmr
operator|.
name|getReport
argument_list|()
operator|.
name|setOriginalLocalFile
argument_list|(
name|originalFileInCache
argument_list|)
expr_stmt|;
block|}
name|rmr
operator|.
name|getReport
argument_list|()
operator|.
name|setLocalFile
argument_list|(
name|mdFileInCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|metadataRef
decl_stmt|;
if|if
condition|(
name|originalMetadataRef
operator|==
literal|null
condition|)
block|{
name|metadataRef
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadataRef
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|originalMetadataRef
argument_list|)
expr_stmt|;
block|}
name|Message
operator|.
name|warn
argument_list|(
literal|"impossible to put metadata file in cache: "
operator|+
name|metadataRef
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ResolvedModuleRevision
name|cacheModuleDescriptor
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|,
specifier|final
name|ResolvedResource
name|mdRef
parameter_list|,
name|DependencyDescriptor
name|dd
parameter_list|,
name|Artifact
name|moduleArtifact
parameter_list|,
name|ResourceDownloader
name|downloader
parameter_list|,
name|CacheMetadataOptions
name|options
parameter_list|)
throws|throws
name|ParseException
block|{
name|Date
name|cachedPublicationDate
init|=
literal|null
decl_stmt|;
name|ArtifactDownloadReport
name|report
decl_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|moduleArtifact
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to acquire lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|BackupResourceDownloader
name|backupDownloader
init|=
operator|new
name|BackupResourceDownloader
argument_list|(
name|downloader
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|moduleArtifact
operator|.
name|isMetadata
argument_list|()
condition|)
block|{
comment|// the descriptor we are trying to cache is a default one, not much to do
comment|// just make sure the old artifacts are deleted...
if|if
condition|(
name|isChanging
argument_list|(
name|dd
argument_list|,
name|mrid
argument_list|,
name|options
argument_list|)
condition|)
block|{
name|long
name|repoLastModified
init|=
name|mdRef
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
name|Artifact
name|transformedArtifact
init|=
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|moduleArtifact
argument_list|,
name|options
operator|.
name|getNamespace
argument_list|()
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|)
decl_stmt|;
name|ArtifactOrigin
name|origin
init|=
name|getSavedArtifactOrigin
argument_list|(
name|transformedArtifact
argument_list|)
decl_stmt|;
name|File
name|artFile
init|=
name|getArchiveFileInCache
argument_list|(
name|transformedArtifact
argument_list|,
name|origin
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|artFile
operator|.
name|exists
argument_list|()
operator|&&
name|repoLastModified
operator|>
name|artFile
operator|.
name|lastModified
argument_list|()
condition|)
block|{
comment|// artifacts have changed, they should be downloaded again
name|Message
operator|.
name|verbose
argument_list|(
name|mrid
operator|+
literal|" has changed: deleting old artifacts"
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"deleting "
operator|+
name|artFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|artFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"Couldn't delete outdated artifact from cache: "
operator|+
name|artFile
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|removeSavedArtifactOrigin
argument_list|(
name|transformedArtifact
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|// now let's see if we can find it in cache and if it is up to date
name|ResolvedModuleRevision
name|rmr
init|=
name|doFindModuleInCache
argument_list|(
name|mrid
argument_list|,
name|options
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
operator|&&
name|rmr
operator|.
name|getResolver
argument_list|()
operator|!=
name|resolver
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": found revision in cache: "
operator|+
name|mrid
operator|+
literal|" (resolved by "
operator|+
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"): but it's a default one, maybe we can find a better one"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isCheckmodified
argument_list|(
name|dd
argument_list|,
name|mrid
argument_list|,
name|options
argument_list|)
operator|&&
operator|!
name|isChanging
argument_list|(
name|dd
argument_list|,
name|mrid
argument_list|,
name|options
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache: "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|rmr
operator|.
name|getReport
argument_list|()
operator|.
name|setSearched
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|rmr
return|;
block|}
name|long
name|repLastModified
init|=
name|mdRef
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
name|long
name|cacheLastModified
init|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
operator|&&
name|repLastModified
operator|<=
name|cacheLastModified
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache (not updated): "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|rmr
operator|.
name|getReport
argument_list|()
operator|.
name|setSearched
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|rmr
return|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache is not up to date: "
operator|+
name|mrid
argument_list|)
expr_stmt|;
if|if
condition|(
name|isChanging
argument_list|(
name|dd
argument_list|,
name|mrid
argument_list|,
name|options
argument_list|)
condition|)
block|{
comment|// ivy file has been updated, we should see if it has a new publication
comment|// date to see if a new download is required (in case the dependency is
comment|// a changing one)
name|cachedPublicationDate
operator|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getResolvedPublicationDate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|Artifact
name|originalMetadataArtifact
init|=
name|getOriginalMetadataArtifact
argument_list|(
name|moduleArtifact
argument_list|)
decl_stmt|;
comment|// now download module descriptor and parse it
name|report
operator|=
name|download
argument_list|(
name|originalMetadataArtifact
argument_list|,
operator|new
name|ArtifactResourceResolver
argument_list|()
block|{
specifier|public
name|ResolvedResource
name|resolve
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|mdRef
return|;
block|}
block|}
argument_list|,
name|backupDownloader
argument_list|,
operator|new
name|CacheDownloadOptions
argument_list|()
operator|.
name|setListener
argument_list|(
name|options
operator|.
name|getListener
argument_list|()
argument_list|)
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|report
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|.
name|getDownloadStatus
argument_list|()
operator|==
name|DownloadStatus
operator|.
name|FAILED
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"problem while downloading module descriptor: "
operator|+
name|mdRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": "
operator|+
name|report
operator|.
name|getDownloadDetails
argument_list|()
operator|+
literal|" ("
operator|+
name|report
operator|.
name|getDownloadTimeMillis
argument_list|()
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|ModuleDescriptorParser
name|parser
init|=
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getParser
argument_list|(
name|mdRef
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
name|ParserSettings
name|parserSettings
init|=
name|settings
decl_stmt|;
if|if
condition|(
name|resolver
operator|instanceof
name|AbstractResolver
condition|)
block|{
name|parserSettings
operator|=
operator|(
operator|(
name|AbstractResolver
operator|)
name|resolver
operator|)
operator|.
name|getParserSettings
argument_list|()
expr_stmt|;
block|}
name|ModuleDescriptor
name|md
init|=
name|getStaledMd
argument_list|(
name|parser
argument_list|,
name|options
argument_list|,
name|report
operator|.
name|getLocalFile
argument_list|()
argument_list|,
name|parserSettings
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"module descriptor parser returned a null module descriptor, which is not allowed. parser="
operator|+
name|parser
operator|+
literal|"; parser class="
operator|+
name|parser
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"; module descriptor resource="
operator|+
name|mdRef
operator|.
name|getResource
argument_list|()
argument_list|)
throw|;
block|}
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": parsed downloaded md file for "
operator|+
name|mrid
operator|+
literal|"; parsed="
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if we should delete old artifacts
name|boolean
name|deleteOldArtifacts
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cachedPublicationDate
operator|!=
literal|null
operator|&&
operator|!
name|cachedPublicationDate
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getResolvedPublicationDate
argument_list|()
argument_list|)
condition|)
block|{
comment|// artifacts have changed, they should be downloaded again
name|Message
operator|.
name|verbose
argument_list|(
name|mrid
operator|+
literal|" has changed: deleting old artifacts"
argument_list|)
expr_stmt|;
name|deleteOldArtifacts
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|deleteOldArtifacts
condition|)
block|{
for|for
control|(
name|String
name|conf
range|:
name|md
operator|.
name|getConfigurationsNames
argument_list|()
control|)
block|{
for|for
control|(
name|Artifact
name|art
range|:
name|md
operator|.
name|getArtifacts
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|Artifact
name|transformedArtifact
init|=
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|art
argument_list|,
name|options
operator|.
name|getNamespace
argument_list|()
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|)
decl_stmt|;
name|ArtifactOrigin
name|origin
init|=
name|getSavedArtifactOrigin
argument_list|(
name|transformedArtifact
argument_list|)
decl_stmt|;
name|File
name|artFile
init|=
name|getArchiveFileInCache
argument_list|(
name|transformedArtifact
argument_list|,
name|origin
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|artFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"deleting "
operator|+
name|artFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|artFile
operator|.
name|delete
argument_list|()
condition|)
block|{
comment|// Old artifacts couldn't get deleted!
comment|// Restore the original ivy file so the next time we
comment|// resolve the old artifacts are deleted again
name|backupDownloader
operator|.
name|restore
argument_list|()
expr_stmt|;
name|Message
operator|.
name|error
argument_list|(
literal|"Couldn't delete outdated artifact from cache: "
operator|+
name|artFile
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|removeSavedArtifactOrigin
argument_list|(
name|transformedArtifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|isChanging
argument_list|(
name|dd
argument_list|,
name|mrid
argument_list|,
name|options
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
name|mrid
operator|+
literal|" is changing, but has not changed: will trust cached artifacts if any"
argument_list|)
expr_stmt|;
block|}
name|MetadataArtifactDownloadReport
name|madr
init|=
operator|new
name|MetadataArtifactDownloadReport
argument_list|(
name|md
operator|.
name|getMetadataArtifact
argument_list|()
argument_list|)
decl_stmt|;
name|madr
operator|.
name|setSearched
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setDownloadStatus
argument_list|(
name|report
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setDownloadDetails
argument_list|(
name|report
operator|.
name|getDownloadDetails
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setArtifactOrigin
argument_list|(
name|report
operator|.
name|getArtifactOrigin
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setDownloadTimeMillis
argument_list|(
name|report
operator|.
name|getDownloadTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setOriginalLocalFile
argument_list|(
name|report
operator|.
name|getLocalFile
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setSize
argument_list|(
name|report
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Artifact
name|transformedMetadataArtifact
init|=
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|md
operator|.
name|getMetadataArtifact
argument_list|()
argument_list|,
name|options
operator|.
name|getNamespace
argument_list|()
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|)
decl_stmt|;
name|saveArtifactOrigin
argument_list|(
name|transformedMetadataArtifact
argument_list|,
name|report
operator|.
name|getArtifactOrigin
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ResolvedModuleRevision
argument_list|(
name|resolver
argument_list|,
name|resolver
argument_list|,
name|md
argument_list|,
name|madr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"io problem while parsing ivy file: "
operator|+
name|mdRef
operator|.
name|getResource
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
name|backupDownloader
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
block|}
comment|// lock used to lock all metadata related information access
specifier|private
name|boolean
name|lockMetadataArtifact
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|Artifact
name|artifact
init|=
name|getDefaultMetadataArtifact
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
try|try
block|{
comment|// we need to provide an artifact origin to be sure we do not end up in a stack overflow
comment|// if the cache pattern is using original name, and the substitution thus trying to get
comment|// the saved artifact origin value which in turns calls this method
return|return
name|getLockStrategy
argument_list|()
operator|.
name|lockArtifact
argument_list|(
name|artifact
argument_list|,
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|getDefaultMetadataArtifactOrigin
argument_list|(
name|mrid
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// reset interrupt status
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"operation interrupted"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|unlockMetadataArtifact
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|Artifact
name|artifact
init|=
name|getDefaultMetadataArtifact
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
name|getLockStrategy
argument_list|()
operator|.
name|unlockArtifact
argument_list|(
name|artifact
argument_list|,
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|getDefaultMetadataArtifactOrigin
argument_list|(
name|mrid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ArtifactOrigin
name|getDefaultMetadataArtifactOrigin
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
comment|// it's important to say the origin is not local to make sure it won't ever be used for
comment|// anything else than original token
return|return
operator|new
name|ArtifactOrigin
argument_list|(
name|DefaultArtifact
operator|.
name|newIvyArtifact
argument_list|(
name|mrid
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getIvyFileInCache
argument_list|(
name|mrid
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Artifact
name|getDefaultMetadataArtifact
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|"metadata"
argument_list|,
literal|"metadata"
argument_list|,
literal|"ivy"
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// not used any more, but may be useful for finer grained locking when downloading artifacts
comment|// private boolean lockArtifact(Artifact artifact) {
comment|// try {
comment|// return getLockStrategy().lockArtifact(artifact,
comment|// getArchiveFileInCache(artifact, null));
comment|// } catch (InterruptedException e) {
comment|// Thread.currentThread().interrupt(); // reset interrupt status
comment|// throw new RuntimeException("operation interrupted");
comment|// }
comment|// }
comment|//
comment|// private void unlockArtifact(Artifact artifact) {
comment|// getLockStrategy().unlockArtifact(artifact, getArchiveFileInCache(artifact, null));
comment|// }
specifier|public
name|Artifact
name|getOriginalMetadataArtifact
parameter_list|(
name|Artifact
name|moduleArtifact
parameter_list|)
block|{
return|return
name|DefaultArtifact
operator|.
name|cloneWithAnotherType
argument_list|(
name|moduleArtifact
argument_list|,
name|moduleArtifact
operator|.
name|getType
argument_list|()
operator|+
literal|".original"
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isOriginalMetadataArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|artifact
operator|.
name|isMetadata
argument_list|()
operator|&&
name|artifact
operator|.
name|getType
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".original"
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isChanging
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ModuleRevisionId
name|requestedRevisionId
parameter_list|,
name|CacheMetadataOptions
name|options
parameter_list|)
block|{
return|return
name|dd
operator|.
name|isChanging
argument_list|()
operator|||
name|getChangingMatcher
argument_list|(
name|options
argument_list|)
operator|.
name|matches
argument_list|(
name|requestedRevisionId
operator|.
name|getRevision
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Matcher
name|getChangingMatcher
parameter_list|(
name|CacheMetadataOptions
name|options
parameter_list|)
block|{
name|String
name|changingPattern
init|=
name|options
operator|.
name|getChangingPattern
argument_list|()
operator|!=
literal|null
condition|?
name|options
operator|.
name|getChangingPattern
argument_list|()
else|:
name|this
operator|.
name|changingPattern
decl_stmt|;
if|if
condition|(
name|changingPattern
operator|==
literal|null
condition|)
block|{
return|return
name|NoMatcher
operator|.
name|INSTANCE
return|;
block|}
name|String
name|changingMatcherName
init|=
name|options
operator|.
name|getChangingMatcherName
argument_list|()
operator|!=
literal|null
condition|?
name|options
operator|.
name|getChangingMatcherName
argument_list|()
else|:
name|this
operator|.
name|changingMatcherName
decl_stmt|;
name|PatternMatcher
name|matcher
init|=
name|settings
operator|.
name|getMatcher
argument_list|(
name|changingMatcherName
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown matcher '"
operator|+
name|changingMatcherName
operator|+
literal|"'. It is set as changing matcher in "
operator|+
name|this
argument_list|)
throw|;
block|}
return|return
name|matcher
operator|.
name|getMatcher
argument_list|(
name|changingPattern
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isCheckmodified
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ModuleRevisionId
name|requestedRevisionId
parameter_list|,
name|CacheMetadataOptions
name|options
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|isCheckmodified
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|options
operator|.
name|isCheckmodified
argument_list|()
return|;
block|}
return|return
name|isCheckmodified
argument_list|()
return|;
block|}
specifier|public
name|void
name|clean
parameter_list|()
block|{
name|FileUtil
operator|.
name|forceDelete
argument_list|(
name|getBasedir
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dumpSettings
parameter_list|()
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tivyPattern: "
operator|+
name|getIvyPattern
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tartifactPattern: "
operator|+
name|getArtifactPattern
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tlockingStrategy: "
operator|+
name|getLockStrategy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tchangingPattern: "
operator|+
name|getChangingPattern
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tchangingMatcher: "
operator|+
name|getChangingMatcherName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Resource downloader which makes a copy of the previously existing file before overriding it.      *<p>      * The backup file can be restored or cleaned up later      */
specifier|private
specifier|final
class|class
name|BackupResourceDownloader
implements|implements
name|ResourceDownloader
block|{
specifier|private
name|ResourceDownloader
name|delegate
decl_stmt|;
specifier|private
name|File
name|backup
decl_stmt|;
specifier|private
name|String
name|originalPath
decl_stmt|;
specifier|private
name|BackupResourceDownloader
parameter_list|(
name|ResourceDownloader
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
specifier|public
name|void
name|download
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
comment|// keep a copy of the original file
if|if
condition|(
name|dest
operator|.
name|exists
argument_list|()
condition|)
block|{
name|originalPath
operator|=
name|dest
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|backup
operator|=
operator|new
name|File
argument_list|(
name|dest
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".backup"
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|dest
argument_list|,
name|backup
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|delegate
operator|.
name|download
argument_list|(
name|artifact
argument_list|,
name|resource
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|restore
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|backup
operator|!=
literal|null
operator|)
operator|&&
name|backup
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
name|original
init|=
operator|new
name|File
argument_list|(
name|originalPath
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|backup
argument_list|,
name|original
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|backup
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
if|if
condition|(
operator|(
name|backup
operator|!=
literal|null
operator|)
operator|&&
name|backup
operator|.
name|exists
argument_list|()
condition|)
block|{
name|backup
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ConfiguredTTL
block|{
comment|// attributes on the TTL, that don't contribute to module matching
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|attributesNotContributingToMatching
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|attributesNotContributingToMatching
operator|.
name|add
argument_list|(
literal|"duration"
argument_list|)
expr_stmt|;
name|attributesNotContributingToMatching
operator|.
name|add
argument_list|(
literal|"matcher"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|String
name|matcher
decl_stmt|;
specifier|private
specifier|final
name|long
name|duration
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
decl_stmt|;
specifier|private
name|ConfiguredTTL
parameter_list|(
specifier|final
name|long
name|duration
parameter_list|,
specifier|final
name|String
name|matcher
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|matcher
operator|=
name|matcher
expr_stmt|;
name|this
operator|.
name|duration
operator|=
name|duration
expr_stmt|;
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|attributes
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|removable
range|:
name|attributesNotContributingToMatching
control|)
block|{
name|attrs
operator|.
name|remove
argument_list|(
name|removable
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|attributes
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

