begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|MetadataArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|IvySettingsAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|lock
operator|.
name|LockStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|NameSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParserRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|ArtifactResourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|ResourceDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|PropertiesFile
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultRepositoryCacheManager
implements|implements
name|RepositoryCacheManager
implements|,
name|IvySettingsAware
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_ARTIFACT_PATTERN
init|=
literal|"[organisation]/[module]/[type]s/[artifact]-[revision](.[ext])"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DATA_FILE_PATTERN
init|=
literal|"[organisation]/[module]/ivydata-[revision].properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_IVY_PATTERN
init|=
literal|"[organisation]/[module]/ivy-[revision].xml"
decl_stmt|;
specifier|private
name|IvySettings
name|settings
decl_stmt|;
specifier|private
name|File
name|basedir
decl_stmt|;
specifier|private
name|LockStrategy
name|lockStrategy
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|ivyPattern
decl_stmt|;
specifier|private
name|String
name|dataFilePattern
init|=
name|DEFAULT_DATA_FILE_PATTERN
decl_stmt|;
specifier|private
name|String
name|artifactPattern
decl_stmt|;
specifier|private
name|String
name|lockStrategyName
decl_stmt|;
specifier|public
name|DefaultRepositoryCacheManager
parameter_list|()
block|{
block|}
specifier|public
name|DefaultRepositoryCacheManager
parameter_list|(
name|String
name|name
parameter_list|,
name|IvySettings
name|settings
parameter_list|,
name|File
name|basedir
parameter_list|)
block|{
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|setBasedir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IvySettings
name|getSettings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
specifier|public
name|void
name|setSettings
parameter_list|(
name|IvySettings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
specifier|public
name|File
name|getIvyFileInCache
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|String
name|file
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|getIvyPattern
argument_list|()
argument_list|,
name|DefaultArtifact
operator|.
name|newIvyArtifact
argument_list|(
name|mrid
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|getRepositoryCacheRoot
argument_list|()
argument_list|,
name|file
argument_list|)
return|;
block|}
specifier|public
name|String
name|getIvyPattern
parameter_list|()
block|{
if|if
condition|(
name|ivyPattern
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|settings
operator|!=
literal|null
condition|)
block|{
name|ivyPattern
operator|=
name|settings
operator|.
name|getDefaultCacheIvyPattern
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ivyPattern
operator|==
literal|null
condition|)
block|{
name|ivyPattern
operator|=
name|DEFAULT_IVY_PATTERN
expr_stmt|;
block|}
block|}
return|return
name|ivyPattern
return|;
block|}
specifier|public
name|String
name|getArtifactPattern
parameter_list|()
block|{
if|if
condition|(
name|artifactPattern
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|settings
operator|!=
literal|null
condition|)
block|{
name|artifactPattern
operator|=
name|settings
operator|.
name|getDefaultCacheArtifactPattern
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|artifactPattern
operator|==
literal|null
condition|)
block|{
name|artifactPattern
operator|=
name|DEFAULT_ARTIFACT_PATTERN
expr_stmt|;
block|}
block|}
return|return
name|artifactPattern
return|;
block|}
specifier|public
name|void
name|setArtifactPattern
parameter_list|(
name|String
name|artifactPattern
parameter_list|)
block|{
name|this
operator|.
name|artifactPattern
operator|=
name|artifactPattern
expr_stmt|;
block|}
specifier|public
name|File
name|getBasedir
parameter_list|()
block|{
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
name|basedir
operator|=
name|settings
operator|.
name|getDefaultRepositoryCacheBasedir
argument_list|()
expr_stmt|;
block|}
return|return
name|basedir
return|;
block|}
specifier|public
name|void
name|setBasedir
parameter_list|(
name|File
name|cache
parameter_list|)
block|{
name|this
operator|.
name|basedir
operator|=
name|cache
expr_stmt|;
block|}
specifier|public
name|String
name|getDataFilePattern
parameter_list|()
block|{
return|return
name|dataFilePattern
return|;
block|}
specifier|public
name|void
name|setDataFilePattern
parameter_list|(
name|String
name|dataFilePattern
parameter_list|)
block|{
name|this
operator|.
name|dataFilePattern
operator|=
name|dataFilePattern
expr_stmt|;
block|}
specifier|public
name|void
name|setIvyPattern
parameter_list|(
name|String
name|ivyPattern
parameter_list|)
block|{
name|this
operator|.
name|ivyPattern
operator|=
name|ivyPattern
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Returns a File object pointing to where the artifact can be found on the local file system.      * This is usually in the cache, but it can be directly in the repository if it is local and if      * the resolve has been done with useOrigin = true      */
specifier|public
name|File
name|getArchiveFileInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|ArtifactOrigin
name|origin
init|=
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
return|;
block|}
comment|/**      * Returns a File object pointing to where the artifact can be found on the local file system.      * This is usually in the cache, but it can be directly in the repository if it is local and if      * the resolve has been done with useOrigin = true      */
specifier|public
name|File
name|getArchiveFileInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|)
block|{
name|File
name|archive
init|=
operator|new
name|File
argument_list|(
name|getRepositoryCacheRoot
argument_list|()
argument_list|,
name|getArchivePathInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|archive
operator|.
name|exists
argument_list|()
operator|&&
name|origin
operator|!=
literal|null
operator|&&
name|origin
operator|!=
name|ArtifactOrigin
operator|.
name|UNKNOWN
operator|&&
name|origin
operator|.
name|isLocal
argument_list|()
condition|)
block|{
name|File
name|original
init|=
operator|new
name|File
argument_list|(
name|origin
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|original
return|;
block|}
block|}
return|return
name|archive
return|;
block|}
comment|/**      * Returns a File object pointing to where the artifact can be found on the local file system,      * using or not the original location depending on the availability of origin information      * provided as parameter and the setting of useOrigin. If useOrigin is false, this method will      * always return the file in the cache.      */
specifier|public
name|File
name|getArchiveFileInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|,
name|boolean
name|useOrigin
parameter_list|)
block|{
if|if
condition|(
name|useOrigin
operator|&&
name|origin
operator|!=
literal|null
operator|&&
name|origin
operator|!=
name|ArtifactOrigin
operator|.
name|UNKNOWN
operator|&&
name|origin
operator|.
name|isLocal
argument_list|()
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|origin
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|File
argument_list|(
name|getRepositoryCacheRoot
argument_list|()
argument_list|,
name|getArchivePathInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|getArchivePathInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|getArtifactPattern
argument_list|()
argument_list|,
name|artifact
argument_list|)
return|;
block|}
specifier|public
name|String
name|getArchivePathInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|)
block|{
return|return
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|getArtifactPattern
argument_list|()
argument_list|,
name|artifact
argument_list|,
name|origin
argument_list|)
return|;
block|}
comment|/**      * Saves the information of which resolver was used to resolve a md, so that this info can be      * retrieve later (even after a jvm restart) by getSavedResolverName(ModuleDescriptor md)      *       * @param md      *            the module descriptor resolved      * @param name      *            resolver name      */
specifier|private
name|void
name|saveResolver
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|name
parameter_list|)
block|{
comment|// should always be called with a lock on module metadata artifact
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
literal|"resolver"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|/**      * Saves the information of which resolver was used to resolve a md, so that this info can be      * retrieve later (even after a jvm restart) by getSavedArtResolverName(ModuleDescriptor md)      *       * @param md      *            the module descriptor resolved      * @param name      *            artifact resolver name      */
specifier|public
name|void
name|saveResolvers
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|metadataResolverName
parameter_list|,
name|String
name|artifactResolverName
parameter_list|)
block|{
name|ModuleRevisionId
name|mrid
init|=
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to acquire lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
literal|"resolver"
argument_list|,
name|metadataResolverName
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
literal|"artifact.resolver"
argument_list|,
name|artifactResolverName
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getSavedResolverName
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
comment|// should always be called with a lock on module metadata artifact
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
return|return
name|cdf
operator|.
name|getProperty
argument_list|(
literal|"resolver"
argument_list|)
return|;
block|}
specifier|private
name|String
name|getSavedArtResolverName
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
comment|// should always be called with a lock on module metadata artifact
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
return|return
name|cdf
operator|.
name|getProperty
argument_list|(
literal|"artifact.resolver"
argument_list|)
return|;
block|}
name|void
name|saveArtifactOrigin
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|)
block|{
comment|// should always be called with a lock on module metadata artifact
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
name|getIsLocalKey
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|origin
operator|.
name|isLocal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
name|getLocationKey
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|origin
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|removeSavedArtifactOrigin
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
comment|// should always be called with a lock on module metadata artifact
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|remove
argument_list|(
name|getLocationKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|remove
argument_list|(
name|getIsLocalKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ArtifactOrigin
name|getSavedArtifactOrigin
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|ModuleRevisionId
name|mrid
init|=
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to acquire lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
name|ArtifactOrigin
operator|.
name|UNKNOWN
return|;
block|}
try|try
block|{
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|cdf
operator|.
name|getProperty
argument_list|(
name|getLocationKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|local
init|=
name|cdf
operator|.
name|getProperty
argument_list|(
name|getIsLocalKey
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isLocal
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|local
argument_list|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
comment|// origin has not been specified, return null
return|return
name|ArtifactOrigin
operator|.
name|UNKNOWN
return|;
block|}
return|return
operator|new
name|ArtifactOrigin
argument_list|(
name|isLocal
argument_list|,
name|location
argument_list|)
return|;
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates the unique prefix key that will reference the artifact within the properties.      *       * @param artifact      *            the artifact to create the unique key from. Cannot be null.      * @return the unique prefix key as a string.      */
specifier|private
name|String
name|getPrefixKey
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
comment|// use the hashcode as a uuid for the artifact (fingers crossed)
name|int
name|hashCode
init|=
name|artifact
operator|.
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
comment|// use just some visual cue
return|return
literal|"artifact:"
operator|+
name|artifact
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|artifact
operator|.
name|getType
argument_list|()
operator|+
literal|"#"
operator|+
name|artifact
operator|.
name|getExt
argument_list|()
operator|+
literal|"#"
operator|+
name|hashCode
return|;
block|}
comment|/**      * Returns the key used to identify the location of the artifact.      *       * @param artifact      *            the artifact to generate the key from. Cannot be null.      * @return the key to be used to reference the artifact location.      */
specifier|private
name|String
name|getLocationKey
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefixKey
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|prefix
operator|+
literal|".location"
return|;
block|}
comment|/**      * Returns the key used to identify if the artifact is local.      *       * @param artifact      *            the artifact to generate the key from. Cannot be null.      * @return the key to be used to reference the artifact location.      */
specifier|private
name|String
name|getIsLocalKey
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefixKey
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|prefix
operator|+
literal|".is-local"
return|;
block|}
specifier|private
name|PropertiesFile
name|getCachedDataFile
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
return|return
name|getCachedDataFile
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|PropertiesFile
name|getCachedDataFile
parameter_list|(
name|ModuleRevisionId
name|mRevId
parameter_list|)
block|{
return|return
operator|new
name|PropertiesFile
argument_list|(
operator|new
name|File
argument_list|(
name|getRepositoryCacheRoot
argument_list|()
argument_list|,
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|getDataFilePattern
argument_list|()
argument_list|,
name|mRevId
argument_list|)
argument_list|)
argument_list|,
literal|"ivy cached data file for "
operator|+
name|mRevId
argument_list|)
return|;
block|}
specifier|public
name|ResolvedModuleRevision
name|findModuleInCache
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|String
name|expectedResolver
parameter_list|)
block|{
if|if
condition|(
operator|!
name|settings
operator|.
name|getVersionMatcher
argument_list|()
operator|.
name|isDynamic
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to acquire lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
comment|// first, check if it is in cache
name|File
name|ivyFile
init|=
name|getIvyFileInCache
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ivyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// found in cache !
try|try
block|{
name|ModuleDescriptor
name|depMD
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|ivyFile
operator|.
name|toURL
argument_list|()
argument_list|,
name|validate
argument_list|)
decl_stmt|;
name|String
name|resolverName
init|=
name|getSavedResolverName
argument_list|(
name|depMD
argument_list|)
decl_stmt|;
name|String
name|artResolverName
init|=
name|getSavedArtResolverName
argument_list|(
name|depMD
argument_list|)
decl_stmt|;
name|DependencyResolver
name|resolver
init|=
name|settings
operator|.
name|getResolver
argument_list|(
name|resolverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tresolver not found: "
operator|+
name|resolverName
operator|+
literal|" => trying to use the one configured for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|resolver
operator|=
name|settings
operator|.
name|getResolver
argument_list|(
name|depMD
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tconfigured resolver found for "
operator|+
name|depMD
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|resolver
operator|.
name|getName
argument_list|()
operator|+
literal|": saving this data"
argument_list|)
expr_stmt|;
name|saveResolver
argument_list|(
name|depMD
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|DependencyResolver
name|artResolver
init|=
name|settings
operator|.
name|getResolver
argument_list|(
name|artResolverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|artResolver
operator|==
literal|null
condition|)
block|{
name|artResolver
operator|=
name|resolver
expr_stmt|;
block|}
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tfound ivy file in cache for "
operator|+
name|mrid
operator|+
literal|" (resolved by "
operator|+
name|resolver
operator|.
name|getName
argument_list|()
operator|+
literal|"): "
operator|+
name|ivyFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedResolver
operator|==
literal|null
operator|||
name|expectedResolver
operator|.
name|equals
argument_list|(
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|MetadataArtifactDownloadReport
name|madr
init|=
operator|new
name|MetadataArtifactDownloadReport
argument_list|(
name|depMD
operator|.
name|getMetadataArtifact
argument_list|()
argument_list|)
decl_stmt|;
name|madr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setSearched
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setLocalFile
argument_list|(
name|ivyFile
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setSize
argument_list|(
name|ivyFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setArtifactOrigin
argument_list|(
name|getSavedArtifactOrigin
argument_list|(
name|depMD
operator|.
name|getMetadataArtifact
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ResolvedModuleRevision
argument_list|(
name|resolver
argument_list|,
name|artResolver
argument_list|,
name|depMD
argument_list|,
name|madr
argument_list|)
return|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"found module in cache but with a different resolver: "
operator|+
literal|"discarding: "
operator|+
name|mrid
operator|+
literal|"; expected resolver="
operator|+
name|expectedResolver
operator|+
literal|"; resolver="
operator|+
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tresolver not found: "
operator|+
name|resolverName
operator|+
literal|" => cannot use cached ivy file for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// will try with resolver
name|Message
operator|.
name|debug
argument_list|(
literal|"\tproblem while parsing cached ivy file for: "
operator|+
name|mrid
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tno ivy file in cache for "
operator|+
name|mrid
operator|+
literal|": tried "
operator|+
name|ivyFile
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|File
name|getRepositoryCacheRoot
parameter_list|()
block|{
return|return
name|getBasedir
argument_list|()
return|;
block|}
specifier|public
name|LockStrategy
name|getLockStrategy
parameter_list|()
block|{
if|if
condition|(
name|lockStrategy
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lockStrategyName
operator|!=
literal|null
condition|)
block|{
name|lockStrategy
operator|=
name|settings
operator|.
name|getLockStrategy
argument_list|(
name|lockStrategyName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lockStrategy
operator|=
name|settings
operator|.
name|getDefaultLockStrategy
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|lockStrategy
return|;
block|}
specifier|public
name|void
name|setLockStrategy
parameter_list|(
name|LockStrategy
name|lockStrategy
parameter_list|)
block|{
name|this
operator|.
name|lockStrategy
operator|=
name|lockStrategy
expr_stmt|;
block|}
specifier|public
name|void
name|setLockStrategy
parameter_list|(
name|String
name|lockStrategyName
parameter_list|)
block|{
name|this
operator|.
name|lockStrategyName
operator|=
name|lockStrategyName
expr_stmt|;
block|}
specifier|public
name|ArtifactDownloadReport
name|download
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactResourceResolver
name|resourceResolver
parameter_list|,
name|ResourceDownloader
name|resourceDownloader
parameter_list|,
name|CacheDownloadOptions
name|options
parameter_list|)
block|{
specifier|final
name|ArtifactDownloadReport
name|adr
init|=
operator|new
name|ArtifactDownloadReport
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|boolean
name|useOrigin
init|=
name|options
operator|.
name|isUseOrigin
argument_list|()
decl_stmt|;
comment|// TODO: see if we could lock on the artifact to download only, instead of the module
comment|// metadata artifact. We'd need to store artifact origin and is local in artifact specific
comment|// file to do so, or lock the metadata artifact only to update artifact origin, which would
comment|// mean acquiring nested locks, which can be a dangerous thing
name|ModuleRevisionId
name|mrid
init|=
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadDetails
argument_list|(
literal|"impossible to get lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
name|adr
return|;
block|}
try|try
block|{
name|DownloadListener
name|listener
init|=
name|options
operator|.
name|getListener
argument_list|()
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|needArtifact
argument_list|(
name|this
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
name|ArtifactOrigin
name|origin
init|=
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
comment|// if we can use origin file, we just ask ivy for the file in cache, and it will
comment|// return the original one if possible. If we are not in useOrigin mode, we use the
comment|// getArchivePath method which always return a path in the actual cache
name|File
name|archiveFile
init|=
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|,
name|useOrigin
argument_list|)
decl_stmt|;
if|if
condition|(
name|archiveFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|options
operator|.
name|isForce
argument_list|()
condition|)
block|{
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|archiveFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setArtifactOrigin
argument_list|(
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setLocalFile
argument_list|(
name|archiveFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|ResolvedResource
name|artifactRef
init|=
name|resourceResolver
operator|.
name|resolve
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactRef
operator|!=
literal|null
condition|)
block|{
name|origin
operator|=
operator|new
name|ArtifactOrigin
argument_list|(
name|artifactRef
operator|.
name|getResource
argument_list|()
operator|.
name|isLocal
argument_list|()
argument_list|,
name|artifactRef
operator|.
name|getResource
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useOrigin
operator|&&
name|artifactRef
operator|.
name|getResource
argument_list|()
operator|.
name|isLocal
argument_list|()
condition|)
block|{
name|saveArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|archiveFile
operator|=
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|archiveFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setArtifactOrigin
argument_list|(
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setLocalFile
argument_list|(
name|archiveFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// refresh archive file now that we better now its origin
name|archiveFile
operator|=
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|,
name|useOrigin
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResourceHelper
operator|.
name|equals
argument_list|(
name|artifactRef
operator|.
name|getResource
argument_list|()
argument_list|,
name|archiveFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"invalid settings for '"
operator|+
name|resourceResolver
operator|+
literal|"': pointing repository to ivy cache is forbidden !"
argument_list|)
throw|;
block|}
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|startArtifactDownload
argument_list|(
name|this
argument_list|,
name|artifactRef
argument_list|,
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
block|}
name|resourceDownloader
operator|.
name|download
argument_list|(
name|artifact
argument_list|,
name|artifactRef
operator|.
name|getResource
argument_list|()
argument_list|,
name|archiveFile
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setSize
argument_list|(
name|archiveFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|saveArtifactOrigin
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadTimeMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setArtifactOrigin
argument_list|(
name|origin
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setLocalFile
argument_list|(
name|archiveFile
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadDetails
argument_list|(
name|ArtifactDownloadReport
operator|.
name|MISSING_ARTIFACT
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadTimeMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|adr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadDetails
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|adr
operator|.
name|setDownloadTimeMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|endArtifactDownload
argument_list|(
name|this
argument_list|,
name|artifact
argument_list|,
name|adr
argument_list|,
name|archiveFile
argument_list|)
expr_stmt|;
block|}
return|return
name|adr
return|;
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|originalToCachedModuleDescriptor
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|,
name|ResolvedResource
name|orginalMetadataRef
parameter_list|,
name|Artifact
name|requestedMetadataArtifact
parameter_list|,
name|ResolvedModuleRevision
name|rmr
parameter_list|,
name|ModuleDescriptorWriter
name|writer
parameter_list|)
block|{
name|ModuleDescriptor
name|md
init|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
name|Artifact
name|originalMetadataArtifact
init|=
name|getOriginalMetadataArtifact
argument_list|(
name|requestedMetadataArtifact
argument_list|)
decl_stmt|;
name|File
name|mdFileInCache
init|=
name|getIvyFileInCache
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|requestedMetadataArtifact
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"impossible to acquire lock for: "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|File
name|originalFileInCache
init|=
name|getArchiveFileInCache
argument_list|(
name|originalMetadataArtifact
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|orginalMetadataRef
argument_list|,
name|md
argument_list|,
name|originalFileInCache
argument_list|,
name|mdFileInCache
argument_list|)
expr_stmt|;
name|saveResolvers
argument_list|(
name|md
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|md
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|rmr
operator|.
name|getReport
argument_list|()
operator|.
name|setOriginalLocalFile
argument_list|(
name|originalFileInCache
argument_list|)
expr_stmt|;
block|}
name|rmr
operator|.
name|getReport
argument_list|()
operator|.
name|setLocalFile
argument_list|(
name|mdFileInCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"impossible to put metadata file in cache: "
operator|+
operator|(
name|orginalMetadataRef
operator|==
literal|null
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|orginalMetadataRef
argument_list|)
operator|)
operator|+
literal|". "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ResolvedModuleRevision
name|cacheModuleDescriptor
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|,
specifier|final
name|ResolvedResource
name|mdRef
parameter_list|,
name|Artifact
name|moduleArtifact
parameter_list|,
name|ResourceDownloader
name|downloader
parameter_list|,
name|CacheMetadataOptions
name|options
parameter_list|)
throws|throws
name|ParseException
block|{
name|ModuleDescriptorParser
name|parser
init|=
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getParser
argument_list|(
name|mdRef
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|cachedPublicationDate
init|=
literal|null
decl_stmt|;
name|ArtifactDownloadReport
name|report
decl_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|moduleArtifact
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
name|Artifact
name|originalMetadataArtifact
init|=
name|getOriginalMetadataArtifact
argument_list|(
name|moduleArtifact
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to acquire lock for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
comment|// now let's see if we can find it in cache and if it is up to date
name|ResolvedModuleRevision
name|rmr
init|=
name|findModuleInCache
argument_list|(
name|mrid
argument_list|,
name|options
operator|.
name|isValidate
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
operator|&&
name|rmr
operator|.
name|getResolver
argument_list|()
operator|!=
name|resolver
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": found revision in cache: "
operator|+
name|mrid
operator|+
literal|" (resolved by "
operator|+
name|rmr
operator|.
name|getResolver
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"): but it's a default one, maybe we can find a better one"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|options
operator|.
name|isCheckmodified
argument_list|()
operator|&&
operator|!
name|options
operator|.
name|isChanging
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache: "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|rmr
operator|.
name|getReport
argument_list|()
operator|.
name|setSearched
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|rmr
return|;
block|}
name|long
name|repLastModified
init|=
name|mdRef
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
name|long
name|cacheLastModified
init|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|isDefault
argument_list|()
operator|&&
name|repLastModified
operator|<=
name|cacheLastModified
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache (not updated): "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|rmr
operator|.
name|getReport
argument_list|()
operator|.
name|setSearched
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|rmr
return|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": revision in cache is not up to date: "
operator|+
name|mrid
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|isChanging
argument_list|()
condition|)
block|{
comment|// ivy file has been updated, we should see if it has a new publication
comment|// date to see if a new download is required (in case the dependency is
comment|// a changing one)
name|cachedPublicationDate
operator|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getResolvedPublicationDate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// now download module descriptor and parse it
name|report
operator|=
name|download
argument_list|(
name|originalMetadataArtifact
argument_list|,
operator|new
name|ArtifactResourceResolver
argument_list|()
block|{
specifier|public
name|ResolvedResource
name|resolve
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|mdRef
return|;
block|}
block|}
argument_list|,
name|downloader
argument_list|,
operator|new
name|CacheDownloadOptions
argument_list|()
operator|.
name|setListener
argument_list|(
name|options
operator|.
name|getListener
argument_list|()
argument_list|)
operator|.
name|setForce
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|report
argument_list|)
expr_stmt|;
if|if
condition|(
name|report
operator|.
name|getDownloadStatus
argument_list|()
operator|==
name|DownloadStatus
operator|.
name|FAILED
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"problem while downloading module descriptor: "
operator|+
name|mdRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": "
operator|+
name|report
operator|.
name|getDownloadDetails
argument_list|()
operator|+
literal|" ("
operator|+
name|report
operator|.
name|getDownloadTimeMillis
argument_list|()
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|URL
name|cachedMDURL
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cachedMDURL
operator|=
name|report
operator|.
name|getLocalFile
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"malformed url exception for original in cache file: "
operator|+
name|report
operator|.
name|getLocalFile
argument_list|()
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|ModuleDescriptor
name|md
init|=
name|parser
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|cachedMDURL
argument_list|,
name|mdRef
operator|.
name|getResource
argument_list|()
argument_list|,
name|options
operator|.
name|isValidate
argument_list|()
argument_list|)
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": parsed downloaded md file for "
operator|+
name|mrid
operator|+
literal|"; parsed="
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if we should delete old artifacts
name|boolean
name|deleteOldArtifacts
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|cachedPublicationDate
operator|!=
literal|null
operator|&&
operator|!
name|cachedPublicationDate
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getResolvedPublicationDate
argument_list|()
argument_list|)
condition|)
block|{
comment|// artifacts have changed, they should be downloaded again
name|Message
operator|.
name|verbose
argument_list|(
name|mrid
operator|+
literal|" has changed: deleting old artifacts"
argument_list|)
expr_stmt|;
name|deleteOldArtifacts
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|deleteOldArtifacts
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Artifact
index|[]
name|arts
init|=
name|md
operator|.
name|getArtifacts
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|arts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Artifact
name|transformedArtifact
init|=
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|arts
index|[
name|j
index|]
argument_list|,
name|options
operator|.
name|getNamespace
argument_list|()
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|)
decl_stmt|;
name|ArtifactOrigin
name|origin
init|=
name|getSavedArtifactOrigin
argument_list|(
name|transformedArtifact
argument_list|)
decl_stmt|;
name|File
name|artFile
init|=
name|getArchiveFileInCache
argument_list|(
name|transformedArtifact
argument_list|,
name|origin
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|artFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"deleting "
operator|+
name|artFile
argument_list|)
expr_stmt|;
name|artFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|removeSavedArtifactOrigin
argument_list|(
name|transformedArtifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|options
operator|.
name|isChanging
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
name|mrid
operator|+
literal|" is changing, but has not changed: will trust cached artifacts if any"
argument_list|)
expr_stmt|;
block|}
name|MetadataArtifactDownloadReport
name|madr
init|=
operator|new
name|MetadataArtifactDownloadReport
argument_list|(
name|md
operator|.
name|getMetadataArtifact
argument_list|()
argument_list|)
decl_stmt|;
name|madr
operator|.
name|setSearched
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setDownloadStatus
argument_list|(
name|report
operator|.
name|getDownloadStatus
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setDownloadDetails
argument_list|(
name|report
operator|.
name|getDownloadDetails
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setArtifactOrigin
argument_list|(
name|report
operator|.
name|getArtifactOrigin
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setDownloadTimeMillis
argument_list|(
name|report
operator|.
name|getDownloadTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setOriginalLocalFile
argument_list|(
name|report
operator|.
name|getLocalFile
argument_list|()
argument_list|)
expr_stmt|;
name|madr
operator|.
name|setSize
argument_list|(
name|report
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|saveArtifactOrigin
argument_list|(
name|md
operator|.
name|getMetadataArtifact
argument_list|()
argument_list|,
name|report
operator|.
name|getArtifactOrigin
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ResolvedModuleRevision
argument_list|(
name|resolver
argument_list|,
name|resolver
argument_list|,
name|md
argument_list|,
name|madr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"io problem while parsing ivy file: "
operator|+
name|mdRef
operator|.
name|getResource
argument_list|()
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|unlockMetadataArtifact
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
comment|// lock used to lock all metadata related information access
specifier|private
name|boolean
name|lockMetadataArtifact
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|Artifact
name|artifact
init|=
name|getDefaultMetadataArtifact
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
try|try
block|{
comment|// we need to provide an artifact origin to be sure we do not end up in a stack overflow
comment|// if the cache pattern is using original name, and the substitution thus trying to get
comment|// the saved artifact origin value which in turns calls this method
return|return
name|getLockStrategy
argument_list|()
operator|.
name|lockArtifact
argument_list|(
name|artifact
argument_list|,
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|getDefaultMetadataArtifactOrigin
argument_list|(
name|mrid
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// reset interrupt status
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"operation interrupted"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|unlockMetadataArtifact
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|Artifact
name|artifact
init|=
name|getDefaultMetadataArtifact
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
name|getLockStrategy
argument_list|()
operator|.
name|unlockArtifact
argument_list|(
name|artifact
argument_list|,
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|getDefaultMetadataArtifactOrigin
argument_list|(
name|mrid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ArtifactOrigin
name|getDefaultMetadataArtifactOrigin
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
comment|// it's important to say the origin is not local to make sure it won't ever be used for
comment|// anything else than original token
return|return
operator|new
name|ArtifactOrigin
argument_list|(
literal|false
argument_list|,
name|getIvyFileInCache
argument_list|(
name|mrid
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Artifact
name|getDefaultMetadataArtifact
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|"metadata"
argument_list|,
literal|"metadata"
argument_list|,
literal|"ivy"
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// not used any more, but maybe useful for finer grain locking when downloading artifacts
comment|//    private boolean lockArtifact(Artifact artifact) {
comment|//        try {
comment|//            return getLockStrategy().lockArtifact(artifact,
comment|//                getArchiveFileInCache(artifact, null));
comment|//        } catch (InterruptedException e) {
comment|//            Thread.currentThread().interrupt(); // reset interrupt status
comment|//            throw new RuntimeException("operation interrupted");
comment|//        }
comment|//    }
comment|//
comment|//    private void unlockArtifact(Artifact artifact) {
comment|//        getLockStrategy().unlockArtifact(artifact, getArchiveFileInCache(artifact, null));
comment|//    }
specifier|public
name|Artifact
name|getOriginalMetadataArtifact
parameter_list|(
name|Artifact
name|moduleArtifact
parameter_list|)
block|{
return|return
name|DefaultArtifact
operator|.
name|cloneWithAnotherName
argument_list|(
name|moduleArtifact
argument_list|,
name|moduleArtifact
operator|.
name|getName
argument_list|()
operator|+
literal|".original"
argument_list|)
return|;
block|}
specifier|public
name|void
name|clean
parameter_list|()
block|{
name|FileUtil
operator|.
name|forceDelete
argument_list|(
name|getBasedir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

