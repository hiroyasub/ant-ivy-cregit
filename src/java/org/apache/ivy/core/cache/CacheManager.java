begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|DefaultModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|PropertiesFile
import|;
end_import

begin_class
specifier|public
class|class
name|CacheManager
block|{
specifier|public
specifier|static
name|CacheManager
name|getInstance
parameter_list|(
name|IvySettings
name|settings
parameter_list|,
name|File
name|cache
parameter_list|)
block|{
return|return
operator|new
name|CacheManager
argument_list|(
name|settings
argument_list|,
name|cache
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CacheManager
name|getInstance
parameter_list|(
name|IvySettings
name|settings
parameter_list|)
block|{
return|return
name|getInstance
argument_list|(
name|settings
argument_list|,
name|settings
operator|.
name|getDefaultCache
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|IvySettings
name|_settings
decl_stmt|;
specifier|private
name|File
name|_cache
decl_stmt|;
specifier|public
name|CacheManager
parameter_list|(
name|IvySettings
name|settings
parameter_list|,
name|File
name|cache
parameter_list|)
block|{
name|_settings
operator|=
name|settings
expr_stmt|;
name|_cache
operator|=
name|cache
expr_stmt|;
block|}
specifier|public
name|File
name|getResolvedIvyFileInCache
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|_cache
argument_list|,
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|_settings
operator|.
name|getCacheResolvedIvyPattern
argument_list|()
argument_list|,
name|mrid
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|,
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|File
name|getResolvedIvyPropertiesInCache
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|_cache
argument_list|,
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|_settings
operator|.
name|getCacheResolvedIvyPropertiesPattern
argument_list|()
argument_list|,
name|mrid
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|,
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|,
literal|"ivy"
argument_list|,
literal|"ivy"
argument_list|,
literal|"xml"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|File
name|getIvyFileInCache
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|_cache
argument_list|,
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|_settings
operator|.
name|getCacheIvyPattern
argument_list|()
argument_list|,
name|DefaultArtifact
operator|.
name|newIvyArtifact
argument_list|(
name|mrid
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|File
name|getConfigurationResolveReportInCache
parameter_list|(
name|String
name|resolveId
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|_cache
argument_list|,
name|resolveId
operator|+
literal|"-"
operator|+
name|conf
operator|+
literal|".xml"
argument_list|)
return|;
block|}
comment|/**      * Returns a File object pointing to where the artifact can be found on the local file system.      * This is usually in the cache, but it can be directly in the repository if it is local      * and if the resolve has been done with useOrigin = true      *       */
specifier|public
name|File
name|getArchiveFileInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|ArtifactOrigin
name|origin
init|=
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
return|;
block|}
comment|/**      * Returns a File object pointing to where the artifact can be found on the local file system.      * This is usually in the cache, but it can be directly in the repository if it is local      * and if the resolve has been done with useOrigin = true      *       */
specifier|public
name|File
name|getArchiveFileInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|)
block|{
name|File
name|archive
init|=
operator|new
name|File
argument_list|(
name|_cache
argument_list|,
name|getArchivePathInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|archive
operator|.
name|exists
argument_list|()
operator|&&
name|origin
operator|!=
literal|null
operator|&&
name|origin
operator|.
name|isLocal
argument_list|()
condition|)
block|{
name|File
name|original
init|=
operator|new
name|File
argument_list|(
name|origin
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|original
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|original
return|;
block|}
block|}
return|return
name|archive
return|;
block|}
comment|/**      * Returns a File object pointing to where the artifact can be found on the local file system,      * using or not the original location depending on the availability of origin information provided      * as parameter and the setting of useOrigin.      *       * If useOrigin is false, this method will always return the file in the cache.      *       */
specifier|public
name|File
name|getArchiveFileInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|,
name|boolean
name|useOrigin
parameter_list|)
block|{
if|if
condition|(
name|useOrigin
operator|&&
name|origin
operator|!=
literal|null
operator|&&
name|origin
operator|.
name|isLocal
argument_list|()
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|origin
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|File
argument_list|(
name|_cache
argument_list|,
name|getArchivePathInCache
argument_list|(
name|artifact
argument_list|,
name|origin
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|getArchivePathInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|_settings
operator|.
name|getCacheArtifactPattern
argument_list|()
argument_list|,
name|artifact
argument_list|)
return|;
block|}
specifier|public
name|String
name|getArchivePathInCache
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|)
block|{
return|return
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|_settings
operator|.
name|getCacheArtifactPattern
argument_list|()
argument_list|,
name|artifact
argument_list|,
name|origin
argument_list|)
return|;
block|}
comment|/**      * Saves the information of which resolver was used to resolve a md,      * so that this info can be retrieve later (even after a jvm restart)      * by getSavedResolverName(ModuleDescriptor md)      * @param md the module descriptor resolved      * @param name resolver name      */
specifier|public
name|void
name|saveResolver
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
literal|"resolver"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|/**      * Saves the information of which resolver was used to resolve a md,      * so that this info can be retrieve later (even after a jvm restart)      * by getSavedArtResolverName(ModuleDescriptor md)      * @param md the module descriptor resolved      * @param name artifact resolver name      */
specifier|public
name|void
name|saveArtResolver
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
literal|"artifact.resolver"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|saveArtifactOrigin
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|ArtifactOrigin
name|origin
parameter_list|)
block|{
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
literal|"artifact."
operator|+
name|artifact
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|artifact
operator|.
name|getExt
argument_list|()
operator|+
literal|".is-local"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|origin
operator|.
name|isLocal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|setProperty
argument_list|(
literal|"artifact."
operator|+
name|artifact
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|artifact
operator|.
name|getExt
argument_list|()
operator|+
literal|".location"
argument_list|,
name|origin
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ArtifactOrigin
name|getSavedArtifactOrigin
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|cdf
operator|.
name|getProperty
argument_list|(
literal|"artifact."
operator|+
name|artifact
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|artifact
operator|.
name|getExt
argument_list|()
operator|+
literal|".location"
argument_list|)
decl_stmt|;
name|boolean
name|isLocal
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|cdf
operator|.
name|getProperty
argument_list|(
literal|"artifact."
operator|+
name|artifact
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|artifact
operator|.
name|getExt
argument_list|()
operator|+
literal|".is-local"
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
comment|// origin has not been specified, return null
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ArtifactOrigin
argument_list|(
name|isLocal
argument_list|,
name|location
argument_list|)
return|;
block|}
specifier|public
name|void
name|removeSavedArtifactOrigin
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|cdf
operator|.
name|remove
argument_list|(
literal|"artifact."
operator|+
name|artifact
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|artifact
operator|.
name|getExt
argument_list|()
operator|+
literal|".location"
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|remove
argument_list|(
literal|"artifact."
operator|+
name|artifact
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|artifact
operator|.
name|getExt
argument_list|()
operator|+
literal|".is-local"
argument_list|)
expr_stmt|;
name|cdf
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getSavedResolverName
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
return|return
name|cdf
operator|.
name|getProperty
argument_list|(
literal|"resolver"
argument_list|)
return|;
block|}
specifier|private
name|String
name|getSavedArtResolverName
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
name|PropertiesFile
name|cdf
init|=
name|getCachedDataFile
argument_list|(
name|md
argument_list|)
decl_stmt|;
return|return
name|cdf
operator|.
name|getProperty
argument_list|(
literal|"artifact.resolver"
argument_list|)
return|;
block|}
specifier|private
name|PropertiesFile
name|getCachedDataFile
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
return|return
name|getCachedDataFile
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|PropertiesFile
name|getCachedDataFile
parameter_list|(
name|ModuleRevisionId
name|mRevId
parameter_list|)
block|{
return|return
operator|new
name|PropertiesFile
argument_list|(
operator|new
name|File
argument_list|(
name|_cache
argument_list|,
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|_settings
operator|.
name|getCacheDataFilePattern
argument_list|()
argument_list|,
name|mRevId
argument_list|)
argument_list|)
argument_list|,
literal|"ivy cached data file for "
operator|+
name|mRevId
argument_list|)
return|;
block|}
specifier|public
name|ResolvedModuleRevision
name|findModuleInCache
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
comment|// first, check if it is in cache
if|if
condition|(
operator|!
name|_settings
operator|.
name|getVersionMatcher
argument_list|()
operator|.
name|isDynamic
argument_list|(
name|mrid
argument_list|)
condition|)
block|{
name|File
name|ivyFile
init|=
name|getIvyFileInCache
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ivyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// found in cache !
try|try
block|{
name|ModuleDescriptor
name|depMD
init|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|_settings
argument_list|,
name|ivyFile
operator|.
name|toURL
argument_list|()
argument_list|,
name|validate
argument_list|)
decl_stmt|;
name|String
name|resolverName
init|=
name|getSavedResolverName
argument_list|(
name|depMD
argument_list|)
decl_stmt|;
name|String
name|artResolverName
init|=
name|getSavedArtResolverName
argument_list|(
name|depMD
argument_list|)
decl_stmt|;
name|DependencyResolver
name|resolver
init|=
name|_settings
operator|.
name|getResolver
argument_list|(
name|resolverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tresolver not found: "
operator|+
name|resolverName
operator|+
literal|" => trying to use the one configured for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
name|resolver
operator|=
name|_settings
operator|.
name|getResolver
argument_list|(
name|depMD
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tconfigured resolver found for "
operator|+
name|depMD
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|resolver
operator|.
name|getName
argument_list|()
operator|+
literal|": saving this data"
argument_list|)
expr_stmt|;
name|saveResolver
argument_list|(
name|depMD
argument_list|,
name|resolver
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|DependencyResolver
name|artResolver
init|=
name|_settings
operator|.
name|getResolver
argument_list|(
name|artResolverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|artResolver
operator|==
literal|null
condition|)
block|{
name|artResolver
operator|=
name|resolver
expr_stmt|;
block|}
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tfound ivy file in cache for "
operator|+
name|mrid
operator|+
literal|" (resolved by "
operator|+
name|resolver
operator|.
name|getName
argument_list|()
operator|+
literal|"): "
operator|+
name|ivyFile
argument_list|)
expr_stmt|;
return|return
operator|new
name|DefaultModuleRevision
argument_list|(
name|resolver
argument_list|,
name|artResolver
argument_list|,
name|depMD
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|ivyFile
operator|.
name|toURL
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tresolver not found: "
operator|+
name|resolverName
operator|+
literal|" => cannot use cached ivy file for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// will try with resolver
name|Message
operator|.
name|debug
argument_list|(
literal|"\tproblem while parsing cached ivy file for: "
operator|+
name|mrid
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tno ivy file in cache for "
operator|+
name|mrid
operator|+
literal|": tried "
operator|+
name|ivyFile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"cache: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|_cache
argument_list|)
return|;
block|}
specifier|public
name|File
name|getCache
parameter_list|()
block|{
return|return
name|_cache
return|;
block|}
block|}
end_class

end_unit

