begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
package|;
end_package

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ModuleId
implements|implements
name|Comparable
block|{
specifier|static
specifier|final
name|String
name|ENCODE_SEPARATOR
init|=
literal|":#@#:"
decl_stmt|;
specifier|private
name|String
name|organisation
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|int
name|hash
decl_stmt|;
specifier|public
name|ModuleId
parameter_list|(
name|String
name|organisation
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null name not allowed"
argument_list|)
throw|;
block|}
name|this
operator|.
name|organisation
operator|=
name|organisation
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|hash
operator|=
name|_hashCode
argument_list|()
expr_stmt|;
comment|// stored for performance reasons, hashCode is very used in many maps
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getOrganisation
parameter_list|()
block|{
return|return
name|organisation
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ModuleId
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ModuleId
name|other
init|=
operator|(
name|ModuleId
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|organisation
operator|==
literal|null
condition|)
block|{
return|return
name|organisation
operator|==
literal|null
operator|&&
name|other
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|other
operator|.
name|organisation
operator|.
name|equals
argument_list|(
name|organisation
argument_list|)
operator|&&
name|other
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
specifier|public
name|int
name|_hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|31
decl_stmt|;
name|hash
operator|=
name|hash
operator|*
literal|13
operator|+
operator|(
name|organisation
operator|==
literal|null
condition|?
literal|0
else|:
name|organisation
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|hash
operator|=
name|hash
operator|*
literal|13
operator|+
name|name
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|hash
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[ "
operator|+
name|organisation
operator|+
literal|" | "
operator|+
name|name
operator|+
literal|" ]"
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|ModuleId
name|that
init|=
operator|(
name|ModuleId
operator|)
name|obj
decl_stmt|;
name|int
name|result
init|=
name|organisation
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|organisation
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|name
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|String
name|encodeToString
parameter_list|()
block|{
return|return
name|getOrganisation
argument_list|()
operator|+
name|ENCODE_SEPARATOR
operator|+
name|getName
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ModuleId
name|decode
parameter_list|(
name|String
name|encoded
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|encoded
operator|.
name|split
argument_list|(
name|ENCODE_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"badly encoded module id: '"
operator|+
name|encoded
operator|+
literal|"'"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ModuleId
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

