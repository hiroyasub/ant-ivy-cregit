begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|extendable
operator|.
name|UnmodifiableExtendableItem
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ModuleRevisionId
extends|extends
name|UnmodifiableExtendableItem
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ENCODE_SEPARATOR
init|=
name|ModuleId
operator|.
name|ENCODE_SEPARATOR
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENCODE_PREFIX
init|=
literal|"+"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NULL_ENCODE
init|=
literal|"@#:NULL:#@"
decl_stmt|;
specifier|public
specifier|static
name|ModuleRevisionId
name|newInstance
parameter_list|(
name|String
name|organisation
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
return|return
operator|new
name|ModuleRevisionId
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|organisation
argument_list|,
name|name
argument_list|)
argument_list|,
name|revision
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ModuleRevisionId
name|newInstance
parameter_list|(
name|String
name|organisation
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|revision
parameter_list|,
name|Map
name|extraAttributes
parameter_list|)
block|{
return|return
operator|new
name|ModuleRevisionId
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|organisation
argument_list|,
name|name
argument_list|)
argument_list|,
name|revision
argument_list|,
name|extraAttributes
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ModuleRevisionId
name|newInstance
parameter_list|(
name|String
name|organisation
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|branch
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
return|return
operator|new
name|ModuleRevisionId
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|organisation
argument_list|,
name|name
argument_list|)
argument_list|,
name|branch
argument_list|,
name|revision
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ModuleRevisionId
name|newInstance
parameter_list|(
name|String
name|organisation
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|branch
parameter_list|,
name|String
name|revision
parameter_list|,
name|Map
name|extraAttributes
parameter_list|)
block|{
return|return
operator|new
name|ModuleRevisionId
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|organisation
argument_list|,
name|name
argument_list|)
argument_list|,
name|branch
argument_list|,
name|revision
argument_list|,
name|extraAttributes
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ModuleRevisionId
name|newInstance
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|rev
parameter_list|)
block|{
return|return
operator|new
name|ModuleRevisionId
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|mrid
operator|.
name|getBranch
argument_list|()
argument_list|,
name|rev
argument_list|,
name|mrid
operator|.
name|getExtraAttributes
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|ModuleId
name|moduleId
decl_stmt|;
specifier|private
specifier|final
name|String
name|branch
decl_stmt|;
specifier|private
specifier|final
name|String
name|revision
decl_stmt|;
specifier|private
name|int
name|hash
decl_stmt|;
specifier|public
name|ModuleRevisionId
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
name|this
argument_list|(
name|moduleId
argument_list|,
literal|null
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModuleRevisionId
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
name|branch
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
name|this
argument_list|(
name|moduleId
argument_list|,
name|branch
argument_list|,
name|revision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModuleRevisionId
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
name|revision
parameter_list|,
name|Map
name|extraAttributes
parameter_list|)
block|{
name|this
argument_list|(
name|moduleId
argument_list|,
literal|null
argument_list|,
name|revision
argument_list|,
name|extraAttributes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModuleRevisionId
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
name|branch
parameter_list|,
name|String
name|revision
parameter_list|,
name|Map
name|extraAttributes
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|extraAttributes
argument_list|)
expr_stmt|;
name|this
operator|.
name|moduleId
operator|=
name|moduleId
expr_stmt|;
name|this
operator|.
name|branch
operator|=
name|branch
operator|==
literal|null
condition|?
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getSettings
argument_list|()
operator|.
name|getDefaultBranch
argument_list|(
name|moduleId
argument_list|)
else|:
name|branch
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
operator|==
literal|null
condition|?
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
else|:
name|revision
expr_stmt|;
name|setStandardAttribute
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|this
operator|.
name|moduleId
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|setStandardAttribute
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|this
operator|.
name|moduleId
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setStandardAttribute
argument_list|(
name|IvyPatternHelper
operator|.
name|BRANCH_KEY
argument_list|,
name|this
operator|.
name|branch
argument_list|)
expr_stmt|;
name|setStandardAttribute
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|,
name|this
operator|.
name|revision
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModuleId
name|getModuleId
parameter_list|()
block|{
return|return
name|moduleId
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getModuleId
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getOrganisation
parameter_list|()
block|{
return|return
name|getModuleId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRevision
parameter_list|()
block|{
return|return
name|revision
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ModuleRevisionId
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ModuleRevisionId
name|other
init|=
operator|(
name|ModuleRevisionId
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|other
operator|.
name|getRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|other
operator|.
name|getBranch
argument_list|()
operator|==
literal|null
operator|&&
name|getBranch
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|other
operator|.
name|getBranch
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|other
operator|.
name|getBranch
argument_list|()
operator|.
name|equals
argument_list|(
name|getBranch
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
operator|!
name|other
operator|.
name|getModuleId
argument_list|()
operator|.
name|equals
argument_list|(
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|other
operator|.
name|getExtraAttributes
argument_list|()
operator|.
name|equals
argument_list|(
name|getExtraAttributes
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|hash
operator|==
literal|0
condition|)
block|{
comment|//CheckStyle:MagicNumber| OFF
name|hash
operator|=
literal|31
expr_stmt|;
name|hash
operator|=
name|hash
operator|*
literal|13
operator|+
operator|(
name|getBranch
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getBranch
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|hash
operator|=
name|hash
operator|*
literal|13
operator|+
name|getRevision
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hash
operator|=
name|hash
operator|*
literal|13
operator|+
name|getModuleId
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hash
operator|=
name|hash
operator|*
literal|13
operator|+
name|getAttributes
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
comment|//CheckStyle:MagicNumber| ON
block|}
return|return
name|hash
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[ "
operator|+
name|moduleId
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|" | "
operator|+
name|moduleId
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|branch
operator|==
literal|null
operator|||
name|branch
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" | "
operator|+
name|branch
operator|)
operator|+
literal|" | "
operator|+
operator|(
name|revision
operator|==
literal|null
condition|?
literal|"NONE"
else|:
name|revision
operator|)
operator|+
literal|" ]"
return|;
block|}
specifier|public
name|String
name|encodeToString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Map
name|attributes
init|=
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|attributes
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|attName
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
name|attName
argument_list|)
decl_stmt|;
name|value
operator|=
name|value
operator|==
literal|null
condition|?
name|NULL_ENCODE
else|:
name|value
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|ENCODE_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|attName
argument_list|)
operator|.
name|append
argument_list|(
name|ENCODE_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|ENCODE_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|ENCODE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ModuleRevisionId
name|decode
parameter_list|(
name|String
name|encoded
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|encoded
operator|.
name|split
argument_list|(
name|ENCODE_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"badly encoded module revision id: '"
operator|+
name|encoded
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|Map
name|attributes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|attName
init|=
name|parts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|attName
operator|.
name|startsWith
argument_list|(
name|ENCODE_PREFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"badly encoded module revision id: '"
operator|+
name|encoded
operator|+
literal|"': "
operator|+
name|attName
operator|+
literal|" doesn't start with "
operator|+
name|ENCODE_PREFIX
argument_list|)
throw|;
block|}
else|else
block|{
name|attName
operator|=
name|attName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|attValue
init|=
name|parts
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|attValue
operator|.
name|startsWith
argument_list|(
name|ENCODE_PREFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"badly encoded module revision id: '"
operator|+
name|encoded
operator|+
literal|"': "
operator|+
name|attValue
operator|+
literal|" doesn't start with "
operator|+
name|ENCODE_PREFIX
argument_list|)
throw|;
block|}
else|else
block|{
name|attValue
operator|=
name|attValue
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|NULL_ENCODE
operator|.
name|equals
argument_list|(
name|attValue
argument_list|)
condition|)
block|{
name|attValue
operator|=
literal|null
expr_stmt|;
block|}
name|attributes
operator|.
name|put
argument_list|(
name|attName
argument_list|,
name|attValue
argument_list|)
expr_stmt|;
block|}
name|String
name|org
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|)
decl_stmt|;
name|String
name|mod
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
decl_stmt|;
name|String
name|rev
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|)
decl_stmt|;
name|String
name|branch
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|BRANCH_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"badly encoded module revision id: '"
operator|+
name|encoded
operator|+
literal|"': no organisation"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mod
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"badly encoded module revision id: '"
operator|+
name|encoded
operator|+
literal|"': no module name"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rev
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"badly encoded module revision id: '"
operator|+
name|encoded
operator|+
literal|"': no revision"
argument_list|)
throw|;
block|}
return|return
name|newInstance
argument_list|(
name|org
argument_list|,
name|mod
argument_list|,
name|branch
argument_list|,
name|rev
argument_list|,
name|attributes
argument_list|)
return|;
block|}
specifier|public
name|String
name|getBranch
parameter_list|()
block|{
return|return
name|branch
return|;
block|}
block|}
end_class

end_unit

