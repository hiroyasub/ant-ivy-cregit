begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ArtifactId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|status
operator|.
name|StatusManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|ConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|MapMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|MatcherHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|NameSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|NamespaceTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
operator|.
name|Visibility
operator|.
name|PUBLIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
operator|.
name|findConfigurationExtending
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|DefaultModuleDescriptor
implements|implements
name|ModuleDescriptor
block|{
specifier|public
specifier|static
name|DefaultModuleDescriptor
name|newDefaultInstance
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
name|newDefaultInstance
argument_list|(
name|mrid
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DefaultModuleDescriptor
name|newCallerInstance
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|changing
parameter_list|)
block|{
name|DefaultModuleDescriptor
name|moduleDescriptor
init|=
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mrid
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|"-caller"
argument_list|,
literal|"working"
argument_list|)
argument_list|,
literal|"integration"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|conf
range|:
name|confs
control|)
block|{
name|moduleDescriptor
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|moduleDescriptor
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|moduleDescriptor
argument_list|,
name|mrid
argument_list|,
literal|true
argument_list|,
name|changing
argument_list|,
name|transitive
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|conf
range|:
name|confs
control|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|conf
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|moduleDescriptor
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
return|return
name|moduleDescriptor
return|;
block|}
specifier|public
specifier|static
name|DefaultModuleDescriptor
name|newCallerInstance
parameter_list|(
name|ModuleRevisionId
index|[]
name|mrids
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|changing
parameter_list|)
block|{
name|DefaultModuleDescriptor
name|moduleDescriptor
init|=
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"caller"
argument_list|,
literal|"all-caller"
argument_list|,
literal|"working"
argument_list|)
argument_list|,
literal|"integration"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|moduleDescriptor
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
name|DEFAULT_CONFIGURATION
argument_list|)
argument_list|)
expr_stmt|;
name|moduleDescriptor
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ModuleRevisionId
name|mrid
range|:
name|mrids
control|)
block|{
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|moduleDescriptor
argument_list|,
name|mrid
argument_list|,
literal|true
argument_list|,
name|changing
argument_list|,
name|transitive
argument_list|)
decl_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|DEFAULT_CONFIGURATION
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|moduleDescriptor
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
return|return
name|moduleDescriptor
return|;
block|}
specifier|public
specifier|static
name|DefaultModuleDescriptor
name|newDefaultInstance
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|DependencyArtifactDescriptor
index|[]
name|artifacts
parameter_list|)
block|{
name|DefaultModuleDescriptor
name|moduleDescriptor
init|=
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|mrid
argument_list|,
literal|"release"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|moduleDescriptor
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
name|DEFAULT_CONFIGURATION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifacts
operator|!=
literal|null
operator|&&
name|artifacts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|DependencyArtifactDescriptor
name|artifact
range|:
name|artifacts
control|)
block|{
name|moduleDescriptor
operator|.
name|addArtifact
argument_list|(
name|DEFAULT_CONFIGURATION
argument_list|,
operator|new
name|MDArtifact
argument_list|(
name|moduleDescriptor
argument_list|,
name|artifact
operator|.
name|getName
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|,
name|artifact
operator|.
name|getExt
argument_list|()
argument_list|,
name|artifact
operator|.
name|getUrl
argument_list|()
argument_list|,
name|artifact
operator|.
name|getExtraAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|moduleDescriptor
operator|.
name|addArtifact
argument_list|(
name|DEFAULT_CONFIGURATION
argument_list|,
operator|new
name|MDArtifact
argument_list|(
name|moduleDescriptor
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|moduleDescriptor
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|moduleDescriptor
return|;
block|}
specifier|public
specifier|static
name|DefaultModuleDescriptor
name|newBasicInstance
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|Date
name|publicationDate
parameter_list|)
block|{
name|DefaultModuleDescriptor
name|moduleDescriptor
init|=
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|mrid
argument_list|,
literal|"release"
argument_list|,
name|publicationDate
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|moduleDescriptor
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
name|DEFAULT_CONFIGURATION
argument_list|)
argument_list|)
expr_stmt|;
name|moduleDescriptor
operator|.
name|addArtifact
argument_list|(
name|DEFAULT_CONFIGURATION
argument_list|,
operator|new
name|MDArtifact
argument_list|(
name|moduleDescriptor
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|moduleDescriptor
return|;
block|}
comment|/**      * Transforms the given module descriptor of the given namespace and return a new module      * descriptor in the system namespace.<i>Note that dependency exclude rules are not converted      * in system namespace, because they aren't transformable (the namespace lacks the ability to      * convert regular expressions)</i>      *      * @param md ModuleDescriptor      * @param ns Namespace      * @return ModuleDescriptor      */
specifier|public
specifier|static
name|ModuleDescriptor
name|transformInstance
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|Namespace
name|ns
parameter_list|)
block|{
name|NamespaceTransformer
name|t
init|=
name|ns
operator|.
name|getToSystemTransformer
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|isIdentity
argument_list|()
condition|)
block|{
return|return
name|md
return|;
block|}
name|DefaultModuleDescriptor
name|nmd
init|=
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|md
operator|.
name|getParser
argument_list|()
argument_list|,
name|md
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
name|nmd
operator|.
name|revId
operator|=
name|t
operator|.
name|transform
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|nmd
operator|.
name|resolvedRevId
operator|=
name|t
operator|.
name|transform
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|nmd
operator|.
name|status
operator|=
name|md
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|nmd
operator|.
name|publicationDate
operator|=
name|md
operator|.
name|getPublicationDate
argument_list|()
expr_stmt|;
name|nmd
operator|.
name|resolvedPublicationDate
operator|=
name|md
operator|.
name|getResolvedPublicationDate
argument_list|()
expr_stmt|;
for|for
control|(
name|ExtendsDescriptor
name|ed
range|:
name|md
operator|.
name|getInheritedDescriptors
argument_list|()
control|)
block|{
name|ModuleDescriptor
name|parentMd
init|=
name|ed
operator|.
name|getParentMd
argument_list|()
decl_stmt|;
name|DefaultModuleDescriptor
name|parentNmd
init|=
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|parentMd
operator|.
name|getParser
argument_list|()
argument_list|,
name|parentMd
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
name|parentNmd
operator|.
name|revId
operator|=
name|t
operator|.
name|transform
argument_list|(
name|parentMd
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|parentNmd
operator|.
name|resolvedRevId
operator|=
name|t
operator|.
name|transform
argument_list|(
name|parentMd
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|parentNmd
operator|.
name|status
operator|=
name|parentMd
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|parentNmd
operator|.
name|publicationDate
operator|=
name|parentMd
operator|.
name|getPublicationDate
argument_list|()
expr_stmt|;
name|parentNmd
operator|.
name|resolvedPublicationDate
operator|=
name|parentMd
operator|.
name|getResolvedPublicationDate
argument_list|()
expr_stmt|;
name|nmd
operator|.
name|inheritedDescriptors
operator|.
name|add
argument_list|(
operator|new
name|DefaultExtendsDescriptor
argument_list|(
name|parentNmd
argument_list|,
name|ed
operator|.
name|getLocation
argument_list|()
argument_list|,
name|ed
operator|.
name|getExtendsTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DependencyDescriptor
name|dd
range|:
name|md
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|nmd
operator|.
name|dependencies
operator|.
name|add
argument_list|(
name|NameSpaceHelper
operator|.
name|toSystem
argument_list|(
name|dd
argument_list|,
name|ns
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Configuration
name|conf
range|:
name|md
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
specifier|final
name|String
name|confName
init|=
name|conf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|nmd
operator|.
name|configurations
operator|.
name|put
argument_list|(
name|confName
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|Artifact
name|art
range|:
name|md
operator|.
name|getArtifacts
argument_list|(
name|confName
argument_list|)
control|)
block|{
name|nmd
operator|.
name|addArtifact
argument_list|(
name|confName
argument_list|,
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|art
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|nmd
operator|.
name|setDefault
argument_list|(
name|md
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|instanceof
name|DefaultModuleDescriptor
condition|)
block|{
name|DefaultModuleDescriptor
name|dmd
init|=
operator|(
name|DefaultModuleDescriptor
operator|)
name|md
decl_stmt|;
name|nmd
operator|.
name|conflictManagers
operator|=
name|dmd
operator|.
name|conflictManagers
operator|.
name|clone
argument_list|()
expr_stmt|;
name|nmd
operator|.
name|dependencyDescriptorMediators
operator|=
name|dmd
operator|.
name|dependencyDescriptorMediators
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"transformed module descriptor is not a default module descriptor: "
operator|+
literal|"impossible to copy conflict manager and version mediation configuration: "
operator|+
name|md
argument_list|)
expr_stmt|;
block|}
name|nmd
operator|.
name|licenses
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getLicenses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nmd
operator|.
name|homePage
operator|=
name|md
operator|.
name|getHomePage
argument_list|()
expr_stmt|;
name|nmd
operator|.
name|description
operator|=
name|md
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|nmd
operator|.
name|lastModified
operator|=
name|md
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
name|nmd
operator|.
name|extraAttributesNamespaces
operator|=
name|md
operator|.
name|getExtraAttributesNamespaces
argument_list|()
expr_stmt|;
name|nmd
operator|.
name|extraInfos
operator|=
name|md
operator|.
name|getExtraInfos
argument_list|()
expr_stmt|;
name|nmd
operator|.
name|namespace
operator|=
name|ns
expr_stmt|;
return|return
name|nmd
return|;
block|}
specifier|private
name|ModuleRevisionId
name|revId
decl_stmt|;
specifier|private
name|ModuleRevisionId
name|resolvedRevId
decl_stmt|;
specifier|private
name|String
name|status
init|=
name|StatusManager
operator|.
name|getCurrent
argument_list|()
operator|.
name|getDefaultStatus
argument_list|()
decl_stmt|;
specifier|private
name|Date
name|publicationDate
decl_stmt|;
specifier|private
name|Date
name|resolvedPublicationDate
decl_stmt|;
specifier|private
name|List
argument_list|<
name|DependencyDescriptor
argument_list|>
name|dependencies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Configuration
argument_list|>
name|configurations
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Artifact
argument_list|>
argument_list|>
name|artifactsByConf
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// all artifacts could also be found in the artifactsByConf map, but here we can
comment|// preserve the order
specifier|private
name|boolean
name|isDefault
init|=
literal|false
decl_stmt|;
specifier|private
name|ModuleRules
argument_list|<
name|ConflictManager
argument_list|>
name|conflictManagers
init|=
operator|new
name|ModuleRules
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ModuleRules
argument_list|<
name|DependencyDescriptorMediator
argument_list|>
name|dependencyDescriptorMediators
init|=
operator|new
name|ModuleRules
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|License
argument_list|>
name|licenses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|homePage
decl_stmt|;
specifier|private
name|String
name|description
init|=
literal|""
decl_stmt|;
specifier|private
name|long
name|lastModified
init|=
literal|0
decl_stmt|;
specifier|private
name|Namespace
name|namespace
decl_stmt|;
specifier|private
name|String
name|defaultConf
decl_stmt|;
specifier|private
name|String
name|defaultConfMapping
decl_stmt|;
specifier|private
name|boolean
name|mappingOverride
decl_stmt|;
specifier|private
name|ModuleDescriptorParser
name|parser
decl_stmt|;
specifier|private
name|Resource
name|resource
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ExcludeRule
argument_list|>
name|excludeRules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Artifact
name|metadataArtifact
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ExtendsDescriptor
argument_list|>
name|inheritedDescriptors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extraAttributesNamespaces
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ExtraInfoHolder
argument_list|>
name|extraInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|DefaultModuleDescriptor
parameter_list|(
name|ModuleRevisionId
name|id
parameter_list|,
name|String
name|status
parameter_list|,
name|Date
name|pubDate
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|status
argument_list|,
name|pubDate
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultModuleDescriptor
parameter_list|(
name|ModuleRevisionId
name|id
parameter_list|,
name|String
name|status
parameter_list|,
name|Date
name|pubDate
parameter_list|,
name|boolean
name|isDefault
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null module revision id not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null status not allowed"
argument_list|)
throw|;
block|}
name|this
operator|.
name|revId
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|resolvedRevId
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|publicationDate
operator|=
name|pubDate
expr_stmt|;
name|this
operator|.
name|resolvedPublicationDate
operator|=
name|publicationDate
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|publicationDate
expr_stmt|;
name|this
operator|.
name|isDefault
operator|=
name|isDefault
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
comment|/**      * IMPORTANT : at least call setModuleRevisionId and setResolvedPublicationDate with instances      * created by this constructor !      *      * @param parser ModuleDescriptorParser      * @param res Resource      */
specifier|public
name|DefaultModuleDescriptor
parameter_list|(
name|ModuleDescriptorParser
name|parser
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|resource
operator|=
name|res
expr_stmt|;
block|}
specifier|public
name|Artifact
name|getMetadataArtifact
parameter_list|()
block|{
if|if
condition|(
name|metadataArtifact
operator|==
literal|null
condition|)
block|{
name|metadataArtifact
operator|=
name|DefaultArtifact
operator|.
name|newIvyArtifact
argument_list|(
name|resolvedRevId
argument_list|,
name|resolvedPublicationDate
argument_list|)
expr_stmt|;
block|}
return|return
name|metadataArtifact
return|;
block|}
specifier|public
name|void
name|setModuleArtifact
parameter_list|(
name|Artifact
name|moduleArtifact
parameter_list|)
block|{
name|this
operator|.
name|metadataArtifact
operator|=
name|moduleArtifact
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDefault
parameter_list|()
block|{
return|return
name|isDefault
return|;
block|}
specifier|public
name|void
name|setPublicationDate
parameter_list|(
name|Date
name|publicationDate
parameter_list|)
block|{
name|this
operator|.
name|publicationDate
operator|=
name|publicationDate
expr_stmt|;
if|if
condition|(
name|resolvedPublicationDate
operator|==
literal|null
condition|)
block|{
name|resolvedPublicationDate
operator|=
name|publicationDate
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|publicationDate
expr_stmt|;
block|}
block|}
specifier|public
name|Date
name|getPublicationDate
parameter_list|()
block|{
return|return
name|publicationDate
return|;
block|}
specifier|public
name|void
name|setResolvedPublicationDate
parameter_list|(
name|Date
name|publicationDate
parameter_list|)
block|{
if|if
condition|(
name|publicationDate
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null publication date not allowed"
argument_list|)
throw|;
block|}
name|resolvedPublicationDate
operator|=
name|publicationDate
expr_stmt|;
block|}
specifier|public
name|Date
name|getResolvedPublicationDate
parameter_list|()
block|{
return|return
name|resolvedPublicationDate
return|;
block|}
specifier|public
name|String
name|getRevision
parameter_list|()
block|{
return|return
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
return|;
block|}
specifier|public
name|void
name|setModuleRevisionId
parameter_list|(
name|ModuleRevisionId
name|revId
parameter_list|)
block|{
if|if
condition|(
name|revId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null module revision id not allowed"
argument_list|)
throw|;
block|}
name|this
operator|.
name|revId
operator|=
name|revId
expr_stmt|;
if|if
condition|(
name|resolvedRevId
operator|==
literal|null
condition|)
block|{
name|resolvedRevId
operator|=
name|revId
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setResolvedModuleRevisionId
parameter_list|(
name|ModuleRevisionId
name|revId
parameter_list|)
block|{
name|resolvedRevId
operator|=
name|revId
expr_stmt|;
block|}
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
specifier|public
name|void
name|addInheritedDescriptor
parameter_list|(
name|ExtendsDescriptor
name|descriptor
parameter_list|)
block|{
name|inheritedDescriptors
operator|.
name|add
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDependency
parameter_list|(
name|DependencyDescriptor
name|dependency
parameter_list|)
block|{
name|dependencies
operator|.
name|add
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|configurations
operator|.
name|put
argument_list|(
name|conf
operator|.
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Artifact configurations are not used since added artifact may not be entirely completed, so      * its configurations data may not be accurate      *      * @param conf ditto      * @param artifact ditto      */
specifier|public
name|void
name|addArtifact
parameter_list|(
name|String
name|conf
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
name|Configuration
name|c
init|=
name|getConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add artifact '"
operator|+
name|artifact
operator|.
name|getId
argument_list|()
operator|.
name|getArtifactId
argument_list|()
operator|.
name|getShortDescription
argument_list|()
operator|+
literal|"' to configuration '"
operator|+
name|conf
operator|+
literal|"' of module "
operator|+
name|revId
operator|+
literal|" because this configuration doesn't exist!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|ConfigurationGroup
condition|)
block|{
name|ConfigurationGroup
name|group
init|=
operator|(
name|ConfigurationGroup
operator|)
name|c
decl_stmt|;
for|for
control|(
name|String
name|member
range|:
name|group
operator|.
name|getMembersConfigurationNames
argument_list|()
control|)
block|{
name|addArtifact
argument_list|(
name|member
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
name|artifactsByConf
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifacts
operator|==
literal|null
condition|)
block|{
name|artifacts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|artifactsByConf
operator|.
name|put
argument_list|(
name|conf
argument_list|,
name|artifacts
argument_list|)
expr_stmt|;
block|}
name|artifacts
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|this
operator|.
name|artifacts
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ModuleRevisionId
name|getModuleRevisionId
parameter_list|()
block|{
return|return
name|revId
return|;
block|}
specifier|public
name|ModuleRevisionId
name|getResolvedModuleRevisionId
parameter_list|()
block|{
return|return
name|resolvedRevId
return|;
block|}
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
specifier|public
name|ExtendsDescriptor
index|[]
name|getInheritedDescriptors
parameter_list|()
block|{
return|return
name|inheritedDescriptors
operator|.
name|toArray
argument_list|(
operator|new
name|ExtendsDescriptor
index|[
name|inheritedDescriptors
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|Configuration
index|[]
name|getConfigurations
parameter_list|()
block|{
return|return
name|configurations
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Configuration
index|[
name|configurations
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|getConfigurationsNames
parameter_list|()
block|{
return|return
name|configurations
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|configurations
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|getPublicConfigurationsNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Configuration
name|conf
range|:
name|configurations
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|PUBLIC
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|getVisibility
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|conf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * @param confName String      * @return the configuration object with the given name in the current module descriptor, null      * if not found.      */
specifier|public
name|Configuration
name|getConfiguration
parameter_list|(
name|String
name|confName
parameter_list|)
block|{
name|Configuration
name|configuration
init|=
name|configurations
operator|.
name|get
argument_list|(
name|confName
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|==
literal|null
operator|&&
name|confName
operator|!=
literal|null
condition|)
block|{
comment|// let's first check if the configuration is a conf group
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\*\\[([^=]+)\\=([^\\]]+)\\]"
argument_list|)
operator|.
name|matcher
argument_list|(
name|confName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|attName
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|attValue
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// this is a conf group, let's search for its members
name|Map
argument_list|<
name|String
argument_list|,
name|Configuration
argument_list|>
name|members
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Configuration
name|conf
range|:
name|configurations
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|attValue
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|getAttribute
argument_list|(
name|attName
argument_list|)
argument_list|)
condition|)
block|{
name|members
operator|.
name|put
argument_list|(
name|conf
operator|.
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ConfigurationGroup
argument_list|(
name|confName
argument_list|,
name|members
argument_list|)
return|;
block|}
comment|// let's see if a configuration intersection is requested
name|String
index|[]
name|confs
init|=
name|confName
operator|.
name|split
argument_list|(
literal|"\\+"
argument_list|)
decl_stmt|;
if|if
condition|(
name|confs
operator|.
name|length
operator|<=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Configuration
argument_list|>
name|intersectedConfs
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|conf
range|:
name|confs
control|)
block|{
name|Configuration
name|c
init|=
name|configurations
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"missing configuration '"
operator|+
name|conf
operator|+
literal|"' from intersection "
operator|+
name|confName
operator|+
literal|" in "
operator|+
name|this
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|intersectedConfs
operator|.
name|put
argument_list|(
name|conf
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ConfigurationIntersection
argument_list|(
name|confName
argument_list|,
name|intersectedConfs
argument_list|)
return|;
block|}
return|return
name|configuration
return|;
block|}
specifier|public
name|Artifact
index|[]
name|getArtifacts
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
name|Configuration
name|c
init|=
name|getConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Artifact
index|[
literal|0
index|]
return|;
block|}
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
name|artifactsByConf
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|ConfigurationIntersection
condition|)
block|{
name|ConfigurationIntersection
name|intersection
init|=
operator|(
name|ConfigurationIntersection
operator|)
name|c
decl_stmt|;
name|Set
argument_list|<
name|Artifact
argument_list|>
name|intersectedArtifacts
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|intersect
range|:
name|intersection
operator|.
name|getIntersectedConfigurationNames
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|arts
init|=
name|getArtifactsIncludingExtending
argument_list|(
name|intersect
argument_list|)
decl_stmt|;
if|if
condition|(
name|intersectedArtifacts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|intersectedArtifacts
operator|.
name|addAll
argument_list|(
name|arts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intersectedArtifacts
operator|.
name|retainAll
argument_list|(
name|arts
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|artifacts
operator|!=
literal|null
condition|)
block|{
name|intersectedArtifacts
operator|.
name|addAll
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
block|}
return|return
name|intersectedArtifacts
operator|.
name|toArray
argument_list|(
operator|new
name|Artifact
index|[
name|intersectedArtifacts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
if|else if
condition|(
name|c
operator|instanceof
name|ConfigurationGroup
condition|)
block|{
name|ConfigurationGroup
name|group
init|=
operator|(
name|ConfigurationGroup
operator|)
name|c
decl_stmt|;
name|Set
argument_list|<
name|Artifact
argument_list|>
name|groupArtifacts
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|member
range|:
name|group
operator|.
name|getMembersConfigurationNames
argument_list|()
control|)
block|{
name|groupArtifacts
operator|.
name|addAll
argument_list|(
name|getArtifactsIncludingExtending
argument_list|(
name|member
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifacts
operator|!=
literal|null
condition|)
block|{
name|groupArtifacts
operator|.
name|addAll
argument_list|(
name|artifacts
argument_list|)
expr_stmt|;
block|}
return|return
name|groupArtifacts
operator|.
name|toArray
argument_list|(
operator|new
name|Artifact
index|[
name|groupArtifacts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|artifacts
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Artifact
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
name|artifacts
operator|.
name|toArray
argument_list|(
operator|new
name|Artifact
index|[
name|artifacts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|getArtifactsIncludingExtending
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
name|Set
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|arts
init|=
name|artifactsByConf
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|arts
operator|!=
literal|null
condition|)
block|{
name|artifacts
operator|.
name|addAll
argument_list|(
name|arts
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Configuration
name|extendingConf
range|:
name|findConfigurationExtending
argument_list|(
name|conf
argument_list|,
name|getConfigurations
argument_list|()
argument_list|)
control|)
block|{
name|arts
operator|=
name|artifactsByConf
operator|.
name|get
argument_list|(
name|extendingConf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|arts
operator|!=
literal|null
condition|)
block|{
name|artifacts
operator|.
name|addAll
argument_list|(
name|arts
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|artifacts
return|;
block|}
specifier|public
name|Artifact
index|[]
name|getAllArtifacts
parameter_list|()
block|{
return|return
name|artifacts
operator|.
name|toArray
argument_list|(
operator|new
name|Artifact
index|[
name|artifacts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|DependencyDescriptor
index|[]
name|getDependencies
parameter_list|()
block|{
return|return
name|dependencies
operator|.
name|toArray
argument_list|(
operator|new
name|DependencyDescriptor
index|[
name|dependencies
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dependsOn
parameter_list|(
name|VersionMatcher
name|matcher
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|)
block|{
for|for
control|(
name|DependencyDescriptor
name|dd
range|:
name|dependencies
control|)
block|{
if|if
condition|(
name|dd
operator|.
name|getDependencyId
argument_list|()
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|matcher
operator|.
name|accept
argument_list|(
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|md
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|toIvyFile
parameter_list|(
name|File
name|destFile
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
if|if
condition|(
name|parser
operator|!=
literal|null
operator|&&
name|resource
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|toIvyFile
argument_list|(
name|resource
operator|.
name|openStream
argument_list|()
argument_list|,
name|resource
argument_list|,
name|destFile
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|this
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|revId
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|revId
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|DefaultModuleDescriptor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DefaultModuleDescriptor
name|other
init|=
operator|(
name|DefaultModuleDescriptor
operator|)
name|obj
decl_stmt|;
return|return
name|revId
operator|==
literal|null
condition|?
name|other
operator|.
name|revId
operator|==
literal|null
else|:
name|revId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|revId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"module: "
operator|+
name|revId
operator|+
literal|" status="
operator|+
name|status
operator|+
literal|" publication="
operator|+
name|publicationDate
operator|+
literal|" configurations="
operator|+
name|configurations
operator|+
literal|" artifacts="
operator|+
name|artifactsByConf
operator|+
literal|" dependencies="
operator|+
name|dependencies
return|;
block|}
specifier|public
name|void
name|setDefault
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|isDefault
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * regular expressions as explained in Pattern class may be used in ModuleId organisation and      * name      *      * @param moduleId ditto      * @param matcher PatternMatcher      * @param manager ConflictManager      */
specifier|public
name|void
name|addConflictManager
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|PatternMatcher
name|matcher
parameter_list|,
name|ConflictManager
name|manager
parameter_list|)
block|{
name|conflictManagers
operator|.
name|defineRule
argument_list|(
operator|new
name|MapMatcher
argument_list|(
name|moduleId
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|matcher
argument_list|)
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ConflictManager
name|getConflictManager
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|)
block|{
return|return
name|conflictManagers
operator|.
name|getRule
argument_list|(
name|moduleId
argument_list|)
return|;
block|}
specifier|public
name|void
name|addDependencyDescriptorMediator
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|PatternMatcher
name|matcher
parameter_list|,
name|DependencyDescriptorMediator
name|ddm
parameter_list|)
block|{
name|dependencyDescriptorMediators
operator|.
name|defineRule
argument_list|(
operator|new
name|MapMatcher
argument_list|(
name|moduleId
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|matcher
argument_list|)
argument_list|,
name|ddm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DependencyDescriptor
name|mediate
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|)
block|{
for|for
control|(
name|DependencyDescriptorMediator
name|mediator
range|:
name|dependencyDescriptorMediators
operator|.
name|getRules
argument_list|(
name|dd
operator|.
name|getDependencyId
argument_list|()
argument_list|)
control|)
block|{
name|dd
operator|=
name|mediator
operator|.
name|mediate
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
return|return
name|dd
return|;
block|}
specifier|public
name|ModuleRules
argument_list|<
name|DependencyDescriptorMediator
argument_list|>
name|getAllDependencyDescriptorMediators
parameter_list|()
block|{
return|return
name|dependencyDescriptorMediators
operator|.
name|clone
argument_list|()
return|;
block|}
specifier|public
name|void
name|addLicense
parameter_list|(
name|License
name|license
parameter_list|)
block|{
name|licenses
operator|.
name|add
argument_list|(
name|license
argument_list|)
expr_stmt|;
block|}
specifier|public
name|License
index|[]
name|getLicenses
parameter_list|()
block|{
return|return
name|licenses
operator|.
name|toArray
argument_list|(
operator|new
name|License
index|[
name|licenses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
name|getHomePage
parameter_list|()
block|{
return|return
name|homePage
return|;
block|}
specifier|public
name|void
name|setHomePage
parameter_list|(
name|String
name|homePage
parameter_list|)
block|{
name|this
operator|.
name|homePage
operator|=
name|homePage
expr_stmt|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
specifier|public
name|void
name|setLastModified
parameter_list|(
name|long
name|lastModified
parameter_list|)
block|{
name|this
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
block|}
specifier|public
name|Namespace
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
specifier|public
name|boolean
name|isNamespaceUseful
parameter_list|()
block|{
for|for
control|(
name|DependencyDescriptor
name|dd
range|:
name|dependencies
control|)
block|{
if|if
condition|(
name|dd
operator|.
name|getAllExcludeRules
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setNamespace
parameter_list|(
name|Namespace
name|ns
parameter_list|)
block|{
name|namespace
operator|=
name|ns
expr_stmt|;
block|}
comment|/**      * Throws an exception if the module descriptor is inconsistent. For the moment, only extended      * configurations existence and cycles are checked      */
specifier|public
name|void
name|check
parameter_list|()
block|{
name|Stack
argument_list|<
name|String
argument_list|>
name|confs
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Configuration
name|conf
range|:
name|configurations
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|ext
range|:
name|conf
operator|.
name|getExtends
argument_list|()
control|)
block|{
name|confs
operator|.
name|push
argument_list|(
name|conf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|checkConf
argument_list|(
name|confs
argument_list|,
name|ext
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|confs
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkConf
parameter_list|(
name|Stack
argument_list|<
name|String
argument_list|>
name|confs
parameter_list|,
name|String
name|confName
parameter_list|)
block|{
name|int
name|index
init|=
name|confs
operator|.
name|indexOf
argument_list|(
name|confName
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|StringBuilder
name|cycle
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|confs
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|cycle
operator|.
name|append
argument_list|(
name|confs
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
block|}
name|cycle
operator|.
name|append
argument_list|(
name|confName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"illegal cycle detected in configuration extension: "
operator|+
name|cycle
argument_list|)
throw|;
block|}
name|Configuration
name|conf
init|=
name|getConfiguration
argument_list|(
name|confName
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unknown configuration '"
operator|+
name|confName
operator|+
literal|"'. It is extended by "
operator|+
name|confs
operator|.
name|get
argument_list|(
name|confs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|ext
range|:
name|conf
operator|.
name|getExtends
argument_list|()
control|)
block|{
name|confs
operator|.
name|push
argument_list|(
name|conf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|checkConf
argument_list|(
name|confs
argument_list|,
name|ext
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|confs
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDefaultConf
parameter_list|()
block|{
return|return
name|defaultConf
return|;
block|}
specifier|public
name|void
name|setDefaultConf
parameter_list|(
name|String
name|defaultConf
parameter_list|)
block|{
name|this
operator|.
name|defaultConf
operator|=
name|defaultConf
expr_stmt|;
block|}
specifier|public
name|String
name|getDefaultConfMapping
parameter_list|()
block|{
return|return
name|defaultConfMapping
return|;
block|}
specifier|public
name|void
name|setDefaultConfMapping
parameter_list|(
name|String
name|defaultConfMapping
parameter_list|)
block|{
name|this
operator|.
name|defaultConfMapping
operator|=
name|defaultConfMapping
expr_stmt|;
block|}
specifier|public
name|void
name|setMappingOverride
parameter_list|(
name|boolean
name|override
parameter_list|)
block|{
name|mappingOverride
operator|=
name|override
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMappingOverride
parameter_list|()
block|{
return|return
name|mappingOverride
return|;
block|}
specifier|public
name|String
name|getAttribute
parameter_list|(
name|String
name|attName
parameter_list|)
block|{
return|return
name|resolvedRevId
operator|.
name|getAttribute
argument_list|(
name|attName
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|resolvedRevId
operator|.
name|getAttributes
argument_list|()
return|;
block|}
specifier|public
name|String
name|getExtraAttribute
parameter_list|(
name|String
name|attName
parameter_list|)
block|{
return|return
name|resolvedRevId
operator|.
name|getExtraAttribute
argument_list|(
name|attName
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getExtraAttributes
parameter_list|()
block|{
return|return
name|resolvedRevId
operator|.
name|getExtraAttributes
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getQualifiedExtraAttributes
parameter_list|()
block|{
return|return
name|resolvedRevId
operator|.
name|getQualifiedExtraAttributes
argument_list|()
return|;
block|}
specifier|public
name|ModuleDescriptorParser
name|getParser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
specifier|public
name|void
name|addExcludeRule
parameter_list|(
name|ExcludeRule
name|rule
parameter_list|)
block|{
name|excludeRules
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|canExclude
parameter_list|()
block|{
return|return
operator|!
name|excludeRules
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Only works when namespace is properly set. The behaviour is not specified if namespace is      * not set.      *      * @param moduleConfigurations String[]      * @param artifactId ditto      * @return boolean      */
specifier|public
name|boolean
name|doesExclude
parameter_list|(
name|String
index|[]
name|moduleConfigurations
parameter_list|,
name|ArtifactId
name|artifactId
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|artifactId
operator|=
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|artifactId
argument_list|,
name|namespace
operator|.
name|getFromSystemTransformer
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExcludeRule
name|rule
range|:
name|getExcludeRules
argument_list|(
name|moduleConfigurations
argument_list|)
control|)
block|{
if|if
condition|(
name|MatcherHelper
operator|.
name|matches
argument_list|(
name|rule
operator|.
name|getMatcher
argument_list|()
argument_list|,
name|rule
operator|.
name|getId
argument_list|()
argument_list|,
name|artifactId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|ExcludeRule
index|[]
name|getAllExcludeRules
parameter_list|()
block|{
return|return
name|excludeRules
operator|.
name|toArray
argument_list|(
operator|new
name|ExcludeRule
index|[
name|excludeRules
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|ExcludeRule
index|[]
name|getExcludeRules
parameter_list|(
name|String
index|[]
name|moduleConfigurations
parameter_list|)
block|{
name|Set
argument_list|<
name|ExcludeRule
argument_list|>
name|rules
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExcludeRule
name|rule
range|:
name|excludeRules
control|)
block|{
name|String
index|[]
name|ruleConfs
init|=
name|rule
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
name|containsAny
argument_list|(
name|ruleConfs
argument_list|,
name|moduleConfigurations
argument_list|)
condition|)
block|{
name|rules
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rules
operator|.
name|toArray
argument_list|(
operator|new
name|ExcludeRule
index|[
name|rules
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|containsAny
parameter_list|(
name|String
index|[]
name|arr1
parameter_list|,
name|String
index|[]
name|arr2
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|arr1
argument_list|)
argument_list|)
operator|.
name|removeAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|arr2
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getExtraAttributesNamespaces
parameter_list|()
block|{
return|return
name|extraAttributesNamespaces
return|;
block|}
specifier|public
name|void
name|addExtraAttributeNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|extraAttributesNamespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|addExtraInfo
parameter_list|(
name|String
name|infoKey
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|extraInfos
operator|.
name|add
argument_list|(
operator|new
name|ExtraInfoHolder
argument_list|(
name|infoKey
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getExtraInfo
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExtraInfoHolder
name|extraInfo
range|:
name|extraInfos
control|)
block|{
name|populateExtraInfoMap
argument_list|(
name|map
argument_list|,
name|extraInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|private
name|void
name|populateExtraInfoMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|ExtraInfoHolder
name|extraInfo
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|extraInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|extraInfo
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExtraInfoHolder
name|nested
range|:
name|extraInfo
operator|.
name|getNestedExtraInfoHolder
argument_list|()
control|)
block|{
name|populateExtraInfoMap
argument_list|(
name|map
argument_list|,
name|nested
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ExtraInfoHolder
argument_list|>
name|getExtraInfos
parameter_list|()
block|{
return|return
name|extraInfos
return|;
block|}
specifier|public
name|void
name|addExtraInfo
parameter_list|(
name|ExtraInfoHolder
name|extraInfo
parameter_list|)
block|{
name|extraInfos
operator|.
name|add
argument_list|(
name|extraInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getExtraInfoContentByTagName
parameter_list|(
name|String
name|tagName
parameter_list|)
block|{
name|ExtraInfoHolder
name|extraInfoByTagName
init|=
name|getExtraInfoByTagName
argument_list|(
name|tagName
argument_list|)
decl_stmt|;
if|if
condition|(
name|extraInfoByTagName
operator|!=
literal|null
condition|)
block|{
return|return
name|extraInfoByTagName
operator|.
name|getContent
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|ExtraInfoHolder
name|getExtraInfoByTagName
parameter_list|(
name|String
name|tagName
parameter_list|)
block|{
for|for
control|(
name|ExtraInfoHolder
name|extraInfoHolder
range|:
name|extraInfos
control|)
block|{
if|if
condition|(
name|extraInfoHolder
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|tagName
argument_list|)
condition|)
block|{
return|return
name|extraInfoHolder
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

