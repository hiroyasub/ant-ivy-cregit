begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|extendable
operator|.
name|DefaultExtendableItem
import|;
end_import

begin_comment
comment|/**  * Represents a module configuration  */
end_comment

begin_class
specifier|public
class|class
name|Configuration
extends|extends
name|DefaultExtendableItem
implements|implements
name|InheritableItem
block|{
specifier|public
specifier|static
specifier|final
class|class
name|Visibility
block|{
specifier|public
specifier|static
specifier|final
name|Visibility
name|PUBLIC
init|=
operator|new
name|Visibility
argument_list|(
literal|"public"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Visibility
name|PRIVATE
init|=
operator|new
name|Visibility
argument_list|(
literal|"private"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Visibility
name|getVisibility
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"private"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|PRIVATE
return|;
block|}
if|else if
condition|(
literal|"public"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|PUBLIC
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknwon visibility "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Visibility
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
specifier|public
specifier|static
name|Collection
comment|/*<Configuration> */
name|findConfigurationExtending
parameter_list|(
name|String
name|conf
parameter_list|,
name|Configuration
index|[]
name|confs
parameter_list|)
block|{
name|Collection
name|extendingConfs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|confs
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|asList
argument_list|(
name|confs
index|[
name|i
index|]
operator|.
name|getExtends
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|extendingConfs
operator|.
name|add
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|extendingConfs
operator|.
name|addAll
argument_list|(
name|findConfigurationExtending
argument_list|(
name|confs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|confs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|extendingConfs
return|;
block|}
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|description
decl_stmt|;
specifier|private
name|String
index|[]
name|extendsFrom
decl_stmt|;
specifier|private
name|Visibility
name|visibility
decl_stmt|;
specifier|private
name|boolean
name|transitive
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|deprecated
decl_stmt|;
specifier|private
name|ModuleRevisionId
name|sourceModule
decl_stmt|;
comment|/**      * Creates a new configuration.      *       * @param name      *            the name of the configuration      */
specifier|public
name|Configuration
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Configuration
parameter_list|(
name|Configuration
name|source
parameter_list|,
name|ModuleRevisionId
name|sourceModule
parameter_list|)
block|{
name|this
argument_list|(
name|source
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|source
operator|.
name|getQualifiedExtraAttributes
argument_list|()
argument_list|,
name|source
operator|.
name|getName
argument_list|()
argument_list|,
name|source
operator|.
name|getVisibility
argument_list|()
argument_list|,
name|source
operator|.
name|getDescription
argument_list|()
argument_list|,
name|source
operator|.
name|getExtends
argument_list|()
argument_list|,
name|source
operator|.
name|isTransitive
argument_list|()
argument_list|,
name|source
operator|.
name|getDeprecated
argument_list|()
argument_list|,
name|sourceModule
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new configuration.      *       * @param name      *            the name of the configuration      * @param visibility      *            the visibility of the configuration      * @param description      *            a description      * @param ext      *            the configurations to extend from      * @param transitive      *            indicates if the configuration is transitive      * @param deprecated      *            the deprecation message      */
specifier|public
name|Configuration
parameter_list|(
name|String
name|name
parameter_list|,
name|Visibility
name|visibility
parameter_list|,
name|String
name|description
parameter_list|,
name|String
index|[]
name|ext
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|String
name|deprecated
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|name
argument_list|,
name|visibility
argument_list|,
name|description
argument_list|,
name|ext
argument_list|,
name|transitive
argument_list|,
name|deprecated
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Configuration
parameter_list|(
name|Map
name|attributes
parameter_list|,
name|Map
name|extraAttributes
parameter_list|,
name|String
name|name
parameter_list|,
name|Visibility
name|visibility
parameter_list|,
name|String
name|description
parameter_list|,
name|String
index|[]
name|ext
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|String
name|deprecated
parameter_list|,
name|ModuleRevisionId
name|sourceModule
parameter_list|)
block|{
name|super
argument_list|(
name|attributes
argument_list|,
name|extraAttributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null configuration name not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|visibility
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null visibility not allowed"
argument_list|)
throw|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|visibility
operator|=
name|visibility
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
if|if
condition|(
name|ext
operator|==
literal|null
condition|)
block|{
name|extendsFrom
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|extendsFrom
operator|=
operator|new
name|String
index|[
name|ext
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ext
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|extendsFrom
index|[
name|i
index|]
operator|=
name|ext
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|transitive
operator|=
name|transitive
expr_stmt|;
name|this
operator|.
name|deprecated
operator|=
name|deprecated
expr_stmt|;
name|this
operator|.
name|sourceModule
operator|=
name|sourceModule
expr_stmt|;
block|}
comment|/**      * Returns the deprecation message, or<tt>null</tt> if not specified.      *       * @return Returns the deprecation message.      */
specifier|public
name|String
name|getDeprecated
parameter_list|()
block|{
return|return
name|deprecated
return|;
block|}
comment|/**      * @return Returns the description. It may be null.      */
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
comment|/**      * @return Returns the extends. May be empty, but never null.      */
specifier|public
name|String
index|[]
name|getExtends
parameter_list|()
block|{
return|return
name|extendsFrom
return|;
block|}
comment|/**      * @return Returns the name. Never null;      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return Returns the visibility. Never null.      */
specifier|public
name|Visibility
name|getVisibility
parameter_list|()
block|{
return|return
name|visibility
return|;
block|}
comment|/**      * @return Returns the transitive.      */
specifier|public
specifier|final
name|boolean
name|isTransitive
parameter_list|()
block|{
return|return
name|transitive
return|;
block|}
specifier|public
name|ModuleRevisionId
name|getSourceModule
parameter_list|()
block|{
return|return
name|sourceModule
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Configuration
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
operator|(
name|Configuration
operator|)
name|obj
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|void
name|replaceWildcards
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
if|if
condition|(
name|this
operator|!=
name|md
operator|.
name|getConfiguration
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The given ModuleDescriptor doesn't own this configuration!"
argument_list|)
throw|;
block|}
name|Configuration
index|[]
name|configs
init|=
name|md
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
name|Set
name|newExtends
init|=
operator|new
name|LinkedHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|extendsFrom
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|extendsFrom
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|addOther
argument_list|(
name|configs
argument_list|,
literal|null
argument_list|,
name|newExtends
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"*(public)"
operator|.
name|equals
argument_list|(
name|extendsFrom
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|addOther
argument_list|(
name|configs
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
name|newExtends
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"*(private)"
operator|.
name|equals
argument_list|(
name|extendsFrom
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|addOther
argument_list|(
name|configs
argument_list|,
name|Visibility
operator|.
name|PRIVATE
argument_list|,
name|newExtends
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newExtends
operator|.
name|add
argument_list|(
name|extendsFrom
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|extendsFrom
operator|=
operator|(
name|String
index|[]
operator|)
name|newExtends
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|newExtends
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addOther
parameter_list|(
name|Configuration
index|[]
name|allConfigs
parameter_list|,
name|Visibility
name|visibility
parameter_list|,
name|Set
name|configs
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allConfigs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|currentName
init|=
name|allConfigs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
operator|&&
operator|(
operator|(
name|visibility
operator|==
literal|null
operator|)
operator|||
name|visibility
operator|.
name|equals
argument_list|(
name|allConfigs
index|[
name|i
index|]
operator|.
name|getVisibility
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|configs
operator|.
name|add
argument_list|(
name|currentName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

