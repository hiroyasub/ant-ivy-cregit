begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|extendable
operator|.
name|DefaultExtendableItem
import|;
end_import

begin_comment
comment|/**  * Represents a module configuration  */
end_comment

begin_class
specifier|public
class|class
name|Configuration
extends|extends
name|DefaultExtendableItem
block|{
specifier|public
specifier|static
class|class
name|Visibility
block|{
specifier|public
specifier|static
name|Visibility
name|PUBLIC
init|=
operator|new
name|Visibility
argument_list|(
literal|"public"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Visibility
name|PRIVATE
init|=
operator|new
name|Visibility
argument_list|(
literal|"private"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Visibility
name|getVisibility
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"private"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|PRIVATE
return|;
block|}
if|else if
condition|(
literal|"public"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|PUBLIC
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknwon visibility "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|_name
decl_stmt|;
specifier|private
name|Visibility
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|_name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
block|}
specifier|private
name|String
name|_name
decl_stmt|;
specifier|private
name|String
name|_description
decl_stmt|;
specifier|private
name|String
index|[]
name|_extends
decl_stmt|;
specifier|private
name|Visibility
name|_visibility
decl_stmt|;
specifier|private
name|boolean
name|_transitive
init|=
literal|true
decl_stmt|;
comment|/**      * @param name      * @param visibility      * @param description      * @param ext      */
specifier|public
name|Configuration
parameter_list|(
name|String
name|name
parameter_list|,
name|Visibility
name|visibility
parameter_list|,
name|String
name|description
parameter_list|,
name|String
index|[]
name|ext
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|visibility
argument_list|,
name|description
argument_list|,
name|ext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param name      * @param visibility      * @param description      * @param ext      * @param transitive      */
specifier|public
name|Configuration
parameter_list|(
name|String
name|name
parameter_list|,
name|Visibility
name|visibility
parameter_list|,
name|String
name|description
parameter_list|,
name|String
index|[]
name|ext
parameter_list|,
name|boolean
name|transitive
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null configuration name not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|visibility
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null visibility not allowed"
argument_list|)
throw|;
block|}
name|_name
operator|=
name|name
expr_stmt|;
name|_visibility
operator|=
name|visibility
expr_stmt|;
name|_description
operator|=
name|description
expr_stmt|;
if|if
condition|(
name|ext
operator|==
literal|null
condition|)
block|{
name|_extends
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|_extends
operator|=
operator|new
name|String
index|[
name|ext
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ext
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|_extends
index|[
name|i
index|]
operator|=
name|ext
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
name|_transitive
operator|=
name|transitive
expr_stmt|;
block|}
comment|/**      * @param name      */
specifier|public
name|Configuration
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the description. It may be null.      */
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|_description
return|;
block|}
comment|/**      * @return Returns the extends. May be empty, but never null.      */
specifier|public
name|String
index|[]
name|getExtends
parameter_list|()
block|{
return|return
name|_extends
return|;
block|}
comment|/**      * @return Returns the name. Never null;      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
comment|/**      * @return Returns the visibility. Never null.      */
specifier|public
name|Visibility
name|getVisibility
parameter_list|()
block|{
return|return
name|_visibility
return|;
block|}
comment|/**      * @return Returns the transitive.      */
specifier|public
specifier|final
name|boolean
name|isTransitive
parameter_list|()
block|{
return|return
name|_transitive
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Configuration
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
operator|(
name|Configuration
operator|)
name|obj
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|void
name|replaceWildcards
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
if|if
condition|(
name|this
operator|!=
name|md
operator|.
name|getConfiguration
argument_list|(
name|_name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The given ModuleDescriptor doesn't own this configuration!"
argument_list|)
throw|;
block|}
name|Configuration
index|[]
name|configs
init|=
name|md
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
name|Set
name|newExtends
init|=
operator|new
name|LinkedHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|_extends
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|_extends
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|addOther
argument_list|(
name|configs
argument_list|,
literal|null
argument_list|,
name|newExtends
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"*(public)"
operator|.
name|equals
argument_list|(
name|_extends
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|addOther
argument_list|(
name|configs
argument_list|,
name|Visibility
operator|.
name|PUBLIC
argument_list|,
name|newExtends
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"*(private)"
operator|.
name|equals
argument_list|(
name|_extends
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|addOther
argument_list|(
name|configs
argument_list|,
name|Visibility
operator|.
name|PRIVATE
argument_list|,
name|newExtends
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newExtends
operator|.
name|add
argument_list|(
name|_extends
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|_extends
operator|=
operator|(
name|String
index|[]
operator|)
name|newExtends
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|newExtends
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addOther
parameter_list|(
name|Configuration
index|[]
name|allConfigs
parameter_list|,
name|Visibility
name|visibility
parameter_list|,
name|Set
name|configs
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allConfigs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|currentName
init|=
name|allConfigs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|_name
operator|.
name|equals
argument_list|(
name|currentName
argument_list|)
operator|&&
operator|(
operator|(
name|visibility
operator|==
literal|null
operator|)
operator|||
name|visibility
operator|.
name|equals
argument_list|(
name|allConfigs
index|[
name|i
index|]
operator|.
name|getVisibility
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|configs
operator|.
name|add
argument_list|(
name|currentName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

