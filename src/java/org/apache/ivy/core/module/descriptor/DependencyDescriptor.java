begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ArtifactId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|extendable
operator|.
name|ExtendableItem
import|;
end_import

begin_comment
comment|/**  * Describes a dependency from a depender to a dependee.  *<p>  * The main information this descriptor contains is the constraint on the dependency. There is  * actually two kind of dependency constraints: the default dependency constraint, which can be  * obtained with {@link #getDependencyRevisionId()}, and corresponds to the<code>rev</code>  * attribute in Ivy files. This is the constraint as it should be honored by Ivy in default resolve  * mode.  *</p>  *<p>  * Then there is the dynamic constraint, which can either be the same as the default constraint, or  * the original dependency constraint when an Ivy file is delivered an published to a  * repository. This dynamic constraint is returned by  * {@link #getDynamicConstraintDependencyRevisionId()}, and corresponds to the  *<code>revconstraint</code> attribute in the Ivy file. In some resolve mode, this constraint can  * be used instead of the default dependency constraint when performing dependency resolution.  *</p>  */
end_comment

begin_interface
specifier|public
interface|interface
name|DependencyDescriptor
extends|extends
name|ExtendableItem
extends|,
name|InheritableItem
block|{
name|ModuleId
name|getDependencyId
parameter_list|()
function_decl|;
comment|/**      * Used to indicate that this revision must be used in case of conflicts, independently of      * conflicts manager. This only works for direct dependencies, and not transitive ones.      *      * @return true if this dependency should be used, false if conflicts manager can do its work.      */
name|boolean
name|isForce
parameter_list|()
function_decl|;
comment|/**      * Used to indicate that this dependency is a changing one. A changing dependency in ivy means      * that the revision may have its artifacts modified without revision change. When new artifacts      * are published a new ivy file should also be published with a new publication date to indicate      * to ivy that artifacts have changed and that they should be downloaded again.      *      * @return true if this dependency is a changing one      */
name|boolean
name|isChanging
parameter_list|()
function_decl|;
name|boolean
name|isTransitive
parameter_list|()
function_decl|;
name|ModuleRevisionId
name|getParentRevisionId
parameter_list|()
function_decl|;
comment|/**      * Returns the constraint on dependency this descriptor represents.      *      * @return the constraint on dependency.      */
name|ModuleRevisionId
name|getDependencyRevisionId
parameter_list|()
function_decl|;
comment|/**      * Returns the dynamic constraint on dependency this descriptor represents.      *      * @return the dynamic constraint on dependency, or exact constraint if no dynamic constraint is      *         specified.      */
name|ModuleRevisionId
name|getDynamicConstraintDependencyRevisionId
parameter_list|()
function_decl|;
name|String
index|[]
name|getModuleConfigurations
parameter_list|()
function_decl|;
name|String
index|[]
name|getDependencyConfigurations
parameter_list|(
name|String
name|moduleConfiguration
parameter_list|,
name|String
name|requestedConfiguration
parameter_list|)
function_decl|;
name|String
index|[]
name|getDependencyConfigurations
parameter_list|(
name|String
name|moduleConfiguration
parameter_list|)
function_decl|;
name|String
index|[]
name|getDependencyConfigurations
parameter_list|(
name|String
index|[]
name|moduleConfigurations
parameter_list|)
function_decl|;
name|Namespace
name|getNamespace
parameter_list|()
function_decl|;
name|DependencyArtifactDescriptor
index|[]
name|getAllDependencyArtifacts
parameter_list|()
function_decl|;
name|DependencyArtifactDescriptor
index|[]
name|getDependencyArtifacts
parameter_list|(
name|String
name|moduleConfigurations
parameter_list|)
function_decl|;
name|DependencyArtifactDescriptor
index|[]
name|getDependencyArtifacts
parameter_list|(
name|String
index|[]
name|moduleConfigurations
parameter_list|)
function_decl|;
name|IncludeRule
index|[]
name|getAllIncludeRules
parameter_list|()
function_decl|;
name|IncludeRule
index|[]
name|getIncludeRules
parameter_list|(
name|String
name|moduleConfigurations
parameter_list|)
function_decl|;
name|IncludeRule
index|[]
name|getIncludeRules
parameter_list|(
name|String
index|[]
name|moduleConfigurations
parameter_list|)
function_decl|;
name|ExcludeRule
index|[]
name|getAllExcludeRules
parameter_list|()
function_decl|;
name|ExcludeRule
index|[]
name|getExcludeRules
parameter_list|(
name|String
name|moduleConfigurations
parameter_list|)
function_decl|;
name|ExcludeRule
index|[]
name|getExcludeRules
parameter_list|(
name|String
index|[]
name|moduleConfigurations
parameter_list|)
function_decl|;
comment|/**      * Returns true if      *      * @param moduleConfigurations ditto      * @param artifactId ditto      * @return boolean      */
name|boolean
name|doesExclude
parameter_list|(
name|String
index|[]
name|moduleConfigurations
parameter_list|,
name|ArtifactId
name|artifactId
parameter_list|)
function_decl|;
comment|/**      * @return true if this descriptor contains any exclusion rule      */
name|boolean
name|canExclude
parameter_list|()
function_decl|;
name|DependencyDescriptor
name|asSystem
parameter_list|()
function_decl|;
comment|/**      * Clones current dependency descriptor with another revision.      *      * @param revision      *            the revision of the cloned dependency descriptor      * @return the cloned dependency descriptor      * @throws IllegalArgumentException      *             if the given {@link ModuleRevisionId} has not the same {@link ModuleId} as the      *             {@link ModuleRevisionId} of this descriptor.      */
name|DependencyDescriptor
name|clone
parameter_list|(
name|ModuleRevisionId
name|revision
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

