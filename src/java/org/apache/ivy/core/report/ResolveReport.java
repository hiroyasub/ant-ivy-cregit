begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ResolutionCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|IvyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|report
operator|.
name|ReportOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_comment
comment|/**  * Represents a whole resolution report for a module  */
end_comment

begin_class
specifier|public
class|class
name|ResolveReport
block|{
specifier|private
name|ModuleDescriptor
name|md
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ConfigurationResolveReport
argument_list|>
name|confReports
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|problemMessages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * the list of all dependencies resolved, ordered from the more dependent to the less dependent      */
specifier|private
name|List
argument_list|<
name|IvyNode
argument_list|>
name|dependencies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|resolveTime
decl_stmt|;
specifier|private
name|long
name|downloadTime
decl_stmt|;
specifier|private
name|String
name|resolveId
decl_stmt|;
specifier|private
name|long
name|downloadSize
decl_stmt|;
specifier|public
name|ResolveReport
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|)
block|{
name|this
argument_list|(
name|md
argument_list|,
name|ResolveOptions
operator|.
name|getDefaultResolveId
argument_list|(
name|md
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResolveReport
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
name|resolveId
parameter_list|)
block|{
name|this
operator|.
name|md
operator|=
name|md
expr_stmt|;
name|this
operator|.
name|resolveId
operator|=
name|resolveId
expr_stmt|;
block|}
specifier|public
name|void
name|addReport
parameter_list|(
name|String
name|conf
parameter_list|,
name|ConfigurationResolveReport
name|report
parameter_list|)
block|{
name|confReports
operator|.
name|put
argument_list|(
name|conf
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ConfigurationResolveReport
name|getConfigurationReport
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
return|return
name|confReports
operator|.
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|getConfigurations
parameter_list|()
block|{
return|return
name|confReports
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|confReports
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasError
parameter_list|()
block|{
for|for
control|(
name|ConfigurationResolveReport
name|report
range|:
name|confReports
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|report
operator|.
name|hasError
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|output
parameter_list|(
name|ReportOutputter
index|[]
name|outputters
parameter_list|,
name|ResolutionCacheManager
name|cacheMgr
parameter_list|,
name|ResolveOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|ReportOutputter
name|outputter
range|:
name|outputters
control|)
block|{
name|outputter
operator|.
name|output
argument_list|(
name|this
argument_list|,
name|cacheMgr
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ModuleDescriptor
name|getModuleDescriptor
parameter_list|()
block|{
return|return
name|md
return|;
block|}
specifier|public
name|IvyNode
index|[]
name|getEvictedNodes
parameter_list|()
block|{
name|Collection
argument_list|<
name|IvyNode
argument_list|>
name|all
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ConfigurationResolveReport
name|report
range|:
name|confReports
operator|.
name|values
argument_list|()
control|)
block|{
name|all
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|report
operator|.
name|getEvictedNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|all
operator|.
name|toArray
argument_list|(
operator|new
name|IvyNode
index|[
name|all
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|IvyNode
index|[]
name|getUnresolvedDependencies
parameter_list|()
block|{
name|Collection
argument_list|<
name|IvyNode
argument_list|>
name|all
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ConfigurationResolveReport
name|report
range|:
name|confReports
operator|.
name|values
argument_list|()
control|)
block|{
name|all
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|report
operator|.
name|getUnresolvedDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|all
operator|.
name|toArray
argument_list|(
operator|new
name|IvyNode
index|[
name|all
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Get every report on the download requests.      *      * @return the list of reports, never<code>null</code>      */
specifier|public
name|ArtifactDownloadReport
index|[]
name|getFailedArtifactsReports
parameter_list|()
block|{
return|return
name|ConfigurationResolveReport
operator|.
name|filterOutMergedArtifacts
argument_list|(
name|getArtifactsReports
argument_list|(
name|DownloadStatus
operator|.
name|FAILED
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get every report on the download requests.      *      * @return the list of reports, never<code>null</code>      */
specifier|public
name|ArtifactDownloadReport
index|[]
name|getAllArtifactsReports
parameter_list|()
block|{
return|return
name|getArtifactsReports
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Get the report on the download requests. The list of download report can be restricted to a      * specific download status, and also remove the download report for the evicted modules.      *      * @param downloadStatus      *            the status of download to retrieve. Set it to<code>null</code> for no restriction      *            on the download status      * @param withEvicted      *            set it to<code>true</code> if the report for the evicted modules have to be      *            retrieved,<code>false</code> to exclude reports from modules evicted in all      *            configurations.      * @return the list of reports, never<code>null</code>      * @see ConfigurationResolveReport#getArtifactsReports(DownloadStatus, boolean)      */
specifier|public
name|ArtifactDownloadReport
index|[]
name|getArtifactsReports
parameter_list|(
name|DownloadStatus
name|downloadStatus
parameter_list|,
name|boolean
name|withEvicted
parameter_list|)
block|{
name|Collection
argument_list|<
name|ArtifactDownloadReport
argument_list|>
name|all
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ConfigurationResolveReport
name|report
range|:
name|confReports
operator|.
name|values
argument_list|()
control|)
block|{
name|ArtifactDownloadReport
index|[]
name|reports
init|=
name|report
operator|.
name|getArtifactsReports
argument_list|(
name|downloadStatus
argument_list|,
name|withEvicted
argument_list|)
decl_stmt|;
name|all
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|reports
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|all
operator|.
name|toArray
argument_list|(
operator|new
name|ArtifactDownloadReport
index|[
name|all
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|ArtifactDownloadReport
index|[]
name|getArtifactsReports
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|Collection
argument_list|<
name|ArtifactDownloadReport
argument_list|>
name|all
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ConfigurationResolveReport
name|report
range|:
name|confReports
operator|.
name|values
argument_list|()
control|)
block|{
name|all
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|report
operator|.
name|getDownloadReports
argument_list|(
name|mrid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|all
operator|.
name|toArray
argument_list|(
operator|new
name|ArtifactDownloadReport
index|[
name|all
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|checkIfChanged
parameter_list|()
block|{
for|for
control|(
name|ConfigurationResolveReport
name|report
range|:
name|confReports
operator|.
name|values
argument_list|()
control|)
block|{
name|report
operator|.
name|checkIfChanged
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Can only be called if checkIfChanged has been called      *      * @return boolean      */
specifier|public
name|boolean
name|hasChanged
parameter_list|()
block|{
for|for
control|(
name|ConfigurationResolveReport
name|report
range|:
name|confReports
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|report
operator|.
name|hasChanged
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setProblemMessages
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|problems
parameter_list|)
block|{
name|problemMessages
operator|=
name|problems
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getProblemMessages
parameter_list|()
block|{
return|return
name|problemMessages
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllProblemMessages
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|problemMessages
argument_list|)
decl_stmt|;
for|for
control|(
name|ConfigurationResolveReport
name|r
range|:
name|confReports
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|IvyNode
name|unresolved
range|:
name|r
operator|.
name|getUnresolvedDependencies
argument_list|()
control|)
block|{
name|String
name|errMsg
init|=
name|unresolved
operator|.
name|getProblemMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|errMsg
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
literal|"unresolved dependency: "
operator|+
name|unresolved
operator|.
name|getId
argument_list|()
operator|+
literal|": "
operator|+
name|errMsg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|add
argument_list|(
literal|"unresolved dependency: "
operator|+
name|unresolved
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ArtifactDownloadReport
name|adr
range|:
name|r
operator|.
name|getFailedArtifactsReports
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
literal|"download failed: "
operator|+
name|adr
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|setDependencies
parameter_list|(
name|List
argument_list|<
name|IvyNode
argument_list|>
name|dependencies
parameter_list|,
name|Filter
argument_list|<
name|Artifact
argument_list|>
name|artifactFilter
parameter_list|)
block|{
name|this
operator|.
name|dependencies
operator|=
name|dependencies
expr_stmt|;
comment|// collect list of artifacts
name|artifacts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|IvyNode
name|dependency
range|:
name|dependencies
control|)
block|{
if|if
condition|(
operator|!
name|dependency
operator|.
name|isCompletelyEvicted
argument_list|()
operator|&&
operator|!
name|dependency
operator|.
name|hasProblem
argument_list|()
condition|)
block|{
name|artifacts
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dependency
operator|.
name|getSelectedArtifacts
argument_list|(
name|artifactFilter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// update the configurations reports with the dependencies
comment|// these reports will be completed later with download information, if any
for|for
control|(
name|String
name|dconf
range|:
name|dependency
operator|.
name|getRootModuleConfigurations
argument_list|()
control|)
block|{
name|ConfigurationResolveReport
name|configurationReport
init|=
name|getConfigurationReport
argument_list|(
name|dconf
argument_list|)
decl_stmt|;
if|if
condition|(
name|configurationReport
operator|!=
literal|null
condition|)
block|{
name|configurationReport
operator|.
name|addDependency
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Returns the list of all dependencies concerned by this report as a List of IvyNode ordered      * from the more dependent to the least one      *      * @return The list of all dependencies.      */
specifier|public
name|List
argument_list|<
name|IvyNode
argument_list|>
name|getDependencies
parameter_list|()
block|{
return|return
name|dependencies
return|;
block|}
comment|/**      * Returns the list of all artifacts which should be downloaded per this resolve To know if the      * artifact have actually been downloaded use information found in ConfigurationResolveReport.      *      * @return The list of all artifacts.      */
specifier|public
name|List
argument_list|<
name|Artifact
argument_list|>
name|getArtifacts
parameter_list|()
block|{
return|return
name|artifacts
return|;
block|}
comment|/**      * gives all the modules ids concerned by this report, from the most dependent to the least one      *      * @return a list of ModuleId      */
specifier|public
name|List
argument_list|<
name|ModuleId
argument_list|>
name|getModuleIds
parameter_list|()
block|{
name|List
argument_list|<
name|ModuleId
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IvyNode
argument_list|>
name|sortedDependencies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|dependencies
argument_list|)
decl_stmt|;
for|for
control|(
name|IvyNode
name|dependency
range|:
name|sortedDependencies
control|)
block|{
name|ModuleId
name|mid
init|=
name|dependency
operator|.
name|getResolvedId
argument_list|()
operator|.
name|getModuleId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|contains
argument_list|(
name|mid
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|mid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|setResolveTime
parameter_list|(
name|long
name|elapsedTime
parameter_list|)
block|{
name|resolveTime
operator|=
name|elapsedTime
expr_stmt|;
block|}
specifier|public
name|long
name|getResolveTime
parameter_list|()
block|{
return|return
name|resolveTime
return|;
block|}
specifier|public
name|void
name|setDownloadTime
parameter_list|(
name|long
name|elapsedTime
parameter_list|)
block|{
name|downloadTime
operator|=
name|elapsedTime
expr_stmt|;
block|}
specifier|public
name|long
name|getDownloadTime
parameter_list|()
block|{
return|return
name|downloadTime
return|;
block|}
specifier|public
name|void
name|setDownloadSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|downloadSize
operator|=
name|size
expr_stmt|;
block|}
comment|/**      * The total size of downloaded artifacts, in bytes.      *<p>      * This only includes artifacts actually downloaded to cache (DownloadStatus.SUCCESSFUL), and      * not artifacts already in cache or used at their original location.      *</p>      *      * @return The total size of downloaded artifacts, in bytes.      */
specifier|public
name|long
name|getDownloadSize
parameter_list|()
block|{
return|return
name|downloadSize
return|;
block|}
specifier|public
name|String
name|getResolveId
parameter_list|()
block|{
return|return
name|resolveId
return|;
block|}
comment|/**      * Get every configuration which extends the specified one. The returned list also includes the      * specified one.      *      * @param extended String      * @return String[]      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|String
index|[]
name|getExtendingConfs
parameter_list|(
name|String
name|extended
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|extendingConfs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|extendingConfs
operator|.
name|add
argument_list|(
name|extended
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|conf
range|:
name|md
operator|.
name|getConfigurationsNames
argument_list|()
control|)
block|{
name|gatherExtendingConfs
argument_list|(
name|extendingConfs
argument_list|,
name|conf
argument_list|,
name|extended
argument_list|)
expr_stmt|;
block|}
return|return
name|extendingConfs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|extendingConfs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|gatherExtendingConfs
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|extendingConfs
parameter_list|,
name|String
name|conf
parameter_list|,
name|String
name|extended
parameter_list|)
block|{
if|if
condition|(
name|extendingConfs
operator|.
name|contains
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
index|[]
name|exts
init|=
name|md
operator|.
name|getConfiguration
argument_list|(
name|conf
argument_list|)
operator|.
name|getExtends
argument_list|()
decl_stmt|;
if|if
condition|(
name|exts
operator|==
literal|null
operator|||
name|exts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|ext
range|:
name|exts
control|)
block|{
if|if
condition|(
name|extendingConfs
operator|.
name|contains
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|extendingConfs
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|ext
operator|.
name|equals
argument_list|(
name|extended
argument_list|)
condition|)
block|{
name|extendingConfs
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|gatherExtendingConfs
argument_list|(
name|extendingConfs
argument_list|,
name|ext
argument_list|,
name|extended
argument_list|)
condition|)
block|{
name|extendingConfs
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|ModuleDescriptor
name|toFixedModuleDescriptor
parameter_list|(
name|IvySettings
name|settings
parameter_list|,
name|List
argument_list|<
name|ModuleId
argument_list|>
name|midToKeep
parameter_list|)
block|{
name|DefaultModuleDescriptor
name|fixedmd
init|=
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
comment|// copy namespaces
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
range|:
name|md
operator|.
name|getExtraAttributesNamespaces
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|fixedmd
operator|.
name|addExtraAttributeNamespace
argument_list|(
name|ns
operator|.
name|getKey
argument_list|()
argument_list|,
name|ns
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// copy info
name|fixedmd
operator|.
name|setDescription
argument_list|(
name|md
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|fixedmd
operator|.
name|setHomePage
argument_list|(
name|md
operator|.
name|getHomePage
argument_list|()
argument_list|)
expr_stmt|;
name|fixedmd
operator|.
name|getExtraInfos
argument_list|()
operator|.
name|addAll
argument_list|(
name|md
operator|.
name|getExtraInfos
argument_list|()
argument_list|)
expr_stmt|;
comment|// copy configurations
name|List
argument_list|<
name|String
argument_list|>
name|resolvedConfs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|getConfigurations
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|conf
range|:
name|resolvedConfs
control|)
block|{
name|fixedmd
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// copy artifacts
for|for
control|(
name|String
name|conf
range|:
name|resolvedConfs
control|)
block|{
for|for
control|(
name|Artifact
name|a
range|:
name|md
operator|.
name|getArtifacts
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|fixedmd
operator|.
name|addArtifact
argument_list|(
name|conf
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add resolved dependencies
for|for
control|(
name|IvyNode
name|dep
range|:
name|dependencies
control|)
block|{
name|ModuleRevisionId
name|depMrid
decl_stmt|;
name|boolean
name|force
decl_stmt|;
if|if
condition|(
name|midToKeep
operator|!=
literal|null
operator|&&
name|midToKeep
operator|.
name|contains
argument_list|(
name|dep
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
name|depMrid
operator|=
name|dep
operator|.
name|getId
argument_list|()
expr_stmt|;
name|force
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|depMrid
operator|=
name|dep
operator|.
name|getResolvedId
argument_list|()
expr_stmt|;
name|force
operator|=
literal|true
expr_stmt|;
block|}
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|fixedmd
argument_list|,
name|depMrid
argument_list|,
name|force
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|evicted
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|rootConf
range|:
name|dep
operator|.
name|getRootModuleConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|dep
operator|.
name|isEvicted
argument_list|(
name|rootConf
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|evicted
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|String
name|targetConf
range|:
name|dep
operator|.
name|getConfigurations
argument_list|(
name|rootConf
argument_list|)
control|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|rootConf
argument_list|,
name|targetConf
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|evicted
condition|)
block|{
name|fixedmd
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fixedmd
return|;
block|}
block|}
end_class

end_unit

