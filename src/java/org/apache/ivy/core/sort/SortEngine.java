begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|IvyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|circular
operator|.
name|CircularDependencyException
import|;
end_import

begin_class
specifier|public
class|class
name|SortEngine
block|{
specifier|private
name|IvySettings
name|_settings
decl_stmt|;
specifier|public
name|SortEngine
parameter_list|(
name|IvySettings
name|settings
parameter_list|)
block|{
name|_settings
operator|=
name|settings
expr_stmt|;
block|}
specifier|public
name|List
name|sortNodes
parameter_list|(
name|Collection
name|nodes
parameter_list|)
block|{
comment|/* here we want to use the sort algorithm which work on module descriptors :          * so we first put dependencies on a map from descriptors to dependency, then we           * sort the keySet (i.e. a collection of descriptors), then we replace          * in the sorted list each descriptor by the corresponding dependency          */
name|Map
name|dependenciesMap
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|List
name|nulls
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|node
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getDescriptor
argument_list|()
operator|==
literal|null
condition|)
block|{
name|nulls
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
name|n
init|=
operator|(
name|List
operator|)
name|dependenciesMap
operator|.
name|get
argument_list|(
name|node
operator|.
name|getDescriptor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
name|n
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|dependenciesMap
operator|.
name|put
argument_list|(
name|node
operator|.
name|getDescriptor
argument_list|()
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|n
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|List
name|list
init|=
name|sortModuleDescriptors
argument_list|(
name|dependenciesMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|(
operator|(
name|int
operator|)
operator|(
name|list
operator|.
name|size
argument_list|()
operator|*
literal|1.3
operator|+
name|nulls
operator|.
name|size
argument_list|()
operator|)
argument_list|)
decl_stmt|;
comment|//attempt to adjust the size to avoid too much list resizing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ModuleDescriptor
name|md
init|=
operator|(
name|ModuleDescriptor
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
name|n
init|=
operator|(
name|List
operator|)
name|dependenciesMap
operator|.
name|get
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|nulls
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Sorts the given ModuleDescriptors from the less dependent to the more dependent.      * This sort ensures that a ModuleDescriptor is always found in the list before all       * ModuleDescriptors depending directly on it.      * @param moduleDescriptors a Collection of ModuleDescriptor to sort      * @return a List of sorted ModuleDescriptors      * @throws CircularDependencyException if a circular dependency exists      */
specifier|public
name|List
name|sortModuleDescriptors
parameter_list|(
name|Collection
name|moduleDescriptors
parameter_list|)
throws|throws
name|CircularDependencyException
block|{
return|return
operator|new
name|ModuleDescriptorSorter
argument_list|(
name|moduleDescriptors
argument_list|)
operator|.
name|sortModuleDescriptors
argument_list|(
name|_settings
operator|.
name|getVersionMatcher
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

