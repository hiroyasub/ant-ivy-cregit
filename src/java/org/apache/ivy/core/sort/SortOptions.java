begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
package|;
end_package

begin_class
specifier|public
class|class
name|SortOptions
block|{
specifier|public
specifier|static
specifier|final
name|SortOptions
name|DEFAULT
init|=
operator|new
name|SortOptions
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SortOptions
name|SILENT
init|=
operator|new
name|SortOptions
argument_list|()
operator|.
name|setNonMatchingVersionReporter
argument_list|(
operator|new
name|SilentNonMatchingVersionReporter
argument_list|()
argument_list|)
operator|.
name|setUseCircularDependencyStrategy
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**      * Used to report some non matching version (when a modules depends on a specific revision of an      * other modules present in the of modules to sort with a different revision.      */
specifier|private
name|NonMatchingVersionReporter
name|nonMatchingVersionReporter
init|=
operator|new
name|WarningNonMatchingVersionReporter
argument_list|()
decl_stmt|;
comment|/**      * Should the default circular dependency strategy be used when a circular dependency is found,      * or should circular dependencies be ignored?      */
specifier|private
name|boolean
name|useCircularDependencyStrategy
init|=
literal|true
decl_stmt|;
specifier|public
name|NonMatchingVersionReporter
name|getNonMatchingVersionReporter
parameter_list|()
block|{
return|return
name|nonMatchingVersionReporter
return|;
block|}
specifier|public
name|SortOptions
name|setNonMatchingVersionReporter
parameter_list|(
name|NonMatchingVersionReporter
name|nonMatchingVersionReporter
parameter_list|)
block|{
name|this
operator|.
name|nonMatchingVersionReporter
operator|=
name|nonMatchingVersionReporter
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isUseCircularDependencyStrategy
parameter_list|()
block|{
return|return
name|useCircularDependencyStrategy
return|;
block|}
specifier|public
name|SortOptions
name|setUseCircularDependencyStrategy
parameter_list|(
name|boolean
name|useCircularDependencyStrategy
parameter_list|)
block|{
name|this
operator|.
name|useCircularDependencyStrategy
operator|=
name|useCircularDependencyStrategy
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

