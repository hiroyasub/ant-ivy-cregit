begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|circular
operator|.
name|CircularDependencyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|circular
operator|.
name|CircularDependencyHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Inner helper class for sorting ModuleDescriptors.  *  */
end_comment

begin_class
specifier|public
class|class
name|ModuleDescriptorSorter
block|{
specifier|private
specifier|final
name|Collection
name|moduleDescriptors
decl_stmt|;
specifier|private
specifier|final
name|Iterator
name|moduleDescriptorsIterator
decl_stmt|;
specifier|private
specifier|final
name|List
name|sorted
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|public
name|ModuleDescriptorSorter
parameter_list|(
name|Collection
name|moduleDescriptors
parameter_list|)
block|{
name|this
operator|.
name|moduleDescriptors
operator|=
name|moduleDescriptors
expr_stmt|;
name|moduleDescriptorsIterator
operator|=
operator|new
name|LinkedList
argument_list|(
name|moduleDescriptors
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
comment|/**      * Iterates over all modules calling sortModuleDescriptorsHelp.      * @return sorted module      * @throws CircularDependencyException      */
specifier|public
name|List
name|sortModuleDescriptors
parameter_list|(
name|VersionMatcher
name|matcher
parameter_list|)
throws|throws
name|CircularDependencyException
block|{
while|while
condition|(
name|moduleDescriptorsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sortModuleDescriptorsHelp
argument_list|(
name|matcher
argument_list|,
operator|(
name|ModuleDescriptor
operator|)
name|moduleDescriptorsIterator
operator|.
name|next
argument_list|()
argument_list|,
operator|new
name|Stack
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sorted
return|;
block|}
comment|/**      * If current module has already been added to list, returns,      * Otherwise invokes sortModuleDescriptorsHelp for all dependencies      * contained within set of moduleDescriptors.  Then finally adds self      * to list of sorted.      * @param current Current module to add to sorted list.      * @throws CircularDependencyException      */
specifier|private
name|void
name|sortModuleDescriptorsHelp
parameter_list|(
name|VersionMatcher
name|matcher
parameter_list|,
name|ModuleDescriptor
name|current
parameter_list|,
name|Stack
name|callStack
parameter_list|)
throws|throws
name|CircularDependencyException
block|{
comment|//if already sorted return
if|if
condition|(
name|sorted
operator|.
name|contains
argument_list|(
name|current
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|callStack
operator|.
name|contains
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|callStack
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"circular dependency ignored during sort: "
operator|+
name|CircularDependencyHelper
operator|.
name|formatMessage
argument_list|(
operator|(
name|ModuleDescriptor
index|[]
operator|)
name|callStack
operator|.
name|toArray
argument_list|(
operator|new
name|ModuleDescriptor
index|[
name|callStack
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|DependencyDescriptor
index|[]
name|descriptors
init|=
name|current
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|ModuleDescriptor
name|moduleDescriptorDependency
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|descriptors
operator|!=
literal|null
operator|&&
name|i
operator|<
name|descriptors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|moduleDescriptorDependency
operator|=
name|getModuleDescriptorDependency
argument_list|(
name|matcher
argument_list|,
name|descriptors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|moduleDescriptorDependency
operator|!=
literal|null
condition|)
block|{
name|callStack
operator|.
name|push
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|sortModuleDescriptorsHelp
argument_list|(
name|matcher
argument_list|,
name|moduleDescriptorDependency
argument_list|,
name|callStack
argument_list|)
expr_stmt|;
name|callStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
name|sorted
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param descriptor      * @return a ModuleDescriptor from the collection of module descriptors to sort.      * If none exists returns null.      */
specifier|private
name|ModuleDescriptor
name|getModuleDescriptorDependency
parameter_list|(
name|VersionMatcher
name|matcher
parameter_list|,
name|DependencyDescriptor
name|descriptor
parameter_list|)
block|{
name|Iterator
name|i
init|=
name|moduleDescriptors
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ModuleDescriptor
name|md
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|md
operator|=
operator|(
name|ModuleDescriptor
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|descriptor
operator|.
name|getDependencyId
argument_list|()
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|md
return|;
block|}
if|else if
condition|(
name|matcher
operator|.
name|accept
argument_list|(
name|descriptor
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|md
argument_list|)
condition|)
block|{
return|return
name|md
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

