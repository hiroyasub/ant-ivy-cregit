begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * Resolve an file or url relatively to its context.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|RelativeUrlResolver
block|{
comment|/**      * Resolve the url in the context of context.      *       * @param context      *            The URL of the resource containing the reference url      * @param url      *            a relative or absolution url string      * @throws MalformedURLException      */
specifier|public
specifier|abstract
name|URL
name|getURL
parameter_list|(
name|URL
name|context
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|MalformedURLException
function_decl|;
comment|/**      * Resolve file or url path relatively to a context. file is considered first. If file is not      * defined, url will be considered.      *       * @param context      *            The URL of the resource containing the reference file or url      * @param file      *            a relative or absolute path      * @param url      *            a relative or absolution url string      * @return the resulting url or null if failed and url are null.      * @throws MalformedURLException      */
specifier|public
name|URL
name|getURL
parameter_list|(
name|URL
name|context
parameter_list|,
name|String
name|file
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|f
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getURL
argument_list|(
name|context
argument_list|,
name|file
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
return|return
name|getURL
argument_list|(
name|context
argument_list|,
name|url
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

