begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|RepositoryCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|status
operator|.
name|StatusManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|circular
operator|.
name|CircularDependencyStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|ConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|LatestStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|lock
operator|.
name|LockStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Checks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|CredentialsStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|URLHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|URLHandlerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|XmlSettingsParser
extends|extends
name|DefaultHandler
block|{
comment|/**      * Wraps an {@link IvyVariableContainer} delegating most method calls to the wrapped instance,      * except for a set of variables which are only stored locally in the wrapper, and not      * propagated to the wrapped instance.      */
specifier|private
specifier|static
specifier|final
class|class
name|IvyVariableContainerWrapper
implements|implements
name|IvyVariableContainer
block|{
specifier|private
specifier|static
specifier|final
name|Collection
name|SETTINGS_VARIABLES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ivy.settings.dir"
block|,
literal|"ivy.settings.url"
block|,
literal|"ivy.settings.file"
block|,
literal|"ivy.conf.dir"
block|,
literal|"ivy.conf.url"
block|,
literal|"ivy.conf.file"
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IvyVariableContainer
name|variables
decl_stmt|;
specifier|private
name|Map
name|localVariables
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|IvyVariableContainerWrapper
parameter_list|(
name|IvyVariableContainer
name|variables
parameter_list|)
block|{
name|this
operator|.
name|variables
operator|=
name|variables
expr_stmt|;
block|}
specifier|public
name|void
name|setVariable
parameter_list|(
name|String
name|varName
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
block|{
if|if
condition|(
name|SETTINGS_VARIABLES
operator|.
name|contains
argument_list|(
name|varName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|localVariables
operator|.
name|containsKey
argument_list|(
name|varName
argument_list|)
operator|||
name|overwrite
condition|)
block|{
name|localVariables
operator|.
name|put
argument_list|(
name|varName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|variables
operator|.
name|setVariable
argument_list|(
name|varName
argument_list|,
name|value
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setEnvironmentPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|variables
operator|.
name|setEnvironmentPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|localVariables
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|localVariables
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
name|variables
operator|.
name|getVariable
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Object
name|clone
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|Configurator
name|configurator
decl_stmt|;
specifier|private
name|List
name|configuratorTags
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"resolvers"
block|,
literal|"namespaces"
block|,
literal|"parsers"
block|,
literal|"latest-strategies"
block|,
literal|"conflict-managers"
block|,
literal|"outputters"
block|,
literal|"version-matchers"
block|,
literal|"statuses"
block|,
literal|"circular-dependency-strategies"
block|,
literal|"triggers"
block|,
literal|"lock-strategies"
block|,
literal|"caches"
block|,
literal|"signers"
block|}
argument_list|)
decl_stmt|;
specifier|private
name|IvySettings
name|ivy
decl_stmt|;
specifier|private
name|String
name|defaultResolver
decl_stmt|;
specifier|private
name|String
name|defaultCM
decl_stmt|;
specifier|private
name|String
name|defaultLatest
decl_stmt|;
specifier|private
name|String
name|defaultCacheManager
decl_stmt|;
specifier|private
name|String
name|defaultCircular
decl_stmt|;
specifier|private
name|String
name|defaultLock
decl_stmt|;
specifier|private
name|String
name|currentConfiguratorTag
decl_stmt|;
specifier|private
name|URL
name|settings
decl_stmt|;
specifier|private
name|boolean
name|deprecatedMessagePrinted
init|=
literal|false
decl_stmt|;
specifier|public
name|XmlSettingsParser
parameter_list|(
name|IvySettings
name|ivy
parameter_list|)
block|{
name|this
operator|.
name|ivy
operator|=
name|ivy
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|URL
name|settings
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|configurator
operator|=
operator|new
name|Configurator
argument_list|()
expr_stmt|;
name|configurator
operator|.
name|setFileResolver
argument_list|(
operator|new
name|FileResolver
argument_list|()
block|{
specifier|public
name|File
name|resolveFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
return|return
name|Checks
operator|.
name|checkAbsolute
argument_list|(
name|path
argument_list|,
name|filename
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// put every type definition from ivy to configurator
name|Map
name|typeDefs
init|=
name|ivy
operator|.
name|getTypeDefs
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|typeDefs
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|configurator
operator|.
name|typeDef
argument_list|(
name|name
argument_list|,
operator|(
name|Class
operator|)
name|typeDefs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doParse
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doParse
parameter_list|(
name|URL
name|settingsUrl
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|this
operator|.
name|settings
operator|=
name|settingsUrl
expr_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|URLHandlerRegistry
operator|.
name|getDefault
argument_list|()
operator|.
name|openStream
argument_list|(
name|settingsUrl
argument_list|)
expr_stmt|;
name|InputSource
name|inSrc
init|=
operator|new
name|InputSource
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|inSrc
operator|.
name|setSystemId
argument_list|(
name|settingsUrl
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newSAXParser
argument_list|()
operator|.
name|parse
argument_list|(
name|settingsUrl
operator|.
name|toExternalForm
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ParseException
name|pe
init|=
operator|new
name|ParseException
argument_list|(
literal|"failed to load settings from "
operator|+
name|settingsUrl
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|pe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|pe
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
block|}
block|}
block|}
specifier|private
name|void
name|parse
parameter_list|(
name|Configurator
name|configurator
parameter_list|,
name|URL
name|configuration
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|this
operator|.
name|configurator
operator|=
name|configurator
expr_stmt|;
name|doParse
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|att
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// we first copy attributes in a Map to be able to modify them
name|Map
name|attributes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|att
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|att
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
argument_list|,
name|ivy
operator|.
name|substitute
argument_list|(
name|att
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
literal|"ivyconf"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|deprecatedMessagePrinted
operator|=
literal|true
expr_stmt|;
name|Message
operator|.
name|deprecated
argument_list|(
literal|"'ivyconf' element is deprecated, use 'ivysettings' instead ("
operator|+
name|settings
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configurator
operator|.
name|getCurrent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|inConfiguratorStarted
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"classpath"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|classpathStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"typedef"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|typedefStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"property"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|propertyStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"properties"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|propertiesStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"include"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|includeStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"settings"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|||
literal|"conf"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|settingsStarted
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"caches"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|cachesStarted
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"version-matchers"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|versionMatchersStarted
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"statuses"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|statusesStarted
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|configuratorTags
operator|.
name|contains
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|anyConfiguratorStarted
argument_list|(
name|qName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"macrodef"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|macrodefStarted
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"module"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|moduleStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"credentials"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|credentialsStarted
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
name|SAXException
name|sax
init|=
operator|new
name|SAXException
argument_list|(
literal|"problem in config file: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
decl_stmt|;
name|sax
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|sax
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|SAXException
name|sax
init|=
operator|new
name|SAXException
argument_list|(
literal|"io problem while parsing config file: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
decl_stmt|;
name|sax
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|sax
throw|;
block|}
block|}
specifier|private
name|void
name|credentialsStarted
parameter_list|(
name|Map
name|attributes
parameter_list|)
block|{
name|String
name|realm
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
literal|"realm"
argument_list|)
decl_stmt|;
name|String
name|host
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
literal|"host"
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
literal|"username"
argument_list|)
decl_stmt|;
name|String
name|passwd
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
literal|"passwd"
argument_list|)
decl_stmt|;
name|CredentialsStore
operator|.
name|INSTANCE
operator|.
name|addCredentials
argument_list|(
name|realm
argument_list|,
name|host
argument_list|,
name|userName
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|moduleStarted
parameter_list|(
name|Map
name|attributes
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|attributes
operator|.
name|remove
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|resolver
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
literal|"resolver"
argument_list|)
decl_stmt|;
name|String
name|branch
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
literal|"branch"
argument_list|)
decl_stmt|;
name|String
name|cm
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
literal|"conflict-manager"
argument_list|)
decl_stmt|;
name|String
name|resolveMode
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
literal|"resolveMode"
argument_list|)
decl_stmt|;
name|String
name|matcher
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|remove
argument_list|(
literal|"matcher"
argument_list|)
decl_stmt|;
name|matcher
operator|=
name|matcher
operator|==
literal|null
condition|?
name|PatternMatcher
operator|.
name|EXACT_OR_REGEXP
else|:
name|matcher
expr_stmt|;
name|ivy
operator|.
name|addModuleConfiguration
argument_list|(
name|attributes
argument_list|,
name|ivy
operator|.
name|getMatcher
argument_list|(
name|matcher
argument_list|)
argument_list|,
name|resolver
argument_list|,
name|branch
argument_list|,
name|cm
argument_list|,
name|resolveMode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|macrodefStarted
parameter_list|(
name|String
name|qName
parameter_list|,
name|Map
name|attributes
parameter_list|)
block|{
name|currentConfiguratorTag
operator|=
name|qName
expr_stmt|;
name|Configurator
operator|.
name|MacroDef
name|macrodef
init|=
name|configurator
operator|.
name|startMacroDef
argument_list|(
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
name|macrodef
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|anyConfiguratorStarted
parameter_list|(
name|String
name|qName
parameter_list|)
block|{
name|currentConfiguratorTag
operator|=
name|qName
expr_stmt|;
name|configurator
operator|.
name|setRoot
argument_list|(
name|ivy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|statusesStarted
parameter_list|(
name|String
name|qName
parameter_list|,
name|Map
name|attributes
parameter_list|)
block|{
name|currentConfiguratorTag
operator|=
name|qName
expr_stmt|;
name|StatusManager
name|m
init|=
operator|new
name|StatusManager
argument_list|()
decl_stmt|;
name|String
name|defaultStatus
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultStatus
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|setDefaultStatus
argument_list|(
name|defaultStatus
argument_list|)
expr_stmt|;
block|}
name|ivy
operator|.
name|setStatusManager
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|configurator
operator|.
name|setRoot
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|versionMatchersStarted
parameter_list|(
name|String
name|qName
parameter_list|,
name|Map
name|attributes
parameter_list|)
block|{
name|anyConfiguratorStarted
argument_list|(
name|qName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|attributes
operator|.
name|get
argument_list|(
literal|"usedefaults"
argument_list|)
argument_list|)
condition|)
block|{
name|ivy
operator|.
name|configureDefaultVersionMatcher
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|cachesStarted
parameter_list|(
name|String
name|qName
parameter_list|,
name|Map
name|attributes
parameter_list|)
block|{
name|anyConfiguratorStarted
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|defaultLock
operator|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"lockStrategy"
argument_list|)
expr_stmt|;
name|defaultCacheManager
operator|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|String
name|cache
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"defaultCacheDir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|setDefaultCache
argument_list|(
name|Checks
operator|.
name|checkAbsolute
argument_list|(
name|cache
argument_list|,
literal|"defaultCacheDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|up2d
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"checkUpToDate"
argument_list|)
decl_stmt|;
if|if
condition|(
name|up2d
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|deprecated
argument_list|(
literal|"'checkUpToDate' is deprecated, "
operator|+
literal|"use the 'overwriteMode' on the 'ivy:retrieve' task instead ("
operator|+
name|settings
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|setCheckUpToDate
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|up2d
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|resolutionDir
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"resolutionCacheDir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolutionDir
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|setDefaultResolutionCacheBasedir
argument_list|(
name|resolutionDir
argument_list|)
expr_stmt|;
block|}
name|String
name|useOrigin
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"useOrigin"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useOrigin
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|setDefaultUseOrigin
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|useOrigin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|cacheIvyPattern
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"ivyPattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheIvyPattern
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|setDefaultCacheIvyPattern
argument_list|(
name|cacheIvyPattern
argument_list|)
expr_stmt|;
block|}
name|String
name|cacheArtPattern
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"artifactPattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheArtPattern
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|setDefaultCacheArtifactPattern
argument_list|(
name|cacheArtPattern
argument_list|)
expr_stmt|;
block|}
name|String
name|repositoryDir
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"repositoryCacheDir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositoryDir
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|setDefaultRepositoryCacheBasedir
argument_list|(
name|repositoryDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|settingsStarted
parameter_list|(
name|String
name|qName
parameter_list|,
name|Map
name|attributes
parameter_list|)
block|{
if|if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
operator|!
name|deprecatedMessagePrinted
condition|)
block|{
name|Message
operator|.
name|deprecated
argument_list|(
literal|"'conf' is deprecated, use 'settings' instead ("
operator|+
name|settings
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|String
name|cache
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"defaultCache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|deprecated
argument_list|(
literal|"'defaultCache' is deprecated, "
operator|+
literal|"use 'caches[@defaultCacheDir]' instead ("
operator|+
name|settings
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|setDefaultCache
argument_list|(
name|Checks
operator|.
name|checkAbsolute
argument_list|(
name|cache
argument_list|,
literal|"defaultCache"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|defaultBranch
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"defaultBranch"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultBranch
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|setDefaultBranch
argument_list|(
name|defaultBranch
argument_list|)
expr_stmt|;
block|}
name|String
name|defaultResolveMode
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"defaultResolveMode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultResolveMode
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|setDefaultResolveMode
argument_list|(
name|defaultResolveMode
argument_list|)
expr_stmt|;
block|}
name|String
name|validate
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"validate"
argument_list|)
decl_stmt|;
if|if
condition|(
name|validate
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|setValidate
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|validate
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|up2d
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"checkUpToDate"
argument_list|)
decl_stmt|;
if|if
condition|(
name|up2d
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|deprecated
argument_list|(
literal|"'checkUpToDate' is deprecated, "
operator|+
literal|"use the 'overwriteMode' on the 'ivy:retrieve' task instead ("
operator|+
name|settings
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|setCheckUpToDate
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|up2d
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|useRemoteConfig
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"useRemoteConfig"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useRemoteConfig
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|setUseRemoteConfig
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|useRemoteConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|cacheIvyPattern
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"cacheIvyPattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheIvyPattern
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|deprecated
argument_list|(
literal|"'cacheIvyPattern' is deprecated, use 'caches[@ivyPattern]' instead"
operator|+
literal|" ("
operator|+
name|settings
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|setDefaultCacheIvyPattern
argument_list|(
name|cacheIvyPattern
argument_list|)
expr_stmt|;
block|}
name|String
name|cacheArtPattern
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"cacheArtifactPattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheArtPattern
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|deprecated
argument_list|(
literal|"'cacheArtifactPattern' is deprecated, "
operator|+
literal|"use 'caches[@artifactPattern]' instead ("
operator|+
name|settings
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|setDefaultCacheArtifactPattern
argument_list|(
name|cacheArtPattern
argument_list|)
expr_stmt|;
block|}
comment|// we do not set following defaults here since no instances has been registered yet
name|defaultResolver
operator|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"defaultResolver"
argument_list|)
expr_stmt|;
name|defaultCM
operator|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"defaultConflictManager"
argument_list|)
expr_stmt|;
name|defaultLatest
operator|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"defaultLatestStrategy"
argument_list|)
expr_stmt|;
name|defaultCircular
operator|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"circularDependencyStrategy"
argument_list|)
expr_stmt|;
name|String
name|requestMethod
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"httpRequestMethod"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"head"
operator|.
name|equalsIgnoreCase
argument_list|(
name|requestMethod
argument_list|)
condition|)
block|{
name|URLHandlerRegistry
operator|.
name|getHttp
argument_list|()
operator|.
name|setRequestMethod
argument_list|(
name|URLHandler
operator|.
name|REQUEST_METHOD_HEAD
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"get"
operator|.
name|equalsIgnoreCase
argument_list|(
name|requestMethod
argument_list|)
condition|)
block|{
name|URLHandlerRegistry
operator|.
name|getHttp
argument_list|()
operator|.
name|setRequestMethod
argument_list|(
name|URLHandler
operator|.
name|REQUEST_METHOD_GET
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|requestMethod
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|requestMethod
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid httpRequestMethod specified, must be "
operator|+
literal|"one of {'HEAD', 'GET'}"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|includeStarted
parameter_list|(
name|Map
name|attributes
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
specifier|final
name|IvyVariableContainer
name|variables
init|=
name|ivy
operator|.
name|getVariableContainer
argument_list|()
decl_stmt|;
name|ivy
operator|.
name|setVariableContainer
argument_list|(
operator|new
name|IvyVariableContainerWrapper
argument_list|(
name|variables
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|propFilePath
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|URL
name|settingsURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|propFilePath
operator|==
literal|null
condition|)
block|{
name|propFilePath
operator|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
if|if
condition|(
name|propFilePath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad include tag: specify file or url to include"
argument_list|)
throw|;
block|}
else|else
block|{
try|try
block|{
comment|// First assume that it is an absolute URL
name|settingsURL
operator|=
operator|new
name|URL
argument_list|(
name|propFilePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// If that fail, it may be because it is a relative one.
name|settingsURL
operator|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|settings
argument_list|,
name|propFilePath
argument_list|)
expr_stmt|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"including url: "
operator|+
name|settingsURL
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|setSettingsVariables
argument_list|(
name|settingsURL
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|settingsURL
operator|=
name|urlFromFileAttribute
argument_list|(
name|propFilePath
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"including file: "
operator|+
name|settingsURL
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|settingsURL
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|File
name|settingsFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|settingsURL
operator|.
name|toExternalForm
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|optional
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"optional"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|optional
argument_list|)
operator|&&
operator|!
name|settingsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|ivy
operator|.
name|setSettingsVariables
argument_list|(
name|Checks
operator|.
name|checkAbsolute
argument_list|(
name|settingsFile
argument_list|,
literal|"settings include path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// try to make the best of it...
name|ivy
operator|.
name|setSettingsVariables
argument_list|(
name|Checks
operator|.
name|checkAbsolute
argument_list|(
name|settingsURL
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"settings include path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ivy
operator|.
name|setSettingsVariables
argument_list|(
name|settingsURL
argument_list|)
expr_stmt|;
block|}
block|}
operator|new
name|XmlSettingsParser
argument_list|(
name|ivy
argument_list|)
operator|.
name|parse
argument_list|(
name|configurator
argument_list|,
name|settingsURL
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ivy
operator|.
name|setVariableContainer
argument_list|(
name|variables
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Provide an URL referencing the given filepath. If filePath is an absolute path, then the      * resulting URL point to a local file, otherwise, the filepath is evaluated relatively to the      * URL of the current settings file (can be local file or remote URL).      */
specifier|private
name|URL
name|urlFromFileAttribute
parameter_list|(
name|String
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|filePath
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// ignore, we'll try to create a correct URL below
block|}
name|File
name|incFile
init|=
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|incFile
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|incFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|incFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|incFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
if|else if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|this
operator|.
name|settings
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|File
name|settingsFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|this
operator|.
name|settings
operator|.
name|toExternalForm
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|settingsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|settingsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|File
argument_list|(
name|settingsFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|filePath
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
return|return
operator|new
name|URL
argument_list|(
name|this
operator|.
name|settings
argument_list|,
name|filePath
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|URL
argument_list|(
name|this
operator|.
name|settings
argument_list|,
name|filePath
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|propertiesStarted
parameter_list|(
name|Map
name|attributes
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|propFilePath
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
name|String
name|environmentPrefix
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"environment"
argument_list|)
decl_stmt|;
if|if
condition|(
name|propFilePath
operator|!=
literal|null
condition|)
block|{
name|String
name|overrideStr
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"override"
argument_list|)
decl_stmt|;
name|boolean
name|override
init|=
operator|(
name|overrideStr
operator|==
literal|null
operator|)
condition|?
literal|true
else|:
name|Boolean
operator|.
name|valueOf
argument_list|(
name|overrideStr
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"loading properties: "
operator|+
name|propFilePath
argument_list|)
expr_stmt|;
try|try
block|{
name|URL
name|fileUrl
init|=
name|urlFromFileAttribute
argument_list|(
name|propFilePath
argument_list|)
decl_stmt|;
name|ivy
operator|.
name|loadProperties
argument_list|(
name|fileUrl
argument_list|,
name|override
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"Unable to find property file: "
operator|+
name|propFilePath
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|environmentPrefix
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|getVariableContainer
argument_list|()
operator|.
name|setEnvironmentPrefix
argument_list|(
name|environmentPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Didn't find a 'file' or 'environment' attribute "
operator|+
literal|"on the 'properties' element"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|propertyStarted
parameter_list|(
name|Map
name|attributes
parameter_list|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|String
name|override
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"override"
argument_list|)
decl_stmt|;
name|String
name|isSetVar
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"ifset"
argument_list|)
decl_stmt|;
name|String
name|unlessSetVar
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"unlessset"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"missing attribute name on property tag"
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"missing attribute value on property tag"
argument_list|)
throw|;
block|}
name|ivy
operator|.
name|setVariable
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
operator|(
name|override
operator|==
literal|null
operator|)
condition|?
literal|true
else|:
name|Boolean
operator|.
name|valueOf
argument_list|(
name|override
argument_list|)
argument_list|,
name|isSetVar
argument_list|,
name|unlessSetVar
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|typedefStarted
parameter_list|(
name|Map
name|attributes
parameter_list|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|className
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"classname"
argument_list|)
decl_stmt|;
name|Class
name|clazz
init|=
name|ivy
operator|.
name|typeDef
argument_list|(
name|name
argument_list|,
name|className
argument_list|)
decl_stmt|;
name|configurator
operator|.
name|typeDef
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|classpathStarted
parameter_list|(
name|Map
name|attributes
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|urlStr
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|urlStr
operator|==
literal|null
condition|)
block|{
name|String
name|file
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"either url or file should be given for classpath element"
argument_list|)
throw|;
block|}
else|else
block|{
name|url
operator|=
name|urlFromFileAttribute
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
expr_stmt|;
block|}
name|ivy
operator|.
name|addClasspathURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|inConfiguratorStarted
parameter_list|(
name|String
name|qName
parameter_list|,
name|Map
name|attributes
parameter_list|)
block|{
if|if
condition|(
literal|"macrodef"
operator|.
name|equals
argument_list|(
name|currentConfiguratorTag
argument_list|)
operator|&&
name|configurator
operator|.
name|getTypeDef
argument_list|(
name|qName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"@{name}"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"@{name}"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attributes
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"@{name}-"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attributes
operator|.
name|get
argument_list|(
literal|"ref"
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|attributes
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ref attribute should be the only one ! found "
operator|+
name|attributes
operator|.
name|size
argument_list|()
operator|+
literal|" in "
operator|+
name|qName
argument_list|)
throw|;
block|}
name|String
name|name
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
literal|"ref"
argument_list|)
decl_stmt|;
name|Object
name|child
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"resolvers"
operator|.
name|equals
argument_list|(
name|currentConfiguratorTag
argument_list|)
operator|||
literal|"resolver"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|child
operator|=
name|ivy
operator|.
name|getResolver
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown resolver "
operator|+
name|name
operator|+
literal|": resolver should be defined before being referenced"
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
literal|"latest-strategies"
operator|.
name|equals
argument_list|(
name|currentConfiguratorTag
argument_list|)
condition|)
block|{
name|child
operator|=
name|ivy
operator|.
name|getLatestStrategy
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown latest strategy "
operator|+
name|name
operator|+
literal|": latest strategy should be defined before being referenced"
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
literal|"conflict-managers"
operator|.
name|equals
argument_list|(
name|currentConfiguratorTag
argument_list|)
condition|)
block|{
name|child
operator|=
name|ivy
operator|.
name|getConflictManager
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown conflict manager "
operator|+
name|name
operator|+
literal|": conflict manager should be defined before being referenced"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad reference "
operator|+
name|name
argument_list|)
throw|;
block|}
name|configurator
operator|.
name|addChild
argument_list|(
name|qName
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|configurator
operator|.
name|startCreateChild
argument_list|(
name|qName
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|attributes
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|attName
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|configurator
operator|.
name|setAttribute
argument_list|(
name|attName
argument_list|,
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
name|attName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|configurator
operator|.
name|getCurrent
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|configuratorTags
operator|.
name|contains
argument_list|(
name|qName
argument_list|)
operator|&&
name|configurator
operator|.
name|getDepth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|configurator
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentConfiguratorTag
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
literal|"macrodef"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|configurator
operator|.
name|getDepth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|configurator
operator|.
name|endMacroDef
argument_list|()
expr_stmt|;
name|currentConfiguratorTag
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|configurator
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|defaultResolver
operator|!=
literal|null
condition|)
block|{
name|ivy
operator|.
name|setDefaultResolver
argument_list|(
name|ivy
operator|.
name|substitute
argument_list|(
name|defaultResolver
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultCM
operator|!=
literal|null
condition|)
block|{
name|ConflictManager
name|conflictManager
init|=
name|ivy
operator|.
name|getConflictManager
argument_list|(
name|ivy
operator|.
name|substitute
argument_list|(
name|defaultCM
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown conflict manager "
operator|+
name|ivy
operator|.
name|substitute
argument_list|(
name|defaultCM
argument_list|)
argument_list|)
throw|;
block|}
name|ivy
operator|.
name|setDefaultConflictManager
argument_list|(
name|conflictManager
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultLatest
operator|!=
literal|null
condition|)
block|{
name|LatestStrategy
name|latestStrategy
init|=
name|ivy
operator|.
name|getLatestStrategy
argument_list|(
name|ivy
operator|.
name|substitute
argument_list|(
name|defaultLatest
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|latestStrategy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown latest strategy "
operator|+
name|ivy
operator|.
name|substitute
argument_list|(
name|defaultLatest
argument_list|)
argument_list|)
throw|;
block|}
name|ivy
operator|.
name|setDefaultLatestStrategy
argument_list|(
name|latestStrategy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultCacheManager
operator|!=
literal|null
condition|)
block|{
name|RepositoryCacheManager
name|cache
init|=
name|ivy
operator|.
name|getRepositoryCacheManager
argument_list|(
name|ivy
operator|.
name|substitute
argument_list|(
name|defaultCacheManager
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown cache manager "
operator|+
name|ivy
operator|.
name|substitute
argument_list|(
name|defaultCacheManager
argument_list|)
argument_list|)
throw|;
block|}
name|ivy
operator|.
name|setDefaultRepositoryCacheManager
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultCircular
operator|!=
literal|null
condition|)
block|{
name|CircularDependencyStrategy
name|strategy
init|=
name|ivy
operator|.
name|getCircularDependencyStrategy
argument_list|(
name|ivy
operator|.
name|substitute
argument_list|(
name|defaultCircular
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|strategy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown circular dependency strategy "
operator|+
name|ivy
operator|.
name|substitute
argument_list|(
name|defaultCircular
argument_list|)
argument_list|)
throw|;
block|}
name|ivy
operator|.
name|setCircularDependencyStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultLock
operator|!=
literal|null
condition|)
block|{
name|LockStrategy
name|strategy
init|=
name|ivy
operator|.
name|getLockStrategy
argument_list|(
name|ivy
operator|.
name|substitute
argument_list|(
name|defaultLock
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|strategy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown lock strategy "
operator|+
name|ivy
operator|.
name|substitute
argument_list|(
name|defaultLock
argument_list|)
argument_list|)
throw|;
block|}
name|ivy
operator|.
name|setDefaultLockStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

