begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|status
operator|.
name|StatusManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|IvyAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|IvySettingsAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|circular
operator|.
name|CircularDependencyStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|circular
operator|.
name|ErrorCircularDependencyStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|circular
operator|.
name|IgnoreCircularDependencyStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|circular
operator|.
name|WarnCircularDependencyStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|ConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|LatestConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|NoConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|StrictConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|LatestLexicographicStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|LatestRevisionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|LatestStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|LatestTimeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|ExactOrRegexpPatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|ExactPatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|ModuleIdMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|RegexpPatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParserRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|report
operator|.
name|LogReportOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|report
operator|.
name|ReportOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|report
operator|.
name|XmlReportOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|ChainResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DualResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|trigger
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|ChainVersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|ExactVersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|LatestVersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|SubVersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionRangeMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|URLHandlerRegistry
import|;
end_import

begin_class
specifier|public
class|class
name|IvySettings
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CACHE_ARTIFACT_PATTERN
init|=
literal|"[organisation]/[module]/[type]s/[artifact]-[revision](.[ext])"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CACHE_DATA_FILE_PATTERN
init|=
literal|"[organisation]/[module]/ivydata-[revision].properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CACHE_IVY_PATTERN
init|=
literal|"[organisation]/[module]/ivy-[revision].xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CACHE_RESOLVED_IVY_PATTERN
init|=
literal|"resolved-[organisation]-[module]-[revision].xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CACHE_RESOLVED_IVY_PROPERTIES_PATTERN
init|=
literal|"resolved-[organisation]-[module]-[revision].properties"
decl_stmt|;
specifier|private
name|Map
name|_typeDefs
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|_resolversMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|DependencyResolver
name|_defaultResolver
decl_stmt|;
specifier|private
name|DependencyResolver
name|_dictatorResolver
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_defaultResolverName
decl_stmt|;
specifier|private
name|File
name|_defaultCache
decl_stmt|;
specifier|private
name|String
name|_defaultBranch
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|_checkUpToDate
init|=
literal|true
decl_stmt|;
specifier|private
name|Map
name|_moduleSettings
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
comment|// Map (ModuleIdMatcher -> ModuleSettings)
specifier|private
name|Map
name|_conflictsManager
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String conflictManagerName -> ConflictManager)
specifier|private
name|Map
name|_latestStrategies
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String latestStrategyName -> LatestStrategy)
specifier|private
name|Map
name|_namespaces
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String namespaceName -> Namespace)
specifier|private
name|Map
name|_matchers
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String matcherName -> Matcher)
specifier|private
name|Map
name|_reportOutputters
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String outputterName -> ReportOutputter)
specifier|private
name|Map
name|_versionMatchers
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String matcherName -> VersionMatcher)
specifier|private
name|Map
name|_circularDependencyStrategies
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (String name -> CircularDependencyStrategy)
specifier|private
name|List
name|_triggers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// List (Trigger)
specifier|private
name|Map
name|_variables
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|String
name|_cacheIvyPattern
init|=
name|DEFAULT_CACHE_IVY_PATTERN
decl_stmt|;
specifier|private
name|String
name|_cacheResolvedIvyPattern
init|=
name|DEFAULT_CACHE_RESOLVED_IVY_PATTERN
decl_stmt|;
specifier|private
name|String
name|_cacheResolvedIvyPropertiesPattern
init|=
name|DEFAULT_CACHE_RESOLVED_IVY_PROPERTIES_PATTERN
decl_stmt|;
specifier|private
name|String
name|_cacheArtifactPattern
init|=
name|DEFAULT_CACHE_ARTIFACT_PATTERN
decl_stmt|;
specifier|private
name|String
name|_cacheDataFilePattern
init|=
name|DEFAULT_CACHE_DATA_FILE_PATTERN
decl_stmt|;
specifier|private
name|boolean
name|_validate
init|=
literal|true
decl_stmt|;
specifier|private
name|LatestStrategy
name|_defaultLatestStrategy
init|=
literal|null
decl_stmt|;
specifier|private
name|ConflictManager
name|_defaultConflictManager
init|=
literal|null
decl_stmt|;
specifier|private
name|CircularDependencyStrategy
name|_circularDependencyStrategy
init|=
literal|null
decl_stmt|;
specifier|private
name|List
name|_listingIgnore
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|_repositoriesConfigured
decl_stmt|;
specifier|private
name|boolean
name|_useRemoteConfig
init|=
literal|false
decl_stmt|;
specifier|private
name|File
name|_defaultUserDir
decl_stmt|;
specifier|private
name|List
name|_classpathURLs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|ClassLoader
name|_classloader
decl_stmt|;
specifier|private
name|long
name|_interruptTimeout
init|=
literal|2000
decl_stmt|;
specifier|private
name|Boolean
name|_debugConflictResolution
decl_stmt|;
specifier|private
name|boolean
name|_logNotConvertedExclusionRule
decl_stmt|;
specifier|private
name|VersionMatcher
name|_versionMatcher
decl_stmt|;
specifier|private
name|StatusManager
name|_statusManager
decl_stmt|;
specifier|public
name|IvySettings
parameter_list|()
block|{
name|setVariable
argument_list|(
literal|"ivy.default.settings.dir"
argument_list|,
name|getDefaultSettingsDir
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setDeprecatedVariable
argument_list|(
literal|"ivy.default.conf.dir"
argument_list|,
literal|"ivy.default.settings.dir"
argument_list|)
expr_stmt|;
name|String
name|ivyTypeDefs
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"ivy.typedef.files"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ivyTypeDefs
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|files
init|=
name|ivyTypeDefs
operator|.
name|split
argument_list|(
literal|"\\,"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|typeDefs
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"typedefs file not found: "
operator|+
name|files
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"problem with typedef file: "
operator|+
name|files
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|typeDefs
argument_list|(
name|getSettingsURL
argument_list|(
literal|"typedef.properties"
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"impossible to load default type defs"
argument_list|)
expr_stmt|;
block|}
block|}
name|LatestLexicographicStrategy
name|latestLexicographicStrategy
init|=
operator|new
name|LatestLexicographicStrategy
argument_list|()
decl_stmt|;
name|LatestRevisionStrategy
name|latestRevisionStrategy
init|=
operator|new
name|LatestRevisionStrategy
argument_list|()
decl_stmt|;
name|LatestTimeStrategy
name|latestTimeStrategy
init|=
operator|new
name|LatestTimeStrategy
argument_list|()
decl_stmt|;
name|addLatestStrategy
argument_list|(
literal|"latest-revision"
argument_list|,
name|latestRevisionStrategy
argument_list|)
expr_stmt|;
name|addLatestStrategy
argument_list|(
literal|"latest-lexico"
argument_list|,
name|latestLexicographicStrategy
argument_list|)
expr_stmt|;
name|addLatestStrategy
argument_list|(
literal|"latest-time"
argument_list|,
name|latestTimeStrategy
argument_list|)
expr_stmt|;
name|addConflictManager
argument_list|(
literal|"latest-revision"
argument_list|,
operator|new
name|LatestConflictManager
argument_list|(
literal|"latest-revision"
argument_list|,
name|latestRevisionStrategy
argument_list|)
argument_list|)
expr_stmt|;
name|addConflictManager
argument_list|(
literal|"latest-time"
argument_list|,
operator|new
name|LatestConflictManager
argument_list|(
literal|"latest-time"
argument_list|,
name|latestTimeStrategy
argument_list|)
argument_list|)
expr_stmt|;
name|addConflictManager
argument_list|(
literal|"all"
argument_list|,
operator|new
name|NoConflictManager
argument_list|()
argument_list|)
expr_stmt|;
name|addConflictManager
argument_list|(
literal|"strict"
argument_list|,
operator|new
name|StrictConflictManager
argument_list|()
argument_list|)
expr_stmt|;
name|addMatcher
argument_list|(
name|ExactPatternMatcher
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|addMatcher
argument_list|(
name|RegexpPatternMatcher
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|addMatcher
argument_list|(
name|ExactOrRegexpPatternMatcher
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
try|try
block|{
comment|// GlobPatternMatcher is optional. Only add it when available.
name|Class
name|globClazz
init|=
name|IvySettings
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"org.apache.ivy.plugins.matcher.GlobPatternMatcher"
argument_list|)
decl_stmt|;
name|Field
name|instanceField
init|=
name|globClazz
operator|.
name|getField
argument_list|(
literal|"INSTANCE"
argument_list|)
decl_stmt|;
name|addMatcher
argument_list|(
operator|(
name|PatternMatcher
operator|)
name|instanceField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore: the matcher isn't on the classpath
block|}
name|addReportOutputter
argument_list|(
operator|new
name|XmlReportOutputter
argument_list|()
argument_list|)
expr_stmt|;
name|addReportOutputter
argument_list|(
operator|new
name|LogReportOutputter
argument_list|()
argument_list|)
expr_stmt|;
name|configureDefaultCircularDependencyStrategies
argument_list|()
expr_stmt|;
name|_listingIgnore
operator|.
name|add
argument_list|(
literal|".cvsignore"
argument_list|)
expr_stmt|;
name|_listingIgnore
operator|.
name|add
argument_list|(
literal|"CVS"
argument_list|)
expr_stmt|;
name|_listingIgnore
operator|.
name|add
argument_list|(
literal|".svn"
argument_list|)
expr_stmt|;
name|addSystemProperties
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addSystemProperties
parameter_list|()
block|{
name|addAllVariables
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Call this method to ask ivy to configure some variables using either a remote or a local properties file      */
specifier|public
name|void
name|configureRepositories
parameter_list|(
name|boolean
name|remote
parameter_list|)
block|{
if|if
condition|(
operator|!
name|_repositoriesConfigured
condition|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|boolean
name|configured
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|_useRemoteConfig
operator|&&
name|remote
condition|)
block|{
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://incubator.apache.org/ivy/repository.properties"
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"configuring repositories with "
operator|+
name|url
argument_list|)
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|URLHandlerRegistry
operator|.
name|getDefault
argument_list|()
operator|.
name|openStream
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|configured
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"unable to use remote repository configuration: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|configured
condition|)
block|{
name|InputStream
name|repositoryPropsStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repositoryPropsStream
operator|=
name|getSettingsURL
argument_list|(
literal|"repository.properties"
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|repositoryPropsStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"unable to use internal repository configuration: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|repositoryPropsStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|repositoryPropsStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
block|}
empty_stmt|;
block|}
block|}
block|}
name|addAllVariables
argument_list|(
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_repositoriesConfigured
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|typeDefs
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|typeDefs
argument_list|(
name|stream
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|typeDefs
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|boolean
name|silentFail
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|load
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|typeDefs
argument_list|(
name|p
argument_list|,
name|silentFail
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|typeDefs
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|typeDefs
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|typeDefs
parameter_list|(
name|Properties
name|p
parameter_list|,
name|boolean
name|silentFail
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|p
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|typeDef
argument_list|(
name|name
argument_list|,
name|p
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|,
name|silentFail
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|load
parameter_list|(
name|File
name|settingsFile
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Message
operator|.
name|info
argument_list|(
literal|":: loading settings :: file = "
operator|+
name|settingsFile
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|setSettingsVariables
argument_list|(
name|settingsFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|getVariable
argument_list|(
literal|"ivy.default.ivy.user.dir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|setDefaultIvyUserDir
argument_list|(
operator|new
name|File
argument_list|(
name|getVariable
argument_list|(
literal|"ivy.default.ivy.user.dir"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDefaultIvyUserDir
argument_list|()
expr_stmt|;
block|}
name|getDefaultCache
argument_list|()
expr_stmt|;
name|loadDefaultProperties
argument_list|()
expr_stmt|;
try|try
block|{
operator|new
name|XmlSettingsParser
argument_list|(
name|this
argument_list|)
operator|.
name|parse
argument_list|(
name|settingsFile
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"given file cannot be transformed to url: "
operator|+
name|settingsFile
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
name|setVariable
argument_list|(
literal|"ivy.default.ivy.user.dir"
argument_list|,
name|getDefaultIvyUserDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"settings loaded ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|dumpSettings
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|URL
name|settingsURL
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Message
operator|.
name|info
argument_list|(
literal|":: loading settings :: url = "
operator|+
name|settingsURL
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|setSettingsVariables
argument_list|(
name|settingsURL
argument_list|)
expr_stmt|;
if|if
condition|(
name|getVariable
argument_list|(
literal|"ivy.default.ivy.user.dir"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|setDefaultIvyUserDir
argument_list|(
operator|new
name|File
argument_list|(
name|getVariable
argument_list|(
literal|"ivy.default.ivy.user.dir"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDefaultIvyUserDir
argument_list|()
expr_stmt|;
block|}
name|getDefaultCache
argument_list|()
expr_stmt|;
name|loadDefaultProperties
argument_list|()
expr_stmt|;
operator|new
name|XmlSettingsParser
argument_list|(
name|this
argument_list|)
operator|.
name|parse
argument_list|(
name|settingsURL
argument_list|)
expr_stmt|;
name|setVariable
argument_list|(
literal|"ivy.default.ivy.user.dir"
argument_list|,
name|getDefaultIvyUserDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"settings loaded ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
name|dumpSettings
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|loadDefault
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|load
argument_list|(
name|getDefaultSettingsURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadDefault14
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|load
argument_list|(
name|getDefault14SettingsURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadDefaultProperties
parameter_list|()
throws|throws
name|IOException
block|{
name|loadProperties
argument_list|(
name|getDefaultPropertiesURL
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|URL
name|getDefaultPropertiesURL
parameter_list|()
block|{
return|return
name|getSettingsURL
argument_list|(
literal|"ivy.properties"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|URL
name|getDefaultSettingsURL
parameter_list|()
block|{
return|return
name|getSettingsURL
argument_list|(
literal|"ivysettings.xml"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|URL
name|getDefault14SettingsURL
parameter_list|()
block|{
return|return
name|getSettingsURL
argument_list|(
literal|"ivysettings-1.4.xml"
argument_list|)
return|;
block|}
specifier|private
name|String
name|getDefaultSettingsDir
parameter_list|()
block|{
name|String
name|ivysettingsLocation
init|=
name|getDefaultSettingsURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
return|return
name|ivysettingsLocation
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ivysettingsLocation
operator|.
name|length
argument_list|()
operator|-
literal|"ivysettings.xml"
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|URL
name|getSettingsURL
parameter_list|(
name|String
name|file
parameter_list|)
block|{
return|return
name|XmlSettingsParser
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|file
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSettingsVariables
parameter_list|(
name|File
name|settingsFile
parameter_list|)
block|{
try|try
block|{
name|setVariable
argument_list|(
literal|"ivy.settings.dir"
argument_list|,
operator|new
name|File
argument_list|(
name|settingsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|setDeprecatedVariable
argument_list|(
literal|"ivy.conf.dir"
argument_list|,
literal|"ivy.settings.dir"
argument_list|)
expr_stmt|;
name|setVariable
argument_list|(
literal|"ivy.settings.file"
argument_list|,
name|settingsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|setDeprecatedVariable
argument_list|(
literal|"ivy.conf.file"
argument_list|,
literal|"ivy.settings.file"
argument_list|)
expr_stmt|;
name|setVariable
argument_list|(
literal|"ivy.settings.url"
argument_list|,
name|settingsFile
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
name|setDeprecatedVariable
argument_list|(
literal|"ivy.conf.url"
argument_list|,
literal|"ivy.settings.url"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"given file cannot be transformed to url: "
operator|+
name|settingsFile
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
block|}
comment|/**      * Sets a deprecated variable with the value of the new variable      * @param deprecatedKey the deprecated variable name      * @param newKey the new variable name      */
specifier|private
name|void
name|setDeprecatedVariable
parameter_list|(
name|String
name|deprecatedKey
parameter_list|,
name|String
name|newKey
parameter_list|)
block|{
name|setVariable
argument_list|(
name|deprecatedKey
argument_list|,
name|getVariable
argument_list|(
name|newKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSettingsVariables
parameter_list|(
name|URL
name|settingsURL
parameter_list|)
block|{
name|String
name|settingsURLStr
init|=
name|settingsURL
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|setVariable
argument_list|(
literal|"ivy.settings.url"
argument_list|,
name|settingsURLStr
argument_list|)
expr_stmt|;
name|setDeprecatedVariable
argument_list|(
literal|"ivy.conf.url"
argument_list|,
literal|"ivy.settings.url"
argument_list|)
expr_stmt|;
name|int
name|slashIndex
init|=
name|settingsURLStr
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slashIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|setVariable
argument_list|(
literal|"ivy.settings.dir"
argument_list|,
name|settingsURLStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slashIndex
argument_list|)
argument_list|)
expr_stmt|;
name|setDeprecatedVariable
argument_list|(
literal|"ivy.conf.dir"
argument_list|,
literal|"ivy.settings.dir"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"settings url does not contain any slash (/): ivy.settings.dir variable not set"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dumpSettings
parameter_list|()
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tdefault cache: "
operator|+
name|getDefaultCache
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tdefault resolver: "
operator|+
name|getDefaultResolver
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tdefault latest strategy: "
operator|+
name|getDefaultLatestStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tdefault conflict manager: "
operator|+
name|getDefaultConflictManager
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tcircular dependency strategy: "
operator|+
name|getCircularDependencyStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tvalidate: "
operator|+
name|doValidate
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tcheck up2date: "
operator|+
name|isCheckUpToDate
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tcache ivy pattern: "
operator|+
name|getCacheIvyPattern
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\tcache artifact pattern: "
operator|+
name|getCacheArtifactPattern
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|_classpathURLs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t-- "
operator|+
name|_classpathURLs
operator|.
name|size
argument_list|()
operator|+
literal|" custom classpath urls:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_classpathURLs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\t"
operator|+
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t-- "
operator|+
name|_resolversMap
operator|.
name|size
argument_list|()
operator|+
literal|" resolvers:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_resolversMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|dumpSettings
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|_moduleSettings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tmodule settings:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_moduleSettings
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleIdMatcher
name|midm
init|=
operator|(
name|ModuleIdMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ModuleSettings
name|s
init|=
operator|(
name|ModuleSettings
operator|)
name|_moduleSettings
operator|.
name|get
argument_list|(
name|midm
argument_list|)
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\t"
operator|+
name|midm
operator|+
literal|" -> "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|loadProperties
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|loadProperties
argument_list|(
name|url
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadProperties
parameter_list|(
name|URL
name|url
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|loadProperties
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadProperties
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|loadProperties
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadProperties
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|loadProperties
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadProperties
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|addAllVariables
argument_list|(
name|properties
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
specifier|public
name|void
name|setVariable
parameter_list|(
name|String
name|varName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|setVariable
argument_list|(
name|varName
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setVariable
parameter_list|(
name|String
name|varName
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
block|{
if|if
condition|(
name|overwrite
operator|||
operator|!
name|_variables
operator|.
name|containsKey
argument_list|(
name|varName
argument_list|)
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"setting '"
operator|+
name|varName
operator|+
literal|"' to '"
operator|+
name|value
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|_variables
operator|.
name|put
argument_list|(
name|varName
argument_list|,
name|substitute
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"'"
operator|+
name|varName
operator|+
literal|"' already set: discarding '"
operator|+
name|value
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addAllVariables
parameter_list|(
name|Map
name|variables
parameter_list|)
block|{
name|addAllVariables
argument_list|(
name|variables
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAllVariables
parameter_list|(
name|Map
name|variables
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|variables
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|val
init|=
operator|(
name|String
operator|)
name|variables
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|setVariable
argument_list|(
name|key
argument_list|,
name|val
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Substitute variables in the given string by their value found in the current       * set of variables      *       * @param str the string in which substitution should be made      * @return the string where all current ivy variables have been substituted by their value      */
specifier|public
name|String
name|substitute
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|IvyPatternHelper
operator|.
name|substituteVariables
argument_list|(
name|str
argument_list|,
name|getVariables
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the variables loaded in configuration file. Those variables      * may better be seen as ant properties       *       * @return      */
specifier|public
name|Map
name|getVariables
parameter_list|()
block|{
return|return
name|_variables
return|;
block|}
specifier|public
name|Class
name|typeDef
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|className
parameter_list|)
block|{
return|return
name|typeDef
argument_list|(
name|name
argument_list|,
name|className
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|Class
name|typeDef
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|className
parameter_list|,
name|boolean
name|silentFail
parameter_list|)
block|{
name|Class
name|clazz
init|=
name|classForName
argument_list|(
name|className
argument_list|,
name|silentFail
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|_typeDefs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|clazz
return|;
block|}
specifier|private
name|Class
name|classForName
parameter_list|(
name|String
name|className
parameter_list|,
name|boolean
name|silentFail
parameter_list|)
block|{
try|try
block|{
return|return
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|silentFail
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"impossible to define new type: class not found: "
operator|+
name|className
operator|+
literal|" in "
operator|+
name|_classpathURLs
operator|+
literal|" nor Ivy classloader"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"impossible to define new type: class not found: "
operator|+
name|className
operator|+
literal|" in "
operator|+
name|_classpathURLs
operator|+
literal|" nor Ivy classloader"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
if|if
condition|(
name|_classloader
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|_classpathURLs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|_classloader
operator|=
name|Ivy
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|_classloader
operator|=
operator|new
name|URLClassLoader
argument_list|(
operator|(
name|URL
index|[]
operator|)
name|_classpathURLs
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
name|_classpathURLs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|Ivy
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|_classloader
return|;
block|}
specifier|public
name|void
name|addClasspathURL
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|_classpathURLs
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|_classloader
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Map
name|getTypeDefs
parameter_list|()
block|{
return|return
name|_typeDefs
return|;
block|}
specifier|public
name|Class
name|getTypeDef
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Class
operator|)
name|_typeDefs
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|// methods which match ivy conf method signature specs
specifier|public
name|void
name|addConfigured
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|)
block|{
name|addResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfigured
parameter_list|(
name|ModuleDescriptorParser
name|parser
parameter_list|)
block|{
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|addParser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addResolver
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"null resolver"
argument_list|)
throw|;
block|}
name|init
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|_resolversMap
operator|.
name|put
argument_list|(
name|resolver
operator|.
name|getName
argument_list|()
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolver
operator|instanceof
name|ChainResolver
condition|)
block|{
name|List
name|subresolvers
init|=
operator|(
operator|(
name|ChainResolver
operator|)
name|resolver
operator|)
operator|.
name|getResolvers
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|subresolvers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|dr
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|addResolver
argument_list|(
name|dr
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|resolver
operator|instanceof
name|DualResolver
condition|)
block|{
name|DependencyResolver
name|ivyResolver
init|=
operator|(
operator|(
name|DualResolver
operator|)
name|resolver
operator|)
operator|.
name|getIvyResolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|ivyResolver
operator|!=
literal|null
condition|)
block|{
name|addResolver
argument_list|(
name|ivyResolver
argument_list|)
expr_stmt|;
block|}
name|DependencyResolver
name|artifactResolver
init|=
operator|(
operator|(
name|DualResolver
operator|)
name|resolver
operator|)
operator|.
name|getArtifactResolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|artifactResolver
operator|!=
literal|null
condition|)
block|{
name|addResolver
argument_list|(
name|artifactResolver
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setDefaultCache
parameter_list|(
name|File
name|cacheDirectory
parameter_list|)
block|{
name|_defaultCache
operator|=
name|cacheDirectory
expr_stmt|;
block|}
specifier|public
name|void
name|setDefaultResolver
parameter_list|(
name|String
name|resolverName
parameter_list|)
block|{
name|checkResolverName
argument_list|(
name|resolverName
argument_list|)
expr_stmt|;
name|_defaultResolverName
operator|=
name|resolverName
expr_stmt|;
block|}
specifier|private
name|void
name|checkResolverName
parameter_list|(
name|String
name|resolverName
parameter_list|)
block|{
if|if
condition|(
name|resolverName
operator|!=
literal|null
operator|&&
operator|!
name|_resolversMap
operator|.
name|containsKey
argument_list|(
name|resolverName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no resolver found called "
operator|+
name|resolverName
operator|+
literal|": check your settings"
argument_list|)
throw|;
block|}
block|}
comment|/**      * regular expressions as explained in Pattern class may be used in ModuleId      * organisation and name      *       * @param moduleId      * @param resolverName      * @param branch       */
specifier|public
name|void
name|addModuleConfiguration
parameter_list|(
name|ModuleId
name|mid
parameter_list|,
name|PatternMatcher
name|matcher
parameter_list|,
name|String
name|resolverName
parameter_list|,
name|String
name|branch
parameter_list|,
name|String
name|conflictManager
parameter_list|)
block|{
name|checkResolverName
argument_list|(
name|resolverName
argument_list|)
expr_stmt|;
name|_moduleSettings
operator|.
name|put
argument_list|(
operator|new
name|ModuleIdMatcher
argument_list|(
name|mid
argument_list|,
name|matcher
argument_list|)
argument_list|,
operator|new
name|ModuleSettings
argument_list|(
name|resolverName
argument_list|,
name|branch
argument_list|,
name|conflictManager
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|File
name|getDefaultIvyUserDir
parameter_list|()
block|{
if|if
condition|(
name|_defaultUserDir
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getVariable
argument_list|(
literal|"ivy.home"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|setDefaultIvyUserDir
argument_list|(
operator|new
name|File
argument_list|(
name|getVariable
argument_list|(
literal|"ivy.home"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"using ivy.default.ivy.user.dir variable for default ivy user dir: "
operator|+
name|_defaultUserDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setDefaultIvyUserDir
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|,
literal|".ivy"
argument_list|)
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"no default ivy user dir defined: set to "
operator|+
name|_defaultUserDir
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|_defaultUserDir
return|;
block|}
specifier|public
name|void
name|setDefaultIvyUserDir
parameter_list|(
name|File
name|defaultUserDir
parameter_list|)
block|{
name|_defaultUserDir
operator|=
name|defaultUserDir
expr_stmt|;
name|setVariable
argument_list|(
literal|"ivy.default.ivy.user.dir"
argument_list|,
name|_defaultUserDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|setVariable
argument_list|(
literal|"ivy.home"
argument_list|,
name|_defaultUserDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|File
name|getDefaultCache
parameter_list|()
block|{
if|if
condition|(
name|_defaultCache
operator|==
literal|null
condition|)
block|{
name|_defaultCache
operator|=
operator|new
name|File
argument_list|(
name|getDefaultIvyUserDir
argument_list|()
argument_list|,
literal|"cache"
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"no default cache defined: set to "
operator|+
name|_defaultCache
argument_list|)
expr_stmt|;
block|}
return|return
name|_defaultCache
return|;
block|}
specifier|public
name|DependencyResolver
name|getResolver
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|)
block|{
if|if
condition|(
name|_dictatorResolver
operator|!=
literal|null
condition|)
block|{
return|return
name|_dictatorResolver
return|;
block|}
name|String
name|resolverName
init|=
name|getResolverName
argument_list|(
name|moduleId
argument_list|)
decl_stmt|;
return|return
name|getResolver
argument_list|(
name|resolverName
argument_list|)
return|;
block|}
specifier|public
name|DependencyResolver
name|getResolver
parameter_list|(
name|String
name|resolverName
parameter_list|)
block|{
if|if
condition|(
name|_dictatorResolver
operator|!=
literal|null
condition|)
block|{
return|return
name|_dictatorResolver
return|;
block|}
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|_resolversMap
operator|.
name|get
argument_list|(
name|resolverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"unknown resolver "
operator|+
name|resolverName
argument_list|)
expr_stmt|;
block|}
return|return
name|resolver
return|;
block|}
specifier|public
name|DependencyResolver
name|getDefaultResolver
parameter_list|()
block|{
if|if
condition|(
name|_dictatorResolver
operator|!=
literal|null
condition|)
block|{
return|return
name|_dictatorResolver
return|;
block|}
if|if
condition|(
name|_defaultResolver
operator|==
literal|null
condition|)
block|{
name|_defaultResolver
operator|=
operator|(
name|DependencyResolver
operator|)
name|_resolversMap
operator|.
name|get
argument_list|(
name|_defaultResolverName
argument_list|)
expr_stmt|;
block|}
return|return
name|_defaultResolver
return|;
block|}
specifier|public
name|String
name|getResolverName
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|_moduleSettings
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleIdMatcher
name|midm
init|=
operator|(
name|ModuleIdMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|midm
operator|.
name|matches
argument_list|(
name|moduleId
argument_list|)
condition|)
block|{
name|ModuleSettings
name|ms
init|=
operator|(
name|ModuleSettings
operator|)
name|_moduleSettings
operator|.
name|get
argument_list|(
name|midm
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|.
name|getResolverName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|ms
operator|.
name|getResolverName
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|_defaultResolverName
return|;
block|}
specifier|public
name|String
name|getDefaultBranch
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|_moduleSettings
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleIdMatcher
name|midm
init|=
operator|(
name|ModuleIdMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|midm
operator|.
name|matches
argument_list|(
name|moduleId
argument_list|)
condition|)
block|{
name|ModuleSettings
name|ms
init|=
operator|(
name|ModuleSettings
operator|)
name|_moduleSettings
operator|.
name|get
argument_list|(
name|midm
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|.
name|getBranch
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|ms
operator|.
name|getBranch
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|getDefaultBranch
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDefaultBranch
parameter_list|()
block|{
return|return
name|_defaultBranch
return|;
block|}
specifier|public
name|void
name|setDefaultBranch
parameter_list|(
name|String
name|defaultBranch
parameter_list|)
block|{
name|_defaultBranch
operator|=
name|defaultBranch
expr_stmt|;
block|}
specifier|public
name|ConflictManager
name|getConflictManager
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|_moduleSettings
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleIdMatcher
name|midm
init|=
operator|(
name|ModuleIdMatcher
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|midm
operator|.
name|matches
argument_list|(
name|moduleId
argument_list|)
condition|)
block|{
name|ModuleSettings
name|ms
init|=
operator|(
name|ModuleSettings
operator|)
name|_moduleSettings
operator|.
name|get
argument_list|(
name|midm
argument_list|)
decl_stmt|;
if|if
condition|(
name|ms
operator|.
name|getConflictManager
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ConflictManager
name|cm
init|=
name|getConflictManager
argument_list|(
name|ms
operator|.
name|getConflictManager
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ivy badly configured: unknown conflict manager "
operator|+
name|ms
operator|.
name|getConflictManager
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|cm
return|;
block|}
block|}
block|}
return|return
name|getDefaultConflictManager
argument_list|()
return|;
block|}
specifier|public
name|void
name|addConfigured
parameter_list|(
name|ConflictManager
name|cm
parameter_list|)
block|{
name|addConflictManager
argument_list|(
name|cm
operator|.
name|getName
argument_list|()
argument_list|,
name|cm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ConflictManager
name|getConflictManager
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getDefaultConflictManager
argument_list|()
return|;
block|}
return|return
operator|(
name|ConflictManager
operator|)
name|_conflictsManager
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|addConflictManager
parameter_list|(
name|String
name|name
parameter_list|,
name|ConflictManager
name|cm
parameter_list|)
block|{
name|init
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|_conflictsManager
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|cm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfigured
parameter_list|(
name|LatestStrategy
name|latest
parameter_list|)
block|{
name|addLatestStrategy
argument_list|(
name|latest
operator|.
name|getName
argument_list|()
argument_list|,
name|latest
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LatestStrategy
name|getLatestStrategy
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getDefaultLatestStrategy
argument_list|()
return|;
block|}
return|return
operator|(
name|LatestStrategy
operator|)
name|_latestStrategies
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|addLatestStrategy
parameter_list|(
name|String
name|name
parameter_list|,
name|LatestStrategy
name|latest
parameter_list|)
block|{
name|init
argument_list|(
name|latest
argument_list|)
expr_stmt|;
name|_latestStrategies
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|latest
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfigured
parameter_list|(
name|Namespace
name|ns
parameter_list|)
block|{
name|addNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Namespace
name|getNamespace
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"system"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|getSystemNamespace
argument_list|()
return|;
block|}
return|return
operator|(
name|Namespace
operator|)
name|_namespaces
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Namespace
name|getSystemNamespace
parameter_list|()
block|{
return|return
name|Namespace
operator|.
name|SYSTEM_NAMESPACE
return|;
block|}
specifier|public
name|void
name|addNamespace
parameter_list|(
name|Namespace
name|ns
parameter_list|)
block|{
name|init
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|_namespaces
operator|.
name|put
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfigured
parameter_list|(
name|PatternMatcher
name|m
parameter_list|)
block|{
name|addMatcher
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PatternMatcher
name|getMatcher
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|PatternMatcher
operator|)
name|_matchers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|addMatcher
parameter_list|(
name|PatternMatcher
name|m
parameter_list|)
block|{
name|init
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|_matchers
operator|.
name|put
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfigured
parameter_list|(
name|ReportOutputter
name|outputter
parameter_list|)
block|{
name|addReportOutputter
argument_list|(
name|outputter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReportOutputter
name|getReportOutputter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|ReportOutputter
operator|)
name|_reportOutputters
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|addReportOutputter
parameter_list|(
name|ReportOutputter
name|outputter
parameter_list|)
block|{
name|init
argument_list|(
name|outputter
argument_list|)
expr_stmt|;
name|_reportOutputters
operator|.
name|put
argument_list|(
name|outputter
operator|.
name|getName
argument_list|()
argument_list|,
name|outputter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReportOutputter
index|[]
name|getReportOutputters
parameter_list|()
block|{
return|return
operator|(
name|ReportOutputter
index|[]
operator|)
name|_reportOutputters
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ReportOutputter
index|[
name|_reportOutputters
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|addConfigured
parameter_list|(
name|VersionMatcher
name|vmatcher
parameter_list|)
block|{
name|addVersionMatcher
argument_list|(
name|vmatcher
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VersionMatcher
name|getVersionMatcher
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|VersionMatcher
operator|)
name|_versionMatchers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|addVersionMatcher
parameter_list|(
name|VersionMatcher
name|vmatcher
parameter_list|)
block|{
name|init
argument_list|(
name|vmatcher
argument_list|)
expr_stmt|;
name|_versionMatchers
operator|.
name|put
argument_list|(
name|vmatcher
operator|.
name|getName
argument_list|()
argument_list|,
name|vmatcher
argument_list|)
expr_stmt|;
if|if
condition|(
name|_versionMatcher
operator|==
literal|null
condition|)
block|{
name|_versionMatcher
operator|=
operator|new
name|ChainVersionMatcher
argument_list|()
expr_stmt|;
name|addVersionMatcher
argument_list|(
operator|new
name|ExactVersionMatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|_versionMatcher
operator|instanceof
name|ChainVersionMatcher
condition|)
block|{
name|ChainVersionMatcher
name|chain
init|=
operator|(
name|ChainVersionMatcher
operator|)
name|_versionMatcher
decl_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|vmatcher
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|VersionMatcher
index|[]
name|getVersionMatchers
parameter_list|()
block|{
return|return
operator|(
name|VersionMatcher
index|[]
operator|)
name|_versionMatchers
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|VersionMatcher
index|[
name|_versionMatchers
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|VersionMatcher
name|getVersionMatcher
parameter_list|()
block|{
if|if
condition|(
name|_versionMatcher
operator|==
literal|null
condition|)
block|{
name|configureDefaultVersionMatcher
argument_list|()
expr_stmt|;
block|}
return|return
name|_versionMatcher
return|;
block|}
specifier|public
name|void
name|configureDefaultVersionMatcher
parameter_list|()
block|{
name|addVersionMatcher
argument_list|(
operator|new
name|LatestVersionMatcher
argument_list|()
argument_list|)
expr_stmt|;
name|addVersionMatcher
argument_list|(
operator|new
name|SubVersionMatcher
argument_list|()
argument_list|)
expr_stmt|;
name|addVersionMatcher
argument_list|(
operator|new
name|VersionRangeMatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CircularDependencyStrategy
name|getCircularDependencyStrategy
parameter_list|()
block|{
if|if
condition|(
name|_circularDependencyStrategy
operator|==
literal|null
condition|)
block|{
name|_circularDependencyStrategy
operator|=
name|getCircularDependencyStrategy
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
block|}
return|return
name|_circularDependencyStrategy
return|;
block|}
specifier|public
name|CircularDependencyStrategy
name|getCircularDependencyStrategy
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"warn"
expr_stmt|;
block|}
return|return
operator|(
name|CircularDependencyStrategy
operator|)
name|_circularDependencyStrategies
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCircularDependencyStrategy
parameter_list|(
name|CircularDependencyStrategy
name|strategy
parameter_list|)
block|{
name|_circularDependencyStrategy
operator|=
name|strategy
expr_stmt|;
block|}
specifier|public
name|void
name|addConfigured
parameter_list|(
name|CircularDependencyStrategy
name|strategy
parameter_list|)
block|{
name|addCircularDependencyStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addCircularDependencyStrategy
parameter_list|(
name|CircularDependencyStrategy
name|strategy
parameter_list|)
block|{
name|_circularDependencyStrategies
operator|.
name|put
argument_list|(
name|strategy
operator|.
name|getName
argument_list|()
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureDefaultCircularDependencyStrategies
parameter_list|()
block|{
name|addCircularDependencyStrategy
argument_list|(
name|WarnCircularDependencyStrategy
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|addCircularDependencyStrategy
argument_list|(
name|ErrorCircularDependencyStrategy
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|addCircularDependencyStrategy
argument_list|(
name|IgnoreCircularDependencyStrategy
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StatusManager
name|getStatusManager
parameter_list|()
block|{
if|if
condition|(
name|_statusManager
operator|==
literal|null
condition|)
block|{
name|_statusManager
operator|=
name|StatusManager
operator|.
name|newDefaultInstance
argument_list|()
expr_stmt|;
block|}
return|return
name|_statusManager
return|;
block|}
specifier|public
name|void
name|setStatusManager
parameter_list|(
name|StatusManager
name|statusManager
parameter_list|)
block|{
name|_statusManager
operator|=
name|statusManager
expr_stmt|;
block|}
comment|/**      * Returns true if the name should be ignored in listing      * @param name      * @return      */
specifier|public
name|boolean
name|listingIgnore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|_listingIgnore
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Filters the names list by removing all names that should be ignored      * as defined by the listing ignore list      * @param names      */
specifier|public
name|void
name|filterIgnore
parameter_list|(
name|Collection
name|names
parameter_list|)
block|{
name|names
operator|.
name|removeAll
argument_list|(
name|_listingIgnore
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCheckUpToDate
parameter_list|()
block|{
return|return
name|_checkUpToDate
return|;
block|}
specifier|public
name|void
name|setCheckUpToDate
parameter_list|(
name|boolean
name|checkUpToDate
parameter_list|)
block|{
name|_checkUpToDate
operator|=
name|checkUpToDate
expr_stmt|;
block|}
specifier|public
name|String
name|getCacheArtifactPattern
parameter_list|()
block|{
return|return
name|_cacheArtifactPattern
return|;
block|}
specifier|public
name|void
name|setCacheArtifactPattern
parameter_list|(
name|String
name|cacheArtifactPattern
parameter_list|)
block|{
name|_cacheArtifactPattern
operator|=
name|cacheArtifactPattern
expr_stmt|;
block|}
specifier|public
name|String
name|getCacheIvyPattern
parameter_list|()
block|{
return|return
name|_cacheIvyPattern
return|;
block|}
specifier|public
name|void
name|setCacheIvyPattern
parameter_list|(
name|String
name|cacheIvyPattern
parameter_list|)
block|{
name|_cacheIvyPattern
operator|=
name|cacheIvyPattern
expr_stmt|;
block|}
specifier|public
name|String
name|getCacheDataFilePattern
parameter_list|()
block|{
return|return
name|_cacheDataFilePattern
return|;
block|}
specifier|public
name|boolean
name|doValidate
parameter_list|()
block|{
return|return
name|_validate
return|;
block|}
specifier|public
name|void
name|setValidate
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
name|_validate
operator|=
name|validate
expr_stmt|;
block|}
specifier|public
name|String
name|getVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|_variables
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|val
operator|==
literal|null
condition|?
name|val
else|:
name|substitute
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|public
name|ConflictManager
name|getDefaultConflictManager
parameter_list|()
block|{
if|if
condition|(
name|_defaultConflictManager
operator|==
literal|null
condition|)
block|{
name|_defaultConflictManager
operator|=
operator|new
name|LatestConflictManager
argument_list|(
name|getDefaultLatestStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|_defaultConflictManager
return|;
block|}
specifier|public
name|void
name|setDefaultConflictManager
parameter_list|(
name|ConflictManager
name|defaultConflictManager
parameter_list|)
block|{
name|_defaultConflictManager
operator|=
name|defaultConflictManager
expr_stmt|;
block|}
specifier|public
name|LatestStrategy
name|getDefaultLatestStrategy
parameter_list|()
block|{
if|if
condition|(
name|_defaultLatestStrategy
operator|==
literal|null
condition|)
block|{
name|_defaultLatestStrategy
operator|=
operator|new
name|LatestRevisionStrategy
argument_list|()
expr_stmt|;
block|}
return|return
name|_defaultLatestStrategy
return|;
block|}
specifier|public
name|void
name|setDefaultLatestStrategy
parameter_list|(
name|LatestStrategy
name|defaultLatestStrategy
parameter_list|)
block|{
name|_defaultLatestStrategy
operator|=
name|defaultLatestStrategy
expr_stmt|;
block|}
specifier|public
name|void
name|addTrigger
parameter_list|(
name|Trigger
name|trigger
parameter_list|)
block|{
name|init
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
name|_triggers
operator|.
name|add
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getTriggers
parameter_list|()
block|{
return|return
name|_triggers
return|;
block|}
specifier|public
name|void
name|addConfigured
parameter_list|(
name|Trigger
name|trigger
parameter_list|)
block|{
name|addTrigger
argument_list|(
name|trigger
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseRemoteConfig
parameter_list|()
block|{
return|return
name|_useRemoteConfig
return|;
block|}
specifier|public
name|void
name|setUseRemoteConfig
parameter_list|(
name|boolean
name|useRemoteConfig
parameter_list|)
block|{
name|_useRemoteConfig
operator|=
name|useRemoteConfig
expr_stmt|;
block|}
comment|/**       * WARNING: Replace all current ivy variables by the given Map.      * Should be used only when restoring variables.      *       *  Thr given Map is not copied, but stored by reference.      * @param variables      */
specifier|public
name|void
name|setVariables
parameter_list|(
name|Map
name|variables
parameter_list|)
block|{
if|if
condition|(
name|variables
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"variables shouldn't be null"
argument_list|)
throw|;
block|}
name|_variables
operator|=
name|variables
expr_stmt|;
block|}
specifier|public
name|boolean
name|logModulesInUse
parameter_list|()
block|{
name|String
name|var
init|=
name|getVariable
argument_list|(
literal|"ivy.log.modules.in.use"
argument_list|)
decl_stmt|;
return|return
name|var
operator|==
literal|null
operator|||
name|Boolean
operator|.
name|valueOf
argument_list|(
name|var
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|logModuleWhenFound
parameter_list|()
block|{
name|String
name|var
init|=
name|getVariable
argument_list|(
literal|"ivy.log.module.when.found"
argument_list|)
decl_stmt|;
return|return
name|var
operator|==
literal|null
operator|||
name|Boolean
operator|.
name|valueOf
argument_list|(
name|var
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|logResolvedRevision
parameter_list|()
block|{
name|String
name|var
init|=
name|getVariable
argument_list|(
literal|"ivy.log.resolved.revision"
argument_list|)
decl_stmt|;
return|return
name|var
operator|==
literal|null
operator|||
name|Boolean
operator|.
name|valueOf
argument_list|(
name|var
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|debugConflictResolution
parameter_list|()
block|{
if|if
condition|(
name|_debugConflictResolution
operator|==
literal|null
condition|)
block|{
name|String
name|var
init|=
name|getVariable
argument_list|(
literal|"ivy.log.conflict.resolution"
argument_list|)
decl_stmt|;
name|_debugConflictResolution
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|var
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|valueOf
argument_list|(
name|var
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|_debugConflictResolution
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|logNotConvertedExclusionRule
parameter_list|()
block|{
return|return
name|_logNotConvertedExclusionRule
return|;
block|}
specifier|public
name|void
name|setLogNotConvertedExclusionRule
parameter_list|(
name|boolean
name|logNotConvertedExclusionRule
parameter_list|)
block|{
name|_logNotConvertedExclusionRule
operator|=
name|logNotConvertedExclusionRule
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|IvySettingsAware
condition|)
block|{
operator|(
operator|(
name|IvySettingsAware
operator|)
name|obj
operator|)
operator|.
name|setSettings
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|IvyAware
condition|)
block|{
comment|//TODO
comment|//            ((IvyAware)obj).setIvy(this);
block|}
block|}
specifier|private
specifier|static
class|class
name|ModuleSettings
block|{
specifier|private
name|String
name|_resolverName
decl_stmt|;
specifier|private
name|String
name|_branch
decl_stmt|;
specifier|private
name|String
name|_conflictManager
decl_stmt|;
specifier|public
name|ModuleSettings
parameter_list|(
name|String
name|resolverName
parameter_list|,
name|String
name|branch
parameter_list|,
name|String
name|conflictManager
parameter_list|)
block|{
name|_resolverName
operator|=
name|resolverName
expr_stmt|;
name|_branch
operator|=
name|branch
expr_stmt|;
name|_conflictManager
operator|=
name|conflictManager
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|_resolverName
operator|!=
literal|null
condition|?
literal|"resolver: "
operator|+
name|_resolverName
else|:
literal|""
operator|+
name|_branch
operator|!=
literal|null
condition|?
literal|"branch: "
operator|+
name|_branch
else|:
literal|""
return|;
block|}
specifier|public
name|String
name|getBranch
parameter_list|()
block|{
return|return
name|_branch
return|;
block|}
specifier|public
name|String
name|getResolverName
parameter_list|()
block|{
return|return
name|_resolverName
return|;
block|}
specifier|protected
name|String
name|getConflictManager
parameter_list|()
block|{
return|return
name|_conflictManager
return|;
block|}
block|}
specifier|public
name|String
name|getCacheResolvedIvyPattern
parameter_list|()
block|{
return|return
name|_cacheResolvedIvyPattern
return|;
block|}
specifier|public
name|String
name|getCacheResolvedIvyPropertiesPattern
parameter_list|()
block|{
return|return
name|_cacheResolvedIvyPropertiesPattern
return|;
block|}
specifier|public
name|long
name|getInterruptTimeout
parameter_list|()
block|{
return|return
name|_interruptTimeout
return|;
block|}
specifier|public
name|Collection
name|getResolvers
parameter_list|()
block|{
return|return
name|_resolversMap
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|Collection
name|getResolverNames
parameter_list|()
block|{
return|return
name|_resolversMap
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|Collection
name|getMatcherNames
parameter_list|()
block|{
return|return
name|_matchers
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
end_class

end_unit

