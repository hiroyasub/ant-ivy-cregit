begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ConfigurationResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_class
specifier|public
class|class
name|ResolveData
block|{
specifier|private
name|ResolveEngine
name|engine
decl_stmt|;
specifier|private
name|Map
name|visitData
decl_stmt|;
comment|// shared map of all visit data: Map (ModuleRevisionId -> VisitData)
specifier|private
name|ConfigurationResolveReport
name|report
decl_stmt|;
specifier|private
name|ResolveOptions
name|options
decl_stmt|;
specifier|public
name|ResolveData
parameter_list|(
name|ResolveData
name|data
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
name|this
argument_list|(
name|data
operator|.
name|engine
argument_list|,
operator|new
name|ResolveOptions
argument_list|(
name|data
operator|.
name|options
argument_list|)
operator|.
name|setValidate
argument_list|(
name|validate
argument_list|)
argument_list|,
name|data
operator|.
name|report
argument_list|,
name|data
operator|.
name|visitData
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResolveData
parameter_list|(
name|ResolveEngine
name|engine
parameter_list|,
name|ResolveOptions
name|options
parameter_list|)
block|{
name|this
argument_list|(
name|engine
argument_list|,
name|options
argument_list|,
literal|null
argument_list|,
operator|new
name|LinkedHashMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResolveData
parameter_list|(
name|ResolveEngine
name|engine
parameter_list|,
name|ResolveOptions
name|options
parameter_list|,
name|ConfigurationResolveReport
name|report
parameter_list|)
block|{
name|this
argument_list|(
name|engine
argument_list|,
name|options
argument_list|,
name|report
argument_list|,
operator|new
name|LinkedHashMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResolveData
parameter_list|(
name|ResolveEngine
name|engine
parameter_list|,
name|ResolveOptions
name|options
parameter_list|,
name|ConfigurationResolveReport
name|report
parameter_list|,
name|Map
name|visitData
parameter_list|)
block|{
name|this
operator|.
name|engine
operator|=
name|engine
expr_stmt|;
name|this
operator|.
name|report
operator|=
name|report
expr_stmt|;
name|this
operator|.
name|visitData
operator|=
name|visitData
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
comment|/**      * Returns the Map of visit data. Map (ModuleRevisionId -> VisitData)      *       * @return      */
specifier|public
name|Map
name|getVisitDataMap
parameter_list|()
block|{
return|return
name|visitData
return|;
block|}
specifier|public
name|ConfigurationResolveReport
name|getReport
parameter_list|()
block|{
return|return
name|report
return|;
block|}
specifier|public
name|IvyNode
name|getNode
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|VisitData
name|visitData
init|=
name|getVisitData
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
return|return
name|visitData
operator|==
literal|null
condition|?
literal|null
else|:
name|visitData
operator|.
name|getNode
argument_list|()
return|;
block|}
specifier|public
name|Collection
name|getNodes
parameter_list|()
block|{
name|Collection
name|nodes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|visitData
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|VisitData
name|vdata
init|=
operator|(
name|VisitData
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|vdata
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
specifier|public
name|Collection
name|getNodeIds
parameter_list|()
block|{
return|return
name|visitData
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|VisitData
name|getVisitData
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
operator|(
name|VisitData
operator|)
name|visitData
operator|.
name|get
argument_list|(
name|mrid
argument_list|)
return|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|VisitNode
name|node
parameter_list|)
block|{
name|register
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|VisitNode
name|node
parameter_list|)
block|{
name|VisitData
name|visitData
init|=
name|getVisitData
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|visitData
operator|==
literal|null
condition|)
block|{
name|visitData
operator|=
operator|new
name|VisitData
argument_list|(
name|node
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|visitData
operator|.
name|addVisitNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|this
operator|.
name|visitData
operator|.
name|put
argument_list|(
name|mrid
argument_list|,
name|visitData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visitData
operator|.
name|setNode
argument_list|(
name|node
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|visitData
operator|.
name|addVisitNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Updates the visit data currently associated with the given mrid with the given node and the      * visit nodes of the old visitData for the given rootModuleConf      *       * @param mrid      *            the module revision id for which the update should be done      * @param node      *            the IvyNode to associate with the visit data to update      * @param rootModuleConf      *            the root module configuration in which the update is made      */
name|void
name|replaceNode
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|IvyNode
name|node
parameter_list|,
name|String
name|rootModuleConf
parameter_list|)
block|{
name|VisitData
name|visitData
init|=
name|getVisitData
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|visitData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"impossible to replace node for id "
operator|+
name|mrid
operator|+
literal|". No registered node found."
argument_list|)
throw|;
block|}
name|VisitData
name|keptVisitData
init|=
name|getVisitData
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keptVisitData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"impossible to replace node with "
operator|+
name|node
operator|+
literal|". No registered node found for "
operator|+
name|node
operator|.
name|getId
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
comment|// replace visit data in Map (discards old one)
name|this
operator|.
name|visitData
operator|.
name|put
argument_list|(
name|mrid
argument_list|,
name|keptVisitData
argument_list|)
expr_stmt|;
comment|// update visit data with discarde visit nodes
name|keptVisitData
operator|.
name|addVisitNodes
argument_list|(
name|rootModuleConf
argument_list|,
name|visitData
operator|.
name|getVisitNodes
argument_list|(
name|rootModuleConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setReport
parameter_list|(
name|ConfigurationResolveReport
name|report
parameter_list|)
block|{
name|this
operator|.
name|report
operator|=
name|report
expr_stmt|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|()
block|{
return|return
name|options
operator|.
name|getDate
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isValidate
parameter_list|()
block|{
return|return
name|options
operator|.
name|isValidate
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isTransitive
parameter_list|()
block|{
return|return
name|options
operator|.
name|isTransitive
argument_list|()
return|;
block|}
specifier|public
name|ResolveOptions
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
specifier|public
name|CacheManager
name|getCacheManager
parameter_list|()
block|{
return|return
name|options
operator|.
name|getCache
argument_list|()
return|;
block|}
specifier|public
name|IvySettings
name|getSettings
parameter_list|()
block|{
return|return
name|engine
operator|.
name|getSettings
argument_list|()
return|;
block|}
specifier|public
name|EventManager
name|getEventManager
parameter_list|()
block|{
return|return
name|engine
operator|.
name|getEventManager
argument_list|()
return|;
block|}
specifier|public
name|ResolveEngine
name|getEngine
parameter_list|()
block|{
return|return
name|engine
return|;
block|}
block|}
end_class

end_unit

