begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ConfigurationResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_class
specifier|public
class|class
name|ResolveData
block|{
specifier|private
name|Map
name|_nodes
decl_stmt|;
comment|// shared map of all nodes: Map (ModuleRevisionId -> IvyNode)
specifier|private
name|Date
name|_date
decl_stmt|;
specifier|private
name|boolean
name|_validate
decl_stmt|;
specifier|private
name|boolean
name|_transitive
decl_stmt|;
specifier|private
name|ConfigurationResolveReport
name|_report
decl_stmt|;
specifier|private
name|CacheManager
name|_cacheManager
decl_stmt|;
specifier|private
name|ResolveEngine
name|_engine
decl_stmt|;
specifier|public
name|ResolveData
parameter_list|(
name|ResolveData
name|data
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
name|this
argument_list|(
name|data
operator|.
name|_engine
argument_list|,
name|data
operator|.
name|_cacheManager
argument_list|,
name|data
operator|.
name|_date
argument_list|,
name|data
operator|.
name|_report
argument_list|,
name|validate
argument_list|,
name|data
operator|.
name|_transitive
argument_list|,
name|data
operator|.
name|_nodes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResolveData
parameter_list|(
name|ResolveEngine
name|engine
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|ConfigurationResolveReport
name|report
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
name|this
argument_list|(
name|engine
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|report
argument_list|,
name|validate
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResolveData
parameter_list|(
name|ResolveEngine
name|engine
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|ConfigurationResolveReport
name|report
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|Map
name|nodes
parameter_list|)
block|{
name|this
argument_list|(
name|engine
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|report
argument_list|,
name|validate
argument_list|,
literal|true
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResolveData
parameter_list|(
name|ResolveEngine
name|engine
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|ConfigurationResolveReport
name|report
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|Map
name|nodes
parameter_list|)
block|{
name|this
argument_list|(
name|engine
argument_list|,
operator|new
name|CacheManager
argument_list|(
name|engine
operator|.
name|getSettings
argument_list|()
argument_list|,
name|cache
argument_list|)
argument_list|,
name|date
argument_list|,
name|report
argument_list|,
name|validate
argument_list|,
name|transitive
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResolveData
parameter_list|(
name|ResolveEngine
name|engine
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|Date
name|date
parameter_list|,
name|ConfigurationResolveReport
name|report
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|Map
name|nodes
parameter_list|)
block|{
name|_engine
operator|=
name|engine
expr_stmt|;
name|_date
operator|=
name|date
expr_stmt|;
name|_report
operator|=
name|report
expr_stmt|;
name|_validate
operator|=
name|validate
expr_stmt|;
name|_transitive
operator|=
name|transitive
expr_stmt|;
name|_nodes
operator|=
name|nodes
expr_stmt|;
name|_cacheManager
operator|=
name|cacheManager
expr_stmt|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|()
block|{
return|return
name|_date
return|;
block|}
specifier|public
name|Map
name|getNodes
parameter_list|()
block|{
return|return
name|_nodes
return|;
block|}
specifier|public
name|ConfigurationResolveReport
name|getReport
parameter_list|()
block|{
return|return
name|_report
return|;
block|}
specifier|public
name|boolean
name|isValidate
parameter_list|()
block|{
return|return
name|_validate
return|;
block|}
specifier|public
name|IvyNode
name|getNode
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
return|return
operator|(
name|IvyNode
operator|)
name|_nodes
operator|.
name|get
argument_list|(
name|mrid
argument_list|)
return|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|IvyNode
name|node
parameter_list|)
block|{
name|_nodes
operator|.
name|put
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|ModuleRevisionId
name|id
parameter_list|,
name|IvyNode
name|node
parameter_list|)
block|{
name|_nodes
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setReport
parameter_list|(
name|ConfigurationResolveReport
name|report
parameter_list|)
block|{
name|_report
operator|=
name|report
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTransitive
parameter_list|()
block|{
return|return
name|_transitive
return|;
block|}
specifier|public
name|IvySettings
name|getSettings
parameter_list|()
block|{
return|return
name|_engine
operator|.
name|getSettings
argument_list|()
return|;
block|}
specifier|public
name|CacheManager
name|getCacheManager
parameter_list|()
block|{
return|return
name|_cacheManager
return|;
block|}
specifier|public
name|EventManager
name|getEventManager
parameter_list|()
block|{
return|return
name|_engine
operator|.
name|getEventManager
argument_list|()
return|;
block|}
specifier|public
name|ResolveEngine
name|getEngine
parameter_list|()
block|{
return|return
name|_engine
return|;
block|}
block|}
end_class

end_unit

