begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|download
operator|.
name|PrepareDownloadEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|resolve
operator|.
name|EndResolveEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|resolve
operator|.
name|StartResolveEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ConfigurationResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|IvyNode
operator|.
name|EvictionData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
operator|.
name|SortEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParserRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|CacheResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|HostUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|FilterHelper
import|;
end_import

begin_class
specifier|public
class|class
name|ResolveEngine
block|{
specifier|private
name|IvySettings
name|_settings
decl_stmt|;
specifier|private
name|EventManager
name|_eventManager
decl_stmt|;
specifier|private
name|SortEngine
name|_sortEngine
decl_stmt|;
specifier|private
name|Set
name|_fetchedSet
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
name|DependencyResolver
name|_dictatorResolver
decl_stmt|;
specifier|public
name|ResolveEngine
parameter_list|(
name|IvySettings
name|settings
parameter_list|,
name|EventManager
name|eventManager
parameter_list|,
name|SortEngine
name|sortEngine
parameter_list|)
block|{
name|_settings
operator|=
name|settings
expr_stmt|;
name|_eventManager
operator|=
name|eventManager
expr_stmt|;
name|_sortEngine
operator|=
name|sortEngine
expr_stmt|;
block|}
specifier|public
name|DependencyResolver
name|getDictatorResolver
parameter_list|()
block|{
return|return
name|_dictatorResolver
return|;
block|}
specifier|public
name|void
name|setDictatorResolver
parameter_list|(
name|DependencyResolver
name|dictatorResolver
parameter_list|)
block|{
name|_dictatorResolver
operator|=
name|dictatorResolver
expr_stmt|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|File
name|ivySource
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|resolve
argument_list|(
name|ivySource
operator|.
name|toURL
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|resolve
argument_list|(
name|ivySource
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      *       * @param ivySource the url to the descriptor of the module for which dependencies should be resolved      * @param revision the revision of the module for which dependencies should be resolved.      * This revision is considered as the resolved revision of the module, unless it is null.      * If it is null, then a default revision is given if necessary (no revision found in ivy file)      * @param confs the configurations for which dependencies should be resolved      * @param cache the directory where to place resolved dependencies      * @param date the date for which the dependencies should be resolved. All obtained artifacts       * should have a publication date which is before or equal to the given date      * @throws ParseException      * @throws IOException      * @throws NullPointerException if any parameter is null except cache or date      */
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|revision
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|revision
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|FilterHelper
operator|.
name|NO_FILTER
argument_list|)
return|;
block|}
comment|/**      * Resolves the module identified by the given mrid with its dependencies.       */
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
index|[]
name|confs
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|resolve
argument_list|(
name|mrid
argument_list|,
name|confs
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|FilterHelper
operator|.
name|NO_FILTER
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
specifier|final
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|changing
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|resolve
argument_list|(
name|mrid
argument_list|,
name|confs
argument_list|,
name|transitive
argument_list|,
name|changing
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
literal|false
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
comment|/**      * Resolves the module identified by the given mrid with its dependencies if transitive is set to true.       */
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
specifier|final
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|changing
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|useOrigin
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|DefaultModuleDescriptor
name|md
decl_stmt|;
if|if
condition|(
name|confs
operator|.
name|length
operator|==
literal|1
operator|&&
name|confs
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|ResolvedModuleRevision
name|rmr
init|=
name|findModule
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmr
operator|==
literal|null
condition|)
block|{
name|md
operator|=
name|DefaultModuleDescriptor
operator|.
name|newCallerInstance
argument_list|(
name|mrid
argument_list|,
name|confs
argument_list|,
name|transitive
argument_list|,
name|changing
argument_list|)
expr_stmt|;
return|return
operator|new
name|ResolveReport
argument_list|(
name|md
argument_list|)
block|{
specifier|public
name|boolean
name|hasError
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|List
name|getProblemMessages
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"module not found: "
operator|+
name|mrid
block|}
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
name|confs
operator|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
name|md
operator|=
name|DefaultModuleDescriptor
operator|.
name|newCallerInstance
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mrid
argument_list|,
name|rmr
operator|.
name|getId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|,
name|confs
argument_list|,
name|transitive
argument_list|,
name|changing
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|md
operator|=
name|DefaultModuleDescriptor
operator|.
name|newCallerInstance
argument_list|(
name|mrid
argument_list|,
name|confs
argument_list|,
name|transitive
argument_list|,
name|changing
argument_list|)
expr_stmt|;
block|}
return|return
name|resolve
argument_list|(
name|md
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
literal|true
argument_list|,
name|useOrigin
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|revision
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
literal|true
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|revision
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|transitive
argument_list|,
literal|false
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
comment|/**      * Resolve dependencies of a module described by an ivy file.      *       * Note: the method signature is way too long, we should use a class to store the settings of the resolve.      */
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|useOrigin
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|URLResource
name|res
init|=
operator|new
name|URLResource
argument_list|(
name|ivySource
argument_list|)
decl_stmt|;
name|ModuleDescriptorParser
name|parser
init|=
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getParser
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"using "
operator|+
name|parser
operator|+
literal|" to parse "
operator|+
name|ivySource
argument_list|)
expr_stmt|;
name|ModuleDescriptor
name|md
init|=
name|parser
operator|.
name|parseDescriptor
argument_list|(
name|_settings
argument_list|,
name|ivySource
argument_list|,
name|validate
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|==
literal|null
operator|&&
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|==
literal|null
condition|)
block|{
name|revision
operator|=
literal|"working@"
operator|+
name|HostUtil
operator|.
name|getLocalHostName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|setResolvedModuleRevisionId
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
name|revision
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resolve
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|transitive
argument_list|,
name|useOrigin
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|FileNotFoundException
block|{
return|return
name|resolve
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
literal|true
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|FileNotFoundException
block|{
return|return
name|resolve
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|transitive
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|download
parameter_list|,
name|boolean
name|outputReport
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|FileNotFoundException
block|{
return|return
name|resolve
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|transitive
argument_list|,
literal|false
argument_list|,
name|download
argument_list|,
name|outputReport
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
comment|/**      * Resolve dependencies of a module described by a module descriptor      *       * Note: the method signature is way too long, we should use a class to store the settings of the resolve.      */
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|useOrigin
parameter_list|,
name|boolean
name|download
parameter_list|,
name|boolean
name|outputReport
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|FileNotFoundException
block|{
name|DependencyResolver
name|oldDictator
init|=
name|getDictatorResolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|useCacheOnly
condition|)
block|{
name|setDictatorResolver
argument_list|(
operator|new
name|CacheResolver
argument_list|(
name|_settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
comment|// ensure that a cache exists
name|cache
operator|=
name|_settings
operator|.
name|getDefaultCache
argument_list|()
expr_stmt|;
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
name|CacheManager
name|cacheManager
init|=
name|getCacheManager
argument_list|(
name|cache
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactFilter
operator|==
literal|null
condition|)
block|{
name|artifactFilter
operator|=
name|FilterHelper
operator|.
name|NO_FILTER
expr_stmt|;
block|}
if|if
condition|(
name|confs
operator|.
name|length
operator|==
literal|1
operator|&&
name|confs
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|confs
operator|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
name|_eventManager
operator|.
name|fireIvyEvent
argument_list|(
operator|new
name|StartResolveEvent
argument_list|(
name|md
argument_list|,
name|confs
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|":: resolving dependencies :: "
operator|+
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|+
operator|(
name|transitive
condition|?
literal|""
else|:
literal|" [not transitive]"
operator|)
argument_list|)
expr_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|"\tconfs: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|confs
argument_list|)
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tvalidate = "
operator|+
name|validate
argument_list|)
expr_stmt|;
name|ResolveReport
name|report
init|=
operator|new
name|ResolveReport
argument_list|(
name|md
argument_list|)
decl_stmt|;
comment|// resolve dependencies
name|IvyNode
index|[]
name|dependencies
init|=
name|getDependencies
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|report
argument_list|,
name|validate
argument_list|,
name|transitive
argument_list|)
decl_stmt|;
name|report
operator|.
name|setDependencies
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dependencies
argument_list|)
argument_list|,
name|artifactFilter
argument_list|)
expr_stmt|;
comment|// produce resolved ivy file and ivy properties in cache
name|File
name|ivyFileInCache
init|=
name|cacheManager
operator|.
name|getResolvedIvyFileInCache
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|md
operator|.
name|toIvyFile
argument_list|(
name|ivyFileInCache
argument_list|)
expr_stmt|;
comment|// we store the resolved dependencies revisions and statuses per asked dependency revision id,
comment|// for direct dependencies only.
comment|// this is used by the deliver task to resolve dynamic revisions to static ones
name|File
name|ivyPropertiesInCache
init|=
name|cacheManager
operator|.
name|getResolvedIvyPropertiesInCache
argument_list|(
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependencies
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|IvyNode
name|root
init|=
name|dependencies
index|[
literal|0
index|]
operator|.
name|getRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|dependencies
index|[
name|i
index|]
operator|.
name|isCompletelyEvicted
argument_list|()
operator|&&
operator|!
name|dependencies
index|[
name|i
index|]
operator|.
name|hasProblem
argument_list|()
condition|)
block|{
name|DependencyDescriptor
name|dd
init|=
name|dependencies
index|[
name|i
index|]
operator|.
name|getDependencyDescriptor
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|dd
operator|!=
literal|null
condition|)
block|{
name|String
name|rev
init|=
name|dependencies
index|[
name|i
index|]
operator|.
name|getResolvedId
argument_list|()
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|String
name|status
init|=
name|dependencies
index|[
name|i
index|]
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|encodeToString
argument_list|()
argument_list|,
name|rev
operator|+
literal|" "
operator|+
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|props
operator|.
name|store
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|ivyPropertiesInCache
argument_list|)
argument_list|,
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
operator|+
literal|" resolved revisions"
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tresolved ivy file produced in "
operator|+
name|ivyFileInCache
argument_list|)
expr_stmt|;
name|report
operator|.
name|setResolveTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|download
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|":: downloading artifacts ::"
argument_list|)
expr_stmt|;
name|downloadArtifacts
argument_list|(
name|report
argument_list|,
name|cacheManager
argument_list|,
name|useOrigin
argument_list|,
name|artifactFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputReport
condition|)
block|{
name|outputReport
argument_list|(
name|report
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|_eventManager
operator|.
name|fireIvyEvent
argument_list|(
operator|new
name|EndResolveEvent
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|report
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
finally|finally
block|{
name|setDictatorResolver
argument_list|(
name|oldDictator
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|CacheManager
name|getCacheManager
parameter_list|(
name|File
name|cache
parameter_list|)
block|{
name|CacheManager
name|cacheManager
init|=
operator|new
name|CacheManager
argument_list|(
name|_settings
argument_list|,
name|cache
argument_list|)
decl_stmt|;
return|return
name|cacheManager
return|;
block|}
specifier|public
name|void
name|outputReport
parameter_list|(
name|ResolveReport
name|report
parameter_list|,
name|File
name|cache
parameter_list|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|":: resolution report ::"
argument_list|)
expr_stmt|;
name|report
operator|.
name|setProblemMessages
argument_list|(
name|Message
operator|.
name|getProblems
argument_list|()
argument_list|)
expr_stmt|;
comment|// output report
name|report
operator|.
name|output
argument_list|(
name|_settings
operator|.
name|getReportOutputters
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tresolve done ("
operator|+
name|report
operator|.
name|getResolveTime
argument_list|()
operator|+
literal|"ms resolve - "
operator|+
name|report
operator|.
name|getDownloadTime
argument_list|()
operator|+
literal|"ms download)"
argument_list|)
expr_stmt|;
name|Message
operator|.
name|sumupProblems
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|downloadArtifacts
parameter_list|(
name|ResolveReport
name|report
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|boolean
name|useOrigin
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|IvyNode
index|[]
name|dependencies
init|=
operator|(
name|IvyNode
index|[]
operator|)
name|report
operator|.
name|getDependencies
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|IvyNode
index|[
name|report
operator|.
name|getDependencies
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|_eventManager
operator|.
name|fireIvyEvent
argument_list|(
operator|new
name|PrepareDownloadEvent
argument_list|(
operator|(
name|Artifact
index|[]
operator|)
name|report
operator|.
name|getArtifacts
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Artifact
index|[
name|report
operator|.
name|getArtifacts
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|checkInterrupted
argument_list|()
expr_stmt|;
comment|//download artifacts required in all asked configurations
if|if
condition|(
operator|!
name|dependencies
index|[
name|i
index|]
operator|.
name|isCompletelyEvicted
argument_list|()
operator|&&
operator|!
name|dependencies
index|[
name|i
index|]
operator|.
name|hasProblem
argument_list|()
condition|)
block|{
name|DependencyResolver
name|resolver
init|=
name|dependencies
index|[
name|i
index|]
operator|.
name|getModuleRevision
argument_list|()
operator|.
name|getArtifactResolver
argument_list|()
decl_stmt|;
name|Artifact
index|[]
name|selectedArtifacts
init|=
name|dependencies
index|[
name|i
index|]
operator|.
name|getSelectedArtifacts
argument_list|(
name|artifactFilter
argument_list|)
decl_stmt|;
name|DownloadReport
name|dReport
init|=
name|resolver
operator|.
name|download
argument_list|(
name|selectedArtifacts
argument_list|,
operator|new
name|DownloadOptions
argument_list|(
name|_settings
argument_list|,
name|cacheManager
argument_list|,
name|_eventManager
argument_list|,
name|useOrigin
argument_list|)
argument_list|)
decl_stmt|;
name|ArtifactDownloadReport
index|[]
name|adrs
init|=
name|dReport
operator|.
name|getArtifactsReports
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|adrs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|adrs
index|[
name|j
index|]
operator|.
name|getDownloadStatus
argument_list|()
operator|==
name|DownloadStatus
operator|.
name|FAILED
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"\t[NOT FOUND  ] "
operator|+
name|adrs
index|[
name|j
index|]
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|reportFailure
argument_list|(
name|adrs
index|[
name|j
index|]
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update concerned reports
name|String
index|[]
name|dconfs
init|=
name|dependencies
index|[
name|i
index|]
operator|.
name|getRootModuleConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|dconfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// the report itself is responsible to take into account only
comment|// artifacts required in its corresponding configuration
comment|// (as described by the Dependency object)
if|if
condition|(
name|dependencies
index|[
name|i
index|]
operator|.
name|isEvicted
argument_list|(
name|dconfs
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|report
operator|.
name|getConfigurationReport
argument_list|(
name|dconfs
index|[
name|j
index|]
argument_list|)
operator|.
name|addDependency
argument_list|(
name|dependencies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|report
operator|.
name|getConfigurationReport
argument_list|(
name|dconfs
index|[
name|j
index|]
argument_list|)
operator|.
name|addDependency
argument_list|(
name|dependencies
index|[
name|i
index|]
argument_list|,
name|dReport
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|report
operator|.
name|setDownloadTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkInterrupted
parameter_list|()
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getIvy
argument_list|()
operator|.
name|checkInterrupted
argument_list|()
expr_stmt|;
block|}
comment|/**      * Download an artifact to the cache.      * Not used internally, useful especially for IDE plugins      * needing to download artifact one by one (for source or javadoc artifact,      * for instance).      *       * Downloaded artifact file can be accessed using getArchiveFileInCache method.      *       * It is possible to track the progression of the download using classical ivy       * progress monitoring feature (see addTransferListener).      *       * @param artifact the artifact to download      * @param cache the cache to use. If null, will use default cache      * @return a report concerning the download      */
specifier|public
name|ArtifactDownloadReport
name|download
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|cache
parameter_list|,
name|boolean
name|useOrigin
parameter_list|)
block|{
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|cache
operator|=
name|_settings
operator|.
name|getDefaultCache
argument_list|()
expr_stmt|;
block|}
name|DependencyResolver
name|resolver
init|=
name|_settings
operator|.
name|getResolver
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
decl_stmt|;
name|CacheManager
name|cacheManager
init|=
name|getCacheManager
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|DownloadReport
name|r
init|=
name|resolver
operator|.
name|download
argument_list|(
operator|new
name|Artifact
index|[]
block|{
name|artifact
block|}
argument_list|,
operator|new
name|DownloadOptions
argument_list|(
name|_settings
argument_list|,
name|cacheManager
argument_list|,
name|_eventManager
argument_list|,
name|useOrigin
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|r
operator|.
name|getArtifactReport
argument_list|(
name|artifact
argument_list|)
return|;
block|}
comment|/**      * Resolve the dependencies of a module without downloading corresponding artifacts.      * The module to resolve is given by its ivy file URL. This method requires      * appropriate configuration of the ivy instance, especially resolvers.      *       * @param ivySource url of the ivy file to use for dependency resolving      * @param confs an array of configuration names to resolve - must not be null nor empty      * @param cache the cache to use - default cache is used if null      * @param date the date to which resolution must be done - may be null      * @return an array of the resolved dependencies      * @throws ParseException if a parsing problem occured in the ivy file      * @throws IOException if an IO problem was raised during ivy file parsing      */
specifier|public
name|IvyNode
index|[]
name|getDependencies
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|getDependencies
argument_list|(
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|_settings
argument_list|,
name|ivySource
argument_list|,
name|validate
argument_list|)
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
literal|null
argument_list|,
name|validate
argument_list|)
return|;
block|}
comment|/**      * Resolve the dependencies of a module without downloading corresponding artifacts.      * The module to resolve is given by its module descriptor.This method requires      * appropriate configuration of the ivy instance, especially resolvers.      *       * @param md the descriptor of the module for which we want to get dependencies - must not be null      * @param confs an array of configuration names to resolve - must not be null nor empty      * @param cache the cache to use - default cache is used if null      * @param date the date to which resolution must be done - may be null      * @param report a resolve report to fill during resolution - may be null      * @return an array of the resolved Dependencies      */
specifier|public
name|IvyNode
index|[]
name|getDependencies
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|ResolveReport
name|report
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
return|return
name|getDependencies
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|report
argument_list|,
name|validate
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|IvyNode
index|[]
name|getDependencies
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|ResolveReport
name|report
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|transitive
parameter_list|)
block|{
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"module descriptor must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
comment|// ensure that a cache exists
name|cache
operator|=
name|_settings
operator|.
name|getDefaultCache
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|confs
operator|.
name|length
operator|==
literal|1
operator|&&
name|confs
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|confs
operator|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
name|Map
name|dependenciesMap
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|Date
name|reportDate
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|ResolveData
name|data
init|=
operator|new
name|ResolveData
argument_list|(
name|this
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
literal|null
argument_list|,
name|validate
argument_list|,
name|transitive
argument_list|,
name|dependenciesMap
argument_list|)
decl_stmt|;
name|IvyNode
name|rootNode
init|=
operator|new
name|IvyNode
argument_list|(
name|data
argument_list|,
name|md
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// for each configuration we clear the cache of what's been fetched
name|_fetchedSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Configuration
name|configuration
init|=
name|md
operator|.
name|getConfiguration
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"asked configuration not found in "
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ConfigurationResolveReport
name|confReport
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|report
operator|!=
literal|null
condition|)
block|{
name|confReport
operator|=
name|report
operator|.
name|getConfigurationReport
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|confReport
operator|==
literal|null
condition|)
block|{
name|confReport
operator|=
operator|new
name|ConfigurationResolveReport
argument_list|(
name|this
argument_list|,
name|md
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|,
name|reportDate
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|report
operator|.
name|addReport
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
name|confReport
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we reuse the same resolve data with a new report for each conf
name|data
operator|.
name|setReport
argument_list|(
name|confReport
argument_list|)
expr_stmt|;
comment|// update the root module conf we are about to fetch
name|rootNode
operator|.
name|setRootModuleConf
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|rootNode
operator|.
name|setRequestedConf
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|rootNode
operator|.
name|updateConfsToFetch
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// go fetch !
name|fetchDependencies
argument_list|(
name|rootNode
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// prune and reverse sort fectched dependencies
name|Collection
name|dependencies
init|=
operator|new
name|LinkedHashSet
argument_list|(
name|dependenciesMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// use a Set to avoids duplicates
for|for
control|(
name|Iterator
name|iter
init|=
name|dependenciesMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|dep
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dep
operator|!=
literal|null
condition|)
block|{
name|dependencies
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
name|List
name|sortedDependencies
init|=
name|_sortEngine
operator|.
name|sortNodes
argument_list|(
name|dependencies
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|sortedDependencies
argument_list|)
expr_stmt|;
comment|// handle transitive eviction now:
comment|// if a module has been evicted then all its dependencies required
comment|// only by it should be evicted too. Since nodes are now sorted from the more dependent to
comment|// the less one, we can traverse the list and check only the direct parent and not all
comment|// the ancestors
for|for
control|(
name|ListIterator
name|iter
init|=
name|sortedDependencies
operator|.
name|listIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|node
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isCompletelyEvicted
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IvyNode
operator|.
name|Caller
index|[]
name|callers
init|=
name|node
operator|.
name|getCallers
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"checking if "
operator|+
name|node
operator|.
name|getId
argument_list|()
operator|+
literal|" is transitively evicted in "
operator|+
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|boolean
name|allEvicted
init|=
name|callers
operator|.
name|length
operator|>
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|callers
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|callers
index|[
name|j
index|]
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
condition|)
block|{
comment|// the caller is the root module itself, it can't be evicted
name|allEvicted
operator|=
literal|false
expr_stmt|;
break|break;
block|}
else|else
block|{
name|IvyNode
name|callerNode
init|=
operator|(
name|IvyNode
operator|)
name|dependenciesMap
operator|.
name|get
argument_list|(
name|callers
index|[
name|j
index|]
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerNode
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"ivy internal error: no node found for "
operator|+
name|callers
index|[
name|j
index|]
operator|.
name|getModuleRevisionId
argument_list|()
operator|+
literal|": looked in "
operator|+
name|dependenciesMap
operator|.
name|keySet
argument_list|()
operator|+
literal|" and root module id was "
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|callerNode
operator|.
name|isEvicted
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|allEvicted
operator|=
literal|false
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"caller "
operator|+
name|callerNode
operator|.
name|getId
argument_list|()
operator|+
literal|" of "
operator|+
name|node
operator|.
name|getId
argument_list|()
operator|+
literal|" is evicted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|allEvicted
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"all callers are evicted for "
operator|+
name|node
operator|+
literal|": evicting too"
argument_list|)
expr_stmt|;
name|node
operator|.
name|markEvicted
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|node
operator|.
name|getId
argument_list|()
operator|+
literal|" isn't transitively evicted, at least one caller was not evicted"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
operator|(
name|IvyNode
index|[]
operator|)
name|dependencies
operator|.
name|toArray
argument_list|(
operator|new
name|IvyNode
index|[
name|dependencies
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|fetchDependencies
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|String
name|conf
parameter_list|,
name|boolean
name|shouldBePublic
parameter_list|)
block|{
name|checkInterrupted
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|node
operator|.
name|getId
argument_list|()
operator|+
literal|" => resolving dependencies in "
operator|+
name|conf
argument_list|)
expr_stmt|;
block|}
name|resolveConflict
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|loadData
argument_list|(
name|conf
argument_list|,
name|shouldBePublic
argument_list|)
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getRealNode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// if data loading discarded the node, get the real one
name|resolveConflict
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isEvicted
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|node
operator|.
name|getRealConfs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doFetchDependencies
argument_list|(
name|node
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
operator|!
name|node
operator|.
name|hasProblem
argument_list|()
condition|)
block|{
comment|// the node has not been loaded but hasn't problem: it was already loaded
comment|// => we just have to update its dependencies data
if|if
condition|(
operator|!
name|node
operator|.
name|isEvicted
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
condition|)
block|{
name|String
index|[]
name|confs
init|=
name|node
operator|.
name|getRealConfs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doFetchDependencies
argument_list|(
name|node
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|node
operator|.
name|isEvicted
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
condition|)
block|{
comment|// update selected nodes with confs asked in evicted one
name|IvyNode
operator|.
name|EvictionData
name|ed
init|=
name|node
operator|.
name|getEvictedData
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ed
operator|.
name|getSelected
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|ed
operator|.
name|getSelected
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|selected
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|fetchDependencies
argument_list|(
name|selected
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|node
operator|.
name|getId
argument_list|()
operator|+
literal|" => dependencies resolved in "
operator|+
name|conf
operator|+
literal|" ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doFetchDependencies
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
name|Configuration
name|c
init|=
name|node
operator|.
name|getConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"configuration not found '"
operator|+
name|conf
operator|+
literal|"' in "
operator|+
name|node
operator|.
name|getResolvedId
argument_list|()
operator|+
literal|": ignoring"
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"it was required from "
operator|+
name|node
operator|.
name|getParent
argument_list|()
operator|.
name|getResolvedId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// we handle the case where the asked configuration extends others:
comment|// we have to first fetch the extended configurations
comment|// first we check if this is the actual requested conf (not an extended one)
name|boolean
name|requestedConfSet
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getRequestedConf
argument_list|()
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|setRequestedConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|requestedConfSet
operator|=
literal|true
expr_stmt|;
block|}
comment|// now let's recurse in extended confs
name|String
index|[]
name|extendedConfs
init|=
name|c
operator|.
name|getExtends
argument_list|()
decl_stmt|;
if|if
condition|(
name|extendedConfs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|node
operator|.
name|updateConfsToFetch
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|extendedConfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extendedConfs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fetchDependencies
argument_list|(
name|node
argument_list|,
name|extendedConfs
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// now we can actually resolve this configuration dependencies
name|DependencyDescriptor
name|dd
init|=
name|node
operator|.
name|getDependencyDescriptor
argument_list|(
name|node
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isDependenciesFetched
argument_list|(
name|node
argument_list|,
name|conf
argument_list|)
operator|&&
operator|(
name|dd
operator|==
literal|null
operator|||
name|node
operator|.
name|isTransitive
argument_list|()
operator|)
condition|)
block|{
name|Collection
name|dependencies
init|=
name|node
operator|.
name|getDependencies
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|dep
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|dep
operator|=
name|dep
operator|.
name|getRealNode
argument_list|()
expr_stmt|;
comment|// the node may have been resolved to another real one while resolving other deps
name|node
operator|.
name|traverse
argument_list|(
name|conf
argument_list|,
name|dep
argument_list|)
expr_stmt|;
comment|// dependency traversal data may have been changed while resolving other deps, we update it
if|if
condition|(
name|dep
operator|.
name|isCircular
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|confs
init|=
name|dep
operator|.
name|getRequiredConfigurations
argument_list|(
name|node
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fetchDependencies
argument_list|(
name|dep
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// if there are still confs to fetch (usually because they have
comment|// been updated when evicting another module), we fetch them now
name|confs
operator|=
name|dep
operator|.
name|getConfsToFetch
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fetchDependencies
argument_list|(
name|dep
argument_list|,
name|confs
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// we have finiched with this configuration, if it was the original requested conf
comment|// we can clean it now
if|if
condition|(
name|requestedConfSet
condition|)
block|{
name|node
operator|.
name|setRequestedConf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns true if we've already fetched the dependencies for this node and configuration      * @param node node to check      * @param conf configuration to check      * @return true if we've already fetched this dependency      */
specifier|private
name|boolean
name|isDependenciesFetched
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
name|ModuleId
name|moduleId
init|=
name|node
operator|.
name|getModuleId
argument_list|()
decl_stmt|;
name|ModuleRevisionId
name|moduleRevisionId
init|=
name|node
operator|.
name|getResolvedId
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|moduleId
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|"|"
operator|+
name|moduleId
operator|.
name|getName
argument_list|()
operator|+
literal|"|"
operator|+
name|moduleRevisionId
operator|.
name|getRevision
argument_list|()
operator|+
literal|"|"
operator|+
name|conf
decl_stmt|;
if|if
condition|(
name|_fetchedSet
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|_fetchedSet
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|resolveConflict
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|IvyNode
name|parent
parameter_list|)
block|{
name|resolveConflict
argument_list|(
name|node
argument_list|,
name|parent
argument_list|,
name|Collections
operator|.
name|EMPTY_SET
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|resolveConflict
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|IvyNode
name|parent
parameter_list|,
name|Collection
name|toevict
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
operator|||
name|node
operator|==
name|parent
condition|)
block|{
return|return;
block|}
comment|// check if job is not already done
if|if
condition|(
name|checkConflictSolved
argument_list|(
name|node
argument_list|,
name|parent
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// compute conflicts
name|Collection
name|resolvedNodes
init|=
operator|new
name|HashSet
argument_list|(
name|parent
operator|.
name|getResolvedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
name|conflicts
init|=
name|computeConflicts
argument_list|(
name|node
argument_list|,
name|parent
argument_list|,
name|toevict
argument_list|,
name|resolvedNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"found conflicting revisions for "
operator|+
name|node
operator|+
literal|" in "
operator|+
name|parent
operator|+
literal|": "
operator|+
name|conflicts
argument_list|)
expr_stmt|;
block|}
name|Collection
name|resolved
init|=
name|parent
operator|.
name|getConflictManager
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|)
operator|.
name|resolveConflicts
argument_list|(
name|parent
argument_list|,
name|conflicts
argument_list|)
decl_stmt|;
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"selected revisions for "
operator|+
name|node
operator|+
literal|" in "
operator|+
name|parent
operator|+
literal|": "
operator|+
name|resolved
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolved
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|// node has been selected for the current parent
comment|// handle previously selected nodes that are now evicted by this new node
name|toevict
operator|=
name|resolvedNodes
expr_stmt|;
name|toevict
operator|.
name|removeAll
argument_list|(
name|resolved
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|toevict
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|te
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|te
operator|.
name|markEvicted
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|parent
argument_list|,
name|parent
operator|.
name|getConflictManager
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|)
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"evicting "
operator|+
name|te
operator|+
literal|" by "
operator|+
name|te
operator|.
name|getEvictedData
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// it's very important to update resolved and evicted nodes BEFORE recompute parent call
comment|// to allow it to recompute its resolved collection with correct data
comment|// if necessary
name|parent
operator|.
name|setResolvedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
name|Collection
name|evicted
init|=
operator|new
name|HashSet
argument_list|(
name|parent
operator|.
name|getEvictedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|evicted
operator|.
name|removeAll
argument_list|(
name|resolved
argument_list|)
expr_stmt|;
name|evicted
operator|.
name|addAll
argument_list|(
name|toevict
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setEvictedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|evicted
argument_list|)
expr_stmt|;
name|resolveConflict
argument_list|(
name|node
argument_list|,
name|parent
operator|.
name|getParent
argument_list|()
argument_list|,
name|toevict
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// node has been evicted for the current parent
if|if
condition|(
name|resolved
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"conflict manager '"
operator|+
name|parent
operator|.
name|getConflictManager
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|)
operator|+
literal|"' evicted all revisions among "
operator|+
name|conflicts
argument_list|)
expr_stmt|;
block|}
block|}
comment|// it's time to update parent resolved and evicted with what was found
name|Collection
name|evicted
init|=
operator|new
name|HashSet
argument_list|(
name|parent
operator|.
name|getEvictedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|toevict
operator|.
name|removeAll
argument_list|(
name|resolved
argument_list|)
expr_stmt|;
name|evicted
operator|.
name|removeAll
argument_list|(
name|resolved
argument_list|)
expr_stmt|;
name|evicted
operator|.
name|addAll
argument_list|(
name|toevict
argument_list|)
expr_stmt|;
name|evicted
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setEvictedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|evicted
argument_list|)
expr_stmt|;
name|node
operator|.
name|markEvicted
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|parent
argument_list|,
name|parent
operator|.
name|getConflictManager
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|)
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"evicting "
operator|+
name|node
operator|+
literal|" by "
operator|+
name|node
operator|.
name|getEvictedData
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// if resolved changed we have to go up in the graph
name|Collection
name|prevResolved
init|=
name|parent
operator|.
name|getResolvedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prevResolved
operator|.
name|equals
argument_list|(
name|resolved
argument_list|)
condition|)
block|{
name|parent
operator|.
name|setResolvedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|resolved
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|sel
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prevResolved
operator|.
name|contains
argument_list|(
name|sel
argument_list|)
condition|)
block|{
name|resolveConflict
argument_list|(
name|sel
argument_list|,
name|parent
operator|.
name|getParent
argument_list|()
argument_list|,
name|toevict
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|Collection
name|computeConflicts
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|IvyNode
name|parent
parameter_list|,
name|Collection
name|toevict
parameter_list|,
name|Collection
name|resolvedNodes
parameter_list|)
block|{
name|Collection
name|conflicts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolvedNodes
operator|.
name|removeAll
argument_list|(
name|toevict
argument_list|)
condition|)
block|{
comment|// parent.resolved(node.mid) is not up to date:
comment|// recompute resolved from all sub nodes
name|conflicts
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|Collection
name|deps
init|=
name|parent
operator|.
name|getDependencies
argument_list|(
name|parent
operator|.
name|getRequiredConfigurations
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|deps
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IvyNode
name|dep
init|=
operator|(
name|IvyNode
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|dep
operator|.
name|getResolvedNodes
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|resolvedNodes
operator|.
name|isEmpty
argument_list|()
operator|&&
name|node
operator|.
name|getParent
argument_list|()
operator|!=
name|parent
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|DependencyDescriptor
index|[]
name|dds
init|=
name|parent
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|)
condition|)
block|{
name|IvyNode
name|n
init|=
name|node
operator|.
name|findNode
argument_list|(
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|conflicts
operator|.
name|addAll
argument_list|(
name|resolvedNodes
argument_list|)
expr_stmt|;
block|}
return|return
name|conflicts
return|;
block|}
specifier|private
name|boolean
name|checkConflictSolved
parameter_list|(
name|IvyNode
name|node
parameter_list|,
name|IvyNode
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|.
name|getResolvedRevisions
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getResolvedId
argument_list|()
argument_list|)
condition|)
block|{
comment|// resolve conflict has already be done with node with the same id
comment|// => job already done, we just have to check if the node wasn't previously evicted in root ancestor
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"conflict resolution already done for "
operator|+
name|node
operator|+
literal|" in "
operator|+
name|parent
argument_list|)
expr_stmt|;
block|}
name|EvictionData
name|evictionData
init|=
name|node
operator|.
name|getEvictionDataInRoot
argument_list|(
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|evictionData
operator|!=
literal|null
condition|)
block|{
comment|// node has been previously evicted in an ancestor: we mark it as evicted
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|node
operator|+
literal|" was previously evicted in root module conf "
operator|+
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|markEvicted
argument_list|(
name|evictionData
argument_list|)
expr_stmt|;
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"evicting "
operator|+
name|node
operator|+
literal|" by "
operator|+
name|evictionData
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|parent
operator|.
name|getEvictedRevisions
argument_list|(
name|node
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|node
operator|.
name|getRootModuleConf
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getResolvedId
argument_list|()
argument_list|)
condition|)
block|{
comment|// resolve conflict has already be done with node with the same id
comment|// => job already done, we just have to check if the node wasn't previously selected in root ancestor
if|if
condition|(
name|_settings
operator|.
name|debugConflictResolution
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"conflict resolution already done for "
operator|+
name|node
operator|+
literal|" in "
operator|+
name|parent
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|ResolvedModuleRevision
name|findModule
parameter_list|(
name|ModuleRevisionId
name|id
parameter_list|)
block|{
name|DependencyResolver
name|r
init|=
name|_settings
operator|.
name|getResolver
argument_list|(
name|id
operator|.
name|getModuleId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no resolver found for "
operator|+
name|id
operator|.
name|getModuleId
argument_list|()
argument_list|)
throw|;
block|}
name|DefaultModuleDescriptor
name|md
init|=
name|DefaultModuleDescriptor
operator|.
name|newCallerInstance
argument_list|(
name|id
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|r
operator|.
name|getDependency
argument_list|(
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|ResolveData
argument_list|(
name|this
argument_list|,
name|_settings
operator|.
name|getDefaultCache
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|ConfigurationResolveReport
argument_list|(
name|this
argument_list|,
name|md
argument_list|,
literal|"default"
argument_list|,
literal|null
argument_list|,
name|_settings
operator|.
name|getDefaultCache
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem whle parsing repository module descriptor for "
operator|+
name|id
operator|+
literal|": "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|EventManager
name|getEventManager
parameter_list|()
block|{
return|return
name|_eventManager
return|;
block|}
specifier|public
name|IvySettings
name|getSettings
parameter_list|()
block|{
return|return
name|_settings
return|;
block|}
specifier|public
name|SortEngine
name|getSortEngine
parameter_list|()
block|{
return|return
name|_sortEngine
return|;
block|}
block|}
end_class

end_unit

