begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|TimeoutConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|TimeoutConstrainedURLHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|URLHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
operator|.
name|URLHandlerRegistry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Pack200
operator|.
name|newUnpacker
import|;
end_import

begin_comment
comment|/**  * Utility class used to deal with file related operations, like copy, full reading, symlink, ...  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FileUtil
block|{
specifier|private
name|FileUtil
parameter_list|()
block|{
comment|// Utility class
block|}
comment|// according to tests by users, 64kB seems to be a good value for the buffer used during copy;
comment|// further improvements could be obtained using NIO API
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BUFFER
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
comment|/**      * Creates a symbolic link at {@code link} whose target will be the {@code target}. Depending      * on the underlying filesystem, this method may not always be able to create a symbolic link,      * in which case this method returns {@code false}.      *      * @param target    The {@link File} which will be the target of the symlink being created      * @param link      The path to the symlink that needs to be created      * @param overwrite {@code true} if any existing file at {@code link} has to be overwritten.      *                  False otherwise      * @return Returns true if the symlink was successfully created. Returns false if the symlink      * could not be created      * @throws IOException if {@link Files#createSymbolicLink} fails      */
specifier|public
specifier|static
name|boolean
name|symlink
parameter_list|(
specifier|final
name|File
name|target
parameter_list|,
specifier|final
name|File
name|link
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
comment|// prepare for symlink
if|if
condition|(
name|target
operator|.
name|isFile
argument_list|()
condition|)
block|{
comment|// it's a file that is being symlinked, so do the necessary preparation
comment|// for the linking, similar to what we do with preparation for copying
if|if
condition|(
operator|!
name|prepareCopy
argument_list|(
name|target
argument_list|,
name|link
argument_list|,
name|overwrite
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// it's a directory being symlinked, make sure the "link" that is being
comment|// created has the necessary parent directories in place before triggering
comment|// symlink creation
if|if
condition|(
name|link
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|link
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|link
operator|.
name|toPath
argument_list|()
argument_list|,
name|target
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dest
parameter_list|,
name|CopyProgressListener
name|l
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|copy
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|l
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|prepareCopy
parameter_list|(
specifier|final
name|File
name|src
parameter_list|,
specifier|final
name|File
name|dest
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|src
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|dest
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dest
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"impossible to copy: destination is not a directory: "
operator|+
name|dest
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|dest
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|// else it is a file copy
if|if
condition|(
name|dest
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// If overwrite is specified as "true" and the dest file happens to be a symlink,
comment|// we delete the "link" (a.k.a unlink it). This is for cases like
comment|// https://issues.apache.org/jira/browse/IVY-1498 where not unlinking the existing
comment|// symlink can lead to potentially overwriting the wrong "target" file
comment|// TODO: This behaviour is intentionally hardcoded here for now, since I don't
comment|// see a reason (yet) to expose it as a param of this method. If any use case arises
comment|// we can have this behaviour decided by the callers of this method, by passing
comment|// a value for this param
specifier|final
name|boolean
name|unlinkSymlinkIfOverwrite
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|dest
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"impossible to copy: destination is not a file: "
operator|+
name|dest
argument_list|)
throw|;
block|}
if|if
condition|(
name|overwrite
condition|)
block|{
if|if
condition|(
name|Files
operator|.
name|isSymbolicLink
argument_list|(
name|dest
operator|.
name|toPath
argument_list|()
argument_list|)
operator|&&
name|unlinkSymlinkIfOverwrite
condition|)
block|{
comment|// unlink (a.k.a delete the symlink path)
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|dest
operator|.
name|canWrite
argument_list|()
condition|)
block|{
comment|// if the file *isn't* "writable" (see javadoc of File.canWrite() on what
comment|// that means) we delete it.
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|// if dest is writable, the copy will overwrite it without requiring a delete
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
name|dest
operator|+
literal|" already exists, nothing done"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|dest
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dest
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dest
parameter_list|,
name|CopyProgressListener
name|l
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|prepareCopy
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|overwrite
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|src
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|deepCopy
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|l
argument_list|,
name|overwrite
argument_list|)
return|;
block|}
comment|// else it is a file copy
name|copy
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
argument_list|,
name|dest
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|long
name|srcLen
init|=
name|src
operator|.
name|length
argument_list|()
decl_stmt|;
name|long
name|destLen
init|=
name|dest
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcLen
operator|!=
name|destLen
condition|)
block|{
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"size of source file "
operator|+
name|src
operator|.
name|toString
argument_list|()
operator|+
literal|"("
operator|+
name|srcLen
operator|+
literal|") differs from size of dest file "
operator|+
name|dest
operator|.
name|toString
argument_list|()
operator|+
literal|"("
operator|+
name|destLen
operator|+
literal|") - please retry"
argument_list|)
throw|;
block|}
name|dest
operator|.
name|setLastModified
argument_list|(
name|src
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|deepCopy
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|dest
parameter_list|,
name|CopyProgressListener
name|l
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the list of files which already exist in the destination folder
name|List
argument_list|<
name|File
argument_list|>
name|existingChild
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dest
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// not expected type, remove
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// and create a folder
name|dest
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dest
operator|.
name|setLastModified
argument_list|(
name|src
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// existing folder, gather existing children
name|File
index|[]
name|children
init|=
name|dest
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
name|existingChild
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|children
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|dest
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|dest
operator|.
name|setLastModified
argument_list|(
name|src
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// copy files one by one
name|File
index|[]
name|toCopy
init|=
name|src
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|toCopy
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|cf
range|:
name|toCopy
control|)
block|{
comment|// compute the destination file
name|File
name|childDest
init|=
operator|new
name|File
argument_list|(
name|dest
argument_list|,
name|cf
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// if file existing, 'mark' it as taken care of
if|if
condition|(
operator|!
name|existingChild
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|existingChild
operator|.
name|remove
argument_list|(
name|childDest
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cf
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deepCopy
argument_list|(
name|cf
argument_list|,
name|childDest
argument_list|,
name|l
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copy
argument_list|(
name|cf
argument_list|,
name|childDest
argument_list|,
name|l
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// some file exist in the destination but not in the source: delete them
for|for
control|(
name|File
name|child
range|:
name|existingChild
control|)
block|{
name|forceDelete
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
specifier|final
name|URL
name|src
parameter_list|,
specifier|final
name|File
name|dest
parameter_list|,
specifier|final
name|CopyProgressListener
name|listener
parameter_list|,
specifier|final
name|TimeoutConstraint
name|timeoutConstraint
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|URLHandler
name|handler
init|=
name|URLHandlerRegistry
operator|.
name|getDefault
argument_list|()
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|TimeoutConstrainedURLHandler
condition|)
block|{
operator|(
operator|(
name|TimeoutConstrainedURLHandler
operator|)
name|handler
operator|)
operator|.
name|download
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|listener
argument_list|,
name|timeoutConstraint
argument_list|)
expr_stmt|;
return|return;
block|}
name|handler
operator|.
name|download
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
specifier|final
name|File
name|src
parameter_list|,
specifier|final
name|URL
name|dest
parameter_list|,
specifier|final
name|CopyProgressListener
name|listener
parameter_list|,
specifier|final
name|TimeoutConstraint
name|timeoutConstraint
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|URLHandler
name|handler
init|=
name|URLHandlerRegistry
operator|.
name|getDefault
argument_list|()
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|TimeoutConstrainedURLHandler
condition|)
block|{
operator|(
operator|(
name|TimeoutConstrainedURLHandler
operator|)
name|handler
operator|)
operator|.
name|upload
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|listener
argument_list|,
name|timeoutConstraint
argument_list|)
expr_stmt|;
return|return;
block|}
name|handler
operator|.
name|upload
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|InputStream
name|src
parameter_list|,
name|File
name|dest
parameter_list|,
name|CopyProgressListener
name|l
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dest
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dest
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|copy
argument_list|(
name|src
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|dest
argument_list|)
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|InputStream
name|src
parameter_list|,
name|OutputStream
name|dest
parameter_list|,
name|CopyProgressListener
name|l
parameter_list|)
throws|throws
name|IOException
block|{
name|copy
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|l
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|InputStream
name|src
parameter_list|,
name|OutputStream
name|dest
parameter_list|,
name|CopyProgressListener
name|l
parameter_list|,
name|boolean
name|autoClose
parameter_list|)
throws|throws
name|IOException
block|{
name|CopyProgressEvent
name|evt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|evt
operator|=
operator|new
name|CopyProgressEvent
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|int
name|c
decl_stmt|;
name|long
name|total
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|start
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|c
operator|=
name|src
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"transfer interrupted"
argument_list|)
throw|;
block|}
name|dest
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|total
operator|+=
name|c
expr_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|progress
argument_list|(
name|evt
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
name|c
argument_list|,
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|evt
operator|.
name|update
argument_list|(
name|EMPTY_BUFFER
argument_list|,
literal|0
argument_list|,
name|total
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dest
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
comment|// close the streams
if|if
condition|(
name|autoClose
condition|)
block|{
name|src
operator|.
name|close
argument_list|()
expr_stmt|;
name|dest
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|autoClose
condition|)
block|{
try|try
block|{
name|src
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
try|try
block|{
name|dest
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|end
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reads the whole BufferedReader line by line, using \n as line separator for each line.      *<p>      * Note that this method will add a final \n to the last line even though there is no new line      * character at the end of last line in the original reader.      *</p>      *<p>      * The BufferedReader is closed when this method returns.      *</p>      *      * @param in      *            the {@link BufferedReader} to read from      * @return a String with the whole content read from the {@link BufferedReader}      * @throws IOException      *             if an IO problems occur during reading      */
specifier|public
specifier|static
name|String
name|readEntirely
parameter_list|(
name|BufferedReader
name|in
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Reads the entire content of the file and returns it as a String.      *      * @param f      *            the file to read from      * @return a String with the file content      * @throws IOException      *             if an IO problems occurs during reading      */
specifier|public
specifier|static
name|String
name|readEntirely
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readEntirely
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Reads the entire content of the {@link InputStream} and returns it as a String.      *<p>      * The input stream is closed when this method returns.      *</p>      *      * @param is      *            the {@link InputStream} to read from      * @return a String with the input stream content      * @throws IOException      *             if an IO problems occurs during reading      */
specifier|public
specifier|static
name|String
name|readEntirely
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|concat
parameter_list|(
name|String
name|dir
parameter_list|,
name|String
name|file
parameter_list|)
block|{
return|return
name|dir
operator|+
literal|"/"
operator|+
name|file
return|;
block|}
comment|/**      * Recursively delete file      *      * @param file      *            the file to delete      * @return true if the deletion completed successfully (ie if the file does not exist on the      *         filesystem after this call), false if a deletion was not performed successfully.      */
specifier|public
specifier|static
name|boolean
name|forceDelete
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|file
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|df
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|forceDelete
argument_list|(
name|df
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
name|file
operator|.
name|delete
argument_list|()
return|;
block|}
comment|/**      * Returns a list of Files composed of all directories being parent of file and child of root +      * file and root themselves. Example:<code>getPathFiles(new File("test"), new      * File("test/dir1/dir2/file.txt")) =&gt; {new File("test/dir1"), new File("test/dir1/dir2"),      * new File("test/dir1/dir2/file.txt") }</code> Note that if root is not an ancestor of file, or      * if root is null, all directories from the file system root will be returned.      *      * @param root File      * @param file File      * @return List&lt;File&gt;      */
specifier|public
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|getPathFiles
parameter_list|(
name|File
name|root
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|List
argument_list|<
name|File
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|file
operator|!=
literal|null
operator|&&
operator|!
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|file
operator|=
name|file
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * @param dir      *            The directory from which all files, including files in subdirectory) are      *            extracted.      * @param ignore      *            a Collection of filenames which must be excluded from listing      * @return a collection containing all the files of the given directory and it's subdirectories,      *         recursively.      */
specifier|public
specifier|static
name|Collection
argument_list|<
name|File
argument_list|>
name|listAll
parameter_list|(
name|File
name|dir
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|ignore
parameter_list|)
block|{
return|return
name|listAll
argument_list|(
name|dir
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
argument_list|,
name|ignore
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Collection
argument_list|<
name|File
argument_list|>
name|listAll
parameter_list|(
name|File
name|file
parameter_list|,
name|Collection
argument_list|<
name|File
argument_list|>
name|list
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|ignore
parameter_list|)
block|{
if|if
condition|(
name|ignore
operator|.
name|contains
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|list
return|;
block|}
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|file
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|lf
range|:
name|files
control|)
block|{
name|listAll
argument_list|(
name|lf
argument_list|,
name|list
argument_list|,
name|ignore
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|public
specifier|static
name|File
name|resolveFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|File
name|result
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|result
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
return|return
name|normalize
argument_list|(
name|result
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|// ////////////////////////////////////////////
comment|// The following code comes from Ant FileUtils
comment|// ////////////////////////////////////////////
comment|/**      *&quot;Normalize&quot; the given absolute path.      *      *<p>      * This includes:      *<ul>      *<li>Uppercase the drive letter if there is one.</li>      *<li>Remove redundant slashes after the drive spec.</li>      *<li>Resolve all ./, .\, ../ and ..\ sequences.</li>      *<li>DOS style paths that start with a drive letter will have \ as the separator.</li>      *</ul>      * Unlike {@link File#getCanonicalPath()} this method specifically does not resolve symbolic      * links.      *      * @param path the path to be normalized.      * @return the normalized version of the path.      * @throws NullPointerException if path is null.      */
specifier|public
specifier|static
name|File
name|normalize
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
specifier|final
name|Stack
argument_list|<
name|String
argument_list|>
name|s
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|DissectedPath
name|dissectedPath
init|=
name|dissect
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|s
operator|.
name|push
argument_list|(
name|dissectedPath
operator|.
name|root
argument_list|)
expr_stmt|;
specifier|final
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|dissectedPath
operator|.
name|remainingPath
argument_list|,
name|File
operator|.
name|separator
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|thisToken
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"."
operator|.
name|equals
argument_list|(
name|thisToken
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
literal|".."
operator|.
name|equals
argument_list|(
name|thisToken
argument_list|)
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
comment|// Cannot resolve it, so skip it.
return|return
operator|new
name|File
argument_list|(
name|path
argument_list|)
return|;
block|}
name|s
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// plain component
name|s
operator|.
name|push
argument_list|(
name|thisToken
argument_list|)
expr_stmt|;
block|}
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
comment|// not before the filesystem root and not after it, since root
comment|// already contains one
name|sb
operator|.
name|append
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|s
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|File
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Dissect the specified absolute path.      *      * @param path      *            the path to dissect.      * @return {@link DissectedPath}      * @throws java.lang.NullPointerException      *             if path is null.      * @since Ant 1.7      */
specifier|private
specifier|static
name|DissectedPath
name|dissect
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
specifier|final
name|char
name|sep
init|=
name|File
operator|.
name|separatorChar
decl_stmt|;
specifier|final
name|String
name|pathToDissect
init|=
name|path
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|sep
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
name|sep
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// check if the path starts with a filesystem root
specifier|final
name|File
index|[]
name|filesystemRoots
init|=
name|File
operator|.
name|listRoots
argument_list|()
decl_stmt|;
if|if
condition|(
name|filesystemRoots
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|File
name|filesystemRoot
range|:
name|filesystemRoots
control|)
block|{
if|if
condition|(
name|pathToDissect
operator|.
name|startsWith
argument_list|(
name|filesystemRoot
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
comment|// filesystem root is the root and the rest of the path is the "remaining path"
specifier|final
name|String
name|root
init|=
name|filesystemRoot
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|rest
init|=
name|pathToDissect
operator|.
name|substring
argument_list|(
name|root
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|sbPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Eliminate consecutive slashes after the drive spec:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rest
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|currentChar
init|=
name|rest
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|sbPath
operator|.
name|append
argument_list|(
name|currentChar
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|char
name|previousChar
init|=
name|rest
operator|.
name|charAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentChar
operator|!=
name|sep
operator|||
name|previousChar
operator|!=
name|sep
condition|)
block|{
name|sbPath
operator|.
name|append
argument_list|(
name|currentChar
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DissectedPath
argument_list|(
name|root
argument_list|,
name|sbPath
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
comment|// UNC drive
if|if
condition|(
name|pathToDissect
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
name|pathToDissect
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
name|sep
condition|)
block|{
name|int
name|nextsep
init|=
name|pathToDissect
operator|.
name|indexOf
argument_list|(
name|sep
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nextsep
operator|=
name|pathToDissect
operator|.
name|indexOf
argument_list|(
name|sep
argument_list|,
name|nextsep
operator|+
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|root
init|=
operator|(
name|nextsep
operator|>
literal|2
operator|)
condition|?
name|pathToDissect
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nextsep
operator|+
literal|1
argument_list|)
else|:
name|pathToDissect
decl_stmt|;
specifier|final
name|String
name|rest
init|=
name|pathToDissect
operator|.
name|substring
argument_list|(
name|root
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|DissectedPath
argument_list|(
name|root
argument_list|,
name|rest
argument_list|)
return|;
block|}
return|return
operator|new
name|DissectedPath
argument_list|(
name|File
operator|.
name|separator
argument_list|,
name|pathToDissect
argument_list|)
return|;
block|}
comment|/**      * Get the length of the file, or the sum of the children lengths if it is a directory      *      * @param file File      * @return long      */
specifier|public
specifier|static
name|long
name|getFileLength
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|long
name|l
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|file
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|gf
range|:
name|files
control|)
block|{
name|l
operator|+=
name|getFileLength
argument_list|(
name|gf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|l
operator|=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
specifier|public
specifier|static
name|InputStream
name|unwrapPack200
parameter_list|(
name|InputStream
name|packed
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedInputStream
name|buffered
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|packed
argument_list|)
decl_stmt|;
name|buffered
operator|.
name|mark
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|byte
index|[]
name|magic
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|buffered
operator|.
name|read
argument_list|(
name|magic
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|buffered
operator|.
name|reset
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
name|buffered
decl_stmt|;
if|if
condition|(
name|magic
index|[
literal|0
index|]
operator|==
operator|(
name|byte
operator|)
literal|0x1F
operator|&&
name|magic
index|[
literal|1
index|]
operator|==
operator|(
name|byte
operator|)
literal|0x8B
operator|&&
name|magic
index|[
literal|2
index|]
operator|==
operator|(
name|byte
operator|)
literal|0x08
condition|)
block|{
comment|// this is a gziped pack200
name|in
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|JarOutputStream
name|jar
init|=
operator|new
name|JarOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|newUnpacker
argument_list|()
operator|.
name|unpack
argument_list|(
operator|new
name|UncloseInputStream
argument_list|(
name|in
argument_list|)
argument_list|,
name|jar
argument_list|)
expr_stmt|;
name|jar
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Wrap an input stream and do not close the stream on call to close(). Used to avoid closing a      * {@link ZipInputStream} used with {@link Pack200.Unpacker#unpack(File, JarOutputStream)}      */
specifier|private
specifier|static
specifier|final
class|class
name|UncloseInputStream
extends|extends
name|InputStream
block|{
specifier|private
name|InputStream
name|wrapped
decl_stmt|;
specifier|public
name|UncloseInputStream
parameter_list|(
name|InputStream
name|wrapped
parameter_list|)
block|{
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do not close
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|wrapped
operator|.
name|read
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|wrapped
operator|.
name|read
argument_list|(
name|b
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|wrapped
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|wrapped
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|wrapped
operator|.
name|available
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readlimit
parameter_list|)
block|{
name|wrapped
operator|.
name|mark
argument_list|(
name|readlimit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|wrapped
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|markSupported
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|DissectedPath
block|{
specifier|private
specifier|final
name|String
name|root
decl_stmt|;
specifier|private
specifier|final
name|String
name|remainingPath
decl_stmt|;
specifier|private
name|DissectedPath
parameter_list|(
specifier|final
name|String
name|root
parameter_list|,
specifier|final
name|String
name|remainingPath
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|remainingPath
operator|=
name|remainingPath
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Dissected Path [root="
operator|+
name|root
operator|+
literal|", remainingPath="
operator|+
name|remainingPath
operator|+
literal|"]"
return|;
block|}
block|}
block|}
end_class

end_unit

