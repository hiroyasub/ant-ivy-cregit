begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractURLHandler
implements|implements
name|URLHandler
block|{
comment|// the request method to use. TODO: don't use a static here
specifier|private
specifier|static
name|int
name|requestMethod
init|=
name|REQUEST_METHOD_HEAD
decl_stmt|;
specifier|public
name|boolean
name|isReachable
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
return|return
name|getURLInfo
argument_list|(
name|url
argument_list|)
operator|.
name|isReachable
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isReachable
parameter_list|(
name|URL
name|url
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
return|return
name|getURLInfo
argument_list|(
name|url
argument_list|,
name|timeout
argument_list|)
operator|.
name|isReachable
argument_list|()
return|;
block|}
specifier|public
name|long
name|getContentLength
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
return|return
name|getURLInfo
argument_list|(
name|url
argument_list|)
operator|.
name|getContentLength
argument_list|()
return|;
block|}
specifier|public
name|long
name|getContentLength
parameter_list|(
name|URL
name|url
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
return|return
name|getURLInfo
argument_list|(
name|url
argument_list|,
name|timeout
argument_list|)
operator|.
name|getContentLength
argument_list|()
return|;
block|}
specifier|public
name|long
name|getLastModified
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
return|return
name|getURLInfo
argument_list|(
name|url
argument_list|)
operator|.
name|getLastModified
argument_list|()
return|;
block|}
specifier|public
name|long
name|getLastModified
parameter_list|(
name|URL
name|url
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
return|return
name|getURLInfo
argument_list|(
name|url
argument_list|,
name|timeout
argument_list|)
operator|.
name|getLastModified
argument_list|()
return|;
block|}
specifier|protected
name|void
name|validatePutStatusCode
parameter_list|(
name|URL
name|dest
parameter_list|,
name|int
name|statusCode
parameter_list|,
name|String
name|statusMessage
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|statusCode
condition|)
block|{
case|case
name|HttpURLConnection
operator|.
name|HTTP_OK
case|:
comment|/* intentional fallthrough */
case|case
name|HttpURLConnection
operator|.
name|HTTP_CREATED
case|:
comment|/* intentional fallthrough */
case|case
name|HttpURLConnection
operator|.
name|HTTP_ACCEPTED
case|:
comment|/* intentional fallthrough */
case|case
name|HttpURLConnection
operator|.
name|HTTP_NO_CONTENT
case|:
break|break;
case|case
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
case|:
comment|/* intentional fallthrough */
case|case
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
case|:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Access to URL "
operator|+
name|dest
operator|+
literal|" was refused by the server"
operator|+
operator|(
name|statusMessage
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|statusMessage
operator|)
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"PUT operation to URL "
operator|+
name|dest
operator|+
literal|" failed with status code "
operator|+
name|statusCode
operator|+
operator|(
name|statusMessage
operator|==
literal|null
condition|?
literal|""
else|:
literal|": "
operator|+
name|statusMessage
operator|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setRequestMethod
parameter_list|(
name|int
name|requestMethod
parameter_list|)
block|{
name|AbstractURLHandler
operator|.
name|requestMethod
operator|=
name|requestMethod
expr_stmt|;
block|}
specifier|public
name|int
name|getRequestMethod
parameter_list|()
block|{
return|return
name|requestMethod
return|;
block|}
block|}
end_class

end_unit

