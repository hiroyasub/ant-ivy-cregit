begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|url
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthSchemeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|NTCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|AuthSchemes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|CloseableHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpHead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|RegistryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|HttpClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|routing
operator|.
name|HttpRoutePlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|FileEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|auth
operator|.
name|BasicSchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|auth
operator|.
name|DigestSchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|auth
operator|.
name|NTLMSchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|PoolingHttpClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|SystemDefaultRoutePlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|TimeoutConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|CopyProgressListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|HostUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ProxySelector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|HttpClientHandler
extends|extends
name|AbstractURLHandler
implements|implements
name|TimeoutConstrainedURLHandler
implements|,
name|AutoCloseable
block|{
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|LAST_MODIFIED_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, d MMM yyyy HH:mm:ss z"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
comment|// A instance of the HttpClientHandler which gets registered to be closed
comment|// when the JVM exits
specifier|static
specifier|final
name|HttpClientHandler
name|DELETE_ON_EXIT_INSTANCE
decl_stmt|;
static|static
block|{
name|DELETE_ON_EXIT_INSTANCE
operator|=
operator|new
name|HttpClientHandler
argument_list|()
expr_stmt|;
specifier|final
name|Thread
name|shutdownHook
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|DELETE_ON_EXIT_INSTANCE
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore since this is anyway happening during shutdown of the JVM
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|shutdownHook
operator|.
name|setName
argument_list|(
literal|"ivy-httpclient-shutdown-handler"
argument_list|)
expr_stmt|;
name|shutdownHook
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|shutdownHook
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|CloseableHttpClient
name|httpClient
decl_stmt|;
specifier|public
name|HttpClientHandler
parameter_list|()
block|{
name|this
operator|.
name|httpClient
operator|=
name|buildUnderlyingClient
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CloseableHttpClient
name|buildUnderlyingClient
parameter_list|()
block|{
return|return
name|HttpClients
operator|.
name|custom
argument_list|()
operator|.
name|setConnectionManager
argument_list|(
name|createConnectionManager
argument_list|()
argument_list|)
operator|.
name|setRoutePlanner
argument_list|(
name|createProxyRoutePlanner
argument_list|()
argument_list|)
operator|.
name|setUserAgent
argument_list|(
name|this
operator|.
name|getUserAgent
argument_list|()
argument_list|)
operator|.
name|setDefaultAuthSchemeRegistry
argument_list|(
name|createAuthSchemeRegistry
argument_list|()
argument_list|)
operator|.
name|setDefaultCredentialsProvider
argument_list|(
operator|new
name|IvyCredentialsProvider
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|HttpRoutePlanner
name|createProxyRoutePlanner
parameter_list|()
block|{
comment|// use the standard JRE ProxySelector to get proxy information
name|Message
operator|.
name|verbose
argument_list|(
literal|"Using JRE standard ProxySelector for configuring HTTP proxy"
argument_list|)
expr_stmt|;
return|return
operator|new
name|SystemDefaultRoutePlanner
argument_list|(
name|ProxySelector
operator|.
name|getDefault
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Lookup
argument_list|<
name|AuthSchemeProvider
argument_list|>
name|createAuthSchemeRegistry
parameter_list|()
block|{
return|return
name|RegistryBuilder
operator|.
expr|<
name|AuthSchemeProvider
operator|>
name|create
argument_list|()
operator|.
name|register
argument_list|(
name|AuthSchemes
operator|.
name|DIGEST
argument_list|,
operator|new
name|DigestSchemeFactory
argument_list|()
argument_list|)
operator|.
name|register
argument_list|(
name|AuthSchemes
operator|.
name|BASIC
argument_list|,
operator|new
name|BasicSchemeFactory
argument_list|()
argument_list|)
operator|.
name|register
argument_list|(
name|AuthSchemes
operator|.
name|NTLM
argument_list|,
operator|new
name|NTLMSchemeFactory
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|HttpClientConnectionManager
name|createConnectionManager
parameter_list|()
block|{
return|return
operator|new
name|PoolingHttpClientConnectionManager
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getAuthSchemePreferredOrder
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|AuthSchemes
operator|.
name|DIGEST
argument_list|,
name|AuthSchemes
operator|.
name|BASIC
argument_list|,
name|AuthSchemes
operator|.
name|NTLM
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|openStream
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|openStream
argument_list|(
name|url
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|openStream
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|,
specifier|final
name|TimeoutConstraint
name|timeoutConstraint
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|connectionTimeout
init|=
operator|(
name|timeoutConstraint
operator|==
literal|null
operator|||
name|timeoutConstraint
operator|.
name|getConnectionTimeout
argument_list|()
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
name|timeoutConstraint
operator|.
name|getConnectionTimeout
argument_list|()
decl_stmt|;
specifier|final
name|int
name|readTimeout
init|=
operator|(
name|timeoutConstraint
operator|==
literal|null
operator|||
name|timeoutConstraint
operator|.
name|getReadTimeout
argument_list|()
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
name|timeoutConstraint
operator|.
name|getReadTimeout
argument_list|()
decl_stmt|;
specifier|final
name|CloseableHttpResponse
name|response
init|=
name|doGet
argument_list|(
name|url
argument_list|,
name|connectionTimeout
argument_list|,
name|readTimeout
argument_list|)
decl_stmt|;
name|this
operator|.
name|requireSuccessStatus
argument_list|(
name|HttpGet
operator|.
name|METHOD_NAME
argument_list|,
name|url
argument_list|,
name|response
argument_list|)
expr_stmt|;
specifier|final
name|Header
name|encoding
init|=
name|this
operator|.
name|getContentEncoding
argument_list|(
name|response
argument_list|)
decl_stmt|;
return|return
name|getDecodingInputStream
argument_list|(
name|encoding
operator|==
literal|null
condition|?
literal|null
else|:
name|encoding
operator|.
name|getValue
argument_list|()
argument_list|,
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|download
parameter_list|(
specifier|final
name|URL
name|src
parameter_list|,
specifier|final
name|File
name|dest
parameter_list|,
specifier|final
name|CopyProgressListener
name|l
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|download
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|l
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|download
parameter_list|(
specifier|final
name|URL
name|src
parameter_list|,
specifier|final
name|File
name|dest
parameter_list|,
specifier|final
name|CopyProgressListener
name|listener
parameter_list|,
specifier|final
name|TimeoutConstraint
name|timeoutConstraint
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|connectionTimeout
init|=
operator|(
name|timeoutConstraint
operator|==
literal|null
operator|||
name|timeoutConstraint
operator|.
name|getConnectionTimeout
argument_list|()
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
name|timeoutConstraint
operator|.
name|getConnectionTimeout
argument_list|()
decl_stmt|;
specifier|final
name|int
name|readTimeout
init|=
operator|(
name|timeoutConstraint
operator|==
literal|null
operator|||
name|timeoutConstraint
operator|.
name|getReadTimeout
argument_list|()
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
name|timeoutConstraint
operator|.
name|getReadTimeout
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|CloseableHttpResponse
name|response
init|=
name|doGet
argument_list|(
name|src
argument_list|,
name|connectionTimeout
argument_list|,
name|readTimeout
argument_list|)
init|)
block|{
comment|// We can only figure the content we got is want we want if the status is success.
name|this
operator|.
name|requireSuccessStatus
argument_list|(
name|HttpGet
operator|.
name|METHOD_NAME
argument_list|,
name|src
argument_list|,
name|response
argument_list|)
expr_stmt|;
specifier|final
name|Header
name|encoding
init|=
name|this
operator|.
name|getContentEncoding
argument_list|(
name|response
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|getDecodingInputStream
argument_list|(
name|encoding
operator|==
literal|null
condition|?
literal|null
else|:
name|encoding
operator|.
name|getValue
argument_list|()
argument_list|,
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
init|)
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|dest
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
name|dest
operator|.
name|setLastModified
argument_list|(
name|getLastModified
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|upload
parameter_list|(
specifier|final
name|File
name|src
parameter_list|,
specifier|final
name|URL
name|dest
parameter_list|,
specifier|final
name|CopyProgressListener
name|l
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|upload
argument_list|(
name|src
argument_list|,
name|dest
argument_list|,
name|l
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|upload
parameter_list|(
specifier|final
name|File
name|src
parameter_list|,
specifier|final
name|URL
name|dest
parameter_list|,
specifier|final
name|CopyProgressListener
name|listener
parameter_list|,
specifier|final
name|TimeoutConstraint
name|timeoutConstraint
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|connectionTimeout
init|=
operator|(
name|timeoutConstraint
operator|==
literal|null
operator|||
name|timeoutConstraint
operator|.
name|getConnectionTimeout
argument_list|()
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
name|timeoutConstraint
operator|.
name|getConnectionTimeout
argument_list|()
decl_stmt|;
specifier|final
name|int
name|readTimeout
init|=
operator|(
name|timeoutConstraint
operator|==
literal|null
operator|||
name|timeoutConstraint
operator|.
name|getReadTimeout
argument_list|()
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
name|timeoutConstraint
operator|.
name|getReadTimeout
argument_list|()
decl_stmt|;
specifier|final
name|RequestConfig
name|requestConfig
init|=
name|RequestConfig
operator|.
name|custom
argument_list|()
operator|.
name|setSocketTimeout
argument_list|(
name|readTimeout
argument_list|)
operator|.
name|setConnectTimeout
argument_list|(
name|connectionTimeout
argument_list|)
operator|.
name|setAuthenticationEnabled
argument_list|(
name|hasCredentialsConfigured
argument_list|(
name|dest
argument_list|)
argument_list|)
operator|.
name|setTargetPreferredAuthSchemes
argument_list|(
name|getAuthSchemePreferredOrder
argument_list|()
argument_list|)
operator|.
name|setProxyPreferredAuthSchemes
argument_list|(
name|getAuthSchemePreferredOrder
argument_list|()
argument_list|)
operator|.
name|setExpectContinueEnabled
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HttpPut
name|put
init|=
operator|new
name|HttpPut
argument_list|(
name|normalizeToString
argument_list|(
name|dest
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|setConfig
argument_list|(
name|requestConfig
argument_list|)
expr_stmt|;
name|put
operator|.
name|setEntity
argument_list|(
operator|new
name|FileEntity
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|CloseableHttpResponse
name|response
init|=
name|this
operator|.
name|httpClient
operator|.
name|execute
argument_list|(
name|put
argument_list|)
init|)
block|{
name|validatePutStatusCode
argument_list|(
name|dest
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|URLInfo
name|getURLInfo
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|)
block|{
return|return
name|this
operator|.
name|getURLInfo
argument_list|(
name|url
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|URLInfo
name|getURLInfo
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|,
specifier|final
name|int
name|timeout
parameter_list|)
block|{
return|return
name|this
operator|.
name|getURLInfo
argument_list|(
name|url
argument_list|,
name|createTimeoutConstraints
argument_list|(
name|timeout
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|boolean
name|isReachable
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|,
specifier|final
name|TimeoutConstraint
name|timeoutConstraint
parameter_list|)
block|{
return|return
name|this
operator|.
name|getURLInfo
argument_list|(
name|url
argument_list|,
name|timeoutConstraint
argument_list|)
operator|.
name|isReachable
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|,
specifier|final
name|TimeoutConstraint
name|timeoutConstraint
parameter_list|)
block|{
return|return
name|this
operator|.
name|getURLInfo
argument_list|(
name|url
argument_list|,
name|timeoutConstraint
argument_list|)
operator|.
name|getContentLength
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|long
name|getLastModified
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|,
specifier|final
name|TimeoutConstraint
name|timeoutConstraint
parameter_list|)
block|{
return|return
name|this
operator|.
name|getURLInfo
argument_list|(
name|url
argument_list|,
name|timeoutConstraint
argument_list|)
operator|.
name|getLastModified
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|URLInfo
name|getURLInfo
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|,
specifier|final
name|TimeoutConstraint
name|timeoutConstraint
parameter_list|)
block|{
specifier|final
name|int
name|connectionTimeout
init|=
operator|(
name|timeoutConstraint
operator|==
literal|null
operator|||
name|timeoutConstraint
operator|.
name|getConnectionTimeout
argument_list|()
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
name|timeoutConstraint
operator|.
name|getConnectionTimeout
argument_list|()
decl_stmt|;
specifier|final
name|int
name|readTimeout
init|=
operator|(
name|timeoutConstraint
operator|==
literal|null
operator|||
name|timeoutConstraint
operator|.
name|getReadTimeout
argument_list|()
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
name|timeoutConstraint
operator|.
name|getReadTimeout
argument_list|()
decl_stmt|;
name|CloseableHttpResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|httpMethod
decl_stmt|;
if|if
condition|(
name|getRequestMethod
argument_list|()
operator|==
name|TimeoutConstrainedURLHandler
operator|.
name|REQUEST_METHOD_HEAD
condition|)
block|{
name|httpMethod
operator|=
name|HttpHead
operator|.
name|METHOD_NAME
expr_stmt|;
name|response
operator|=
name|doHead
argument_list|(
name|url
argument_list|,
name|connectionTimeout
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|httpMethod
operator|=
name|HttpGet
operator|.
name|METHOD_NAME
expr_stmt|;
name|response
operator|=
name|doGet
argument_list|(
name|url
argument_list|,
name|connectionTimeout
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkStatusCode
argument_list|(
name|httpMethod
argument_list|,
name|url
argument_list|,
name|response
argument_list|)
condition|)
block|{
specifier|final
name|HttpEntity
name|responseEntity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
specifier|final
name|Charset
name|charSet
init|=
name|ContentType
operator|.
name|getOrDefault
argument_list|(
name|responseEntity
argument_list|)
operator|.
name|getCharset
argument_list|()
decl_stmt|;
specifier|final
name|String
name|charSetName
init|=
name|charSet
operator|!=
literal|null
condition|?
name|charSet
operator|.
name|name
argument_list|()
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|URLInfo
argument_list|(
literal|true
argument_list|,
name|responseEntity
operator|==
literal|null
condition|?
literal|0
else|:
name|responseEntity
operator|.
name|getContentLength
argument_list|()
argument_list|,
name|getLastModified
argument_list|(
name|response
argument_list|)
argument_list|,
name|charSetName
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// IllegalArgumentException is thrown by HttpClient library to indicate the URL is not valid,
comment|// this happens for instance when trying to download a dynamic version (cfr IVY-390)
name|Message
operator|.
name|error
argument_list|(
literal|"HttpClientHandler: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" url="
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|response
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
return|return
name|UNAVAILABLE
return|;
block|}
specifier|private
name|boolean
name|checkStatusCode
parameter_list|(
specifier|final
name|String
name|httpMethod
parameter_list|,
specifier|final
name|URL
name|sourceURL
parameter_list|,
specifier|final
name|HttpResponse
name|response
parameter_list|)
block|{
specifier|final
name|int
name|status
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|HttpStatus
operator|.
name|SC_OK
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// IVY-1328: some servers return a 204 on a HEAD request
if|if
condition|(
name|HttpHead
operator|.
name|METHOD_NAME
operator|.
name|equals
argument_list|(
name|httpMethod
argument_list|)
operator|&&
operator|(
name|status
operator|==
literal|204
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Message
operator|.
name|debug
argument_list|(
literal|"HTTP response status: "
operator|+
name|status
operator|+
literal|" url="
operator|+
name|sourceURL
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|==
name|HttpStatus
operator|.
name|SC_PROXY_AUTHENTICATION_REQUIRED
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"Your proxy requires authentication."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|String
operator|.
name|valueOf
argument_list|(
name|status
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"4"
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"CLIENT ERROR: "
operator|+
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
operator|+
literal|" url="
operator|+
name|sourceURL
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|String
operator|.
name|valueOf
argument_list|(
name|status
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"5"
argument_list|)
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"SERVER ERROR: "
operator|+
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
operator|+
literal|" url="
operator|+
name|sourceURL
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Checks the status code of the response and if it's considered as successful response, then      * this method just returns back. Else it {@link CloseableHttpResponse#close() closes the      * response} and throws an {@link IOException} for the unsuccessful response.      *      * @param httpMethod The HTTP method that was used for the source request      * @param sourceURL  The URL of the source request      * @param response   The response to the source request      * @throws IOException Thrown if the response was considered unsuccessful      */
specifier|private
name|void
name|requireSuccessStatus
parameter_list|(
specifier|final
name|String
name|httpMethod
parameter_list|,
specifier|final
name|URL
name|sourceURL
parameter_list|,
specifier|final
name|CloseableHttpResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|checkStatusCode
argument_list|(
name|httpMethod
argument_list|,
name|sourceURL
argument_list|,
name|response
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// this is now considered an unsuccessful response, so close the response and throw an exception
try|try
block|{
name|response
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log and move on
name|Message
operator|.
name|debug
argument_list|(
literal|"Could not close the HTTP response for url="
operator|+
name|sourceURL
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed response to request '"
operator|+
name|httpMethod
operator|+
literal|" "
operator|+
name|sourceURL
operator|+
literal|"' "
operator|+
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|+
literal|" - '"
operator|+
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
throw|;
block|}
specifier|private
name|Header
name|getContentEncoding
parameter_list|(
specifier|final
name|HttpResponse
name|response
parameter_list|)
block|{
return|return
name|response
operator|.
name|getFirstHeader
argument_list|(
literal|"Content-Encoding"
argument_list|)
return|;
block|}
specifier|private
name|long
name|getLastModified
parameter_list|(
specifier|final
name|HttpResponse
name|response
parameter_list|)
block|{
specifier|final
name|Header
name|header
init|=
name|response
operator|.
name|getFirstHeader
argument_list|(
literal|"last-modified"
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
specifier|final
name|String
name|lastModified
init|=
name|header
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|LAST_MODIFIED_FORMAT
operator|.
name|parse
argument_list|(
name|lastModified
argument_list|)
operator|.
name|getTime
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
specifier|private
name|CloseableHttpResponse
name|doGet
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|,
specifier|final
name|int
name|connectionTimeout
parameter_list|,
specifier|final
name|int
name|readTimeout
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RequestConfig
name|requestConfig
init|=
name|RequestConfig
operator|.
name|custom
argument_list|()
operator|.
name|setSocketTimeout
argument_list|(
name|readTimeout
argument_list|)
operator|.
name|setConnectTimeout
argument_list|(
name|connectionTimeout
argument_list|)
operator|.
name|setAuthenticationEnabled
argument_list|(
name|hasCredentialsConfigured
argument_list|(
name|url
argument_list|)
argument_list|)
operator|.
name|setTargetPreferredAuthSchemes
argument_list|(
name|getAuthSchemePreferredOrder
argument_list|()
argument_list|)
operator|.
name|setProxyPreferredAuthSchemes
argument_list|(
name|getAuthSchemePreferredOrder
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HttpGet
name|httpGet
init|=
operator|new
name|HttpGet
argument_list|(
name|normalizeToString
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|httpGet
operator|.
name|setConfig
argument_list|(
name|requestConfig
argument_list|)
expr_stmt|;
name|httpGet
operator|.
name|addHeader
argument_list|(
literal|"Accept-Encoding"
argument_list|,
literal|"gzip,deflate"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|httpClient
operator|.
name|execute
argument_list|(
name|httpGet
argument_list|)
return|;
block|}
specifier|private
name|CloseableHttpResponse
name|doHead
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|,
specifier|final
name|int
name|connectionTimeout
parameter_list|,
specifier|final
name|int
name|readTimeout
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RequestConfig
name|requestConfig
init|=
name|RequestConfig
operator|.
name|custom
argument_list|()
operator|.
name|setSocketTimeout
argument_list|(
name|readTimeout
argument_list|)
operator|.
name|setConnectTimeout
argument_list|(
name|connectionTimeout
argument_list|)
operator|.
name|setAuthenticationEnabled
argument_list|(
name|hasCredentialsConfigured
argument_list|(
name|url
argument_list|)
argument_list|)
operator|.
name|setTargetPreferredAuthSchemes
argument_list|(
name|getAuthSchemePreferredOrder
argument_list|()
argument_list|)
operator|.
name|setProxyPreferredAuthSchemes
argument_list|(
name|getAuthSchemePreferredOrder
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|HttpHead
name|httpHead
init|=
operator|new
name|HttpHead
argument_list|(
name|normalizeToString
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|httpHead
operator|.
name|setConfig
argument_list|(
name|requestConfig
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|httpClient
operator|.
name|execute
argument_list|(
name|httpHead
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasCredentialsConfigured
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|)
block|{
return|return
name|CredentialsStore
operator|.
name|INSTANCE
operator|.
name|hasCredentials
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|httpClient
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|httpClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|IvyCredentialsProvider
implements|implements
name|CredentialsProvider
block|{
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|AuthScope
argument_list|,
name|Credentials
argument_list|>
name|cachedCreds
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setCredentials
parameter_list|(
specifier|final
name|AuthScope
name|authscope
parameter_list|,
specifier|final
name|Credentials
name|credentials
parameter_list|)
block|{
if|if
condition|(
name|authscope
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"AuthScope cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|cachedCreds
operator|.
name|put
argument_list|(
name|authscope
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Credentials
name|getCredentials
parameter_list|(
specifier|final
name|AuthScope
name|authscope
parameter_list|)
block|{
if|if
condition|(
name|authscope
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|realm
init|=
name|authscope
operator|.
name|getRealm
argument_list|()
decl_stmt|;
specifier|final
name|String
name|host
init|=
name|authscope
operator|.
name|getHost
argument_list|()
decl_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Credentials
name|ivyConfiguredCred
init|=
name|CredentialsStore
operator|.
name|INSTANCE
operator|.
name|getCredentials
argument_list|(
name|realm
argument_list|,
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|ivyConfiguredCred
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|createCredentials
argument_list|(
name|ivyConfiguredCred
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ivyConfiguredCred
operator|.
name|getPasswd
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|cachedCreds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|Credentials
name|createCredentials
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
block|{
specifier|final
name|String
name|user
decl_stmt|;
specifier|final
name|String
name|domain
decl_stmt|;
name|int
name|backslashIndex
init|=
name|username
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
decl_stmt|;
if|if
condition|(
name|backslashIndex
operator|>=
literal|0
condition|)
block|{
name|user
operator|=
name|username
operator|.
name|substring
argument_list|(
name|backslashIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|domain
operator|=
name|username
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|backslashIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|user
operator|=
name|username
expr_stmt|;
name|domain
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"http.auth.ntlm.domain"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|NTCredentials
argument_list|(
name|user
argument_list|,
name|password
argument_list|,
name|HostUtil
operator|.
name|getLocalHostName
argument_list|()
argument_list|,
name|domain
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

