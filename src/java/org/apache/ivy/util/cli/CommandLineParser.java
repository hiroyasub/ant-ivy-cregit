begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
specifier|public
class|class
name|CommandLineParser
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MIN_DESC_WIDTH
init|=
literal|40
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SPEC_WIDTH
init|=
literal|30
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Option
argument_list|>
name|options
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Option
argument_list|>
argument_list|>
name|categories
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|CommandLineParser
parameter_list|()
block|{
block|}
specifier|public
name|CommandLineParser
name|addCategory
parameter_list|(
name|String
name|category
parameter_list|)
block|{
name|categories
operator|.
name|put
argument_list|(
name|category
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Option
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|CommandLineParser
name|addOption
parameter_list|(
name|Option
name|option
parameter_list|)
block|{
name|options
operator|.
name|put
argument_list|(
name|option
operator|.
name|getName
argument_list|()
argument_list|,
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|categories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|(
operator|(
name|List
argument_list|<
name|Option
argument_list|>
operator|)
name|categories
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|()
index|[
name|categories
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
operator|)
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|CommandLine
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|CommandLine
name|line
init|=
operator|new
name|CommandLine
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|args
operator|.
name|length
decl_stmt|;
name|ListIterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|arg
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"--"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
comment|// skip this argument and stop looping
name|index
operator|=
name|iterator
operator|.
name|nextIndex
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|index
operator|=
name|iterator
operator|.
name|previousIndex
argument_list|()
expr_stmt|;
break|break;
block|}
name|Option
name|option
init|=
name|options
operator|.
name|get
argument_list|(
name|arg
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Unrecognized option: "
operator|+
name|arg
argument_list|)
throw|;
block|}
name|line
operator|.
name|addOptionValues
argument_list|(
name|arg
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|option
operator|.
name|parse
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// left over args
name|String
index|[]
name|leftOverArgs
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
name|index
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
name|index
argument_list|,
name|leftOverArgs
argument_list|,
literal|0
argument_list|,
name|leftOverArgs
operator|.
name|length
argument_list|)
expr_stmt|;
name|line
operator|.
name|setLeftOverArgs
argument_list|(
name|leftOverArgs
argument_list|)
expr_stmt|;
return|return
name|line
return|;
block|}
specifier|public
name|void
name|printHelp
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|int
name|width
parameter_list|,
name|String
name|command
parameter_list|,
name|boolean
name|showDeprecated
parameter_list|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"usage: "
operator|+
name|command
argument_list|)
expr_stmt|;
comment|// compute the largest option spec
name|int
name|specWidth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|options
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|option
operator|.
name|isDeprecated
argument_list|()
operator|&&
operator|!
name|showDeprecated
condition|)
block|{
continue|continue;
block|}
name|specWidth
operator|=
name|Math
operator|.
name|min
argument_list|(
name|MAX_SPEC_WIDTH
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|specWidth
argument_list|,
name|option
operator|.
name|getSpec
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// print options help
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Option
argument_list|>
argument_list|>
name|entry
range|:
name|categories
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|category
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"==== "
operator|+
name|category
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Option
argument_list|>
name|options
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|options
control|)
block|{
if|if
condition|(
name|option
operator|.
name|isDeprecated
argument_list|()
operator|&&
operator|!
name|showDeprecated
condition|)
block|{
continue|continue;
block|}
comment|// print option spec: option name + argument names
name|String
name|spec
init|=
name|option
operator|.
name|getSpec
argument_list|()
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|spec
argument_list|)
expr_stmt|;
name|int
name|specLength
init|=
name|spec
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|" "
argument_list|,
name|specWidth
operator|-
name|specLength
argument_list|)
argument_list|)
expr_stmt|;
comment|// print description
name|StringBuilder
name|desc
init|=
operator|new
name|StringBuilder
argument_list|(
operator|(
name|option
operator|.
name|isDeprecated
argument_list|()
condition|?
literal|"DEPRECATED: "
else|:
literal|""
operator|)
operator|+
name|option
operator|.
name|getDescription
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|Math
operator|.
name|min
argument_list|(
name|desc
operator|.
name|length
argument_list|()
argument_list|,
name|width
operator|-
name|Math
operator|.
name|max
argument_list|(
name|specLength
argument_list|,
name|specWidth
argument_list|)
argument_list|)
decl_stmt|;
comment|// see if we have enough space to start on the same line as the spec
if|if
condition|(
name|count
operator|>
name|MIN_DESC_WIDTH
operator|||
name|desc
operator|.
name|length
argument_list|()
operator|+
name|specLength
operator|<
name|width
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
name|desc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
comment|// print remaining description
while|while
condition|(
name|desc
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|" "
argument_list|,
name|specWidth
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|=
name|Math
operator|.
name|min
argument_list|(
name|desc
operator|.
name|length
argument_list|()
argument_list|,
name|width
operator|-
name|specWidth
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|desc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

