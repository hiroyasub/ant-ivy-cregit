begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_comment
comment|/**  * Ant 1.6.1 like Configurator  *<p>  * This configurator is used to configure elements (initialised with setRoot) using the behaviour  * defined by ant for its tasks.  *<p>  * Example (based on<a href="http://ant.apache.org/manual/develop.html#writingowntask">Ant  * Example</a>):  *  *<pre>  * Configurator conf = new Configurator();  * conf.typeDef(&quot;buildpath&quot;,&quot;Sample$BuildPath&quot;);  * conf.typeDef(&quot;xinterface&quot;,&quot;Sample$XInterface&quot;);  * Sample.MyFileSelector mfs = new Sample.MyFileSelector();  * conf.setRoot(mfs);  * conf.startCreateChild(&quot;buildpath&quot;);  * conf.setAttribute(&quot;path&quot;,&quot;.&quot;);  * conf.setAttribute(&quot;url&quot;,&quot;abc&quot;);  * conf.startCreateChild(&quot;xinterface&quot;);  * conf.setAttribute(&quot;count&quot;,&quot;4&quot;);  * conf.endCreateChild(); // xinterface  * conf.endCreateChild(); // buildpath  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|Configurator
block|{
specifier|public
specifier|static
class|class
name|Macro
block|{
specifier|private
name|MacroDef
name|macrodef
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attValues
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MacroRecord
argument_list|>
argument_list|>
name|macroRecords
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|Macro
parameter_list|(
name|MacroDef
name|def
parameter_list|)
block|{
name|macrodef
operator|=
name|def
expr_stmt|;
block|}
specifier|public
name|void
name|defineAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|macrodef
operator|.
name|getAttribute
argument_list|(
name|attributeName
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"undeclared attribute "
operator|+
name|attributeName
operator|+
literal|" on macro "
operator|+
name|macrodef
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|attValues
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MacroRecord
name|recordCreateChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MacroRecord
name|macroRecord
init|=
operator|new
name|MacroRecord
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MacroRecord
argument_list|>
name|records
init|=
name|macroRecords
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|records
operator|==
literal|null
condition|)
block|{
name|records
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|macroRecords
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
name|records
operator|.
name|add
argument_list|(
name|macroRecord
argument_list|)
expr_stmt|;
return|return
name|macroRecord
return|;
block|}
specifier|public
name|Object
name|play
parameter_list|(
name|Configurator
name|conf
parameter_list|)
block|{
return|return
name|macrodef
operator|.
name|play
argument_list|(
name|conf
argument_list|,
name|attValues
argument_list|,
name|macroRecords
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Attribute
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|defaultValue
decl_stmt|;
specifier|public
name|String
name|getDefault
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
specifier|public
name|void
name|setDefault
parameter_list|(
name|String
name|default1
parameter_list|)
block|{
name|defaultValue
operator|=
name|default1
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Element
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|boolean
name|optional
init|=
literal|false
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|()
block|{
return|return
name|optional
return|;
block|}
specifier|public
name|void
name|setOptional
parameter_list|(
name|boolean
name|optional
parameter_list|)
block|{
name|this
operator|.
name|optional
operator|=
name|optional
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MacroRecord
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MacroRecord
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Object
name|object
decl_stmt|;
specifier|public
name|MacroRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|recordAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MacroRecord
name|recordChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MacroRecord
name|child
init|=
operator|new
name|MacroRecord
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|MacroRecord
name|recordChild
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|MacroRecord
name|child
init|=
name|recordChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|child
operator|.
name|object
operator|=
name|object
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
specifier|public
name|List
argument_list|<
name|MacroRecord
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|object
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MacroDef
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Attribute
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|elements
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|MacroRecord
name|macroRecord
decl_stmt|;
specifier|public
name|MacroDef
parameter_list|(
name|String
name|macroName
parameter_list|)
block|{
name|name
operator|=
name|macroName
expr_stmt|;
block|}
specifier|public
name|Attribute
name|getAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|get
argument_list|(
name|attributeName
argument_list|)
return|;
block|}
specifier|public
name|Object
name|play
parameter_list|(
name|Configurator
name|conf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attValues
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MacroRecord
argument_list|>
argument_list|>
name|macroRecords
parameter_list|)
block|{
for|for
control|(
name|Attribute
name|att
range|:
name|attributes
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|val
init|=
name|attValues
operator|.
name|get
argument_list|(
name|att
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|att
operator|.
name|getDefault
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"attribute "
operator|+
name|att
operator|.
name|getName
argument_list|()
operator|+
literal|" is required in "
operator|+
name|getName
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|attValues
operator|.
name|put
argument_list|(
name|att
operator|.
name|getName
argument_list|()
argument_list|,
name|att
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|play
argument_list|(
name|conf
argument_list|,
name|macroRecord
argument_list|,
name|attValues
argument_list|,
name|macroRecords
argument_list|)
return|;
block|}
specifier|private
name|Object
name|play
parameter_list|(
name|Configurator
name|conf
parameter_list|,
name|MacroRecord
name|macroRecord
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attValues
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MacroRecord
argument_list|>
argument_list|>
name|childrenRecords
parameter_list|)
block|{
if|if
condition|(
name|macroRecord
operator|.
name|getObject
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this is a recorded reference, we can add the referenced object directly
name|conf
operator|.
name|addChild
argument_list|(
name|macroRecord
operator|.
name|getName
argument_list|()
argument_list|,
name|macroRecord
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|endCreateChild
argument_list|()
expr_stmt|;
return|return
name|macroRecord
operator|.
name|getObject
argument_list|()
return|;
block|}
name|conf
operator|.
name|startCreateChild
argument_list|(
name|macroRecord
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|macroRecord
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|attName
range|:
name|attributes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|attValue
init|=
name|replaceParam
argument_list|(
name|attributes
operator|.
name|get
argument_list|(
name|attName
argument_list|)
argument_list|,
name|attValues
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setAttribute
argument_list|(
name|attName
argument_list|,
name|attValue
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MacroRecord
name|child
range|:
name|macroRecord
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|Element
name|elt
init|=
name|elements
operator|.
name|get
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|elt
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MacroRecord
argument_list|>
name|elements
init|=
name|childrenRecords
operator|.
name|get
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|elements
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MacroRecord
name|element
range|:
name|elements
control|)
block|{
for|for
control|(
name|MacroRecord
name|r
range|:
name|element
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|play
argument_list|(
name|conf
argument_list|,
name|r
argument_list|,
name|attValues
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|List
argument_list|<
name|MacroRecord
argument_list|>
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
operator|!
name|elt
operator|.
name|isOptional
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"non optional element is not specified: "
operator|+
name|elt
operator|.
name|getName
argument_list|()
operator|+
literal|" in macro "
operator|+
name|getName
argument_list|()
argument_list|)
throw|;
block|}
continue|continue;
block|}
name|play
argument_list|(
name|conf
argument_list|,
name|child
argument_list|,
name|attValues
argument_list|,
name|childrenRecords
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
operator|.
name|endCreateChild
argument_list|()
return|;
block|}
specifier|private
name|String
name|replaceParam
parameter_list|(
name|String
name|string
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attValues
parameter_list|)
block|{
return|return
name|IvyPatternHelper
operator|.
name|substituteParams
argument_list|(
name|string
argument_list|,
name|attValues
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|addConfiguredAttribute
parameter_list|(
name|Attribute
name|att
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|att
operator|.
name|getName
argument_list|()
argument_list|,
name|att
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfiguredElement
parameter_list|(
name|Element
name|elt
parameter_list|)
block|{
name|elements
operator|.
name|put
argument_list|(
name|elt
operator|.
name|getName
argument_list|()
argument_list|,
name|elt
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Macro
name|createMacro
parameter_list|()
block|{
return|return
operator|new
name|Macro
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|void
name|addAttribute
parameter_list|(
name|String
name|attName
parameter_list|,
name|String
name|attDefaultValue
parameter_list|)
block|{
name|Attribute
name|att
init|=
operator|new
name|Attribute
argument_list|()
decl_stmt|;
name|att
operator|.
name|setName
argument_list|(
name|attName
argument_list|)
expr_stmt|;
name|att
operator|.
name|setDefault
argument_list|(
name|attDefaultValue
argument_list|)
expr_stmt|;
name|addConfiguredAttribute
argument_list|(
name|att
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addElement
parameter_list|(
name|String
name|elementName
parameter_list|,
name|boolean
name|optional
parameter_list|)
block|{
name|Element
name|elt
init|=
operator|new
name|Element
argument_list|()
decl_stmt|;
name|elt
operator|.
name|setName
argument_list|(
name|elementName
argument_list|)
expr_stmt|;
name|elt
operator|.
name|setOptional
argument_list|(
name|optional
argument_list|)
expr_stmt|;
name|addConfiguredElement
argument_list|(
name|elt
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MacroRecord
name|recordCreateChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|macroRecord
operator|=
operator|new
name|MacroRecord
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|macroRecord
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ObjectDescriptor
block|{
specifier|private
name|Object
name|obj
decl_stmt|;
specifier|private
name|String
name|objName
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|createMethods
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|addMethods
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|addConfiguredMethods
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Method
argument_list|>
name|setMethods
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Method
argument_list|>
name|typeAddMethods
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Method
argument_list|>
name|typeAddConfiguredMethods
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|ObjectDescriptor
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|objName
parameter_list|)
block|{
name|obj
operator|=
name|object
expr_stmt|;
name|this
operator|.
name|objName
operator|=
name|objName
expr_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"create"
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
operator|!
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|"create"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|addCreateMethod
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"addConfigured"
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|"addConfigured"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|addAddConfiguredMethod
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|addAddConfiguredMethod
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"add"
argument_list|)
operator|&&
operator|!
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"addConfigured"
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|"add"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|addAddMethod
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|addAddMethod
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|"set"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|addSetMethod
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|addCreateMethod
parameter_list|(
name|String
name|name
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|createMethods
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAddMethod
parameter_list|(
name|String
name|name
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|addMethods
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAddConfiguredMethod
parameter_list|(
name|String
name|name
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|addConfiguredMethods
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAddMethod
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|typeAddMethods
operator|.
name|put
argument_list|(
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAddConfiguredMethod
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|typeAddConfiguredMethods
operator|.
name|put
argument_list|(
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSetMethod
parameter_list|(
name|String
name|name
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|Method
name|current
init|=
name|setMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
operator|&&
name|current
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|==
name|String
operator|.
name|class
condition|)
block|{
comment|// setter methods with String attribute take precedence
return|return;
block|}
name|setMethods
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|obj
return|;
block|}
specifier|public
name|Method
name|getCreateMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|createMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Method
name|getAddMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|addMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Method
name|getAddConfiguredMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|addConfiguredMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Method
name|getAddMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getTypeMatchingMethod
argument_list|(
name|type
argument_list|,
name|typeAddMethods
argument_list|)
return|;
block|}
specifier|public
name|Method
name|getAddConfiguredMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getTypeMatchingMethod
argument_list|(
name|type
argument_list|,
name|typeAddConfiguredMethods
argument_list|)
return|;
block|}
specifier|private
name|Method
name|getTypeMatchingMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Method
argument_list|>
name|typeMethods
parameter_list|)
block|{
name|Method
name|m
init|=
name|typeMethods
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|typeMethods
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|typeMethods
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Method
name|getSetMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|setMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|String
name|getObjectName
parameter_list|()
block|{
return|return
name|objName
return|;
block|}
block|}
specifier|private
name|FileResolver
name|fileResolver
init|=
name|FileResolver
operator|.
name|DEFAULT
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|typedefs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MacroDef
argument_list|>
name|macrodefs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// stack in which the top is current configured object descriptor
specifier|private
name|Stack
argument_list|<
name|ObjectDescriptor
argument_list|>
name|objectStack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|TRUE_VALUES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"true"
argument_list|,
literal|"yes"
argument_list|,
literal|"on"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|typeDef
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|typeDef
argument_list|(
name|name
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|typeDef
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|typedefs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRoot
parameter_list|(
name|Object
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|objectStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setCurrent
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|objectStack
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setCurrent
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|objectStack
operator|.
name|push
argument_list|(
operator|new
name|ObjectDescriptor
argument_list|(
name|object
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|Object
name|startCreateChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"set root before creating child"
argument_list|)
throw|;
block|}
name|ObjectDescriptor
name|parentOD
init|=
name|objectStack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|Object
name|parent
init|=
name|parentOD
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|MacroDef
condition|)
block|{
if|if
condition|(
operator|!
literal|"attribute"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
literal|"element"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|MacroRecord
name|record
init|=
operator|(
operator|(
name|MacroDef
operator|)
name|parent
operator|)
operator|.
name|recordCreateChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|setCurrent
argument_list|(
name|record
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
block|}
if|if
condition|(
name|parent
operator|instanceof
name|Macro
condition|)
block|{
name|MacroRecord
name|record
init|=
operator|(
operator|(
name|Macro
operator|)
name|parent
operator|)
operator|.
name|recordCreateChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|setCurrent
argument_list|(
name|record
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
if|if
condition|(
name|parent
operator|instanceof
name|MacroRecord
condition|)
block|{
name|MacroRecord
name|record
init|=
operator|(
operator|(
name|MacroRecord
operator|)
name|parent
operator|)
operator|.
name|recordChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|setCurrent
argument_list|(
name|record
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
name|Object
name|child
init|=
literal|null
decl_stmt|;
name|MacroDef
name|macrodef
init|=
name|macrodefs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|macrodef
operator|!=
literal|null
condition|)
block|{
name|Macro
name|macro
init|=
name|macrodef
operator|.
name|createMacro
argument_list|()
decl_stmt|;
name|setCurrent
argument_list|(
name|macro
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|macro
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|childClass
init|=
name|typedefs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Method
name|addChild
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|childClass
operator|!=
literal|null
condition|)
block|{
return|return
name|addChild
argument_list|(
name|parentOD
argument_list|,
name|childClass
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|addChild
operator|=
name|parentOD
operator|.
name|getCreateMethod
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|addChild
operator|!=
literal|null
condition|)
block|{
name|child
operator|=
name|addChild
operator|.
name|invoke
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|setCurrent
argument_list|(
name|child
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
name|addChild
operator|=
name|parentOD
operator|.
name|getAddMethod
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|addChild
operator|!=
literal|null
condition|)
block|{
name|childClass
operator|=
name|addChild
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|child
operator|=
name|childClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|addChild
operator|.
name|invoke
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|setCurrent
argument_list|(
name|child
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
name|addChild
operator|=
name|parentOD
operator|.
name|getAddConfiguredMethod
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|addChild
operator|!=
literal|null
condition|)
block|{
name|childClass
operator|=
name|addChild
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|Map
operator|.
name|class
operator|==
name|childClass
condition|)
block|{
name|child
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|child
operator|=
name|childClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
name|setCurrent
argument_list|(
name|child
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no default constructor on "
operator|+
name|childClass
operator|+
literal|" for adding "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|parent
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad method found for "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|parent
operator|.
name|getClass
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no appropriate method found for adding "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|parent
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|void
name|addChild
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|child
parameter_list|)
block|{
if|if
condition|(
name|objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"set root before creating child"
argument_list|)
throw|;
block|}
name|ObjectDescriptor
name|parentOD
init|=
name|objectStack
operator|.
name|peek
argument_list|()
decl_stmt|;
try|try
block|{
name|addChild
argument_list|(
name|parentOD
argument_list|,
name|child
operator|.
name|getClass
argument_list|()
argument_list|,
name|name
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no default constructor on "
operator|+
name|child
operator|.
name|getClass
argument_list|()
operator|+
literal|" for adding "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|parentOD
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad method found for "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|parentOD
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Object
name|addChild
parameter_list|(
name|ObjectDescriptor
name|parentOD
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|childClass
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|child
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
name|Object
name|parent
init|=
name|parentOD
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|MacroRecord
condition|)
block|{
name|MacroRecord
name|record
init|=
operator|(
name|MacroRecord
operator|)
name|parent
decl_stmt|;
name|MacroRecord
name|recordChild
init|=
name|record
operator|.
name|recordChild
argument_list|(
name|name
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|setCurrent
argument_list|(
name|recordChild
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|recordChild
return|;
block|}
name|Method
name|addChild
init|=
name|parentOD
operator|.
name|getAddMethod
argument_list|(
name|childClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|addChild
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
name|childClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
name|addChild
operator|.
name|invoke
argument_list|(
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|setCurrent
argument_list|(
name|child
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
name|addChild
operator|=
name|parentOD
operator|.
name|getAddConfiguredMethod
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|addChild
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Map
operator|.
name|class
operator|==
name|childClass
condition|)
block|{
name|child
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|child
operator|=
name|childClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
block|}
name|setCurrent
argument_list|(
name|child
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no appropriate method found for adding "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|parent
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isTopLevelMacroRecord
parameter_list|()
block|{
if|if
condition|(
name|objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ObjectDescriptor
name|od
init|=
name|objectStack
operator|.
name|peek
argument_list|()
decl_stmt|;
return|return
operator|(
name|od
operator|.
name|getObject
argument_list|()
operator|instanceof
name|MacroDef
operator|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"set root before setting attribute"
argument_list|)
throw|;
block|}
name|ObjectDescriptor
name|od
init|=
name|objectStack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|od
operator|.
name|getObject
argument_list|()
operator|instanceof
name|Macro
condition|)
block|{
operator|(
operator|(
name|Macro
operator|)
name|od
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|defineAttribute
argument_list|(
name|attributeName
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|od
operator|.
name|getObject
argument_list|()
operator|instanceof
name|MacroRecord
condition|)
block|{
operator|(
operator|(
name|MacroRecord
operator|)
name|od
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|recordAttribute
argument_list|(
name|attributeName
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
name|Method
name|m
init|=
name|od
operator|.
name|getSetMethod
argument_list|(
name|attributeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|od
operator|.
name|getObject
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|od
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no set method found for "
operator|+
name|attributeName
operator|+
literal|" on "
operator|+
name|od
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|Object
name|convertedValue
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|paramClass
init|=
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
if|if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|value
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|||
name|paramClass
operator|.
name|equals
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|TRUE_VALUES
operator|.
name|contains
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Character
operator|.
name|class
argument_list|)
operator|||
name|paramClass
operator|.
name|equals
argument_list|(
name|char
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
else|:
literal|' '
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Short
operator|.
name|class
argument_list|)
operator|||
name|paramClass
operator|.
name|equals
argument_list|(
name|short
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|Short
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|||
name|paramClass
operator|.
name|equals
argument_list|(
name|int
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|||
name|paramClass
operator|.
name|equals
argument_list|(
name|long
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|Class
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paramClass
operator|.
name|equals
argument_list|(
name|File
operator|.
name|class
argument_list|)
condition|)
block|{
name|convertedValue
operator|=
name|fileResolver
operator|.
name|resolveFile
argument_list|(
name|value
argument_list|,
name|od
operator|.
name|getObjectName
argument_list|()
operator|+
literal|"."
operator|+
name|attributeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|convertedValue
operator|=
name|paramClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"impossible to convert "
operator|+
name|value
operator|+
literal|" to "
operator|+
name|paramClass
operator|+
literal|" for setting "
operator|+
name|attributeName
operator|+
literal|" on "
operator|+
name|od
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
try|try
block|{
name|m
operator|.
name|invoke
argument_list|(
name|od
operator|.
name|getObject
argument_list|()
argument_list|,
name|convertedValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"impossible to set "
operator|+
name|attributeName
operator|+
literal|" to "
operator|+
name|convertedValue
operator|+
literal|" on "
operator|+
name|od
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|addText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"set root before adding text"
argument_list|)
throw|;
block|}
name|ObjectDescriptor
name|od
init|=
name|objectStack
operator|.
name|peek
argument_list|()
decl_stmt|;
try|try
block|{
name|od
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"addText"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|od
operator|.
name|getObject
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"impossible to add text on "
operator|+
name|od
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * @return the finished child      */
specifier|public
name|Object
name|endCreateChild
parameter_list|()
block|{
if|if
condition|(
name|objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"set root before ending child"
argument_list|)
throw|;
block|}
name|ObjectDescriptor
name|od
init|=
name|objectStack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|objectStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|objectStack
operator|.
name|push
argument_list|(
name|od
argument_list|)
expr_stmt|;
comment|// back to previous state
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cannot end root"
argument_list|)
throw|;
block|}
if|if
condition|(
name|od
operator|.
name|getObject
argument_list|()
operator|instanceof
name|Macro
condition|)
block|{
return|return
operator|(
operator|(
name|Macro
operator|)
name|od
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|play
argument_list|(
name|this
argument_list|)
return|;
block|}
name|ObjectDescriptor
name|parentOD
init|=
name|objectStack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|od
operator|.
name|getObjectName
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|childClass
init|=
name|typedefs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Method
name|m
init|=
operator|(
name|childClass
operator|==
literal|null
operator|)
condition|?
name|parentOD
operator|.
name|getAddConfiguredMethod
argument_list|(
name|name
argument_list|)
else|:
name|parentOD
operator|.
name|getAddConfiguredMethod
argument_list|(
name|childClass
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|invoke
argument_list|(
name|parentOD
operator|.
name|getObject
argument_list|()
argument_list|,
name|od
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|od
operator|.
name|getObject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"impossible to add configured child for "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|parentOD
operator|.
name|getObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|+
literal|": "
operator|+
name|StringUtils
operator|.
name|getErrorMessage
argument_list|(
name|ex
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|getCurrent
parameter_list|()
block|{
return|return
name|objectStack
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|objectStack
operator|.
name|peek
argument_list|()
operator|.
name|getObject
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|objectStack
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|MacroDef
name|startMacroDef
parameter_list|(
name|String
name|macroName
parameter_list|)
block|{
name|MacroDef
name|macroDef
init|=
operator|new
name|MacroDef
argument_list|(
name|macroName
argument_list|)
decl_stmt|;
name|setCurrent
argument_list|(
name|macroDef
argument_list|,
name|macroName
argument_list|)
expr_stmt|;
return|return
name|macroDef
return|;
block|}
specifier|public
name|void
name|addMacroAttribute
parameter_list|(
name|String
name|attName
parameter_list|,
name|String
name|attDefaultValue
parameter_list|)
block|{
operator|(
operator|(
name|MacroDef
operator|)
name|getCurrent
argument_list|()
operator|)
operator|.
name|addAttribute
argument_list|(
name|attName
argument_list|,
name|attDefaultValue
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addMacroElement
parameter_list|(
name|String
name|elementName
parameter_list|,
name|boolean
name|optional
parameter_list|)
block|{
operator|(
operator|(
name|MacroDef
operator|)
name|getCurrent
argument_list|()
operator|)
operator|.
name|addElement
argument_list|(
name|elementName
argument_list|,
name|optional
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endMacroDef
parameter_list|()
block|{
name|addConfiguredMacrodef
argument_list|(
operator|(
operator|(
name|MacroDef
operator|)
name|getCurrent
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|objectStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addConfiguredMacrodef
parameter_list|(
name|MacroDef
name|macrodef
parameter_list|)
block|{
name|macrodefs
operator|.
name|put
argument_list|(
name|macrodef
operator|.
name|getName
argument_list|()
argument_list|,
name|macrodef
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getTypeDef
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|typedefs
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|FileResolver
name|getFileResolver
parameter_list|()
block|{
return|return
name|fileResolver
return|;
block|}
specifier|public
name|void
name|setFileResolver
parameter_list|(
name|FileResolver
name|fileResolver
parameter_list|)
block|{
name|Checks
operator|.
name|checkNotNull
argument_list|(
name|fileResolver
argument_list|,
literal|"fileResolver"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileResolver
operator|=
name|fileResolver
expr_stmt|;
block|}
block|}
end_class

end_unit

