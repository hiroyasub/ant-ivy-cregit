begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|circular
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ModuleRevisionId
import|;
end_import

begin_class
specifier|public
class|class
name|CircularDependencyHelper
block|{
comment|/**      * Returns a string representation of this circular dependency graph      * @param descriptors in order of circular dependency      * @return      */
specifier|public
specifier|static
name|String
name|formatMessage
parameter_list|(
specifier|final
name|ModuleRevisionId
index|[]
name|mrids
parameter_list|)
block|{
name|StringBuffer
name|buff
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|mrids
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|mrids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"->"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|mrids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|formatMessage
parameter_list|(
specifier|final
name|ModuleDescriptor
index|[]
name|descriptors
parameter_list|)
block|{
return|return
name|formatMessage
argument_list|(
name|toMrids
argument_list|(
name|descriptors
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ModuleRevisionId
index|[]
name|toMrids
parameter_list|(
name|ModuleDescriptor
index|[]
name|descriptors
parameter_list|)
block|{
name|ModuleRevisionId
index|[]
name|mrids
init|=
operator|new
name|ModuleRevisionId
index|[
name|descriptors
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|descriptors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mrids
index|[
name|i
index|]
operator|=
name|descriptors
index|[
name|i
index|]
operator|.
name|getModuleRevisionId
argument_list|()
expr_stmt|;
block|}
return|return
name|mrids
return|;
block|}
block|}
end_class

end_unit

