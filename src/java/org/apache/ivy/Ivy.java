begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|deliver
operator|.
name|PublishingDependencyRevisionResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|MDArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|IvyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|ModuleEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|OrganisationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|RevisionEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
operator|.
name|SortEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|NoConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|ExactPatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|MatcherHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|NameSpaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|namespace
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParserRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|report
operator|.
name|XmlReportParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|TransferEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|TransferListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|AbstractResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|trigger
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|HostUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|FilterHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  *<a href="http://incubator.apache.org/ivy/">Ivy</a> is a free java based dependency manager.  *   * This class is the main class of Ivy, which offers mainly dependency resolution.  *   * Here is one typical usage:  * Ivy ivy = new Ivy();  * ivy.configure(new URL("ivyconf.xml"));  * ivy.resolve(new URL("ivy.xml"));  *    * @author Xavier Hanin  *  */
end_comment

begin_class
specifier|public
class|class
name|Ivy
block|{
specifier|public
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
decl_stmt|;
specifier|private
name|IvySettings
name|_settings
decl_stmt|;
specifier|private
name|boolean
name|_interrupted
decl_stmt|;
specifier|private
name|EventManager
name|_eventManager
decl_stmt|;
specifier|private
name|SortEngine
name|_sortEngine
decl_stmt|;
specifier|private
name|ResolveEngine
name|_resolveEngine
decl_stmt|;
specifier|public
name|Ivy
parameter_list|()
block|{
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         CHECK
comment|/////////////////////////////////////////////////////////////////////////
comment|/**      * Checks the given ivy file using current configuration to see if all dependencies      * are available, with good confs. If a resolver name is given, it also checks that the declared      * publications are available in the corresponding resolver.      * Note that the check is not performed recursively, i.e. if a dependency has itself dependencies      * badly described or not available, this check will not discover it.       */
specifier|public
name|boolean
name|check
parameter_list|(
name|URL
name|ivyFile
parameter_list|,
name|String
name|resolvername
parameter_list|)
block|{
try|try
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
comment|// parse ivy file
name|ModuleDescriptor
name|md
init|=
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|_settings
argument_list|,
name|ivyFile
argument_list|,
name|_settings
operator|.
name|doValidate
argument_list|()
argument_list|)
decl_stmt|;
comment|// check publications if possible
if|if
condition|(
name|resolvername
operator|!=
literal|null
condition|)
block|{
name|DependencyResolver
name|resolver
init|=
name|_settings
operator|.
name|getResolver
argument_list|(
name|resolvername
argument_list|)
decl_stmt|;
name|String
index|[]
name|confs
init|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
decl_stmt|;
name|Set
name|artifacts
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|artifacts
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getArtifacts
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|artifacts
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|art
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|resolver
operator|.
name|exists
argument_list|(
name|art
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"declared publication not found: "
operator|+
name|art
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|// check dependencies
name|DependencyDescriptor
index|[]
name|dds
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|ResolveData
name|data
init|=
operator|new
name|ResolveData
argument_list|(
name|_resolveEngine
argument_list|,
name|_settings
operator|.
name|getDefaultCache
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// check master confs
name|String
index|[]
name|masterConfs
init|=
name|dds
index|[
name|i
index|]
operator|.
name|getModuleConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|masterConfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
literal|"*"
operator|.
name|equals
argument_list|(
name|masterConfs
index|[
name|j
index|]
operator|.
name|trim
argument_list|()
argument_list|)
operator|&&
name|md
operator|.
name|getConfiguration
argument_list|(
name|masterConfs
index|[
name|j
index|]
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"dependency required in non existing conf for "
operator|+
name|ivyFile
operator|+
literal|" \n\tin "
operator|+
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|masterConfs
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// resolve
name|DependencyResolver
name|resolver
init|=
name|_settings
operator|.
name|getResolver
argument_list|(
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyId
argument_list|()
argument_list|)
decl_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
name|resolver
operator|.
name|getDependency
argument_list|(
name|dds
index|[
name|i
index|]
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmr
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"dependency not found in "
operator|+
name|ivyFile
operator|+
literal|":\n\t"
operator|+
name|dds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|depConfs
init|=
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyConfigurations
argument_list|(
name|md
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|depConfs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|depConfs
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"dependency configuration is missing for "
operator|+
name|ivyFile
operator|+
literal|"\n\tin "
operator|+
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|depConfs
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
name|Artifact
index|[]
name|arts
init|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getArtifacts
argument_list|(
name|depConfs
index|[
name|j
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|arts
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|resolver
operator|.
name|exists
argument_list|(
name|arts
index|[
name|k
index|]
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"dependency artifact is missing for "
operator|+
name|ivyFile
operator|+
literal|"\n\t in "
operator|+
name|dds
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
operator|+
literal|": "
operator|+
name|arts
index|[
name|k
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"parse problem on "
operator|+
name|ivyFile
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"io problem on "
operator|+
name|ivyFile
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"problem on "
operator|+
name|ivyFile
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         RESOLVE
comment|/////////////////////////////////////////////////////////////////////////
specifier|public
name|ArtifactDownloadReport
name|download
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|cache
parameter_list|,
name|boolean
name|useOrigin
parameter_list|)
block|{
return|return
name|_resolveEngine
operator|.
name|download
argument_list|(
name|artifact
argument_list|,
name|cache
argument_list|,
name|useOrigin
argument_list|)
return|;
block|}
specifier|public
name|void
name|downloadArtifacts
parameter_list|(
name|ResolveReport
name|report
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|boolean
name|useOrigin
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
block|{
name|_resolveEngine
operator|.
name|downloadArtifacts
argument_list|(
name|report
argument_list|,
name|cacheManager
argument_list|,
name|useOrigin
argument_list|,
name|artifactFilter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResolvedModuleRevision
name|findModule
parameter_list|(
name|ModuleRevisionId
name|id
parameter_list|)
block|{
return|return
name|_resolveEngine
operator|.
name|findModule
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|IvyNode
index|[]
name|getDependencies
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|ResolveReport
name|report
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|transitive
parameter_list|)
block|{
return|return
name|_resolveEngine
operator|.
name|getDependencies
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|report
argument_list|,
name|validate
argument_list|,
name|transitive
argument_list|)
return|;
block|}
specifier|public
name|IvyNode
index|[]
name|getDependencies
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|ResolveReport
name|report
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
return|return
name|_resolveEngine
operator|.
name|getDependencies
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|report
argument_list|,
name|validate
argument_list|)
return|;
block|}
specifier|public
name|IvyNode
index|[]
name|getDependencies
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|_resolveEngine
operator|.
name|getDependencies
argument_list|(
name|ivySource
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|useOrigin
parameter_list|,
name|boolean
name|download
parameter_list|,
name|boolean
name|outputReport
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|FileNotFoundException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|transitive
argument_list|,
name|useOrigin
argument_list|,
name|download
argument_list|,
name|outputReport
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|download
parameter_list|,
name|boolean
name|outputReport
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|FileNotFoundException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|transitive
argument_list|,
name|download
argument_list|,
name|outputReport
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|FileNotFoundException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|transitive
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|FileNotFoundException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|md
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|changing
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|useOrigin
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|mrid
argument_list|,
name|confs
argument_list|,
name|transitive
argument_list|,
name|changing
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|useOrigin
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|changing
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|mrid
argument_list|,
name|confs
argument_list|,
name|transitive
argument_list|,
name|changing
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
index|[]
name|confs
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|mrid
argument_list|,
name|confs
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|useOrigin
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|revision
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|transitive
argument_list|,
name|useOrigin
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|revision
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|transitive
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|revision
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|,
name|artifactFilter
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|useCacheOnly
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|revision
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|,
name|useCacheOnly
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
name|File
name|cache
parameter_list|,
name|Date
name|date
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|revision
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|date
argument_list|,
name|validate
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|ivySource
argument_list|)
return|;
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|File
name|ivySource
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|_resolveEngine
operator|.
name|resolve
argument_list|(
name|ivySource
argument_list|)
return|;
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         INSTALL
comment|/////////////////////////////////////////////////////////////////////////
specifier|public
name|ResolveReport
name|install
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|,
name|boolean
name|transitive
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|,
name|File
name|cache
parameter_list|,
name|String
name|matcherName
parameter_list|)
throws|throws
name|IOException
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|cache
operator|=
name|_settings
operator|.
name|getDefaultCache
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|artifactFilter
operator|==
literal|null
condition|)
block|{
name|artifactFilter
operator|=
name|FilterHelper
operator|.
name|NO_FILTER
expr_stmt|;
block|}
name|DependencyResolver
name|fromResolver
init|=
name|_settings
operator|.
name|getResolver
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|DependencyResolver
name|toResolver
init|=
name|_settings
operator|.
name|getResolver
argument_list|(
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromResolver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown resolver "
operator|+
name|from
operator|+
literal|". Available resolvers are: "
operator|+
name|_settings
operator|.
name|getResolverNames
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|toResolver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown resolver "
operator|+
name|to
operator|+
literal|". Available resolvers are: "
operator|+
name|_settings
operator|.
name|getResolverNames
argument_list|()
argument_list|)
throw|;
block|}
name|PatternMatcher
name|matcher
init|=
name|_settings
operator|.
name|getMatcher
argument_list|(
name|matcherName
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown matcher "
operator|+
name|matcherName
operator|+
literal|". Available matchers are: "
operator|+
name|_settings
operator|.
name|getMatcherNames
argument_list|()
argument_list|)
throw|;
block|}
comment|// build module file declaring the dependency
name|Message
operator|.
name|info
argument_list|(
literal|":: installing "
operator|+
name|mrid
operator|+
literal|" ::"
argument_list|)
expr_stmt|;
name|DependencyResolver
name|oldDicator
init|=
name|getDictatorResolver
argument_list|()
decl_stmt|;
name|boolean
name|log
init|=
name|_settings
operator|.
name|logNotConvertedExclusionRule
argument_list|()
decl_stmt|;
try|try
block|{
name|_settings
operator|.
name|setLogNotConvertedExclusionRule
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setDictatorResolver
argument_list|(
name|fromResolver
argument_list|)
expr_stmt|;
name|DefaultModuleDescriptor
name|md
init|=
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|"apache"
argument_list|,
literal|"ivy-install"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|,
name|_settings
operator|.
name|getStatusManager
argument_list|()
operator|.
name|getDefaultStatus
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|md
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|addConflictManager
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|ExactPatternMatcher
operator|.
name|ANY_EXPRESSION
argument_list|,
name|ExactPatternMatcher
operator|.
name|ANY_EXPRESSION
argument_list|)
argument_list|,
name|ExactPatternMatcher
operator|.
name|INSTANCE
argument_list|,
operator|new
name|NoConflictManager
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|MatcherHelper
operator|.
name|isExact
argument_list|(
name|matcher
argument_list|,
name|mrid
argument_list|)
condition|)
block|{
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|md
argument_list|,
name|mrid
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|transitive
argument_list|)
decl_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"default"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|md
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collection
name|mrids
init|=
name|findModuleRevisionIds
argument_list|(
name|fromResolver
argument_list|,
name|mrid
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|mrids
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleRevisionId
name|foundMrid
init|=
operator|(
name|ModuleRevisionId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|"\tfound "
operator|+
name|foundMrid
operator|+
literal|" to install: adding to the list"
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|md
argument_list|,
name|foundMrid
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|transitive
argument_list|)
decl_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"default"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|md
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
comment|// resolve using appropriate resolver
name|ResolveReport
name|report
init|=
operator|new
name|ResolveReport
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|":: resolving dependencies ::"
argument_list|)
expr_stmt|;
name|IvyNode
index|[]
name|dependencies
init|=
name|getDependencies
argument_list|(
name|md
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|,
name|cache
argument_list|,
literal|null
argument_list|,
name|report
argument_list|,
name|validate
argument_list|)
decl_stmt|;
name|report
operator|.
name|setDependencies
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dependencies
argument_list|)
argument_list|,
name|artifactFilter
argument_list|)
expr_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|":: downloading artifacts to cache ::"
argument_list|)
expr_stmt|;
name|downloadArtifacts
argument_list|(
name|report
argument_list|,
name|getCacheManager
argument_list|(
name|cache
argument_list|)
argument_list|,
literal|false
argument_list|,
name|artifactFilter
argument_list|)
expr_stmt|;
comment|// now that everything is in cache, we can publish all these modules
name|Message
operator|.
name|info
argument_list|(
literal|":: installing in "
operator|+
name|to
operator|+
literal|" ::"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ModuleDescriptor
name|depmd
init|=
name|dependencies
index|[
name|i
index|]
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|depmd
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"installing "
operator|+
name|depmd
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
name|publish
argument_list|(
name|depmd
argument_list|,
name|toResolver
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|cache
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|_settings
operator|.
name|getCacheArtifactPattern
argument_list|()
argument_list|)
argument_list|,
name|cache
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|_settings
operator|.
name|getCacheIvyPattern
argument_list|()
argument_list|,
literal|null
argument_list|,
name|overwrite
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|Message
operator|.
name|info
argument_list|(
literal|":: install resolution report ::"
argument_list|)
expr_stmt|;
comment|// output report
name|report
operator|.
name|output
argument_list|(
name|_settings
operator|.
name|getReportOutputters
argument_list|()
argument_list|,
name|cache
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
finally|finally
block|{
name|setDictatorResolver
argument_list|(
name|oldDicator
argument_list|)
expr_stmt|;
name|_settings
operator|.
name|setLogNotConvertedExclusionRule
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DependencyResolver
name|_dictatorResolver
decl_stmt|;
specifier|public
name|DependencyResolver
name|getDictatorResolver
parameter_list|()
block|{
return|return
name|_dictatorResolver
return|;
block|}
specifier|public
name|void
name|setDictatorResolver
parameter_list|(
name|DependencyResolver
name|dictatorResolver
parameter_list|)
block|{
name|_dictatorResolver
operator|=
name|dictatorResolver
expr_stmt|;
block|}
specifier|public
name|Collection
name|findModuleRevisionIds
parameter_list|(
name|DependencyResolver
name|resolver
parameter_list|,
name|ModuleRevisionId
name|pattern
parameter_list|,
name|PatternMatcher
name|matcher
parameter_list|)
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Collection
name|mrids
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|String
name|resolverName
init|=
name|resolver
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"looking for modules matching "
operator|+
name|pattern
operator|+
literal|" using "
operator|+
name|matcher
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Namespace
name|fromNamespace
init|=
name|resolver
operator|instanceof
name|AbstractResolver
condition|?
operator|(
operator|(
name|AbstractResolver
operator|)
name|resolver
operator|)
operator|.
name|getNamespace
argument_list|()
else|:
literal|null
decl_stmt|;
name|Collection
name|modules
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|OrganisationEntry
index|[]
name|orgs
init|=
name|resolver
operator|.
name|listOrganisations
argument_list|()
decl_stmt|;
if|if
condition|(
name|orgs
operator|==
literal|null
operator|||
name|orgs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// hack for resolvers which are not able to list organisation, we try to see if the asked organisation is not an exact one:
name|String
name|org
init|=
name|pattern
operator|.
name|getOrganisation
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromNamespace
operator|!=
literal|null
condition|)
block|{
name|org
operator|=
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|pattern
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|fromNamespace
operator|.
name|getFromSystemTransformer
argument_list|()
argument_list|)
operator|.
name|getOrganisation
argument_list|()
expr_stmt|;
block|}
name|modules
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
operator|.
name|listModules
argument_list|(
operator|new
name|OrganisationEntry
argument_list|(
name|resolver
argument_list|,
name|org
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Matcher
name|orgMatcher
init|=
name|matcher
operator|.
name|getMatcher
argument_list|(
name|pattern
operator|.
name|getOrganisation
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|org
init|=
name|orgs
index|[
name|i
index|]
operator|.
name|getOrganisation
argument_list|()
decl_stmt|;
name|String
name|systemOrg
init|=
name|org
decl_stmt|;
if|if
condition|(
name|fromNamespace
operator|!=
literal|null
condition|)
block|{
name|systemOrg
operator|=
name|NameSpaceHelper
operator|.
name|transformOrganisation
argument_list|(
name|org
argument_list|,
name|fromNamespace
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|orgMatcher
operator|.
name|matches
argument_list|(
name|systemOrg
argument_list|)
condition|)
block|{
name|modules
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
operator|.
name|listModules
argument_list|(
operator|new
name|OrganisationEntry
argument_list|(
name|resolver
argument_list|,
name|org
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Message
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|modules
operator|.
name|size
argument_list|()
operator|+
literal|" modules for "
operator|+
name|pattern
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|" on "
operator|+
name|resolverName
argument_list|)
expr_stmt|;
name|boolean
name|foundModule
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|modules
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleEntry
name|mEntry
init|=
operator|(
name|ModuleEntry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ModuleId
name|foundMid
init|=
operator|new
name|ModuleId
argument_list|(
name|mEntry
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|mEntry
operator|.
name|getModule
argument_list|()
argument_list|)
decl_stmt|;
name|ModuleId
name|systemMid
init|=
name|foundMid
decl_stmt|;
if|if
condition|(
name|fromNamespace
operator|!=
literal|null
condition|)
block|{
name|systemMid
operator|=
name|NameSpaceHelper
operator|.
name|transform
argument_list|(
name|foundMid
argument_list|,
name|fromNamespace
operator|.
name|getToSystemTransformer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MatcherHelper
operator|.
name|matches
argument_list|(
name|matcher
argument_list|,
name|pattern
operator|.
name|getModuleId
argument_list|()
argument_list|,
name|systemMid
argument_list|)
condition|)
block|{
comment|// The module corresponds to the searched module pattern
name|foundModule
operator|=
literal|true
expr_stmt|;
name|RevisionEntry
index|[]
name|rEntries
init|=
name|resolver
operator|.
name|listRevisions
argument_list|(
name|mEntry
argument_list|)
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"found "
operator|+
name|rEntries
operator|.
name|length
operator|+
literal|" revisions for ["
operator|+
name|mEntry
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|", "
operator|+
name|mEntry
operator|.
name|getModule
argument_list|()
operator|+
literal|"] on "
operator|+
name|resolverName
argument_list|)
expr_stmt|;
name|boolean
name|foundRevision
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rEntries
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|RevisionEntry
name|rEntry
init|=
name|rEntries
index|[
name|j
index|]
decl_stmt|;
name|ModuleRevisionId
name|foundMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mEntry
operator|.
name|getOrganisation
argument_list|()
argument_list|,
name|mEntry
operator|.
name|getModule
argument_list|()
argument_list|,
name|rEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|systemMrid
init|=
name|foundMrid
decl_stmt|;
if|if
condition|(
name|fromNamespace
operator|!=
literal|null
condition|)
block|{
name|systemMrid
operator|=
name|fromNamespace
operator|.
name|getToSystemTransformer
argument_list|()
operator|.
name|transform
argument_list|(
name|foundMrid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MatcherHelper
operator|.
name|matches
argument_list|(
name|matcher
argument_list|,
name|pattern
argument_list|,
name|systemMrid
argument_list|)
condition|)
block|{
comment|// We have a matching module revision
name|foundRevision
operator|=
literal|true
expr_stmt|;
name|mrids
operator|.
name|add
argument_list|(
name|systemMrid
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|foundRevision
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"no revision found matching "
operator|+
name|pattern
operator|+
literal|" in ["
operator|+
name|mEntry
operator|.
name|getOrganisation
argument_list|()
operator|+
literal|","
operator|+
name|mEntry
operator|.
name|getModule
argument_list|()
operator|+
literal|"] using "
operator|+
name|resolverName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|foundModule
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"no module found matching "
operator|+
name|pattern
operator|+
literal|" using "
operator|+
name|resolverName
argument_list|)
expr_stmt|;
block|}
return|return
name|mrids
return|;
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         RETRIEVE
comment|/////////////////////////////////////////////////////////////////////////
comment|/**      * example of destFilePattern :      * - lib/[organisation]/[module]/[artifact]-[revision].[type]      * - lib/[artifact].[type] : flatten with no revision      * moduleId is used with confs and localCacheDirectory to determine      * an ivy report file, used as input for the copy      * If such a file does not exist for any conf (resolve has not been called before ?)      * then an IllegalStateException is thrown and nothing is copied.      */
specifier|public
name|int
name|retrieve
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
specifier|final
name|File
name|cache
parameter_list|,
name|String
name|destFilePattern
parameter_list|)
block|{
return|return
name|retrieve
argument_list|(
name|moduleId
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|destFilePattern
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * If destIvyPattern is null no ivy files will be copied.      */
specifier|public
name|int
name|retrieve
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
specifier|final
name|File
name|cache
parameter_list|,
name|String
name|destFilePattern
parameter_list|,
name|String
name|destIvyPattern
parameter_list|)
block|{
return|return
name|retrieve
argument_list|(
name|moduleId
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|destFilePattern
argument_list|,
name|destIvyPattern
argument_list|,
name|FilterHelper
operator|.
name|NO_FILTER
argument_list|)
return|;
block|}
specifier|public
name|int
name|retrieve
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
specifier|final
name|File
name|cache
parameter_list|,
name|String
name|destFilePattern
parameter_list|,
name|String
name|destIvyPattern
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
block|{
return|return
name|retrieve
argument_list|(
name|moduleId
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|destFilePattern
argument_list|,
name|destIvyPattern
argument_list|,
name|artifactFilter
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|int
name|retrieve
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
specifier|final
name|File
name|cache
parameter_list|,
name|String
name|destFilePattern
parameter_list|,
name|String
name|destIvyPattern
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|,
name|boolean
name|sync
parameter_list|,
name|boolean
name|useOrigin
parameter_list|)
block|{
return|return
name|retrieve
argument_list|(
name|moduleId
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|destFilePattern
argument_list|,
name|destIvyPattern
argument_list|,
name|artifactFilter
argument_list|,
name|sync
argument_list|,
name|useOrigin
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|int
name|retrieve
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
specifier|final
name|File
name|cache
parameter_list|,
name|String
name|destFilePattern
parameter_list|,
name|String
name|destIvyPattern
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|,
name|boolean
name|sync
parameter_list|,
name|boolean
name|useOrigin
parameter_list|,
name|boolean
name|makeSymlinks
parameter_list|)
block|{
if|if
condition|(
name|artifactFilter
operator|==
literal|null
condition|)
block|{
name|artifactFilter
operator|=
name|FilterHelper
operator|.
name|NO_FILTER
expr_stmt|;
block|}
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|":: retrieving :: "
operator|+
name|moduleId
operator|+
operator|(
name|sync
condition|?
literal|" [sync]"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|"\tconfs: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|confs
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|destFilePattern
operator|=
name|IvyPatternHelper
operator|.
name|substituteVariables
argument_list|(
name|destFilePattern
argument_list|,
name|_settings
operator|.
name|getVariables
argument_list|()
argument_list|)
expr_stmt|;
name|destIvyPattern
operator|=
name|IvyPatternHelper
operator|.
name|substituteVariables
argument_list|(
name|destIvyPattern
argument_list|,
name|_settings
operator|.
name|getVariables
argument_list|()
argument_list|)
expr_stmt|;
name|CacheManager
name|cacheManager
init|=
name|getCacheManager
argument_list|(
name|cache
argument_list|)
decl_stmt|;
try|try
block|{
name|Map
name|artifactsToCopy
init|=
name|determineArtifactsToCopy
argument_list|(
name|moduleId
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|destFilePattern
argument_list|,
name|destIvyPattern
argument_list|,
name|artifactFilter
argument_list|)
decl_stmt|;
name|File
name|fileRetrieveRoot
init|=
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|getTokenRoot
argument_list|(
name|destFilePattern
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|ivyRetrieveRoot
init|=
name|destIvyPattern
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|getTokenRoot
argument_list|(
name|destIvyPattern
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
name|targetArtifactsStructure
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|// Set(File) set of all paths which should be present at then end of retrieve (useful for sync)
name|Collection
name|targetIvysStructure
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|// same for ivy files
comment|// do retrieve
name|int
name|targetsCopied
init|=
literal|0
decl_stmt|;
name|int
name|targetsUpToDate
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|artifactsToCopy
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|archive
decl_stmt|;
if|if
condition|(
literal|"ivy"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|archive
operator|=
name|cacheManager
operator|.
name|getIvyFileInCache
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|archive
operator|=
name|cacheManager
operator|.
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|cacheManager
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
argument_list|,
name|useOrigin
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useOrigin
operator|&&
operator|!
name|archive
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// file is not available in cache, maybe the last resolve was performed with useOrigin=true.
comment|// we try to use the best we can
name|archive
operator|=
name|cacheManager
operator|.
name|getArchiveFileInCache
argument_list|(
name|artifact
argument_list|,
name|cacheManager
operator|.
name|getSavedArtifactOrigin
argument_list|(
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
name|dest
init|=
operator|(
name|Set
operator|)
name|artifactsToCopy
operator|.
name|get
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tretrieving "
operator|+
name|archive
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it2
init|=
name|dest
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|checkInterrupted
argument_list|()
expr_stmt|;
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|it2
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|_settings
operator|.
name|isCheckUpToDate
argument_list|()
operator|||
operator|!
name|upToDate
argument_list|(
name|archive
argument_list|,
name|destFile
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\tto "
operator|+
name|destFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|makeSymlinks
condition|)
block|{
name|FileUtil
operator|.
name|symlink
argument_list|(
name|archive
argument_list|,
name|destFile
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|archive
argument_list|,
name|destFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|targetsCopied
operator|++
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\tto "
operator|+
name|destFile
operator|+
literal|" [NOT REQUIRED]"
argument_list|)
expr_stmt|;
name|targetsUpToDate
operator|++
expr_stmt|;
block|}
if|if
condition|(
literal|"ivy"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|targetIvysStructure
operator|.
name|addAll
argument_list|(
name|FileUtil
operator|.
name|getPathFiles
argument_list|(
name|ivyRetrieveRoot
argument_list|,
name|destFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|targetArtifactsStructure
operator|.
name|addAll
argument_list|(
name|FileUtil
operator|.
name|getPathFiles
argument_list|(
name|fileRetrieveRoot
argument_list|,
name|destFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sync
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tsyncing..."
argument_list|)
expr_stmt|;
name|Collection
name|existingArtifacts
init|=
name|FileUtil
operator|.
name|listAll
argument_list|(
name|fileRetrieveRoot
argument_list|)
decl_stmt|;
name|Collection
name|existingIvys
init|=
name|ivyRetrieveRoot
operator|==
literal|null
condition|?
literal|null
else|:
name|FileUtil
operator|.
name|listAll
argument_list|(
name|ivyRetrieveRoot
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileRetrieveRoot
operator|.
name|equals
argument_list|(
name|ivyRetrieveRoot
argument_list|)
condition|)
block|{
name|Collection
name|target
init|=
name|targetArtifactsStructure
decl_stmt|;
name|target
operator|.
name|addAll
argument_list|(
name|targetIvysStructure
argument_list|)
expr_stmt|;
name|Collection
name|existing
init|=
name|existingArtifacts
decl_stmt|;
name|existing
operator|.
name|addAll
argument_list|(
name|existingIvys
argument_list|)
expr_stmt|;
name|sync
argument_list|(
name|target
argument_list|,
name|existing
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sync
argument_list|(
name|targetArtifactsStructure
argument_list|,
name|existingArtifacts
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingIvys
operator|!=
literal|null
condition|)
block|{
name|sync
argument_list|(
name|targetIvysStructure
argument_list|,
name|existingIvys
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
name|targetsCopied
operator|+
literal|" artifacts copied, "
operator|+
name|targetsUpToDate
operator|+
literal|" already retrieved"
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tretrieve done ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
return|return
name|targetsCopied
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem during retrieve of "
operator|+
name|moduleId
operator|+
literal|": "
operator|+
name|ex
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CacheManager
name|getCacheManager
parameter_list|(
name|File
name|cache
parameter_list|)
block|{
comment|// TODO reuse instance
return|return
operator|new
name|CacheManager
argument_list|(
name|_settings
argument_list|,
name|cache
argument_list|)
return|;
block|}
specifier|private
name|void
name|sync
parameter_list|(
name|Collection
name|target
parameter_list|,
name|Collection
name|existing
parameter_list|)
block|{
name|Collection
name|toRemove
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|existing
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|file
init|=
operator|(
name|File
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|file
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|target
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|file
init|=
operator|(
name|File
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|toRemove
operator|.
name|remove
argument_list|(
name|file
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|toRemove
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|file
init|=
operator|(
name|File
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\tdeleting "
operator|+
name|file
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|forceDelete
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Map
name|determineArtifactsToCopy
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
specifier|final
name|File
name|cache
parameter_list|,
name|String
name|destFilePattern
parameter_list|,
name|String
name|destIvyPattern
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
return|return
name|determineArtifactsToCopy
argument_list|(
name|moduleId
argument_list|,
name|confs
argument_list|,
name|cache
argument_list|,
name|destFilePattern
argument_list|,
name|destIvyPattern
argument_list|,
name|FilterHelper
operator|.
name|NO_FILTER
argument_list|)
return|;
block|}
specifier|public
name|Map
name|determineArtifactsToCopy
parameter_list|(
name|ModuleId
name|moduleId
parameter_list|,
name|String
index|[]
name|confs
parameter_list|,
specifier|final
name|File
name|cache
parameter_list|,
name|String
name|destFilePattern
parameter_list|,
name|String
name|destIvyPattern
parameter_list|,
name|Filter
name|artifactFilter
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifactFilter
operator|==
literal|null
condition|)
block|{
name|artifactFilter
operator|=
name|FilterHelper
operator|.
name|NO_FILTER
expr_stmt|;
block|}
comment|// find what we must retrieve where
specifier|final
name|Map
name|artifactsToCopy
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Artifact source -> Set (String copyDestAbsolutePath)
specifier|final
name|Map
name|conflictsMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// String copyDestAbsolutePath -> Set (Artifact source)
specifier|final
name|Map
name|conflictsConfMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// String copyDestAbsolutePath -> Set (String conf)
name|XmlReportParser
name|parser
init|=
operator|new
name|XmlReportParser
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|conf
init|=
name|confs
index|[
name|i
index|]
decl_stmt|;
name|Collection
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|parser
operator|.
name|getArtifacts
argument_list|(
name|moduleId
argument_list|,
name|conf
argument_list|,
name|cache
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|destIvyPattern
operator|!=
literal|null
condition|)
block|{
name|ModuleRevisionId
index|[]
name|mrids
init|=
name|parser
operator|.
name|getRealDependencyRevisionIds
argument_list|(
name|moduleId
argument_list|,
name|conf
argument_list|,
name|cache
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|mrids
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|DefaultArtifact
operator|.
name|newIvyArtifact
argument_list|(
name|mrids
index|[
name|j
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|artifacts
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|destPattern
init|=
literal|"ivy"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|?
name|destIvyPattern
else|:
name|destFilePattern
decl_stmt|;
if|if
condition|(
operator|!
literal|"ivy"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
operator|!
name|artifactFilter
operator|.
name|accept
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
continue|continue;
comment|// skip this artifact, the filter didn't accept it!
block|}
name|String
name|destFileName
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|destPattern
argument_list|,
name|artifact
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Set
name|dest
init|=
operator|(
name|Set
operator|)
name|artifactsToCopy
operator|.
name|get
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|dest
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|artifactsToCopy
operator|.
name|put
argument_list|(
name|artifact
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
name|String
name|copyDest
init|=
operator|new
name|File
argument_list|(
name|destFileName
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|dest
operator|.
name|add
argument_list|(
name|copyDest
argument_list|)
expr_stmt|;
name|Set
name|conflicts
init|=
operator|(
name|Set
operator|)
name|conflictsMap
operator|.
name|get
argument_list|(
name|copyDest
argument_list|)
decl_stmt|;
name|Set
name|conflictsConf
init|=
operator|(
name|Set
operator|)
name|conflictsConfMap
operator|.
name|get
argument_list|(
name|copyDest
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicts
operator|==
literal|null
condition|)
block|{
name|conflicts
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|conflictsMap
operator|.
name|put
argument_list|(
name|copyDest
argument_list|,
name|conflicts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conflictsConf
operator|==
literal|null
condition|)
block|{
name|conflictsConf
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|conflictsConfMap
operator|.
name|put
argument_list|(
name|copyDest
argument_list|,
name|conflictsConf
argument_list|)
expr_stmt|;
block|}
name|conflicts
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|conflictsConf
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|// resolve conflicts if any
for|for
control|(
name|Iterator
name|iter
init|=
name|conflictsMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|copyDest
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
name|artifacts
init|=
operator|(
name|Set
operator|)
name|conflictsMap
operator|.
name|get
argument_list|(
name|copyDest
argument_list|)
decl_stmt|;
name|Set
name|conflictsConfs
init|=
operator|(
name|Set
operator|)
name|conflictsConfMap
operator|.
name|get
argument_list|(
name|copyDest
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifacts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|List
name|artifactsList
init|=
operator|new
name|ArrayList
argument_list|(
name|artifacts
argument_list|)
decl_stmt|;
comment|// conflicts battle is resolved by a sort using a conflict resolving policy comparator
comment|// which consider as greater a winning artifact
name|Collections
operator|.
name|sort
argument_list|(
name|artifactsList
argument_list|,
name|getConflictResolvingPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// after the sort, the winning artifact is the greatest one, i.e. the last one
name|Message
operator|.
name|info
argument_list|(
literal|"\tconflict on "
operator|+
name|copyDest
operator|+
literal|" in "
operator|+
name|conflictsConfs
operator|+
literal|": "
operator|+
operator|(
operator|(
name|Artifact
operator|)
name|artifactsList
operator|.
name|get
argument_list|(
name|artifactsList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
operator|+
literal|" won"
argument_list|)
expr_stmt|;
comment|// we now iterate over the list beginning with the artifact preceding the winner,
comment|// and going backward to the least artifact
for|for
control|(
name|int
name|i
init|=
name|artifactsList
operator|.
name|size
argument_list|()
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Artifact
name|looser
init|=
operator|(
name|Artifact
operator|)
name|artifactsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t\tremoving conflict looser artifact: "
operator|+
name|looser
argument_list|)
expr_stmt|;
comment|// for each loser, we remove the pair (loser - copyDest) in the artifactsToCopy map
name|Set
name|dest
init|=
operator|(
name|Set
operator|)
name|artifactsToCopy
operator|.
name|get
argument_list|(
name|looser
argument_list|)
decl_stmt|;
name|dest
operator|.
name|remove
argument_list|(
name|copyDest
argument_list|)
expr_stmt|;
if|if
condition|(
name|dest
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|artifactsToCopy
operator|.
name|remove
argument_list|(
name|looser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|artifactsToCopy
return|;
block|}
specifier|private
name|boolean
name|upToDate
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|target
parameter_list|)
block|{
if|if
condition|(
operator|!
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|source
operator|.
name|lastModified
argument_list|()
operator|<=
name|target
operator|.
name|lastModified
argument_list|()
return|;
block|}
comment|/**      * The returned comparator should consider greater the artifact which      * gains the conflict battle.      * This is used only during retrieve... prefer resolve conflict manager      * to resolve conflicts.      * @return      */
specifier|private
name|Comparator
name|getConflictResolvingPolicy
parameter_list|()
block|{
return|return
operator|new
name|Comparator
argument_list|()
block|{
comment|// younger conflict resolving policy
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Artifact
name|a1
init|=
operator|(
name|Artifact
operator|)
name|o1
decl_stmt|;
name|Artifact
name|a2
init|=
operator|(
name|Artifact
operator|)
name|o2
decl_stmt|;
if|if
condition|(
name|a1
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|after
argument_list|(
name|a2
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
condition|)
block|{
comment|// a1 is after a2<=> a1 is younger than a2<=> a1 wins the conflict battle
return|return
operator|+
literal|1
return|;
block|}
if|else if
condition|(
name|a1
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|before
argument_list|(
name|a2
operator|.
name|getPublicationDate
argument_list|()
argument_list|)
condition|)
block|{
comment|// a1 is before a2<=> a2 is younger than a1<=> a2 wins the conflict battle
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
return|;
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         PUBLISH
comment|/////////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|deliver
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|revision
parameter_list|,
name|File
name|cache
parameter_list|,
name|String
name|destIvyPattern
parameter_list|,
name|String
name|status
parameter_list|,
name|Date
name|pubdate
parameter_list|,
name|PublishingDependencyRevisionResolver
name|pdrResolver
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|deliver
argument_list|(
name|mrid
argument_list|,
name|revision
argument_list|,
name|cache
argument_list|,
name|destIvyPattern
argument_list|,
name|status
argument_list|,
name|pubdate
argument_list|,
name|pdrResolver
argument_list|,
name|validate
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * delivers a resolved ivy file based upon last resolve call status and      * the given PublishingDependencyRevisionResolver.      * If resolve report file cannot be found in cache, then it throws       * an IllegalStateException (maybe resolve has not been called before ?)      * Moreover, the given PublishingDependencyRevisionResolver is used for each       * dependency to get its published information. This can particularly useful      * when the publish is made for a delivery, and when we wish to deliver each      * dependency which is still in integration. The PublishingDependencyRevisionResolver      * can then do the delivering work for the dependency and return the new (delivered)      * dependency info (with the delivered revision). Note that       * PublishingDependencyRevisionResolver is only called for each<b>direct</b> dependency.      *       * @param status the new status, null to keep the old one      * @throws ParseException      */
specifier|public
name|void
name|deliver
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|revision
parameter_list|,
name|File
name|cache
parameter_list|,
name|String
name|destIvyPattern
parameter_list|,
name|String
name|status
parameter_list|,
name|Date
name|pubdate
parameter_list|,
name|PublishingDependencyRevisionResolver
name|pdrResolver
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|resolveDynamicRevisions
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|":: delivering :: "
operator|+
name|mrid
operator|+
literal|" :: "
operator|+
name|revision
operator|+
literal|" :: "
operator|+
name|status
operator|+
literal|" :: "
operator|+
name|pubdate
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tvalidate = "
operator|+
name|validate
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|destIvyPattern
operator|=
name|_settings
operator|.
name|substitute
argument_list|(
name|destIvyPattern
argument_list|)
expr_stmt|;
name|CacheManager
name|cacheManager
init|=
name|getCacheManager
argument_list|(
name|cache
argument_list|)
decl_stmt|;
comment|// 1) find the resolved module descriptor in cache
name|File
name|ivyFile
init|=
name|cacheManager
operator|.
name|getResolvedIvyFileInCache
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ivyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ivy file not found in cache for "
operator|+
name|mrid
operator|+
literal|": please resolve dependencies before publishing ("
operator|+
name|ivyFile
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|ModuleDescriptor
name|md
init|=
literal|null
decl_stmt|;
name|URL
name|ivyFileURL
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ivyFileURL
operator|=
name|ivyFile
operator|.
name|toURL
argument_list|()
expr_stmt|;
name|md
operator|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|_settings
argument_list|,
name|ivyFileURL
argument_list|,
name|validate
argument_list|)
expr_stmt|;
name|md
operator|.
name|setResolvedModuleRevisionId
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mrid
argument_list|,
name|revision
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|setResolvedPublicationDate
argument_list|(
name|pubdate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"malformed url obtained for file "
operator|+
name|ivyFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"bad ivy file in cache for "
operator|+
name|mrid
operator|+
literal|": please clean and resolve again"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// 2) parse resolvedRevisions From properties file
name|Map
name|resolvedRevisions
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (ModuleId -> String revision)
name|Map
name|dependenciesStatus
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (ModuleId -> String status)
name|File
name|ivyProperties
init|=
name|cacheManager
operator|.
name|getResolvedIvyPropertiesInCache
argument_list|(
name|mrid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ivyProperties
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ivy properties not found in cache for "
operator|+
name|mrid
operator|+
literal|": please resolve dependencies before publishing ("
operator|+
name|ivyFile
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|ivyProperties
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|props
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|depMridStr
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|depMridStr
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|decodedMrid
init|=
name|ModuleRevisionId
operator|.
name|decode
argument_list|(
name|depMridStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolveDynamicRevisions
condition|)
block|{
name|resolvedRevisions
operator|.
name|put
argument_list|(
name|decodedMrid
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|dependenciesStatus
operator|.
name|put
argument_list|(
name|decodedMrid
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|// 3) use pdrResolver to resolve dependencies info
name|Map
name|resolvedDependencies
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Map (ModuleRevisionId -> String revision)
name|DependencyDescriptor
index|[]
name|dependencies
init|=
name|md
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dependencies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|rev
init|=
operator|(
name|String
operator|)
name|resolvedRevisions
operator|.
name|get
argument_list|(
name|dependencies
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|==
literal|null
condition|)
block|{
name|rev
operator|=
name|dependencies
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
name|String
name|depStatus
init|=
operator|(
name|String
operator|)
name|dependenciesStatus
operator|.
name|get
argument_list|(
name|dependencies
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|resolvedDependencies
operator|.
name|put
argument_list|(
name|dependencies
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|pdrResolver
operator|.
name|resolve
argument_list|(
name|md
argument_list|,
name|status
argument_list|,
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|dependencies
index|[
name|i
index|]
operator|.
name|getDependencyRevisionId
argument_list|()
argument_list|,
name|rev
argument_list|)
argument_list|,
name|depStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 4) copy the source resolved ivy to the destination specified,
comment|//    updating status, revision and dependency revisions obtained by
comment|//    PublishingDependencyRevisionResolver
name|String
name|publishedIvy
init|=
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|destIvyPattern
argument_list|,
name|md
operator|.
name|getResolvedModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|"\tdelivering ivy file to "
operator|+
name|publishedIvy
argument_list|)
expr_stmt|;
try|try
block|{
name|XmlModuleDescriptorUpdater
operator|.
name|update
argument_list|(
name|_settings
argument_list|,
name|ivyFileURL
argument_list|,
operator|new
name|File
argument_list|(
name|publishedIvy
argument_list|)
argument_list|,
name|resolvedDependencies
argument_list|,
name|status
argument_list|,
name|revision
argument_list|,
name|pubdate
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"bad ivy file in cache for "
operator|+
name|mrid
operator|+
literal|": please clean and resolve again"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tdeliver done ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
block|}
comment|/**      *       * @param pubrevision       * @param resolverName the name of a resolver to use for publication      * @param srcArtifactPattern a pattern to find artifacts to publish with the given resolver      * @param srcIvyPattern a pattern to find ivy file to publish, null if ivy file should not be published      * @return a collection of missing artifacts (those that are not published)      * @throws ParseException      */
specifier|public
name|Collection
name|publish
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|pubrevision
parameter_list|,
name|File
name|cache
parameter_list|,
name|String
name|srcArtifactPattern
parameter_list|,
name|String
name|resolverName
parameter_list|,
name|String
name|srcIvyPattern
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|publish
argument_list|(
name|mrid
argument_list|,
name|pubrevision
argument_list|,
name|cache
argument_list|,
name|srcArtifactPattern
argument_list|,
name|resolverName
argument_list|,
name|srcIvyPattern
argument_list|,
name|validate
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      *       * @param pubrevision       * @param resolverName the name of a resolver to use for publication      * @param srcArtifactPattern a pattern to find artifacts to publish with the given resolver      * @param srcIvyPattern a pattern to find ivy file to publish, null if ivy file should not be published      * @return a collection of missing artifacts (those that are not published)      * @throws ParseException      */
specifier|public
name|Collection
name|publish
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|pubrevision
parameter_list|,
name|File
name|cache
parameter_list|,
name|String
name|srcArtifactPattern
parameter_list|,
name|String
name|resolverName
parameter_list|,
name|String
name|srcIvyPattern
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|publish
argument_list|(
name|mrid
argument_list|,
name|pubrevision
argument_list|,
name|cache
argument_list|,
name|srcArtifactPattern
argument_list|,
name|resolverName
argument_list|,
name|srcIvyPattern
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|validate
argument_list|,
name|overwrite
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Collection
name|publish
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|pubrevision
parameter_list|,
name|File
name|cache
parameter_list|,
name|String
name|srcArtifactPattern
parameter_list|,
name|String
name|resolverName
parameter_list|,
name|String
name|srcIvyPattern
parameter_list|,
name|String
name|status
parameter_list|,
name|Date
name|pubdate
parameter_list|,
name|Artifact
index|[]
name|extraArtifacts
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|boolean
name|update
parameter_list|,
name|String
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|publish
argument_list|(
name|mrid
argument_list|,
name|pubrevision
argument_list|,
name|cache
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|srcArtifactPattern
argument_list|)
argument_list|,
name|resolverName
argument_list|,
name|srcIvyPattern
argument_list|,
name|status
argument_list|,
name|pubdate
argument_list|,
name|extraArtifacts
argument_list|,
name|validate
argument_list|,
name|overwrite
argument_list|,
name|update
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**      * Publishes a module to the repository.      *       * The publish can update the ivy file to publish if update is set to true. In this case it will use      * the given pubrevision, pubdate and status. If pudate is null it will default to the current date.      * If status is null it will default to the current ivy file status (which itself defaults to integration if none is found).      * If update is false, then if the revision is not the same in the ivy file than the one expected (given as parameter),      * this method will fail with an  IllegalArgumentException.      * pubdate and status are not used if update is false.      * extra artifacts can be used to publish more artifacts than actually declared in the ivy file.      * This can be useful to publish additional metadata or reports.      * The extra artifacts array can be null (= no extra artifacts), and if non null only the name, type, ext url       * and extra attributes of the artifacts are really used. Other methods can return null safely.       *       * @param mrid      * @param pubrevision      * @param cache      * @param srcArtifactPattern      * @param resolverName      * @param srcIvyPattern      * @param status      * @param pubdate      * @param validate      * @param overwrite      * @param update      * @return      * @throws IOException      */
specifier|public
name|Collection
name|publish
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|pubrevision
parameter_list|,
name|File
name|cache
parameter_list|,
name|Collection
name|srcArtifactPattern
parameter_list|,
name|String
name|resolverName
parameter_list|,
name|String
name|srcIvyPattern
parameter_list|,
name|String
name|status
parameter_list|,
name|Date
name|pubdate
parameter_list|,
name|Artifact
index|[]
name|extraArtifacts
parameter_list|,
name|boolean
name|validate
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|boolean
name|update
parameter_list|,
name|String
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|":: publishing :: "
operator|+
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tvalidate = "
operator|+
name|validate
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|srcIvyPattern
operator|=
name|_settings
operator|.
name|substitute
argument_list|(
name|srcIvyPattern
argument_list|)
expr_stmt|;
name|CacheManager
name|cacheManager
init|=
name|getCacheManager
argument_list|(
name|cache
argument_list|)
decl_stmt|;
comment|// 1) find the resolved module descriptor
name|ModuleRevisionId
name|pubmrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mrid
argument_list|,
name|pubrevision
argument_list|)
decl_stmt|;
name|File
name|ivyFile
decl_stmt|;
if|if
condition|(
name|srcIvyPattern
operator|!=
literal|null
condition|)
block|{
name|ivyFile
operator|=
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|srcIvyPattern
argument_list|,
name|DefaultArtifact
operator|.
name|newIvyArtifact
argument_list|(
name|pubmrid
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ivyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ivy file to publish not found for "
operator|+
name|mrid
operator|+
literal|": call deliver before ("
operator|+
name|ivyFile
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ivyFile
operator|=
name|cacheManager
operator|.
name|getResolvedIvyFileInCache
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ivyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ivy file not found in cache for "
operator|+
name|mrid
operator|+
literal|": please resolve dependencies before publishing ("
operator|+
name|ivyFile
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
name|ModuleDescriptor
name|md
init|=
literal|null
decl_stmt|;
name|URL
name|ivyFileURL
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ivyFileURL
operator|=
name|ivyFile
operator|.
name|toURL
argument_list|()
expr_stmt|;
name|md
operator|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|_settings
argument_list|,
name|ivyFileURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcIvyPattern
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|pubrevision
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|update
condition|)
block|{
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"ivy"
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
try|try
block|{
name|XmlModuleDescriptorUpdater
operator|.
name|update
argument_list|(
name|_settings
argument_list|,
name|ivyFileURL
argument_list|,
name|tmp
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|,
name|status
operator|==
literal|null
condition|?
name|md
operator|.
name|getStatus
argument_list|()
else|:
name|status
argument_list|,
name|pubrevision
argument_list|,
name|pubdate
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|()
else|:
name|pubdate
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ivyFile
operator|=
name|tmp
expr_stmt|;
comment|// we parse the new file to get updated module descriptor
name|md
operator|=
name|XmlModuleDescriptorParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|_settings
argument_list|,
name|ivyFile
operator|.
name|toURL
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|srcIvyPattern
operator|=
name|ivyFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad ivy file for "
operator|+
name|mrid
operator|+
literal|": "
operator|+
name|ivyFile
operator|+
literal|": "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot publish "
operator|+
name|ivyFile
operator|+
literal|" as "
operator|+
name|pubrevision
operator|+
literal|": bad revision found in ivy file. Use deliver before."
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|md
operator|.
name|setResolvedModuleRevisionId
argument_list|(
name|pubmrid
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"malformed url obtained for file "
operator|+
name|ivyFile
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad ivy file for "
operator|+
name|mrid
operator|+
literal|": "
operator|+
name|ivyFile
operator|+
literal|": "
operator|+
name|e
argument_list|)
throw|;
block|}
name|DependencyResolver
name|resolver
init|=
name|_settings
operator|.
name|getResolver
argument_list|(
name|resolverName
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown resolver "
operator|+
name|resolverName
argument_list|)
throw|;
block|}
comment|// collect all declared artifacts of this module
name|Collection
name|missing
init|=
name|publish
argument_list|(
name|md
argument_list|,
name|resolver
argument_list|,
name|srcArtifactPattern
argument_list|,
name|srcIvyPattern
argument_list|,
name|extraArtifacts
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tpublish done ("
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
return|return
name|missing
return|;
block|}
specifier|private
name|Collection
name|publish
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|DependencyResolver
name|resolver
parameter_list|,
name|Collection
name|srcArtifactPattern
parameter_list|,
name|String
name|srcIvyPattern
parameter_list|,
name|Artifact
index|[]
name|extraArtifacts
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|String
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
name|missing
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Set
name|artifactsSet
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|String
index|[]
name|confs
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|conf
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|confs
operator|=
name|md
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|conf
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|confs
operator|=
operator|new
name|String
index|[
name|st
operator|.
name|countTokens
argument_list|()
index|]
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|confs
index|[
name|counter
index|]
operator|=
name|st
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|confs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Artifact
index|[]
name|artifacts
init|=
name|md
operator|.
name|getArtifacts
argument_list|(
name|confs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|artifacts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|artifactsSet
operator|.
name|add
argument_list|(
name|artifacts
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|extraArtifacts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extraArtifacts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|artifactsSet
operator|.
name|add
argument_list|(
operator|new
name|MDArtifact
argument_list|(
name|md
argument_list|,
name|extraArtifacts
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|extraArtifacts
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|,
name|extraArtifacts
index|[
name|i
index|]
operator|.
name|getExt
argument_list|()
argument_list|,
name|extraArtifacts
index|[
name|i
index|]
operator|.
name|getUrl
argument_list|()
argument_list|,
name|extraArtifacts
index|[
name|i
index|]
operator|.
name|getExtraAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for each declared published artifact in this descriptor, do:
for|for
control|(
name|Iterator
name|iter
init|=
name|artifactsSet
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//   1) copy the artifact using src patterns and resolver
name|boolean
name|published
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|srcArtifactPattern
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|published
condition|;
control|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|published
operator|=
name|publish
argument_list|(
name|artifact
argument_list|,
name|_settings
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|resolver
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|published
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"missing artifact "
operator|+
name|artifact
operator|+
literal|":"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|srcArtifactPattern
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|info
argument_list|(
literal|"\t"
operator|+
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|pattern
argument_list|,
name|artifact
argument_list|)
argument_list|)
operator|+
literal|" file does not exist"
argument_list|)
expr_stmt|;
block|}
name|missing
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|srcIvyPattern
operator|!=
literal|null
condition|)
block|{
name|Artifact
name|artifact
init|=
name|MDArtifact
operator|.
name|newIvyArtifact
argument_list|(
name|md
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|publish
argument_list|(
name|artifact
argument_list|,
name|srcIvyPattern
argument_list|,
name|resolver
argument_list|,
name|overwrite
argument_list|)
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"missing ivy file for "
operator|+
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|+
literal|": "
operator|+
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|srcIvyPattern
argument_list|,
name|artifact
argument_list|)
argument_list|)
operator|+
literal|" file does not exist"
argument_list|)
expr_stmt|;
name|missing
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|missing
return|;
block|}
specifier|private
name|boolean
name|publish
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|String
name|srcArtifactPattern
parameter_list|,
name|DependencyResolver
name|resolver
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
name|checkInterrupted
argument_list|()
expr_stmt|;
name|File
name|src
init|=
operator|new
name|File
argument_list|(
name|IvyPatternHelper
operator|.
name|substitute
argument_list|(
name|srcArtifactPattern
argument_list|,
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|exists
argument_list|()
condition|)
block|{
name|resolver
operator|.
name|publish
argument_list|(
name|artifact
argument_list|,
name|src
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         SORT
comment|/////////////////////////////////////////////////////////////////////////
comment|/**      * Sorts the collection of IvyNode from the less dependent to the more dependent      */
specifier|public
name|List
name|sortNodes
parameter_list|(
name|Collection
name|nodes
parameter_list|)
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|_sortEngine
operator|.
name|sortNodes
argument_list|(
name|nodes
argument_list|)
return|;
block|}
comment|/**      * Sorts the given ModuleDescriptors from the less dependent to the more dependent.      * This sort ensures that a ModuleDescriptor is always found in the list before all       * ModuleDescriptors depending directly on it.      * @param moduleDescriptors a Collection of ModuleDescriptor to sort      * @return a List of sorted ModuleDescriptors      */
specifier|public
name|List
name|sortModuleDescriptors
parameter_list|(
name|Collection
name|moduleDescriptors
parameter_list|)
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|_sortEngine
operator|.
name|sortModuleDescriptors
argument_list|(
name|moduleDescriptors
argument_list|)
return|;
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//                         CACHE
comment|/////////////////////////////////////////////////////////////////////////
comment|//    public File getOriginFileInCache(File cache, Artifact artifact) {
comment|//        return new File(cache, getOriginPathInCache(artifact));
comment|//    }
comment|//
comment|//    public String getOriginPathInCache(Artifact artifact) {
comment|//        return getArchivePathInCache(artifact) + ".origin";
comment|//    }
comment|/**      * Interrupts the current running operation, no later than      * interruptTimeout milliseconds after the call      */
specifier|public
name|void
name|interrupt
parameter_list|()
block|{
name|Thread
name|operatingThread
init|=
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getOperatingThread
argument_list|()
decl_stmt|;
name|interrupt
argument_list|(
name|operatingThread
argument_list|)
expr_stmt|;
block|}
comment|/**      * Interrupts the current running operation in the given operating thread,       * no later than interruptTimeout milliseconds after the call      */
specifier|public
name|void
name|interrupt
parameter_list|(
name|Thread
name|operatingThread
parameter_list|)
block|{
if|if
condition|(
name|operatingThread
operator|!=
literal|null
operator|&&
name|operatingThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
if|if
condition|(
name|operatingThread
operator|==
name|Thread
operator|.
name|currentThread
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cannot call interrupt from ivy operating thread"
argument_list|)
throw|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"interrupting operating thread..."
argument_list|)
expr_stmt|;
name|operatingThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|_interrupted
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"waiting clean interruption of operating thread"
argument_list|)
expr_stmt|;
name|operatingThread
operator|.
name|join
argument_list|(
name|_settings
operator|.
name|getInterruptTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|operatingThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"waited clean interruption for too long: stopping operating thread"
argument_list|)
expr_stmt|;
name|operatingThread
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|_interrupted
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns an empty array when no token values are found.      *        * @param token      * @param otherTokenValues      * @return      */
specifier|public
name|String
index|[]
name|listTokenValues
parameter_list|(
name|String
name|token
parameter_list|,
name|Map
name|otherTokenValues
parameter_list|)
block|{
name|List
name|r
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_settings
operator|.
name|getResolvers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|r
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
operator|.
name|listTokenValues
argument_list|(
name|token
argument_list|,
name|otherTokenValues
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|r
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|r
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|OrganisationEntry
index|[]
name|listOrganisationEntries
parameter_list|()
block|{
name|List
name|entries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_settings
operator|.
name|getResolvers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|entries
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
operator|.
name|listOrganisations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|OrganisationEntry
index|[]
operator|)
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|OrganisationEntry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|listOrganisations
parameter_list|()
block|{
name|Collection
name|orgs
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_settings
operator|.
name|getResolvers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|OrganisationEntry
index|[]
name|entries
init|=
name|resolver
operator|.
name|listOrganisations
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|entries
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|orgs
operator|.
name|add
argument_list|(
name|entries
index|[
name|i
index|]
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|orgs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|orgs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|ModuleEntry
index|[]
name|listModuleEntries
parameter_list|(
name|OrganisationEntry
name|org
parameter_list|)
block|{
name|List
name|entries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_settings
operator|.
name|getResolvers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|entries
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
operator|.
name|listModules
argument_list|(
name|org
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ModuleEntry
index|[]
operator|)
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|ModuleEntry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|listModules
parameter_list|(
name|String
name|org
parameter_list|)
block|{
name|List
name|mods
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_settings
operator|.
name|getResolvers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ModuleEntry
index|[]
name|entries
init|=
name|resolver
operator|.
name|listModules
argument_list|(
operator|new
name|OrganisationEntry
argument_list|(
name|resolver
argument_list|,
name|org
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|entries
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|mods
operator|.
name|add
argument_list|(
name|entries
index|[
name|i
index|]
operator|.
name|getModule
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|mods
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|mods
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|RevisionEntry
index|[]
name|listRevisionEntries
parameter_list|(
name|ModuleEntry
name|module
parameter_list|)
block|{
name|List
name|entries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_settings
operator|.
name|getResolvers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|entries
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
operator|.
name|listRevisions
argument_list|(
name|module
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|RevisionEntry
index|[]
operator|)
name|entries
operator|.
name|toArray
argument_list|(
operator|new
name|RevisionEntry
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|listRevisions
parameter_list|(
name|String
name|org
parameter_list|,
name|String
name|module
parameter_list|)
block|{
name|List
name|revs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|_settings
operator|.
name|getResolvers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|RevisionEntry
index|[]
name|entries
init|=
name|resolver
operator|.
name|listRevisions
argument_list|(
operator|new
name|ModuleEntry
argument_list|(
operator|new
name|OrganisationEntry
argument_list|(
name|resolver
argument_list|,
name|org
argument_list|)
argument_list|,
name|module
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|entries
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|revs
operator|.
name|add
argument_list|(
name|entries
index|[
name|i
index|]
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|revs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|revs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isInterrupted
parameter_list|()
block|{
return|return
name|_interrupted
return|;
block|}
comment|/** 	 * List module ids of the module accessible through the current resolvers 	 * matching the given mid criteria according to the given matcher. 	 *  	 * @param criteria 	 * @param matcher 	 * @return 	 */
specifier|public
name|ModuleId
index|[]
name|listModules
parameter_list|(
name|ModuleId
name|criteria
parameter_list|,
name|PatternMatcher
name|matcher
parameter_list|)
block|{
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Matcher
name|orgMatcher
init|=
name|matcher
operator|.
name|getMatcher
argument_list|(
name|criteria
operator|.
name|getOrganisation
argument_list|()
argument_list|)
decl_stmt|;
name|Matcher
name|modMatcher
init|=
name|matcher
operator|.
name|getMatcher
argument_list|(
name|criteria
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|tokenValues
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|String
index|[]
name|orgs
init|=
name|listTokenValues
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|tokenValues
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|orgMatcher
operator|.
name|matches
argument_list|(
name|orgs
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|orgs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|String
index|[]
name|mods
init|=
name|listTokenValues
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|tokenValues
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|mods
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|modMatcher
operator|.
name|matches
argument_list|(
name|mods
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|orgs
index|[
name|i
index|]
argument_list|,
name|mods
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|ModuleId
index|[]
operator|)
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|ModuleId
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** 	 * List module revision ids of the module accessible through the current resolvers 	 * matching the given mrid criteria according to the given matcher. 	 *  	 * @param criteria 	 * @param matcher 	 * @return 	 */
specifier|public
name|ModuleRevisionId
index|[]
name|listModules
parameter_list|(
name|ModuleRevisionId
name|criteria
parameter_list|,
name|PatternMatcher
name|matcher
parameter_list|)
block|{
name|List
name|ret
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Matcher
name|orgMatcher
init|=
name|matcher
operator|.
name|getMatcher
argument_list|(
name|criteria
operator|.
name|getOrganisation
argument_list|()
argument_list|)
decl_stmt|;
name|Matcher
name|modMatcher
init|=
name|matcher
operator|.
name|getMatcher
argument_list|(
name|criteria
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Matcher
name|branchMatcher
init|=
name|matcher
operator|.
name|getMatcher
argument_list|(
name|criteria
operator|.
name|getBranch
argument_list|()
argument_list|)
decl_stmt|;
name|Matcher
name|revMatcher
init|=
name|matcher
operator|.
name|getMatcher
argument_list|(
name|criteria
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|tokenValues
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|String
index|[]
name|orgs
init|=
name|listTokenValues
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|tokenValues
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|orgMatcher
operator|.
name|matches
argument_list|(
name|orgs
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|orgs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|String
index|[]
name|mods
init|=
name|listTokenValues
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|tokenValues
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|mods
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|modMatcher
operator|.
name|matches
argument_list|(
name|mods
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|mods
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|String
index|[]
name|branches
init|=
name|listTokenValues
argument_list|(
name|IvyPatternHelper
operator|.
name|BRANCH_KEY
argument_list|,
name|tokenValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|branches
operator|==
literal|null
operator|||
name|branches
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|branches
operator|=
operator|new
name|String
index|[]
block|{
name|_settings
operator|.
name|getDefaultBranch
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|orgs
index|[
name|i
index|]
argument_list|,
name|mods
index|[
name|j
index|]
argument_list|)
argument_list|)
block|}
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|branches
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|branches
index|[
name|k
index|]
operator|==
literal|null
operator|||
name|branchMatcher
operator|.
name|matches
argument_list|(
name|branches
index|[
name|k
index|]
argument_list|)
condition|)
block|{
name|tokenValues
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|BRANCH_KEY
argument_list|,
name|tokenValues
argument_list|)
expr_stmt|;
name|String
index|[]
name|revs
init|=
name|listTokenValues
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|,
name|tokenValues
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
name|revs
operator|.
name|length
condition|;
name|l
operator|++
control|)
block|{
if|if
condition|(
name|revMatcher
operator|.
name|matches
argument_list|(
name|revs
index|[
name|l
index|]
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|orgs
index|[
name|i
index|]
argument_list|,
name|mods
index|[
name|j
index|]
argument_list|,
name|branches
index|[
name|k
index|]
argument_list|,
name|revs
index|[
name|l
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
operator|(
name|ModuleRevisionId
index|[]
operator|)
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|ModuleRevisionId
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Check if the current operation has been interrupted, and if it is the case, throw a runtime exception      */
specifier|public
name|void
name|checkInterrupted
parameter_list|()
block|{
if|if
condition|(
name|isInterrupted
argument_list|()
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"operation interrupted"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"operation interrupted"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getWorkingRevision
parameter_list|()
block|{
return|return
literal|"working@"
operator|+
name|HostUtil
operator|.
name|getLocalHostName
argument_list|()
return|;
block|}
specifier|public
name|IvySettings
name|getSettings
parameter_list|()
block|{
return|return
name|_settings
return|;
block|}
specifier|public
specifier|static
name|Ivy
name|newInstance
parameter_list|()
block|{
name|Ivy
name|ivy
init|=
operator|new
name|Ivy
argument_list|()
decl_stmt|;
name|ivy
operator|.
name|bind
argument_list|()
expr_stmt|;
return|return
name|ivy
return|;
block|}
comment|/** 	 * This method is used to bind this Ivy instance to  	 * required dependencies, i.e. instance of settings, engines, and so on. 	 * After thes call Ivy is still not configured, which means that the settings 	 * object is still empty. 	 */
specifier|private
name|void
name|bind
parameter_list|()
block|{
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|_settings
operator|=
operator|new
name|IvySettings
argument_list|()
expr_stmt|;
name|_sortEngine
operator|=
operator|new
name|SortEngine
argument_list|(
name|_settings
argument_list|)
expr_stmt|;
name|_eventManager
operator|=
operator|new
name|EventManager
argument_list|()
expr_stmt|;
name|_resolveEngine
operator|=
operator|new
name|ResolveEngine
argument_list|(
name|_settings
argument_list|,
name|_eventManager
argument_list|,
name|_sortEngine
argument_list|)
expr_stmt|;
name|_eventManager
operator|.
name|addTransferListener
argument_list|(
operator|new
name|TransferListener
argument_list|()
block|{
specifier|public
name|void
name|transferProgress
parameter_list|(
name|TransferEvent
name|evt
parameter_list|)
block|{
switch|switch
condition|(
name|evt
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|TransferEvent
operator|.
name|TRANSFER_PROGRESS
case|:
name|Message
operator|.
name|progress
argument_list|()
expr_stmt|;
break|break;
case|case
name|TransferEvent
operator|.
name|TRANSFER_COMPLETED
case|:
name|Message
operator|.
name|endProgress
argument_list|(
literal|" ("
operator|+
operator|(
name|evt
operator|.
name|getTotalLength
argument_list|()
operator|/
literal|1024
operator|)
operator|+
literal|"kB)"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|configure
parameter_list|(
name|File
name|settingsFile
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|assertBound
argument_list|()
expr_stmt|;
name|_settings
operator|.
name|load
argument_list|(
name|settingsFile
argument_list|)
expr_stmt|;
name|postConfigure
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|configure
parameter_list|(
name|URL
name|settingsURL
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|assertBound
argument_list|()
expr_stmt|;
name|_settings
operator|.
name|load
argument_list|(
name|settingsURL
argument_list|)
expr_stmt|;
name|postConfigure
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|configureDefault
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|assertBound
argument_list|()
expr_stmt|;
name|_settings
operator|.
name|loadDefault
argument_list|()
expr_stmt|;
name|postConfigure
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertBound
parameter_list|()
block|{
if|if
condition|(
name|_settings
operator|==
literal|null
condition|)
block|{
name|bind
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|postConfigure
parameter_list|()
block|{
name|Collection
name|triggers
init|=
name|_settings
operator|.
name|getTriggers
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|triggers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Trigger
name|trigger
init|=
operator|(
name|Trigger
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|_eventManager
operator|.
name|addIvyListener
argument_list|(
name|trigger
argument_list|,
name|trigger
operator|.
name|getEventFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|EventManager
name|getEventManager
parameter_list|()
block|{
name|assertBound
argument_list|()
expr_stmt|;
return|return
name|_eventManager
return|;
block|}
specifier|public
name|String
name|getVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|assertBound
argument_list|()
expr_stmt|;
return|return
name|_settings
operator|.
name|getVariable
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|String
name|substitute
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|assertBound
argument_list|()
expr_stmt|;
return|return
name|_settings
operator|.
name|substitute
argument_list|(
name|str
argument_list|)
return|;
block|}
specifier|public
name|void
name|setVariable
parameter_list|(
name|String
name|varName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|assertBound
argument_list|()
expr_stmt|;
name|_settings
operator|.
name|setVariable
argument_list|(
name|varName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

