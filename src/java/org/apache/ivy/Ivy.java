begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|LogOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ResolutionCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|check
operator|.
name|CheckEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|deliver
operator|.
name|DeliverEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|deliver
operator|.
name|DeliverOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|install
operator|.
name|InstallEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|install
operator|.
name|InstallOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|publish
operator|.
name|PublishEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|publish
operator|.
name|PublishOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|repository
operator|.
name|RepositoryManagementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|retrieve
operator|.
name|RetrieveEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|retrieve
operator|.
name|RetrieveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|ModuleEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|OrganisationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|RevisionEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|search
operator|.
name|SearchEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
operator|.
name|NonMatchingVersionReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|sort
operator|.
name|SortEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|matcher
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|TransferEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|TransferListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|BasicResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|DependencyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|trigger
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|HostUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|MessageLoggerEngine
import|;
end_import

begin_comment
comment|/**  *<a href="http://incubator.apache.org/ivy/">Ivy</a> is a free java based dependency manager.  *<p>  * This class is the main class of Ivy, which acts as a Facade to all services offered by Ivy:  *<ul>  *<li>resolve dependencies</li>  *<li>retrieve artifacts to a local location</li>  *<li>deliver and publish modules</li>  *<li>repository search and listing</li>  *</ul>  * Here is one typical usage:  *   *<pre>  * Ivy ivy = Ivy.newInstance();  * ivy.configure(new URL(&quot;ivysettings.xml&quot;));  * ivy.resolve(new URL(&quot;ivy.xml&quot;));  *</pre>  *   *</p>  *<h2>Using Ivy engines directly</h2>  *<p>  * If the methods offered by the {@link Ivy} class are not flexible enough and you want to use Ivy  * engines directly, you need to call the methods within a single {@link IvyContext} associated to  * the {@link Ivy} instance you use.<br/> To do so, it is recommended to use the  * {@link #execute(org.apache.ivy.Ivy.IvyCallback)} method like this:  *<pre>  * Ivy ivy = Ivy.newInstance();  * ivy.execute(new IvyCallback() {  *     public Object doInIvyContext(Ivy ivy, IvyContext context) {  *         // obviously we can use regular Ivy methods in the callback   *         ivy.configure(new URL(&quot;ivysettings.xml&quot;));  *         // and we can safely use Ivy engines too  *         ivy.getResolveEngine().resolve(new URL(&quot;ivy.xml&quot;));  *         return null;  *     }  * });  *</pre>  *   *</p>  */
end_comment

begin_class
specifier|public
class|class
name|Ivy
block|{
comment|/**      * Callback used to execute a set of Ivy related methods within an {@link IvyContext}.      *       * @see Ivy#execute(org.apache.ivy.Ivy.IvyCallback)      */
specifier|public
specifier|static
interface|interface
name|IvyCallback
block|{
comment|/**          * Executes Ivy related job within an {@link IvyContext}          *           * @param ivy          *            the {@link Ivy} instance to which this callback is related          * @param context          *            the {@link IvyContext} in which this callback is executed          * @return the result of this job,<code>null</code> if there is no result          */
specifier|public
name|Object
name|doInIvyContext
parameter_list|(
name|Ivy
name|ivy
parameter_list|,
name|IvyContext
name|context
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|KILO
init|=
literal|1024
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
decl_stmt|;
comment|/**      * the current version of Ivy, as displayed on the console when       * Ivy is initialized      */
specifier|private
specifier|static
specifier|final
name|String
name|IVY_VERSION
decl_stmt|;
comment|/**      * the date at which this version of Ivy has been built.      * May be empty if unknown.      */
specifier|private
specifier|static
specifier|final
name|String
name|IVY_DATE
decl_stmt|;
static|static
block|{
comment|// initialize IVY_VERSION and IVY_DATE
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|URL
name|moduleURL
init|=
name|Message
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/module.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|moduleURL
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|InputStream
name|module
init|=
name|moduleURL
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|module
argument_list|)
expr_stmt|;
name|module
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore this exception, we will initialize with default values
block|}
block|}
name|IVY_VERSION
operator|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|,
literal|"non official version"
argument_list|)
expr_stmt|;
name|IVY_DATE
operator|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"date"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the current version of Ivy, as displayed on the console when       * Ivy is initialized.      *       * @return the current version of Ivy      */
specifier|public
specifier|static
name|String
name|getIvyVersion
parameter_list|()
block|{
return|return
name|IVY_VERSION
return|;
block|}
comment|/**      * Returns the date at which this version of Ivy has been built.      *<p>      * May be empty if unknown.      *       * @return the date at which this version of Ivy has been built      */
specifier|public
specifier|static
name|String
name|getIvyDate
parameter_list|()
block|{
return|return
name|IVY_DATE
return|;
block|}
comment|/**      * Returns the URL at which Ivy web site can be found.      * @return the URL at which Ivy web site can be found      */
specifier|public
specifier|static
name|String
name|getIvyHomeURL
parameter_list|()
block|{
return|return
literal|"http://ant.apache.org/ivy/"
return|;
block|}
specifier|public
specifier|static
name|Ivy
name|newInstance
parameter_list|()
block|{
name|Ivy
name|ivy
init|=
operator|new
name|Ivy
argument_list|()
decl_stmt|;
name|ivy
operator|.
name|bind
argument_list|()
expr_stmt|;
return|return
name|ivy
return|;
block|}
specifier|public
specifier|static
name|Ivy
name|newInstance
parameter_list|(
name|IvySettings
name|settings
parameter_list|)
block|{
name|Ivy
name|ivy
init|=
operator|new
name|Ivy
argument_list|()
decl_stmt|;
name|ivy
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|ivy
operator|.
name|bind
argument_list|()
expr_stmt|;
return|return
name|ivy
return|;
block|}
comment|/**      * True if the current processing has been requested to be interrupted, false otherwise      */
specifier|private
name|boolean
name|interrupted
decl_stmt|;
comment|/**      * True if this instance of Ivy has already been bound to its dependencies, false otherwise.      *       * @see bind()      */
specifier|private
name|boolean
name|bound
decl_stmt|;
comment|/*      * Following are dependencies of the Ivy instance on instances of engines and manager which      * actually do the work The attributes can be set either manually using the corresponding      * setters, or all at once with the default implementations using the bind method      */
specifier|private
name|IvySettings
name|settings
decl_stmt|;
specifier|private
name|EventManager
name|eventManager
decl_stmt|;
specifier|private
name|SortEngine
name|sortEngine
decl_stmt|;
specifier|private
name|SearchEngine
name|searchEngine
decl_stmt|;
specifier|private
name|CheckEngine
name|checkEngine
decl_stmt|;
specifier|private
name|ResolveEngine
name|resolveEngine
decl_stmt|;
specifier|private
name|RetrieveEngine
name|retrieveEngine
decl_stmt|;
specifier|private
name|DeliverEngine
name|deliverEngine
decl_stmt|;
specifier|private
name|PublishEngine
name|publishEngine
decl_stmt|;
specifier|private
name|InstallEngine
name|installEngine
decl_stmt|;
specifier|private
name|RepositoryManagementEngine
name|repositoryEngine
decl_stmt|;
comment|/**      * The logger engine to use to log messages when using this Ivy instance.      */
specifier|private
name|MessageLoggerEngine
name|loggerEngine
init|=
operator|new
name|MessageLoggerEngine
argument_list|()
decl_stmt|;
comment|/**      * The default constructor of Ivy allows to create an instance of Ivy with none of its      * dependencies (engines, settings, ...) created. If you use this constructor, it's your      * responsibility to set the dependencies of Ivy using the appropriate setters      * (setResolveEngine, ...). You can also call the bind method to set all the dependencies except      * those that you have provided using the setters. If you want to get an instance ready to use,      * prefer the use of Ivy.newInstance().      */
specifier|public
name|Ivy
parameter_list|()
block|{
block|}
comment|/**      * This method is used to bind this Ivy instance to required dependencies, i.e. instance of      * settings, engines, and so on.       *<p>      * After this call Ivy is still not configured, which means that      * the settings object is still empty.      *</p>      */
specifier|public
name|void
name|bind
parameter_list|()
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|settings
operator|==
literal|null
condition|)
block|{
name|settings
operator|=
operator|new
name|IvySettings
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|eventManager
operator|==
literal|null
condition|)
block|{
name|eventManager
operator|=
operator|new
name|EventManager
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sortEngine
operator|==
literal|null
condition|)
block|{
name|sortEngine
operator|=
operator|new
name|SortEngine
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchEngine
operator|==
literal|null
condition|)
block|{
name|searchEngine
operator|=
operator|new
name|SearchEngine
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolveEngine
operator|==
literal|null
condition|)
block|{
name|resolveEngine
operator|=
operator|new
name|ResolveEngine
argument_list|(
name|settings
argument_list|,
name|eventManager
argument_list|,
name|sortEngine
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|retrieveEngine
operator|==
literal|null
condition|)
block|{
name|retrieveEngine
operator|=
operator|new
name|RetrieveEngine
argument_list|(
name|settings
argument_list|,
name|eventManager
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deliverEngine
operator|==
literal|null
condition|)
block|{
name|deliverEngine
operator|=
operator|new
name|DeliverEngine
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|publishEngine
operator|==
literal|null
condition|)
block|{
name|publishEngine
operator|=
operator|new
name|PublishEngine
argument_list|(
name|settings
argument_list|,
name|eventManager
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|installEngine
operator|==
literal|null
condition|)
block|{
name|installEngine
operator|=
operator|new
name|InstallEngine
argument_list|(
name|settings
argument_list|,
name|searchEngine
argument_list|,
name|resolveEngine
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repositoryEngine
operator|==
literal|null
condition|)
block|{
name|repositoryEngine
operator|=
operator|new
name|RepositoryManagementEngine
argument_list|(
name|settings
argument_list|,
name|searchEngine
argument_list|,
name|resolveEngine
argument_list|)
expr_stmt|;
block|}
name|eventManager
operator|.
name|addTransferListener
argument_list|(
operator|new
name|TransferListener
argument_list|()
block|{
specifier|public
name|void
name|transferProgress
parameter_list|(
name|TransferEvent
name|evt
parameter_list|)
block|{
name|ResolveData
name|resolve
decl_stmt|;
switch|switch
condition|(
name|evt
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|TransferEvent
operator|.
name|TRANSFER_PROGRESS
case|:
name|resolve
operator|=
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getResolveData
argument_list|()
expr_stmt|;
if|if
condition|(
name|resolve
operator|==
literal|null
operator|||
operator|!
name|LogOptions
operator|.
name|LOG_QUIET
operator|.
name|equals
argument_list|(
name|resolve
operator|.
name|getOptions
argument_list|()
operator|.
name|getLog
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|TransferEvent
operator|.
name|TRANSFER_COMPLETED
case|:
name|resolve
operator|=
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getResolveData
argument_list|()
expr_stmt|;
if|if
condition|(
name|resolve
operator|==
literal|null
operator|||
operator|!
name|LogOptions
operator|.
name|LOG_QUIET
operator|.
name|equals
argument_list|(
name|resolve
operator|.
name|getOptions
argument_list|()
operator|.
name|getLog
argument_list|()
argument_list|)
condition|)
block|{
name|Message
operator|.
name|endProgress
argument_list|(
literal|" ("
operator|+
operator|(
name|evt
operator|.
name|getTotalLength
argument_list|()
operator|/
name|KILO
operator|)
operator|+
literal|"kB)"
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|bound
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Executes the given callback in the context of this Ivy instance.      *<p>      * Alternatively you can use the {@link #pushContext()} and {@link #popContext()} methods, but      * this is not recommended:      *       *<pre>      * Object result = null;      * pushContext();      * try {      *     result = callback.doInIvyContext(this, IvyContext.getContext());      * } finally {      *     popContext();      * }      * doSomethingWithResult(result);      *</pre>      *       *</p>      *       * @param callback      * @return      */
specifier|public
name|Object
name|execute
parameter_list|(
name|IvyCallback
name|callback
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|callback
operator|.
name|doInIvyContext
argument_list|(
name|this
argument_list|,
name|IvyContext
operator|.
name|getContext
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Pushes a new IvyContext bound to this Ivy instance if the current context is not already      * bound to this Ivy instance. If the current context is already bound to this Ivy instance, it      * pushes the current context on the context stack, so that you can (and must) always call      * {@link #popContext()} when you're done.      *<p>      * Alternatively, you can use the {@link #execute(org.apache.ivy.Ivy.IvyCallback)} method which      * takes care of everything for you.      *</p>      */
specifier|public
name|void
name|pushContext
parameter_list|()
block|{
if|if
condition|(
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|peekIvy
argument_list|()
operator|!=
name|this
condition|)
block|{
comment|// the current Ivy context is associated with another Ivy instance, we push a new
comment|// instance
name|IvyContext
operator|.
name|pushNewContext
argument_list|()
expr_stmt|;
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|setIvy
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the current Ivy context is already associated with this Ivy instance, we only push it
comment|// for popping consistency
name|IvyContext
operator|.
name|pushContext
argument_list|(
name|IvyContext
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Pops the current Ivy context.      *<p>      * You must call this method once and only once for each call to {@link #pushContext()}, when      * you're done with the your Ivy related work.      *</p>      *<p>      * Alternatively, you can use the {@link #execute(org.apache.ivy.Ivy.IvyCallback)} method which      * takes care of everything for you.      *</p>      */
specifier|public
name|void
name|popContext
parameter_list|()
block|{
name|IvyContext
operator|.
name|popContext
argument_list|()
expr_stmt|;
block|}
comment|// ///////////////////////////////////////////////////////////////////////
comment|// LOAD SETTINGS
comment|// ///////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|configure
parameter_list|(
name|File
name|settingsFile
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
name|assertBound
argument_list|()
expr_stmt|;
name|settings
operator|.
name|load
argument_list|(
name|settingsFile
argument_list|)
expr_stmt|;
name|postConfigure
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|configure
parameter_list|(
name|URL
name|settingsURL
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
name|assertBound
argument_list|()
expr_stmt|;
name|settings
operator|.
name|load
argument_list|(
name|settingsURL
argument_list|)
expr_stmt|;
name|postConfigure
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|configureDefault
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
name|assertBound
argument_list|()
expr_stmt|;
name|settings
operator|.
name|loadDefault
argument_list|()
expr_stmt|;
name|postConfigure
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Configures Ivy with 1.4 compatible default settings      */
specifier|public
name|void
name|configureDefault14
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
name|assertBound
argument_list|()
expr_stmt|;
name|settings
operator|.
name|loadDefault14
argument_list|()
expr_stmt|;
name|postConfigure
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ///////////////////////////////////////////////////////////////////////
comment|// CHECK
comment|// ///////////////////////////////////////////////////////////////////////
specifier|public
name|boolean
name|check
parameter_list|(
name|URL
name|ivyFile
parameter_list|,
name|String
name|resolvername
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|checkEngine
operator|.
name|check
argument_list|(
name|ivyFile
argument_list|,
name|resolvername
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ///////////////////////////////////////////////////////////////////////
comment|// RESOLVE
comment|// ///////////////////////////////////////////////////////////////////////
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|File
name|ivySource
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|resolveEngine
operator|.
name|resolve
argument_list|(
name|ivySource
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|resolveEngine
operator|.
name|resolve
argument_list|(
name|ivySource
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|ResolveOptions
name|options
parameter_list|,
name|boolean
name|changing
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|resolveEngine
operator|.
name|resolve
argument_list|(
name|mrid
argument_list|,
name|options
argument_list|,
name|changing
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|URL
name|ivySource
parameter_list|,
name|ResolveOptions
name|options
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|resolveEngine
operator|.
name|resolve
argument_list|(
name|ivySource
argument_list|,
name|options
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ResolveReport
name|resolve
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|ResolveOptions
name|options
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|resolveEngine
operator|.
name|resolve
argument_list|(
name|md
argument_list|,
name|options
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ///////////////////////////////////////////////////////////////////////
comment|// INSTALL
comment|// ///////////////////////////////////////////////////////////////////////
specifier|public
name|ResolveReport
name|install
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|,
name|InstallOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|installEngine
operator|.
name|install
argument_list|(
name|mrid
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|options
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ///////////////////////////////////////////////////////////////////////
comment|// RETRIEVE
comment|// ///////////////////////////////////////////////////////////////////////
specifier|public
name|int
name|retrieve
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|destFilePattern
parameter_list|,
name|RetrieveOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|retrieveEngine
operator|.
name|retrieve
argument_list|(
name|mrid
argument_list|,
name|destFilePattern
argument_list|,
name|options
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ///////////////////////////////////////////////////////////////////////
comment|// DELIVER
comment|// ///////////////////////////////////////////////////////////////////////
specifier|public
name|void
name|deliver
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|destIvyPattern
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
name|deliverEngine
operator|.
name|deliver
argument_list|(
name|mrid
argument_list|,
name|revision
argument_list|,
name|destIvyPattern
argument_list|,
name|DeliverOptions
operator|.
name|newInstance
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deliver
parameter_list|(
name|String
name|revision
parameter_list|,
name|String
name|destIvyPattern
parameter_list|,
name|DeliverOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
name|deliverEngine
operator|.
name|deliver
argument_list|(
name|revision
argument_list|,
name|destIvyPattern
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Example of use: deliver(mrid, "1.5", "target/ivy/ivy-[revision].xml",      * DeliverOptions.newInstance(settings).setStatus("release").setValidate(false));      *       * @param mrid      * @param revision      * @param destIvyPattern      * @param options      * @throws IOException      * @throws ParseException      */
specifier|public
name|void
name|deliver
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|String
name|revision
parameter_list|,
name|String
name|destIvyPattern
parameter_list|,
name|DeliverOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
name|deliverEngine
operator|.
name|deliver
argument_list|(
name|mrid
argument_list|,
name|revision
argument_list|,
name|destIvyPattern
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ///////////////////////////////////////////////////////////////////////
comment|// PUBLISH
comment|// ///////////////////////////////////////////////////////////////////////
specifier|public
name|Collection
name|publish
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|,
name|Collection
name|srcArtifactPattern
parameter_list|,
name|String
name|resolverName
parameter_list|,
name|PublishOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|publishEngine
operator|.
name|publish
argument_list|(
name|mrid
argument_list|,
name|srcArtifactPattern
argument_list|,
name|resolverName
argument_list|,
name|options
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ///////////////////////////////////////////////////////////////////////
comment|// SORT
comment|// ///////////////////////////////////////////////////////////////////////
comment|/**      * Sorts the collection of IvyNode from the less dependent to the more dependent      */
specifier|public
name|List
name|sortNodes
parameter_list|(
name|Collection
name|nodes
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getSortEngine
argument_list|()
operator|.
name|sortNodes
argument_list|(
name|nodes
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Sorts the given ModuleDescriptors from the less dependent to the more dependent. This sort      * ensures that a ModuleDescriptor is always found in the list before all ModuleDescriptors      * depending directly on it.      *       * @param moduleDescriptors      *            a Collection of ModuleDescriptor to sort      * @param nonMatchingVersionReporter      *            Used to report some non matching version (when a modules depends on a specific      *            revision of an other modules present in the of modules to sort with a different      *            revision.      * @return a List of sorted ModuleDescriptors      */
specifier|public
name|List
name|sortModuleDescriptors
parameter_list|(
name|Collection
name|moduleDescriptors
parameter_list|,
name|NonMatchingVersionReporter
name|nonMatchingVersionReporter
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getSortEngine
argument_list|()
operator|.
name|sortModuleDescriptors
argument_list|(
name|moduleDescriptors
argument_list|,
name|nonMatchingVersionReporter
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ///////////////////////////////////////////////////////////////////////
comment|// SEARCH
comment|// ///////////////////////////////////////////////////////////////////////
specifier|public
name|ResolvedModuleRevision
name|findModule
parameter_list|(
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
name|ResolveOptions
name|options
init|=
operator|new
name|ResolveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setValidate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|resolveEngine
operator|.
name|findModule
argument_list|(
name|mrid
argument_list|,
name|options
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ModuleEntry
index|[]
name|listModuleEntries
parameter_list|(
name|OrganisationEntry
name|org
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|searchEngine
operator|.
name|listModuleEntries
argument_list|(
name|org
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ModuleId
index|[]
name|listModules
parameter_list|(
name|ModuleId
name|criteria
parameter_list|,
name|PatternMatcher
name|matcher
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|searchEngine
operator|.
name|listModules
argument_list|(
name|criteria
argument_list|,
name|matcher
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ModuleRevisionId
index|[]
name|listModules
parameter_list|(
name|ModuleRevisionId
name|criteria
parameter_list|,
name|PatternMatcher
name|matcher
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|searchEngine
operator|.
name|listModules
argument_list|(
name|criteria
argument_list|,
name|matcher
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
index|[]
name|listModules
parameter_list|(
name|String
name|org
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|searchEngine
operator|.
name|listModules
argument_list|(
name|org
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|OrganisationEntry
index|[]
name|listOrganisationEntries
parameter_list|()
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|searchEngine
operator|.
name|listOrganisationEntries
argument_list|()
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
index|[]
name|listOrganisations
parameter_list|()
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|searchEngine
operator|.
name|listOrganisations
argument_list|()
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|RevisionEntry
index|[]
name|listRevisionEntries
parameter_list|(
name|ModuleEntry
name|module
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|searchEngine
operator|.
name|listRevisionEntries
argument_list|(
name|module
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
index|[]
name|listRevisions
parameter_list|(
name|String
name|org
parameter_list|,
name|String
name|module
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|searchEngine
operator|.
name|listRevisions
argument_list|(
name|org
argument_list|,
name|module
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
index|[]
name|listTokenValues
parameter_list|(
name|String
name|token
parameter_list|,
name|Map
name|otherTokenValues
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|searchEngine
operator|.
name|listTokenValues
argument_list|(
name|token
argument_list|,
name|otherTokenValues
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ///////////////////////////////////////////////////////////////////////
comment|// INTERRUPTIONS
comment|// ///////////////////////////////////////////////////////////////////////
comment|/**      * Interrupts the current running operation, no later than interruptTimeout milliseconds after      * the call      */
specifier|public
name|void
name|interrupt
parameter_list|()
block|{
name|Thread
name|operatingThread
init|=
name|IvyContext
operator|.
name|getContext
argument_list|()
operator|.
name|getOperatingThread
argument_list|()
decl_stmt|;
name|interrupt
argument_list|(
name|operatingThread
argument_list|)
expr_stmt|;
block|}
comment|/**      * Interrupts the current running operation in the given operating thread, no later than      * interruptTimeout milliseconds after the call      */
specifier|public
name|void
name|interrupt
parameter_list|(
name|Thread
name|operatingThread
parameter_list|)
block|{
if|if
condition|(
name|operatingThread
operator|!=
literal|null
operator|&&
name|operatingThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
if|if
condition|(
name|operatingThread
operator|==
name|Thread
operator|.
name|currentThread
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"cannot call interrupt from ivy operating thread"
argument_list|)
throw|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"interrupting operating thread..."
argument_list|)
expr_stmt|;
name|operatingThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|interrupted
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"waiting clean interruption of operating thread"
argument_list|)
expr_stmt|;
name|operatingThread
operator|.
name|join
argument_list|(
name|settings
operator|.
name|getInterruptTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// reset thread interrupt status
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|operatingThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"waited clean interruption for too long: stopping operating thread"
argument_list|)
expr_stmt|;
name|operatingThread
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|interrupted
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|boolean
name|isInterrupted
parameter_list|()
block|{
return|return
name|interrupted
return|;
block|}
comment|/**      * Check if the current operation has been interrupted, and if it is the case, throw a runtime      * exception      */
specifier|public
name|void
name|checkInterrupted
parameter_list|()
block|{
if|if
condition|(
name|isInterrupted
argument_list|()
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"operation interrupted"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"operation interrupted"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getWorkingRevision
parameter_list|()
block|{
return|return
literal|"working@"
operator|+
name|HostUtil
operator|.
name|getLocalHostName
argument_list|()
return|;
block|}
specifier|public
name|ResolutionCacheManager
name|getResolutionCacheManager
parameter_list|()
block|{
return|return
name|settings
operator|.
name|getResolutionCacheManager
argument_list|()
return|;
block|}
specifier|private
name|void
name|assertBound
parameter_list|()
block|{
if|if
condition|(
operator|!
name|bound
condition|)
block|{
name|bind
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|postConfigure
parameter_list|()
block|{
name|Collection
name|triggers
init|=
name|settings
operator|.
name|getTriggers
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|triggers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Trigger
name|trigger
init|=
operator|(
name|Trigger
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|eventManager
operator|.
name|addIvyListener
argument_list|(
name|trigger
argument_list|,
name|trigger
operator|.
name|getEventFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|settings
operator|.
name|getResolvers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DependencyResolver
name|resolver
init|=
operator|(
name|DependencyResolver
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolver
operator|instanceof
name|BasicResolver
condition|)
block|{
operator|(
operator|(
name|BasicResolver
operator|)
name|resolver
operator|)
operator|.
name|setEventManager
argument_list|(
name|eventManager
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
name|assertBound
argument_list|()
expr_stmt|;
return|return
name|settings
operator|.
name|getVariable
argument_list|(
name|name
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|substitute
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
name|assertBound
argument_list|()
expr_stmt|;
return|return
name|settings
operator|.
name|substitute
argument_list|(
name|str
argument_list|)
return|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setVariable
parameter_list|(
name|String
name|varName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|pushContext
argument_list|()
expr_stmt|;
try|try
block|{
name|assertBound
argument_list|()
expr_stmt|;
name|settings
operator|.
name|setVariable
argument_list|(
name|varName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|popContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ///////////////////////////////////////////////////////////////////
comment|// GETTERS / SETTERS
comment|// ///////////////////////////////////////////////////////////////////
specifier|public
name|IvySettings
name|getSettings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
specifier|public
name|EventManager
name|getEventManager
parameter_list|()
block|{
return|return
name|eventManager
return|;
block|}
specifier|public
name|CheckEngine
name|getCheckEngine
parameter_list|()
block|{
return|return
name|checkEngine
return|;
block|}
specifier|public
name|void
name|setCheckEngine
parameter_list|(
name|CheckEngine
name|checkEngine
parameter_list|)
block|{
name|this
operator|.
name|checkEngine
operator|=
name|checkEngine
expr_stmt|;
block|}
specifier|public
name|DeliverEngine
name|getDeliverEngine
parameter_list|()
block|{
return|return
name|deliverEngine
return|;
block|}
specifier|public
name|void
name|setDeliverEngine
parameter_list|(
name|DeliverEngine
name|deliverEngine
parameter_list|)
block|{
name|this
operator|.
name|deliverEngine
operator|=
name|deliverEngine
expr_stmt|;
block|}
specifier|public
name|InstallEngine
name|getInstallEngine
parameter_list|()
block|{
return|return
name|installEngine
return|;
block|}
specifier|public
name|void
name|setInstallEngine
parameter_list|(
name|InstallEngine
name|installEngine
parameter_list|)
block|{
name|this
operator|.
name|installEngine
operator|=
name|installEngine
expr_stmt|;
block|}
specifier|public
name|PublishEngine
name|getPublishEngine
parameter_list|()
block|{
return|return
name|publishEngine
return|;
block|}
specifier|public
name|void
name|setPublishEngine
parameter_list|(
name|PublishEngine
name|publishEngine
parameter_list|)
block|{
name|this
operator|.
name|publishEngine
operator|=
name|publishEngine
expr_stmt|;
block|}
specifier|public
name|ResolveEngine
name|getResolveEngine
parameter_list|()
block|{
return|return
name|resolveEngine
return|;
block|}
specifier|public
name|void
name|setResolveEngine
parameter_list|(
name|ResolveEngine
name|resolveEngine
parameter_list|)
block|{
name|this
operator|.
name|resolveEngine
operator|=
name|resolveEngine
expr_stmt|;
block|}
specifier|public
name|RetrieveEngine
name|getRetrieveEngine
parameter_list|()
block|{
return|return
name|retrieveEngine
return|;
block|}
specifier|public
name|void
name|setRetrieveEngine
parameter_list|(
name|RetrieveEngine
name|retrieveEngine
parameter_list|)
block|{
name|this
operator|.
name|retrieveEngine
operator|=
name|retrieveEngine
expr_stmt|;
block|}
specifier|public
name|SearchEngine
name|getSearchEngine
parameter_list|()
block|{
return|return
name|searchEngine
return|;
block|}
specifier|public
name|void
name|setSearchEngine
parameter_list|(
name|SearchEngine
name|searchEngine
parameter_list|)
block|{
name|this
operator|.
name|searchEngine
operator|=
name|searchEngine
expr_stmt|;
block|}
specifier|public
name|SortEngine
name|getSortEngine
parameter_list|()
block|{
return|return
name|sortEngine
return|;
block|}
specifier|public
name|void
name|setSortEngine
parameter_list|(
name|SortEngine
name|sortEngine
parameter_list|)
block|{
name|this
operator|.
name|sortEngine
operator|=
name|sortEngine
expr_stmt|;
block|}
specifier|public
name|RepositoryManagementEngine
name|getRepositoryEngine
parameter_list|()
block|{
return|return
name|repositoryEngine
return|;
block|}
specifier|public
name|void
name|setRepositoryEngine
parameter_list|(
name|RepositoryManagementEngine
name|repositoryEngine
parameter_list|)
block|{
name|this
operator|.
name|repositoryEngine
operator|=
name|repositoryEngine
expr_stmt|;
block|}
specifier|public
name|void
name|setEventManager
parameter_list|(
name|EventManager
name|eventManager
parameter_list|)
block|{
name|this
operator|.
name|eventManager
operator|=
name|eventManager
expr_stmt|;
block|}
specifier|public
name|void
name|setSettings
parameter_list|(
name|IvySettings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
specifier|public
name|MessageLoggerEngine
name|getLoggerEngine
parameter_list|()
block|{
return|return
name|loggerEngine
return|;
block|}
block|}
end_class

end_unit

