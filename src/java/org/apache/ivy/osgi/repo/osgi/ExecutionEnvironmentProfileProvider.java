begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
operator|.
name|ExecutionEnvironmentProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Load profiles provided by the<tt>org.eclipse.osgi</tt> bundle.  */
end_comment

begin_class
specifier|public
class|class
name|ExecutionEnvironmentProfileProvider
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROFILE_NAME
init|=
literal|"osgi.java.profile.name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYSTEM_PACKAGES
init|=
literal|"org.osgi.framework.system.packages"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROFILE_LIST_FILE
init|=
literal|"profile.list"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGE_PREFIX
init|=
literal|"org/apache/ivy/osgi/repo/osgi/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROFILE_LIST
init|=
literal|"java.profiles"
decl_stmt|;
specifier|private
name|Map
comment|/*<String, ExecutionEnvironmentProfile> */
name|profileList
decl_stmt|;
comment|// private static final String BOOT_DELEGATION = "org.osgi.framework.bootdelegation";
comment|// private static final String ENVIRONMENT = "org.osgi.framework.executionenvironment";
specifier|public
name|ExecutionEnvironmentProfileProvider
parameter_list|()
throws|throws
name|IOException
block|{
name|profileList
operator|=
name|loadDefaultProfileList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ExecutionEnvironmentProfile
name|getProfile
parameter_list|(
name|String
name|profile
parameter_list|)
block|{
return|return
operator|(
name|ExecutionEnvironmentProfile
operator|)
name|profileList
operator|.
name|get
argument_list|(
name|profile
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
comment|/*<String, ExecutionEnvironmentProfile> */
name|loadDefaultProfileList
parameter_list|()
throws|throws
name|IOException
block|{
name|ClassLoader
name|loader
init|=
name|ExecutionEnvironmentProfileProvider
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|InputStream
name|profileListFile
init|=
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|PACKAGE_PREFIX
operator|+
name|PROFILE_LIST_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|profileListFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|PACKAGE_PREFIX
operator|+
name|PROFILE_LIST_FILE
operator|+
literal|" not found in the classpath"
argument_list|)
throw|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|profileListFile
argument_list|)
expr_stmt|;
name|String
index|[]
name|profileList
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROFILE_LIST
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"Loading profiles "
operator|+
name|profileList
argument_list|)
expr_stmt|;
name|Map
comment|/*<String, ExecutionEnvironmentProfile> */
name|map
init|=
operator|new
name|HashMap
comment|/*                                                                         *<String,                                                                         * ExecutionEnvironmentProfile                                                                         *>                                                                         */
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|profileList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|profileFile
init|=
name|profileList
index|[
name|i
index|]
decl_stmt|;
name|String
name|p
init|=
name|profileFile
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|ExecutionEnvironmentProfile
name|profile
init|=
name|load
argument_list|(
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|PACKAGE_PREFIX
operator|+
name|p
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|profile
operator|!=
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"Execution environment profile "
operator|+
name|profile
operator|.
name|getName
argument_list|()
operator|+
literal|" loaded"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|profile
operator|.
name|getName
argument_list|()
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"Unable to load the environement profile "
operator|+
name|PACKAGE_PREFIX
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
specifier|static
name|ExecutionEnvironmentProfile
name|load
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ExecutionEnvironmentProfile
name|load
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|load
argument_list|(
name|props
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ExecutionEnvironmentProfile
name|load
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|ExecutionEnvironmentProfile
name|profile
init|=
operator|new
name|ExecutionEnvironmentProfile
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|PROFILE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|packagesList
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|SYSTEM_PACKAGES
argument_list|)
decl_stmt|;
if|if
condition|(
name|packagesList
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"The profile "
operator|+
name|profile
operator|.
name|getName
argument_list|()
operator|+
literal|" doesn't have any system package definition"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
index|[]
name|packages
init|=
name|packagesList
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pkg
init|=
name|packages
index|[
name|i
index|]
decl_stmt|;
name|profile
operator|.
name|addPkgName
argument_list|(
name|pkg
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|profile
return|;
block|}
block|}
end_class

end_unit

