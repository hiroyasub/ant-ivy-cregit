begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|FSManifestIterable
extends|extends
name|AbstractFSManifestIterable
block|{
comment|/**      * List of directory name that usually contains jars but are not bundles      */
specifier|public
specifier|static
specifier|final
name|Set
comment|/*<String> */
name|NON_BUNDLE_DIRS
init|=
operator|new
name|HashSet
comment|/*<String> */
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"source"
block|,
literal|"sources"
block|,
literal|"javadoc"
block|,
literal|"javadocs"
block|,
literal|"doc"
block|,
literal|"docs"
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Default directory filter that doesn't select .svn directories, neither the directories that      * match {@link #NON_BUNDLE_DIRS}.      */
specifier|public
specifier|static
specifier|final
name|FilenameFilter
name|DEFAULT_DIR_FILTER
init|=
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|".svn"
argument_list|)
operator|&&
operator|!
name|NON_BUNDLE_DIRS
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Default bundle filter that select only .jar files      */
specifier|public
specifier|static
specifier|final
name|FilenameFilter
name|DEFAULT_BUNLDE_FILTER
init|=
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|FilenameFilter
name|dirFilter
init|=
name|DEFAULT_DIR_FILTER
decl_stmt|;
specifier|private
name|FilenameFilter
name|bundleFilter
init|=
name|DEFAULT_BUNLDE_FILTER
decl_stmt|;
specifier|private
name|String
name|root
decl_stmt|;
specifier|private
specifier|final
name|String
name|basePath
decl_stmt|;
comment|/**      * Default constructor      *       * @param root      *            the root directory of the file system to lookup      * @param basePath      *            path the found locations should be append to      */
specifier|public
name|FSManifestIterable
parameter_list|(
name|File
name|root
parameter_list|,
name|String
name|basePath
parameter_list|)
block|{
name|this
operator|.
name|basePath
operator|=
name|basePath
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
specifier|public
name|FilenameFilter
name|getDirFilter
parameter_list|()
block|{
return|return
name|dirFilter
return|;
block|}
specifier|public
name|void
name|setDirFilter
parameter_list|(
name|FilenameFilter
name|dirFilter
parameter_list|)
block|{
name|this
operator|.
name|dirFilter
operator|=
name|dirFilter
expr_stmt|;
block|}
specifier|public
name|FilenameFilter
name|getBundleFilter
parameter_list|()
block|{
return|return
name|bundleFilter
return|;
block|}
specifier|public
name|void
name|setBundleFilter
parameter_list|(
name|FilenameFilter
name|bundleFilter
parameter_list|)
block|{
name|this
operator|.
name|bundleFilter
operator|=
name|bundleFilter
expr_stmt|;
block|}
specifier|protected
name|String
name|createBundleLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
return|return
name|basePath
operator|+
name|location
return|;
block|}
specifier|protected
name|InputStream
name|getInputStream
parameter_list|(
name|String
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|f
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|List
comment|/*<String> */
name|listBundleFiles
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
return|return
name|fileArray2pathList
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|dir
argument_list|)
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|bundleFilter
operator|.
name|accept
argument_list|(
name|f
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
comment|/*<String> */
name|fileArray2pathList
parameter_list|(
name|File
index|[]
name|files
parameter_list|)
block|{
name|ArrayList
comment|/*<String> */
name|list
init|=
operator|new
name|ArrayList
comment|/*<String> */
argument_list|(
name|files
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|substring
argument_list|(
name|root
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|protected
name|List
comment|/*<String> */
name|listDirs
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
return|return
name|fileArray2pathList
argument_list|(
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|dir
argument_list|)
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|dirFilter
operator|==
literal|null
operator|||
name|dirFilter
operator|.
name|accept
argument_list|(
name|f
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

