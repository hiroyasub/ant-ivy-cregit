begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfoAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|ExecutionEnvironmentProfileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|OSGiManifestParser
import|;
end_import

begin_class
specifier|public
class|class
name|ModuleDescriptorWrapper
block|{
specifier|private
name|BundleInfo
name|bundleInfo
decl_stmt|;
specifier|private
specifier|volatile
name|DefaultModuleDescriptor
name|md
decl_stmt|;
specifier|private
name|URI
name|baseUri
decl_stmt|;
specifier|private
name|ExecutionEnvironmentProfileProvider
name|profileProvider
decl_stmt|;
specifier|public
name|ModuleDescriptorWrapper
parameter_list|(
name|BundleInfo
name|bundleInfo
parameter_list|,
name|URI
name|baseUri
parameter_list|,
name|ExecutionEnvironmentProfileProvider
name|profileProvider
parameter_list|)
block|{
name|this
operator|.
name|bundleInfo
operator|=
name|bundleInfo
expr_stmt|;
name|this
operator|.
name|baseUri
operator|=
name|baseUri
expr_stmt|;
name|this
operator|.
name|profileProvider
operator|=
name|profileProvider
expr_stmt|;
block|}
specifier|public
name|BundleInfo
name|getBundleInfo
parameter_list|()
block|{
return|return
name|bundleInfo
return|;
block|}
specifier|public
name|DefaultModuleDescriptor
name|getModuleDescriptor
parameter_list|()
block|{
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|md
operator|!=
literal|null
condition|)
block|{
return|return
name|md
return|;
block|}
name|md
operator|=
name|BundleInfoAdapter
operator|.
name|toModuleDescriptor
argument_list|(
name|OSGiManifestParser
operator|.
name|getInstance
argument_list|()
argument_list|,
name|baseUri
argument_list|,
name|bundleInfo
argument_list|,
name|profileProvider
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|md
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|ModuleDescriptor
argument_list|>
name|unwrap
parameter_list|(
name|Collection
argument_list|<
name|ModuleDescriptorWrapper
argument_list|>
name|collection
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|collection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|ModuleDescriptor
argument_list|>
name|unwrapped
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ModuleDescriptorWrapper
name|wrapped
range|:
name|collection
control|)
block|{
name|unwrapped
operator|.
name|add
argument_list|(
name|wrapped
operator|.
name|getModuleDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|unwrapped
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|bundleInfo
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|ModuleDescriptorWrapper
operator|&&
name|bundleInfo
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ModuleDescriptorWrapper
operator|)
name|obj
operator|)
operator|.
name|bundleInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getModuleDescriptor
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

