begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|MDArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|MetadataArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|IvyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|obr
operator|.
name|xml
operator|.
name|OBRXMLParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
operator|.
name|osgi
operator|.
name|ExecutionEnvironmentProfileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|conflict
operator|.
name|ConflictManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|latest
operator|.
name|ArtifactInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|file
operator|.
name|FileRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|BasicResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|BundleRepoResolver
extends|extends
name|BasicResolver
block|{
specifier|private
name|Repository
name|repository
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|repoXmlURL
decl_stmt|;
specifier|private
name|String
name|repoXmlFile
decl_stmt|;
specifier|private
name|BundleRepo
name|repoDescriptor
init|=
literal|null
decl_stmt|;
specifier|private
name|ExecutionEnvironmentProfileProvider
name|profileProvider
decl_stmt|;
specifier|public
specifier|static
class|class
name|RequirementStrategy
block|{
comment|// take the first matching
specifier|public
specifier|static
name|RequirementStrategy
name|first
init|=
operator|new
name|RequirementStrategy
argument_list|()
decl_stmt|;
comment|// if there are any ambiguity, fail to resolve
specifier|public
specifier|static
name|RequirementStrategy
name|noambiguity
init|=
operator|new
name|RequirementStrategy
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|RequirementStrategy
name|valueOf
parameter_list|(
name|String
name|strategy
parameter_list|)
block|{
if|if
condition|(
name|strategy
operator|.
name|equals
argument_list|(
literal|"first"
argument_list|)
condition|)
block|{
return|return
name|first
return|;
block|}
if|if
condition|(
name|strategy
operator|.
name|equals
argument_list|(
literal|"noambiguity"
argument_list|)
condition|)
block|{
return|return
name|noambiguity
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|RequirementStrategy
name|requirementStrategy
init|=
name|RequirementStrategy
operator|.
name|noambiguity
decl_stmt|;
specifier|public
name|void
name|setImportPackageStrategy
parameter_list|(
name|RequirementStrategy
name|importPackageStrategy
parameter_list|)
block|{
name|this
operator|.
name|requirementStrategy
operator|=
name|importPackageStrategy
expr_stmt|;
block|}
specifier|public
name|void
name|setImportPackageStrategy
parameter_list|(
name|String
name|strategy
parameter_list|)
block|{
name|setImportPackageStrategy
argument_list|(
name|RequirementStrategy
operator|.
name|valueOf
argument_list|(
name|strategy
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRepoXmlFile
parameter_list|(
name|String
name|repositoryXmlFile
parameter_list|)
block|{
name|this
operator|.
name|repoXmlFile
operator|=
name|repositoryXmlFile
expr_stmt|;
block|}
specifier|public
name|void
name|setRepoXmlURL
parameter_list|(
name|String
name|repositoryXmlURL
parameter_list|)
block|{
name|this
operator|.
name|repoXmlURL
operator|=
name|repositoryXmlURL
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|ExecutionEnvironmentProfileProvider
name|pp
parameter_list|)
block|{
name|this
operator|.
name|profileProvider
operator|=
name|pp
expr_stmt|;
block|}
specifier|private
name|void
name|ensureInit
parameter_list|()
block|{
if|if
condition|(
name|repoDescriptor
operator|!=
literal|null
operator|&&
name|repository
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|repoDescriptor
operator|!=
literal|null
operator|||
name|repository
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" wasn't correctly configured, see previous error in the logs"
argument_list|)
throw|;
block|}
if|if
condition|(
name|repoXmlFile
operator|!=
literal|null
operator|&&
name|repoXmlURL
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" couldn't be configured: repoXmlFile and repoXmlUrl cannot be set both"
argument_list|)
throw|;
block|}
if|if
condition|(
name|repoXmlFile
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|repoXmlFile
argument_list|)
decl_stmt|;
name|repository
operator|=
operator|new
name|FileRepository
argument_list|(
name|f
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileInputStream
name|in
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" couldn't be configured: the file "
operator|+
name|repoXmlFile
operator|+
literal|" was not found"
argument_list|)
throw|;
block|}
try|try
block|{
name|repoDescriptor
operator|=
name|OBRXMLParser
operator|.
name|parse
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" couldn't be configured: the file "
operator|+
name|repoXmlFile
operator|+
literal|" is incorrectly formed ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" couldn't be configured: the file "
operator|+
name|repoXmlFile
operator|+
literal|" could not be read ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" couldn't be configured: the file "
operator|+
name|repoXmlFile
operator|+
literal|" has incorrect XML ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// don't care
block|}
block|}
else|else
block|{
name|URL
name|url
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|repoXmlURL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" couldn't be configured: repoXmlURL '"
operator|+
name|repoXmlURL
operator|+
literal|"' is not an URL"
argument_list|)
throw|;
block|}
name|URL
name|baseUrl
decl_stmt|;
name|String
name|basePath
init|=
literal|"/"
decl_stmt|;
name|int
name|i
init|=
name|url
operator|.
name|getPath
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|basePath
operator|=
name|url
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|baseUrl
operator|=
operator|new
name|URL
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" couldn't be configured: the base url couldn'd be extracted from the url "
operator|+
name|url
operator|+
literal|" ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|repository
operator|=
operator|new
name|RelativeURLRepository
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
name|InputStream
name|in
decl_stmt|;
try|try
block|{
name|in
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" couldn't be configured: the file "
operator|+
name|repoXmlURL
operator|+
literal|" couldn't be read ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
try|try
block|{
name|repoDescriptor
operator|=
name|OBRXMLParser
operator|.
name|parse
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" couldn't be configured: the file "
operator|+
name|repoXmlURL
operator|+
literal|" is incorrectly formed ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" couldn't be configured: the file "
operator|+
name|repoXmlURL
operator|+
literal|" could not be read ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The osgi repository resolver "
operator|+
name|getName
argument_list|()
operator|+
literal|" couldn't be configured: the file "
operator|+
name|repoXmlURL
operator|+
literal|" has incorrect XML ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// don't care
block|}
block|}
block|}
specifier|public
name|Repository
name|getRepository
parameter_list|()
block|{
name|ensureInit
argument_list|()
expr_stmt|;
return|return
name|repository
return|;
block|}
specifier|private
name|BundleRepo
name|getRepoDescriptor
parameter_list|()
block|{
name|ensureInit
argument_list|()
expr_stmt|;
return|return
name|repoDescriptor
return|;
block|}
specifier|public
name|ResolvedModuleRevision
name|getDependency
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
throws|throws
name|ParseException
block|{
name|DefaultModuleDescriptor
name|md
init|=
name|getDependencyMD
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
comment|// not found, so let's return the mrid resolved by a previous resolver
return|return
name|data
operator|.
name|getCurrentResolvedModuleRevision
argument_list|()
return|;
block|}
name|Artifact
name|mdar
init|=
operator|new
name|MDArtifact
argument_list|(
name|md
argument_list|,
literal|"MANIFEST"
argument_list|,
literal|"manifest"
argument_list|,
literal|"MF"
argument_list|)
decl_stmt|;
name|MetadataArtifactDownloadReport
name|mdardr
init|=
operator|new
name|MetadataArtifactDownloadReport
argument_list|(
name|mdar
argument_list|)
decl_stmt|;
name|mdardr
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|SUCCESSFUL
argument_list|)
expr_stmt|;
return|return
operator|new
name|ResolvedModuleRevision
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|md
argument_list|,
name|mdardr
argument_list|)
return|;
block|}
specifier|private
name|DefaultModuleDescriptor
name|getDependencyMD
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
name|ModuleRevisionId
name|mrid
init|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|String
name|osgiAtt
init|=
name|mrid
operator|.
name|getAttribute
argument_list|(
name|BundleInfoAdapter
operator|.
name|EXTRA_ATTRIBUTE_NAME
argument_list|)
decl_stmt|;
name|Map
comment|/*<String, Set<BundleCapabilityAndLocation>> */
name|bundleCapabilities
init|=
operator|(
name|Map
operator|)
name|getRepoDescriptor
argument_list|()
operator|.
name|getBundleByCapabilities
argument_list|()
operator|.
name|get
argument_list|(
name|osgiAtt
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleCapabilities
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t Not an OSGi dependency: "
operator|+
name|mrid
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|id
init|=
name|mrid
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Set
comment|/*<BundleCapabilityAndLocation> */
name|bundleReferences
init|=
operator|(
name|Set
operator|)
name|bundleCapabilities
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleReferences
operator|==
literal|null
operator|||
name|bundleReferences
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t "
operator|+
name|id
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|List
comment|/*<BundleCandidate> */
name|ret
init|=
operator|new
name|ArrayList
comment|/*<BundleCandidate> */
argument_list|()
decl_stmt|;
name|Iterator
name|itBundle
init|=
name|bundleReferences
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itBundle
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BundleCapabilityAndLocation
name|bundleCapability
init|=
operator|(
name|BundleCapabilityAndLocation
operator|)
name|itBundle
operator|.
name|next
argument_list|()
decl_stmt|;
name|BundleInfo
name|bundleInfo
init|=
name|bundleCapability
operator|.
name|getBundleInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|bundleCapability
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|BundleInfo
operator|.
name|BUNDLE_TYPE
argument_list|)
condition|)
block|{
name|ModuleRevisionId
name|foundMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|""
argument_list|,
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
argument_list|,
name|bundleInfo
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|BundleInfoAdapter
operator|.
name|OSGI_BUNDLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|getVisitData
argument_list|(
name|foundMrid
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// already resolved import, no need to go further
name|DefaultModuleDescriptor
name|md
init|=
name|BundleInfoAdapter
operator|.
name|toModuleDescriptor
argument_list|(
name|bundleInfo
argument_list|,
name|profileProvider
argument_list|)
decl_stmt|;
name|md
operator|.
name|setPublicationDate
argument_list|(
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|md
return|;
block|}
block|}
name|BundleCandidate
name|candidate
init|=
operator|new
name|BundleCandidate
argument_list|()
decl_stmt|;
name|candidate
operator|.
name|bundleInfo
operator|=
name|bundleInfo
expr_stmt|;
name|candidate
operator|.
name|version
operator|=
name|bundleCapability
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
name|DefaultModuleDescriptor
name|found
init|=
name|selectResource
argument_list|(
name|ret
argument_list|,
name|mrid
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": no resource found for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
specifier|private
class|class
name|BundleCandidate
implements|implements
name|ArtifactInfo
block|{
name|BundleInfo
name|bundleInfo
decl_stmt|;
name|String
name|version
decl_stmt|;
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|getRevision
parameter_list|()
block|{
return|return
name|version
return|;
block|}
block|}
specifier|public
name|DefaultModuleDescriptor
name|selectResource
parameter_list|(
name|List
comment|/*<BundleCandidate> */
name|rress
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|VersionMatcher
name|versionMatcher
init|=
name|getSettings
argument_list|()
operator|.
name|getVersionMatcher
argument_list|()
decl_stmt|;
name|List
comment|/*<BundleCandidate> */
name|founds
init|=
operator|new
name|ArrayList
comment|/*<BundleCandidate> */
argument_list|()
decl_stmt|;
name|List
comment|/*<BundleCandidate> */
name|sorted
init|=
name|getLatestStrategy
argument_list|()
operator|.
name|sort
argument_list|(
operator|(
name|ArtifactInfo
index|[]
operator|)
name|rress
operator|.
name|toArray
argument_list|(
operator|new
name|BundleCandidate
index|[
name|rress
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|List
comment|/*<String> */
name|rejected
init|=
operator|new
name|ArrayList
comment|/*<String> */
argument_list|()
decl_stmt|;
name|List
comment|/*<ModuleRevisionId> */
name|foundBlacklisted
init|=
operator|new
name|ArrayList
comment|/*<ModuleRevisionId> */
argument_list|()
decl_stmt|;
name|IvyContext
name|context
init|=
name|IvyContext
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Iterator
name|itBundle
init|=
name|sorted
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itBundle
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BundleCandidate
name|rres
init|=
operator|(
name|BundleCandidate
operator|)
name|itBundle
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterNames
argument_list|(
operator|new
name|ArrayList
comment|/*<String> */
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|rres
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": filtered by name: "
operator|+
name|rres
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|(
name|date
operator|!=
literal|null
operator|&&
name|rres
operator|.
name|getLastModified
argument_list|()
operator|>
name|date
operator|.
name|getTime
argument_list|()
operator|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": too young: "
operator|+
name|rres
argument_list|)
expr_stmt|;
name|rejected
operator|.
name|add
argument_list|(
name|rres
operator|.
name|getRevision
argument_list|()
operator|+
literal|" ("
operator|+
name|rres
operator|.
name|getLastModified
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ModuleRevisionId
name|foundMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|mrid
argument_list|,
name|rres
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|ResolveData
name|data
init|=
name|context
operator|.
name|getResolveData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|getReport
argument_list|()
operator|!=
literal|null
operator|&&
name|data
operator|.
name|isBlacklisted
argument_list|(
name|data
operator|.
name|getReport
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|foundMrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": blacklisted: "
operator|+
name|rres
argument_list|)
expr_stmt|;
name|rejected
operator|.
name|add
argument_list|(
name|rres
operator|.
name|getRevision
argument_list|()
operator|+
literal|" (blacklisted)"
argument_list|)
expr_stmt|;
name|foundBlacklisted
operator|.
name|add
argument_list|(
name|foundMrid
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|versionMatcher
operator|.
name|accept
argument_list|(
name|mrid
argument_list|,
name|foundMrid
argument_list|)
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": rejected by version matcher: "
operator|+
name|rres
argument_list|)
expr_stmt|;
name|rejected
operator|.
name|add
argument_list|(
name|rres
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|versionMatcher
operator|.
name|needModuleDescriptor
argument_list|(
name|mrid
argument_list|,
name|foundMrid
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
else|else
block|{
name|founds
operator|.
name|add
argument_list|(
name|rres
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|founds
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|rejected
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logAttempt
argument_list|(
name|rejected
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|founds
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|foundBlacklisted
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// all acceptable versions have been blacklisted, this means that an unsolvable conflict
comment|// has been found
name|DependencyDescriptor
name|dd
init|=
name|context
operator|.
name|getDependencyDescriptor
argument_list|()
decl_stmt|;
name|IvyNode
name|parentNode
init|=
name|context
operator|.
name|getResolveData
argument_list|()
operator|.
name|getNode
argument_list|(
name|dd
operator|.
name|getParentRevisionId
argument_list|()
argument_list|)
decl_stmt|;
name|ConflictManager
name|cm
init|=
name|parentNode
operator|.
name|getConflictManager
argument_list|(
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|)
decl_stmt|;
name|cm
operator|.
name|handleAllBlacklistedRevisions
argument_list|(
name|dd
argument_list|,
name|foundBlacklisted
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|founds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|BundleCandidate
name|found
init|=
operator|(
name|BundleCandidate
operator|)
name|founds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|osgiAtt
init|=
name|mrid
operator|.
name|getAttribute
argument_list|(
name|BundleInfoAdapter
operator|.
name|EXTRA_ATTRIBUTE_NAME
argument_list|)
decl_stmt|;
comment|// for non bundle requirement : log the selected bundle
if|if
condition|(
operator|!
name|BundleInfo
operator|.
name|BUNDLE_TYPE
operator|.
name|equals
argument_list|(
name|osgiAtt
argument_list|)
condition|)
block|{
comment|// several candidates with different symbolic name : make an warning about the ambiguity
if|if
condition|(
name|founds
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// several candidates with different symbolic name ?
name|Map
comment|/*<String, List<BundleCandidate>> */
name|matching
init|=
operator|new
name|HashMap
comment|/*                                                                                *<String,                                                                                * List<BundleCandidate                                                                                *>>                                                                                */
argument_list|()
decl_stmt|;
name|Iterator
name|itBundle2
init|=
name|founds
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itBundle2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BundleCandidate
name|c
init|=
operator|(
name|BundleCandidate
operator|)
name|itBundle2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|c
operator|.
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
decl_stmt|;
name|List
comment|/*<BundleCandidate> */
name|list
init|=
operator|(
name|List
operator|)
name|matching
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
comment|/*<BundleCandidate> */
argument_list|()
expr_stmt|;
name|matching
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matching
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|requirementStrategy
operator|==
name|RequirementStrategy
operator|.
name|first
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"Ambiguity for the '"
operator|+
name|osgiAtt
operator|+
literal|"' requirement "
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|";version="
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|itMatching
init|=
name|matching
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itMatching
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
comment|/*<String, List<BundleCandidate>> */
name|entry
init|=
operator|(
name|Entry
operator|)
name|itMatching
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"\t"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|itB
init|=
operator|(
operator|(
name|List
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itB
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BundleCandidate
name|c
init|=
operator|(
name|BundleCandidate
operator|)
name|itB
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|warn
argument_list|(
literal|"\t\t"
operator|+
name|c
operator|.
name|getRevision
argument_list|()
operator|+
operator|(
name|found
operator|==
name|c
condition|?
literal|" (selected)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|requirementStrategy
operator|==
name|RequirementStrategy
operator|.
name|noambiguity
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"Ambiguity for the '"
operator|+
name|osgiAtt
operator|+
literal|"' requirement "
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|";version="
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|itMatching
init|=
name|matching
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itMatching
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
comment|/*<String, List<BundleCandidate>> */
name|entry
init|=
operator|(
name|Entry
operator|)
name|itMatching
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|error
argument_list|(
literal|"\t"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|itB
init|=
operator|(
operator|(
name|List
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itB
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BundleCandidate
name|c
init|=
operator|(
name|BundleCandidate
operator|)
name|itB
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
operator|.
name|error
argument_list|(
literal|"\t\t"
operator|+
name|c
operator|.
name|getRevision
argument_list|()
operator|+
operator|(
name|found
operator|==
name|c
condition|?
literal|" (best match)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
name|Message
operator|.
name|info
argument_list|(
literal|"'"
operator|+
name|osgiAtt
operator|+
literal|"' requirement "
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|";version="
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
operator|+
literal|" satisfied by "
operator|+
name|found
operator|.
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|";"
operator|+
name|found
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DefaultModuleDescriptor
name|md
init|=
name|BundleInfoAdapter
operator|.
name|toModuleDescriptor
argument_list|(
name|found
operator|.
name|bundleInfo
argument_list|,
name|profileProvider
argument_list|)
decl_stmt|;
name|md
operator|.
name|setPublicationDate
argument_list|(
operator|new
name|Date
argument_list|(
name|found
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|md
return|;
block|}
specifier|public
name|ResolvedResource
name|findArtifactRef
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|ModuleRevisionId
name|mrid
init|=
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|new
name|ResolvedResource
argument_list|(
name|getRepository
argument_list|()
operator|.
name|getResource
argument_list|(
name|artifact
operator|.
name|getUrl
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|,
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|getName
argument_list|()
operator|+
literal|": unable to get resource for "
operator|+
name|mrid
operator|+
literal|": res="
operator|+
name|artifact
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Collection
comment|/*<String> */
name|filterNames
parameter_list|(
name|Collection
comment|/*<String> */
name|names
parameter_list|)
block|{
name|getSettings
argument_list|()
operator|.
name|filterIgnore
argument_list|(
name|names
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
specifier|protected
name|Collection
name|findNames
parameter_list|(
name|Map
name|tokenValues
parameter_list|,
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|BundleInfoAdapter
operator|.
name|EXTRA_ATTRIBUTE_NAME
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|BundleInfo
operator|.
name|BUNDLE_TYPE
block|,
name|BundleInfo
operator|.
name|PACKAGE_TYPE
block|,
name|BundleInfo
operator|.
name|SERVICE_TYPE
block|}
argument_list|)
return|;
block|}
name|String
name|osgiAtt
init|=
operator|(
name|String
operator|)
name|tokenValues
operator|.
name|get
argument_list|(
name|BundleInfoAdapter
operator|.
name|EXTRA_ATTRIBUTE_NAME
argument_list|)
decl_stmt|;
name|Map
comment|/*<String, Set<BundleCapabilityAndLocation>> */
name|bundleCapabilityMap
init|=
operator|(
name|Map
operator|)
name|getRepoDescriptor
argument_list|()
operator|.
name|getBundleByCapabilities
argument_list|()
operator|.
name|get
argument_list|(
name|osgiAtt
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleCapabilityMap
operator|==
literal|null
operator|||
name|bundleCapabilityMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
if|if
condition|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
literal|""
argument_list|)
return|;
block|}
if|if
condition|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
name|bundleCapabilityMap
operator|.
name|keySet
argument_list|()
return|;
block|}
if|if
condition|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|tokenValues
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
decl_stmt|;
name|List
comment|/*<String> */
name|versions
init|=
operator|new
name|ArrayList
comment|/*<String> */
argument_list|()
decl_stmt|;
name|Set
comment|/*<BundleCapabilityAndLocation> */
name|bundleCapabilities
init|=
operator|(
name|Set
operator|)
name|bundleCapabilityMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleCapabilities
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|itBundle
init|=
name|bundleCapabilities
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itBundle
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BundleCapabilityAndLocation
name|bundleCapability
init|=
operator|(
name|BundleCapabilityAndLocation
operator|)
name|itBundle
operator|.
name|next
argument_list|()
decl_stmt|;
name|versions
operator|.
name|add
argument_list|(
name|bundleCapability
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|versions
return|;
block|}
if|if
condition|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|tokenValues
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
if|if
condition|(
name|osgiAtt
operator|.
name|equals
argument_list|(
name|BundleInfo
operator|.
name|PACKAGE_TYPE
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|BundleInfoAdapter
operator|.
name|CONF_USE_PREFIX
operator|+
name|name
argument_list|)
return|;
block|}
name|Set
comment|/*<BundleCapabilityAndLocation> */
name|bundleCapabilities
init|=
operator|(
name|Set
operator|)
name|bundleCapabilityMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleCapabilities
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|String
name|version
init|=
operator|(
name|String
operator|)
name|tokenValues
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|Version
name|v
decl_stmt|;
try|try
block|{
name|v
operator|=
operator|new
name|Version
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|BundleCapabilityAndLocation
name|found
init|=
literal|null
decl_stmt|;
name|Iterator
name|itBundle
init|=
name|bundleCapabilities
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itBundle
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BundleCapabilityAndLocation
name|bundleCapability
init|=
operator|(
name|BundleCapabilityAndLocation
operator|)
name|itBundle
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundleCapability
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|found
operator|=
name|bundleCapability
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|DefaultModuleDescriptor
name|md
init|=
name|BundleInfoAdapter
operator|.
name|toModuleDescriptor
argument_list|(
name|found
operator|.
name|getBundleInfo
argument_list|()
argument_list|,
name|profileProvider
argument_list|)
decl_stmt|;
name|List
comment|/*<String> */
name|confs
init|=
operator|new
name|ArrayList
comment|/*<String> */
argument_list|()
decl_stmt|;
name|Configuration
index|[]
name|configurations
init|=
name|md
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configurations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|conf
init|=
name|configurations
index|[
name|i
index|]
decl_stmt|;
name|confs
operator|.
name|add
argument_list|(
name|conf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|confs
return|;
block|}
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
specifier|public
name|Map
index|[]
name|listTokenValues
parameter_list|(
name|String
index|[]
name|tokens
parameter_list|,
name|Map
name|criteria
parameter_list|)
block|{
name|Set
comment|/*<String> */
name|tokenSet
init|=
operator|new
name|HashSet
comment|/*<String> */
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tokens
argument_list|)
argument_list|)
decl_stmt|;
name|Set
comment|/*<Map<String, String>> */
name|listTokenValues
init|=
name|listTokenValues
argument_list|(
name|tokenSet
argument_list|,
name|criteria
argument_list|)
decl_stmt|;
return|return
operator|(
name|Map
index|[]
operator|)
name|listTokenValues
operator|.
name|toArray
argument_list|(
operator|new
name|Map
index|[
name|listTokenValues
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|Set
comment|/*<Map<String, String>> */
name|listTokenValues
parameter_list|(
name|Set
comment|/*<String> */
name|tokens
parameter_list|,
name|Map
comment|/*                                                                                        *<String,                                                                                        * String>                                                                                        */
name|criteria
parameter_list|)
block|{
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
comment|/*<Map<String, String>> */
name|singleton
argument_list|(
name|criteria
argument_list|)
return|;
block|}
name|Set
comment|/*<String> */
name|tokenSet
init|=
operator|new
name|HashSet
comment|/*<String> */
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
name|Map
comment|/*<String, String> */
name|values
init|=
operator|new
name|HashMap
comment|/*<String, String> */
argument_list|()
decl_stmt|;
name|tokenSet
operator|.
name|remove
argument_list|(
name|BundleInfoAdapter
operator|.
name|EXTRA_ATTRIBUTE_NAME
argument_list|)
expr_stmt|;
name|String
name|osgiAtt
init|=
operator|(
name|String
operator|)
name|criteria
operator|.
name|get
argument_list|(
name|BundleInfoAdapter
operator|.
name|EXTRA_ATTRIBUTE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|osgiAtt
operator|==
literal|null
condition|)
block|{
name|Set
comment|/*<Map<String, String>> */
name|tokenValues
init|=
operator|new
name|HashSet
comment|/*<Map<String, String>> */
argument_list|()
decl_stmt|;
name|Map
comment|/*<String, String> */
name|newCriteria
init|=
operator|new
name|HashMap
comment|/*<String, String> */
argument_list|(
name|criteria
argument_list|)
decl_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|BundleInfoAdapter
operator|.
name|EXTRA_ATTRIBUTE_NAME
argument_list|,
name|BundleInfo
operator|.
name|BUNDLE_TYPE
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|addAll
argument_list|(
name|listTokenValues
argument_list|(
name|tokenSet
argument_list|,
name|newCriteria
argument_list|)
argument_list|)
expr_stmt|;
name|newCriteria
operator|=
operator|new
name|HashMap
comment|/*<String, String> */
argument_list|(
name|criteria
argument_list|)
expr_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|BundleInfoAdapter
operator|.
name|EXTRA_ATTRIBUTE_NAME
argument_list|,
name|BundleInfo
operator|.
name|PACKAGE_TYPE
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|addAll
argument_list|(
name|listTokenValues
argument_list|(
name|tokenSet
argument_list|,
name|newCriteria
argument_list|)
argument_list|)
expr_stmt|;
name|newCriteria
operator|=
operator|new
name|HashMap
comment|/*<String, String> */
argument_list|(
name|criteria
argument_list|)
expr_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|BundleInfoAdapter
operator|.
name|EXTRA_ATTRIBUTE_NAME
argument_list|,
name|BundleInfo
operator|.
name|SERVICE_TYPE
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|addAll
argument_list|(
name|listTokenValues
argument_list|(
name|tokenSet
argument_list|,
name|newCriteria
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tokenValues
return|;
block|}
name|values
operator|.
name|put
argument_list|(
name|BundleInfoAdapter
operator|.
name|EXTRA_ATTRIBUTE_NAME
argument_list|,
name|osgiAtt
argument_list|)
expr_stmt|;
name|Map
comment|/*<String, Set<BundleCapabilityAndLocation>> */
name|bundleCapabilityMap
init|=
operator|(
name|Map
operator|)
name|getRepoDescriptor
argument_list|()
operator|.
name|getBundleByCapabilities
argument_list|()
operator|.
name|get
argument_list|(
name|osgiAtt
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleCapabilityMap
operator|==
literal|null
operator|||
name|bundleCapabilityMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
comment|/*<Map<String, String>> */
name|emptySet
argument_list|()
return|;
block|}
name|tokenSet
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|)
expr_stmt|;
name|String
name|org
init|=
operator|(
name|String
operator|)
name|criteria
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|!=
literal|null
operator|&&
name|org
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
comment|/*<Map<String, String>> */
name|emptySet
argument_list|()
return|;
block|}
name|values
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|tokenSet
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
expr_stmt|;
name|String
name|module
init|=
operator|(
name|String
operator|)
name|criteria
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
name|Set
comment|/*<String> */
name|names
init|=
name|bundleCapabilityMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Set
comment|/*<Map<String, String>> */
name|tokenValues
init|=
operator|new
name|HashSet
comment|/*<Map<String, String>> */
argument_list|()
decl_stmt|;
name|Iterator
name|itNames
init|=
name|names
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itNames
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|itNames
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
comment|/*<String, String> */
name|newCriteria
init|=
operator|new
name|HashMap
comment|/*<String, String> */
argument_list|(
name|criteria
argument_list|)
decl_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|addAll
argument_list|(
name|listTokenValues
argument_list|(
name|tokenSet
argument_list|,
name|newCriteria
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenValues
return|;
block|}
name|values
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|module
argument_list|)
expr_stmt|;
name|tokenSet
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|)
expr_stmt|;
name|String
name|rev
init|=
operator|(
name|String
operator|)
name|criteria
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|==
literal|null
condition|)
block|{
name|Set
comment|/*<BundleCapabilityAndLocation> */
name|bundleCapabilities
init|=
operator|(
name|Set
operator|)
name|bundleCapabilityMap
operator|.
name|get
argument_list|(
name|module
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleCapabilities
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
comment|/*<Map<String, String>> */
name|emptySet
argument_list|()
return|;
block|}
name|Set
comment|/*<Map<String, String>> */
name|tokenValues
init|=
operator|new
name|HashSet
comment|/*<Map<String, String>> */
argument_list|()
decl_stmt|;
name|Iterator
name|itBundle
init|=
name|bundleCapabilities
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itBundle
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BundleCapabilityAndLocation
name|capability
init|=
operator|(
name|BundleCapabilityAndLocation
operator|)
name|itBundle
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
comment|/*<String, String> */
name|newCriteria
init|=
operator|new
name|HashMap
comment|/*<String, String> */
argument_list|(
name|criteria
argument_list|)
decl_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|,
name|capability
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|addAll
argument_list|(
name|listTokenValues
argument_list|(
name|tokenSet
argument_list|,
name|newCriteria
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenValues
return|;
block|}
name|values
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|tokenSet
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
argument_list|)
expr_stmt|;
name|String
name|conf
init|=
operator|(
name|String
operator|)
name|criteria
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|osgiAtt
operator|.
name|equals
argument_list|(
name|BundleInfo
operator|.
name|PACKAGE_TYPE
argument_list|)
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
argument_list|,
name|BundleInfoAdapter
operator|.
name|CONF_USE_PREFIX
operator|+
name|module
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
comment|/*<Map<String, String>> */
name|singleton
argument_list|(
name|values
argument_list|)
return|;
block|}
name|Set
comment|/*<BundleCapabilityAndLocation> */
name|bundleCapabilities
init|=
operator|(
name|Set
operator|)
name|bundleCapabilityMap
operator|.
name|get
argument_list|(
name|module
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleCapabilities
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
comment|/*<Map<String, String>> */
name|emptySet
argument_list|()
return|;
block|}
name|Version
name|v
decl_stmt|;
try|try
block|{
name|v
operator|=
operator|new
name|Version
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|Collections
operator|.
comment|/*<Map<String, String>> */
name|emptySet
argument_list|()
return|;
block|}
name|BundleCapabilityAndLocation
name|found
init|=
literal|null
decl_stmt|;
name|Iterator
name|itBundle
init|=
name|bundleCapabilities
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itBundle
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BundleCapabilityAndLocation
name|bundleCapability
init|=
operator|(
name|BundleCapabilityAndLocation
operator|)
name|itBundle
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundleCapability
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|found
operator|=
name|bundleCapability
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
comment|/*<Map<String, String>> */
name|emptySet
argument_list|()
return|;
block|}
name|Set
comment|/*<Map<String, String>> */
name|tokenValues
init|=
operator|new
name|HashSet
comment|/*<Map<String, String>> */
argument_list|()
decl_stmt|;
name|DefaultModuleDescriptor
name|md
init|=
name|BundleInfoAdapter
operator|.
name|toModuleDescriptor
argument_list|(
name|found
operator|.
name|getBundleInfo
argument_list|()
argument_list|,
name|profileProvider
argument_list|)
decl_stmt|;
name|Configuration
index|[]
name|configurations
init|=
name|md
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configurations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|c
init|=
name|configurations
index|[
name|i
index|]
decl_stmt|;
name|Map
comment|/*<String, String> */
name|newCriteria
init|=
operator|new
name|HashMap
comment|/*<String, String> */
argument_list|(
name|criteria
argument_list|)
decl_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|add
argument_list|(
name|newCriteria
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenValues
return|;
block|}
name|values
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
comment|/*<Map<String, String>> */
name|singleton
argument_list|(
name|values
argument_list|)
return|;
block|}
specifier|protected
name|long
name|get
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": downloading "
operator|+
name|resource
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tto "
operator|+
name|dest
argument_list|)
expr_stmt|;
if|if
condition|(
name|dest
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dest
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|getRepository
argument_list|()
operator|.
name|get
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
argument_list|,
name|dest
argument_list|)
expr_stmt|;
return|return
name|dest
operator|.
name|length
argument_list|()
return|;
block|}
specifier|protected
name|Resource
name|getResource
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRepository
argument_list|()
operator|.
name|getResource
argument_list|(
name|source
argument_list|)
return|;
block|}
specifier|public
name|void
name|publish
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|src
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|// useless methods that must not be called
specifier|public
name|ResolvedResource
name|findIvyFileRef
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

