begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|DownloadStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|MetadataArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|IvyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfoAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|BasicResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|MDResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResourceMDParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|isNullOrEmpty
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractOSGiResolver
extends|extends
name|BasicResolver
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CAPABILITY_EXTRA_ATTR
init|=
literal|"osgi_bundle"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|RepoDescriptor
name|FAILING_REPO_DESCRIPTOR
init|=
operator|new
name|EditableRepoDescriptor
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
name|RepoDescriptor
name|repoDescriptor
init|=
literal|null
decl_stmt|;
specifier|private
name|URLRepository
name|repository
init|=
operator|new
name|URLRepository
argument_list|()
decl_stmt|;
specifier|public
specifier|static
class|class
name|RequirementStrategy
block|{
comment|// take the first matching
specifier|public
specifier|static
name|RequirementStrategy
name|first
init|=
operator|new
name|RequirementStrategy
argument_list|()
decl_stmt|;
comment|// if there are any ambiguity, fail to resolve
specifier|public
specifier|static
name|RequirementStrategy
name|noambiguity
init|=
operator|new
name|RequirementStrategy
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|RequirementStrategy
name|valueOf
parameter_list|(
name|String
name|strategy
parameter_list|)
block|{
if|if
condition|(
name|strategy
operator|.
name|equals
argument_list|(
literal|"first"
argument_list|)
condition|)
block|{
return|return
name|first
return|;
block|}
if|if
condition|(
name|strategy
operator|.
name|equals
argument_list|(
literal|"noambiguity"
argument_list|)
condition|)
block|{
return|return
name|noambiguity
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|RequirementStrategy
name|requirementStrategy
init|=
name|RequirementStrategy
operator|.
name|noambiguity
decl_stmt|;
specifier|public
name|void
name|setRequirementStrategy
parameter_list|(
name|RequirementStrategy
name|importPackageStrategy
parameter_list|)
block|{
name|this
operator|.
name|requirementStrategy
operator|=
name|importPackageStrategy
expr_stmt|;
block|}
specifier|public
name|void
name|setRequirementStrategy
parameter_list|(
name|String
name|strategy
parameter_list|)
block|{
name|setRequirementStrategy
argument_list|(
name|RequirementStrategy
operator|.
name|valueOf
argument_list|(
name|strategy
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setRepoDescriptor
parameter_list|(
name|RepoDescriptor
name|repoDescriptor
parameter_list|)
block|{
name|this
operator|.
name|repoDescriptor
operator|=
name|repoDescriptor
expr_stmt|;
block|}
specifier|public
name|URLRepository
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
specifier|protected
name|void
name|ensureInit
parameter_list|()
block|{
if|if
condition|(
name|repoDescriptor
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|repoDescriptor
operator|=
name|FAILING_REPO_DESCRIPTOR
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error while loading the OSGi repo descriptor"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" ("
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
name|repoDescriptor
operator|==
name|FAILING_REPO_DESCRIPTOR
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The repository "
operator|+
name|getName
argument_list|()
operator|+
literal|" already failed to load"
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|init
parameter_list|()
function_decl|;
specifier|public
name|RepoDescriptor
name|getRepoDescriptor
parameter_list|()
block|{
name|ensureInit
argument_list|()
expr_stmt|;
return|return
name|repoDescriptor
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAllownomd
parameter_list|()
block|{
comment|// this a repo based resolver, we always have md
return|return
literal|false
return|;
block|}
specifier|public
name|ResolvedResource
name|findIvyFileRef
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
name|ModuleRevisionId
name|mrid
init|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
name|String
name|osgiType
init|=
name|mrid
operator|.
name|getOrganisation
argument_list|()
decl_stmt|;
if|if
condition|(
name|osgiType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported OSGi module Id: "
operator|+
name|mrid
operator|.
name|getModuleId
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|id
init|=
name|mrid
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ModuleDescriptor
argument_list|>
name|mds
init|=
name|ModuleDescriptorWrapper
operator|.
name|unwrap
argument_list|(
name|getRepoDescriptor
argument_list|()
operator|.
name|findModules
argument_list|(
name|osgiType
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mds
operator|==
literal|null
operator|||
name|mds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t "
operator|+
name|id
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ResolvedResource
index|[]
name|ret
decl_stmt|;
if|if
condition|(
name|BundleInfo
operator|.
name|BUNDLE_TYPE
operator|.
name|equals
argument_list|(
name|osgiType
argument_list|)
condition|)
block|{
name|ret
operator|=
name|findBundle
argument_list|(
name|dd
argument_list|,
name|data
argument_list|,
name|mds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|findCapability
argument_list|(
name|dd
argument_list|,
name|data
argument_list|,
name|mds
argument_list|)
expr_stmt|;
block|}
name|ResolvedResource
name|found
init|=
name|findResource
argument_list|(
name|ret
argument_list|,
name|getDefaultRMDParser
argument_list|(
name|dd
operator|.
name|getDependencyId
argument_list|()
argument_list|)
argument_list|,
name|mrid
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": no resource found for "
operator|+
name|mrid
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
specifier|public
name|ResolvedResource
index|[]
name|findBundle
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|,
name|Collection
argument_list|<
name|ModuleDescriptor
argument_list|>
name|mds
parameter_list|)
block|{
name|ResolvedResource
index|[]
name|ret
init|=
operator|new
name|ResolvedResource
index|[
name|mds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ModuleDescriptor
name|md
range|:
name|mds
control|)
block|{
name|MetadataArtifactDownloadReport
name|report
init|=
operator|new
name|MetadataArtifactDownloadReport
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|report
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|report
operator|.
name|setSearched
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
operator|new
name|ResolvedModuleRevision
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|md
argument_list|,
name|report
argument_list|)
decl_stmt|;
name|MDResolvedResource
name|mdrr
init|=
operator|new
name|MDResolvedResource
argument_list|(
literal|null
argument_list|,
name|md
operator|.
name|getRevision
argument_list|()
argument_list|,
name|rmr
argument_list|)
decl_stmt|;
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|mdrr
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|ResolvedResource
index|[]
name|findCapability
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|,
name|Collection
argument_list|<
name|ModuleDescriptor
argument_list|>
name|mds
parameter_list|)
block|{
name|List
argument_list|<
name|ResolvedResource
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ModuleDescriptor
name|md
range|:
name|mds
control|)
block|{
name|IvyNode
name|node
init|=
name|data
operator|.
name|getNode
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getDescriptor
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// already resolved import, no need to go further
return|return
operator|new
name|ResolvedResource
index|[]
block|{
name|buildResolvedCapabilityMd
argument_list|(
name|dd
argument_list|,
name|node
operator|.
name|getDescriptor
argument_list|()
argument_list|)
block|}
return|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|buildResolvedCapabilityMd
argument_list|(
name|dd
argument_list|,
name|md
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|ResolvedResource
index|[
name|mds
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|MDResolvedResource
name|buildResolvedCapabilityMd
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|)
block|{
name|String
name|org
init|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getOrganisation
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
name|md
operator|.
name|getExtraInfoContentByTagName
argument_list|(
name|BundleInfoAdapter
operator|.
name|EXTRA_INFO_EXPORT_PREFIX
operator|+
name|name
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|capabilityRev
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|org
argument_list|,
name|name
argument_list|,
name|rev
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|CAPABILITY_EXTRA_ATTR
argument_list|,
name|md
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DefaultModuleDescriptor
name|capabilityMd
init|=
operator|new
name|DefaultModuleDescriptor
argument_list|(
name|capabilityRev
argument_list|,
name|getSettings
argument_list|()
operator|.
name|getStatusManager
argument_list|()
operator|.
name|getDefaultStatus
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|useConf
init|=
name|BundleInfoAdapter
operator|.
name|CONF_USE_PREFIX
operator|+
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|capabilityMd
operator|.
name|addConfiguration
argument_list|(
name|BundleInfoAdapter
operator|.
name|CONF_DEFAULT
argument_list|)
expr_stmt|;
name|capabilityMd
operator|.
name|addConfiguration
argument_list|(
name|BundleInfoAdapter
operator|.
name|CONF_OPTIONAL
argument_list|)
expr_stmt|;
name|capabilityMd
operator|.
name|addConfiguration
argument_list|(
name|BundleInfoAdapter
operator|.
name|CONF_TRANSITIVE_OPTIONAL
argument_list|)
expr_stmt|;
name|capabilityMd
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
name|useConf
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultDependencyDescriptor
name|capabilityDD
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|md
operator|.
name|getModuleRevisionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|capabilityDD
operator|.
name|addDependencyConfiguration
argument_list|(
name|BundleInfoAdapter
operator|.
name|CONF_NAME_DEFAULT
argument_list|,
name|BundleInfoAdapter
operator|.
name|CONF_NAME_DEFAULT
argument_list|)
expr_stmt|;
name|capabilityDD
operator|.
name|addDependencyConfiguration
argument_list|(
name|BundleInfoAdapter
operator|.
name|CONF_NAME_OPTIONAL
argument_list|,
name|BundleInfoAdapter
operator|.
name|CONF_NAME_OPTIONAL
argument_list|)
expr_stmt|;
name|capabilityDD
operator|.
name|addDependencyConfiguration
argument_list|(
name|BundleInfoAdapter
operator|.
name|CONF_NAME_TRANSITIVE_OPTIONAL
argument_list|,
name|BundleInfoAdapter
operator|.
name|CONF_NAME_TRANSITIVE_OPTIONAL
argument_list|)
expr_stmt|;
name|capabilityDD
operator|.
name|addDependencyConfiguration
argument_list|(
name|useConf
argument_list|,
name|useConf
argument_list|)
expr_stmt|;
name|capabilityMd
operator|.
name|addDependency
argument_list|(
name|capabilityDD
argument_list|)
expr_stmt|;
name|MetadataArtifactDownloadReport
name|report
init|=
operator|new
name|MetadataArtifactDownloadReport
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|report
operator|.
name|setDownloadStatus
argument_list|(
name|DownloadStatus
operator|.
name|NO
argument_list|)
expr_stmt|;
name|report
operator|.
name|setSearched
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResolvedModuleRevision
name|rmr
init|=
operator|new
name|ResolvedModuleRevision
argument_list|(
name|this
argument_list|,
name|this
argument_list|,
name|capabilityMd
argument_list|,
name|report
argument_list|)
decl_stmt|;
return|return
operator|new
name|MDResolvedResource
argument_list|(
literal|null
argument_list|,
name|capabilityMd
operator|.
name|getRevision
argument_list|()
argument_list|,
name|rmr
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResolvedResource
name|findResource
parameter_list|(
name|ResolvedResource
index|[]
name|rress
parameter_list|,
name|ResourceMDParser
name|rmdparser
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|ResolvedResource
name|found
init|=
name|super
operator|.
name|findResource
argument_list|(
name|rress
argument_list|,
name|rmdparser
argument_list|,
name|mrid
argument_list|,
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|osgiType
init|=
name|mrid
operator|.
name|getOrganisation
argument_list|()
decl_stmt|;
comment|// for non bundle requirement : log the selected bundle
if|if
condition|(
operator|!
name|BundleInfo
operator|.
name|BUNDLE_TYPE
operator|.
name|equals
argument_list|(
name|osgiType
argument_list|)
condition|)
block|{
comment|// several candidates with different symbolic name : make an warning about the ambiguity
if|if
condition|(
name|rress
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
comment|// several candidates with different symbolic name ?
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MDResolvedResource
argument_list|>
argument_list|>
name|matching
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResolvedResource
name|rres
range|:
name|rress
control|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|MDResolvedResource
operator|)
name|rres
operator|)
operator|.
name|getResolvedModuleRevision
argument_list|()
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getExtraAttribute
argument_list|(
name|CAPABILITY_EXTRA_ATTR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MDResolvedResource
argument_list|>
name|list
init|=
name|matching
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|matching
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
operator|(
name|MDResolvedResource
operator|)
name|rres
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|matching
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|requirementStrategy
operator|==
name|RequirementStrategy
operator|.
name|first
condition|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"Ambiguity for the '"
operator|+
name|osgiType
operator|+
literal|"' requirement "
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|";version="
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MDResolvedResource
argument_list|>
argument_list|>
name|entry
range|:
name|matching
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"\t"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MDResolvedResource
name|c
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"\t\t"
operator|+
name|c
operator|.
name|getRevision
argument_list|()
operator|+
operator|(
name|found
operator|==
name|c
condition|?
literal|" (selected)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|requirementStrategy
operator|==
name|RequirementStrategy
operator|.
name|noambiguity
condition|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"Ambiguity for the '"
operator|+
name|osgiType
operator|+
literal|"' requirement "
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|";version="
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MDResolvedResource
argument_list|>
argument_list|>
name|entry
range|:
name|matching
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"\t"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MDResolvedResource
name|c
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"\t\t"
operator|+
name|c
operator|.
name|getRevision
argument_list|()
operator|+
operator|(
name|found
operator|==
name|c
condition|?
literal|" (best match)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
name|Message
operator|.
name|info
argument_list|(
literal|"'"
operator|+
name|osgiType
operator|+
literal|"' requirement "
operator|+
name|mrid
operator|.
name|getName
argument_list|()
operator|+
literal|";version="
operator|+
name|mrid
operator|.
name|getRevision
argument_list|()
operator|+
literal|" satisfied by "
operator|+
operator|(
operator|(
name|MDResolvedResource
operator|)
name|found
operator|)
operator|.
name|getResolvedModuleRevision
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|";"
operator|+
name|found
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResolvedResource
name|findArtifactRef
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|URL
name|url
init|=
name|artifact
operator|.
name|getUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
comment|// not an artifact resolved by this resolver
return|return
literal|null
return|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"\tusing url for "
operator|+
name|artifact
operator|+
literal|": "
operator|+
name|url
argument_list|)
expr_stmt|;
name|logArtifactAttempt
argument_list|(
name|artifact
argument_list|,
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|resource
init|=
operator|new
name|URLResource
argument_list|(
name|url
argument_list|,
name|this
operator|.
name|getTimeoutConstraint
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ResolvedResource
argument_list|(
name|resource
argument_list|,
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|checkModuleDescriptorRevision
parameter_list|(
name|ModuleDescriptor
name|systemMd
parameter_list|,
name|ModuleRevisionId
name|systemMrid
parameter_list|)
block|{
name|String
name|osgiType
init|=
name|systemMrid
operator|.
name|getOrganisation
argument_list|()
decl_stmt|;
comment|// only check revision if we're searching for a bundle (package and bundle have different
comment|// version
if|if
condition|(
name|osgiType
operator|==
literal|null
operator|||
name|osgiType
operator|.
name|equals
argument_list|(
name|BundleInfo
operator|.
name|BUNDLE_TYPE
argument_list|)
condition|)
block|{
name|super
operator|.
name|checkModuleDescriptorRevision
argument_list|(
name|systemMd
argument_list|,
name|systemMrid
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|filterNames
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|getSettings
argument_list|()
operator|.
name|filterIgnore
argument_list|(
name|names
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|findNames
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokenValues
parameter_list|,
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
name|getRepoDescriptor
argument_list|()
operator|.
name|getCapabilities
argument_list|()
return|;
block|}
name|String
name|osgiType
init|=
name|tokenValues
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNullOrEmpty
argument_list|(
name|osgiType
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
name|getRepoDescriptor
argument_list|()
operator|.
name|getCapabilityValues
argument_list|(
name|osgiType
argument_list|)
return|;
block|}
if|if
condition|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|tokenValues
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ModuleDescriptorWrapper
argument_list|>
name|mds
init|=
name|getRepoDescriptor
argument_list|()
operator|.
name|findModules
argument_list|(
name|osgiType
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|mds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ModuleDescriptorWrapper
name|md
range|:
name|mds
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|md
operator|.
name|getBundleInfo
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|versions
return|;
block|}
if|if
condition|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|tokenValues
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
if|if
condition|(
name|osgiType
operator|.
name|equals
argument_list|(
name|BundleInfo
operator|.
name|PACKAGE_TYPE
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|BundleInfoAdapter
operator|.
name|CONF_USE_PREFIX
operator|+
name|name
argument_list|)
return|;
block|}
name|Collection
argument_list|<
name|ModuleDescriptor
argument_list|>
name|mds
init|=
name|ModuleDescriptorWrapper
operator|.
name|unwrap
argument_list|(
name|getRepoDescriptor
argument_list|()
operator|.
name|findModules
argument_list|(
name|osgiType
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mds
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|String
name|version
init|=
name|tokenValues
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|ModuleDescriptor
name|found
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ModuleDescriptor
name|md
range|:
name|mds
control|)
block|{
if|if
condition|(
name|md
operator|.
name|getRevision
argument_list|()
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|found
operator|=
name|md
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|found
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Populate capabilityValues with capability values for which at least one module match the      * expected revision      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|filterCapabilityValues
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|capabilityValues
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ModuleDescriptor
argument_list|>
argument_list|>
name|moduleByCapabilityValue
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokenValues
parameter_list|,
name|String
name|rev
parameter_list|)
block|{
if|if
condition|(
name|rev
operator|==
literal|null
condition|)
block|{
comment|// no revision, all match then
name|capabilityValues
operator|.
name|addAll
argument_list|(
name|moduleByCapabilityValue
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ModuleDescriptor
argument_list|>
argument_list|>
name|entry
range|:
name|moduleByCapabilityValue
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|moduleMatchRev
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ModuleDescriptor
name|md
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|moduleMatchRev
operator|=
name|rev
operator|.
name|equals
argument_list|(
name|md
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|moduleMatchRev
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|moduleMatchRev
condition|)
block|{
comment|// at least one module matched, the capability value is ok to add
name|capabilityValues
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|listTokenValues
parameter_list|(
name|String
index|[]
name|tokens
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|criteria
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tokenSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tokens
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|listTokenValues
init|=
name|listTokenValues
argument_list|(
name|tokenSet
argument_list|,
name|criteria
argument_list|)
decl_stmt|;
return|return
name|listTokenValues
operator|.
name|toArray
argument_list|(
operator|new
name|Map
index|[
name|listTokenValues
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|listTokenValues
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tokens
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|criteria
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stringCriteria
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|criteria
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|String
operator|)
condition|)
block|{
comment|// no support for matcher for now
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|stringCriteria
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no more tokens to resolve
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|stringCriteria
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|remainingTokens
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
name|remainingTokens
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|)
expr_stmt|;
name|String
name|osgiType
init|=
name|stringCriteria
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|osgiType
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|tokenValues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newCriteria
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|criteria
argument_list|)
decl_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|BundleInfo
operator|.
name|BUNDLE_TYPE
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|addAll
argument_list|(
name|listTokenValues
argument_list|(
name|remainingTokens
argument_list|,
name|newCriteria
argument_list|)
argument_list|)
expr_stmt|;
name|newCriteria
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|criteria
argument_list|)
expr_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|BundleInfo
operator|.
name|PACKAGE_TYPE
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|addAll
argument_list|(
name|listTokenValues
argument_list|(
name|remainingTokens
argument_list|,
name|newCriteria
argument_list|)
argument_list|)
expr_stmt|;
name|newCriteria
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|criteria
argument_list|)
expr_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|BundleInfo
operator|.
name|SERVICE_TYPE
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|addAll
argument_list|(
name|listTokenValues
argument_list|(
name|remainingTokens
argument_list|,
name|newCriteria
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tokenValues
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|ORGANISATION_KEY
argument_list|,
name|osgiType
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|capabilities
init|=
name|getRepoDescriptor
argument_list|()
operator|.
name|getCapabilityValues
argument_list|(
name|osgiType
argument_list|)
decl_stmt|;
if|if
condition|(
name|capabilities
operator|==
literal|null
operator|||
name|capabilities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|remainingTokens
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
expr_stmt|;
name|String
name|module
init|=
name|stringCriteria
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|tokenValues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|capabilities
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newCriteria
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|criteria
argument_list|)
decl_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|addAll
argument_list|(
name|listTokenValues
argument_list|(
name|remainingTokens
argument_list|,
name|newCriteria
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenValues
return|;
block|}
name|values
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|MODULE_KEY
argument_list|,
name|module
argument_list|)
expr_stmt|;
name|remainingTokens
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|)
expr_stmt|;
name|String
name|rev
init|=
name|stringCriteria
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|ModuleDescriptorWrapper
argument_list|>
name|mdws
init|=
name|getRepoDescriptor
argument_list|()
operator|.
name|findModules
argument_list|(
name|osgiType
argument_list|,
name|module
argument_list|)
decl_stmt|;
if|if
condition|(
name|mdws
operator|==
literal|null
operator|||
name|mdws
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|tokenValues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ModuleDescriptorWrapper
name|mdw
range|:
name|mdws
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newCriteria
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|criteria
argument_list|)
decl_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|,
name|mdw
operator|.
name|getBundleInfo
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|addAll
argument_list|(
name|listTokenValues
argument_list|(
name|remainingTokens
argument_list|,
name|newCriteria
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenValues
return|;
block|}
name|values
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|REVISION_KEY
argument_list|,
name|rev
argument_list|)
expr_stmt|;
name|remainingTokens
operator|.
name|remove
argument_list|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
argument_list|)
expr_stmt|;
name|String
name|conf
init|=
name|stringCriteria
operator|.
name|get
argument_list|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|osgiType
operator|.
name|equals
argument_list|(
name|BundleInfo
operator|.
name|PACKAGE_TYPE
argument_list|)
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
argument_list|,
name|BundleInfoAdapter
operator|.
name|CONF_USE_PREFIX
operator|+
name|module
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|values
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|ModuleDescriptorWrapper
argument_list|>
name|bundles
init|=
name|getRepoDescriptor
argument_list|()
operator|.
name|findModules
argument_list|(
name|osgiType
argument_list|,
name|module
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundles
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|Version
name|v
init|=
operator|new
name|Version
argument_list|(
name|rev
argument_list|)
decl_stmt|;
name|ModuleDescriptorWrapper
name|found
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ModuleDescriptorWrapper
name|bundle
range|:
name|bundles
control|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getBundleInfo
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|found
operator|=
name|bundle
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|tokenValues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|configurations
init|=
name|BundleInfoAdapter
operator|.
name|getConfigurations
argument_list|(
name|found
operator|.
name|getBundleInfo
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|configuration
range|:
name|configurations
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newCriteria
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|stringCriteria
argument_list|)
decl_stmt|;
name|newCriteria
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|tokenValues
operator|.
name|add
argument_list|(
name|newCriteria
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenValues
return|;
block|}
name|values
operator|.
name|put
argument_list|(
name|IvyPatternHelper
operator|.
name|CONF_KEY
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|values
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|get
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|File
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"\t"
operator|+
name|getName
argument_list|()
operator|+
literal|": downloading "
operator|+
name|resource
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tto "
operator|+
name|dest
argument_list|)
expr_stmt|;
if|if
condition|(
name|dest
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dest
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|getRepository
argument_list|()
operator|.
name|get
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
argument_list|,
name|dest
argument_list|)
expr_stmt|;
return|return
name|dest
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Resource
name|getResource
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRepository
argument_list|()
operator|.
name|getResource
argument_list|(
name|source
argument_list|)
return|;
block|}
specifier|public
name|void
name|publish
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|File
name|src
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

