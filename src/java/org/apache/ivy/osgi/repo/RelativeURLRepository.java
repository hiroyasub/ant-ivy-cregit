begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|url
operator|.
name|URLResource
import|;
end_import

begin_class
specifier|public
class|class
name|RelativeURLRepository
extends|extends
name|URLRepository
block|{
specifier|private
specifier|final
name|URL
name|baseUrl
decl_stmt|;
specifier|public
name|RelativeURLRepository
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|baseUrl
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|RelativeURLRepository
parameter_list|(
name|URL
name|baseUrl
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|baseUrl
operator|=
name|baseUrl
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resourcesCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Resource
name|getResource
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|IOException
block|{
name|source
operator|=
name|encode
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|Resource
name|res
init|=
name|resourcesCache
operator|.
name|get
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|URI
name|uri
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// very wierd URL, let's assume it is absolute
name|uri
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|uri
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|res
operator|=
operator|new
name|URLResource
argument_list|(
operator|new
name|URL
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
operator|new
name|URLResource
argument_list|(
operator|new
name|URL
argument_list|(
name|baseUrl
operator|+
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resourcesCache
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|source
parameter_list|)
block|{
comment|// TODO: add some more URL encodings here
return|return
name|source
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

