begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|p2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|ExecutionEnvironmentProfileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
operator|.
name|EditableRepoDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|repo
operator|.
name|ModuleDescriptorWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|P2Descriptor
extends|extends
name|EditableRepoDescriptor
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Version
argument_list|,
name|BundleInfo
argument_list|>
argument_list|>
name|sourceTargetBundles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Version
argument_list|,
name|BundleInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Version
argument_list|,
name|BundleInfo
argument_list|>
argument_list|>
name|sourceBundles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Version
argument_list|,
name|BundleInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|P2Descriptor
parameter_list|(
name|URI
name|repoUri
parameter_list|,
name|ExecutionEnvironmentProfileProvider
name|profileProvider
parameter_list|)
block|{
name|super
argument_list|(
name|repoUri
argument_list|,
name|profileProvider
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addBundle
parameter_list|(
name|BundleInfo
name|bundleInfo
parameter_list|)
block|{
if|if
condition|(
name|bundleInfo
operator|.
name|isSource
argument_list|()
condition|)
block|{
if|if
condition|(
name|bundleInfo
operator|.
name|getSymbolicNameTarget
argument_list|()
operator|==
literal|null
operator|||
name|bundleInfo
operator|.
name|getVersionTarget
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getLogLevel
argument_list|()
operator|<=
name|Message
operator|.
name|MSG_VERBOSE
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"The source bundle "
operator|+
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" did not declare its target. Ignoring it"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|Map
argument_list|<
name|Version
argument_list|,
name|BundleInfo
argument_list|>
name|byVersion
init|=
name|sourceBundles
operator|.
name|get
argument_list|(
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|byVersion
operator|==
literal|null
condition|)
block|{
name|byVersion
operator|=
operator|new
name|HashMap
argument_list|<
name|Version
argument_list|,
name|BundleInfo
argument_list|>
argument_list|()
expr_stmt|;
name|sourceBundles
operator|.
name|put
argument_list|(
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
argument_list|,
name|byVersion
argument_list|)
expr_stmt|;
block|}
name|byVersion
operator|.
name|put
argument_list|(
name|bundleInfo
operator|.
name|getVersion
argument_list|()
argument_list|,
name|bundleInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Version
argument_list|,
name|BundleInfo
argument_list|>
name|byTargetVersion
init|=
name|sourceTargetBundles
operator|.
name|get
argument_list|(
name|bundleInfo
operator|.
name|getSymbolicNameTarget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|byTargetVersion
operator|==
literal|null
condition|)
block|{
name|byTargetVersion
operator|=
operator|new
name|HashMap
argument_list|<
name|Version
argument_list|,
name|BundleInfo
argument_list|>
argument_list|()
expr_stmt|;
name|sourceTargetBundles
operator|.
name|put
argument_list|(
name|bundleInfo
operator|.
name|getSymbolicNameTarget
argument_list|()
argument_list|,
name|byTargetVersion
argument_list|)
expr_stmt|;
block|}
name|BundleInfo
name|old
init|=
name|byTargetVersion
operator|.
name|put
argument_list|(
name|bundleInfo
operator|.
name|getVersionTarget
argument_list|()
argument_list|,
name|bundleInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
operator|&&
operator|!
name|old
operator|.
name|equals
argument_list|(
name|bundleInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|getLogLevel
argument_list|()
operator|<=
name|Message
operator|.
name|MSG_VERBOSE
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"Duplicate source for the bundle "
operator|+
name|bundleInfo
operator|.
name|getSymbolicNameTarget
argument_list|()
operator|+
literal|"@"
operator|+
name|bundleInfo
operator|.
name|getVersionTarget
argument_list|()
operator|+
literal|" : "
operator|+
name|bundleInfo
operator|+
literal|" is replacing "
operator|+
name|old
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
name|super
operator|.
name|addBundle
argument_list|(
name|bundleInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|finish
parameter_list|()
block|{
name|sourceBundles
operator|=
literal|null
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|bundleIds
init|=
name|getCapabilityValues
argument_list|(
name|BundleInfo
operator|.
name|BUNDLE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleIds
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|bundleId
range|:
name|bundleIds
control|)
block|{
name|Set
argument_list|<
name|ModuleDescriptorWrapper
argument_list|>
name|modules
init|=
name|findModules
argument_list|(
name|BundleInfo
operator|.
name|BUNDLE_TYPE
argument_list|,
name|bundleId
argument_list|)
decl_stmt|;
for|for
control|(
name|ModuleDescriptorWrapper
name|mdw
range|:
name|modules
control|)
block|{
name|String
name|symbolicName
init|=
name|mdw
operator|.
name|getBundleInfo
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Version
argument_list|,
name|BundleInfo
argument_list|>
name|byVersion
init|=
name|sourceTargetBundles
operator|.
name|get
argument_list|(
name|symbolicName
argument_list|)
decl_stmt|;
if|if
condition|(
name|byVersion
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|BundleInfo
name|source
init|=
name|byVersion
operator|.
name|get
argument_list|(
name|mdw
operator|.
name|getBundleInfo
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|BundleArtifact
name|artifact
range|:
name|source
operator|.
name|getArtifacts
argument_list|()
control|)
block|{
name|mdw
operator|.
name|getBundleInfo
argument_list|()
operator|.
name|addArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sourceTargetBundles
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|addArtifactUrl
parameter_list|(
name|String
name|classifier
parameter_list|,
name|String
name|id
parameter_list|,
name|Version
name|version
parameter_list|,
name|URI
name|uri
parameter_list|,
name|String
name|format
parameter_list|)
block|{
if|if
condition|(
operator|!
name|classifier
operator|.
name|equals
argument_list|(
literal|"osgi.bundle"
argument_list|)
condition|)
block|{
comment|// we only support OSGi bundle, no Eclipse feature or anything else
return|return;
block|}
name|ModuleDescriptorWrapper
name|module
init|=
name|findModule
argument_list|(
name|id
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
name|addArtifact
argument_list|(
name|module
operator|.
name|getBundleInfo
argument_list|()
argument_list|,
operator|new
name|BundleArtifact
argument_list|(
literal|false
argument_list|,
name|uri
argument_list|,
name|format
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// not found in the regular bundle. Let's look up in the source ones
name|Map
argument_list|<
name|Version
argument_list|,
name|BundleInfo
argument_list|>
name|byVersion
init|=
name|sourceBundles
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|byVersion
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|BundleInfo
name|source
init|=
name|byVersion
operator|.
name|get
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|addArtifact
argument_list|(
name|source
argument_list|,
operator|new
name|BundleArtifact
argument_list|(
literal|true
argument_list|,
name|uri
argument_list|,
name|format
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addArtifact
parameter_list|(
name|BundleInfo
name|bundle
parameter_list|,
name|BundleArtifact
name|artifact
parameter_list|)
block|{
comment|// find an existing artifact that might be a duplicate
name|BundleArtifact
name|same
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BundleArtifact
name|a
range|:
name|bundle
operator|.
name|getArtifacts
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|isSource
argument_list|()
operator|==
name|artifact
operator|.
name|isSource
argument_list|()
condition|)
block|{
name|same
operator|=
name|a
expr_stmt|;
break|break;
block|}
block|}
name|BundleArtifact
name|best
init|=
name|artifact
decl_stmt|;
if|if
condition|(
name|same
operator|!=
literal|null
condition|)
block|{
comment|// we have two artifacts for the same bundle, let's choose a "packed" one
if|if
condition|(
name|artifact
operator|.
name|getFormat
argument_list|()
operator|==
literal|null
operator|||
name|same
operator|.
name|getFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// the new one cannot be better
return|return;
block|}
name|bundle
operator|.
name|removeArtifact
argument_list|(
name|same
argument_list|)
expr_stmt|;
block|}
name|bundle
operator|.
name|addArtifact
argument_list|(
name|best
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

