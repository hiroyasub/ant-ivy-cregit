begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|p2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|DelegatingHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_class
specifier|public
class|class
name|PropertiesParser
block|{
specifier|static
class|class
name|PropertiesHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTIES
init|=
literal|"properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"size"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
specifier|public
name|PropertiesHandler
parameter_list|(
name|String
modifier|...
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|PROPERTIES
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|propList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|addChild
argument_list|(
operator|new
name|PropertyHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|PropertyHandler
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|childHandled
parameter_list|(
name|PropertyHandler
name|child
parameter_list|)
block|{
if|if
condition|(
name|propList
operator|.
name|isEmpty
argument_list|()
operator|||
name|propList
operator|.
name|contains
argument_list|(
name|child
operator|.
name|name
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|child
operator|.
name|name
argument_list|,
name|child
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|PropertyHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY
init|=
literal|"property"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"value"
decl_stmt|;
name|String
name|name
decl_stmt|;
name|String
name|value
decl_stmt|;
specifier|public
name|PropertyHandler
parameter_list|()
block|{
name|super
argument_list|(
name|PROPERTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|name
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|value
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|VALUE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

