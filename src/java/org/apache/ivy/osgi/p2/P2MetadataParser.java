begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|p2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|ExportPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|ManifestParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|p2
operator|.
name|PropertiesParser
operator|.
name|PropertiesHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|DelegatingHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_class
specifier|public
class|class
name|P2MetadataParser
implements|implements
name|XMLInputParser
block|{
specifier|private
specifier|final
name|P2Descriptor
name|p2Descriptor
decl_stmt|;
specifier|private
name|int
name|logLevel
init|=
name|Message
operator|.
name|MSG_INFO
decl_stmt|;
specifier|public
name|P2MetadataParser
parameter_list|(
name|P2Descriptor
name|p2Descriptor
parameter_list|)
block|{
name|this
operator|.
name|p2Descriptor
operator|=
name|p2Descriptor
expr_stmt|;
block|}
specifier|public
name|void
name|setLogLevel
parameter_list|(
name|int
name|logLevel
parameter_list|)
block|{
name|this
operator|.
name|logLevel
operator|=
name|logLevel
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|RepositoryHandler
name|handler
init|=
operator|new
name|RepositoryHandler
argument_list|(
name|p2Descriptor
argument_list|)
decl_stmt|;
try|try
block|{
name|XMLHelper
operator|.
name|parse
argument_list|(
name|in
argument_list|,
literal|null
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
class|class
name|RepositoryHandler
extends|extends
name|DelegatingHandler
block|{
comment|// private static final String P2_TIMESTAMP = "p2.timestamp";
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY
init|=
literal|"repository"
decl_stmt|;
comment|// private static final String NAME = "name";
comment|//
comment|// private static final String TYPE = "type";
comment|//
comment|// private static final String VERSION = "version";
comment|//
comment|// private static final String DESCRIPTION = "description";
comment|//
comment|// private static final String PROVIDER = "provider";
specifier|public
name|RepositoryHandler
parameter_list|(
specifier|final
name|P2Descriptor
name|p2Descriptor
parameter_list|)
block|{
name|super
argument_list|(
name|REPOSITORY
argument_list|)
expr_stmt|;
comment|// addChild(new PropertiesHandler(P2_TIMESTAMP),
comment|// new ChildElementHandler<PropertiesHandler>() {
comment|// public void childHanlded(PropertiesHandler child) {
comment|// String timestamp = child.properties.get(P2_TIMESTAMP);
comment|// if (timestamp != null) {
comment|// p2Descriptor.setTimestamp(Long.parseLong(timestamp));
comment|// }
comment|// }
comment|// });
name|addChild
argument_list|(
operator|new
name|UnitsHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|UnitsHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|UnitsHandler
name|child
parameter_list|)
block|{
for|for
control|(
name|BundleInfo
name|bundle
range|:
name|child
operator|.
name|bundles
control|)
block|{
name|p2Descriptor
operator|.
name|addBundle
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|ReferencesHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|ReferencesHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|ReferencesHandler
name|child
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// protected void handleAttributes(Attributes atts) {
comment|// String name = atts.getValue(NAME);
comment|// String type = atts.getValue(TYPE);
comment|// String version = atts.getValue(VERSION);
comment|// String description = atts.getValue(DESCRIPTION);
comment|// String provider = atts.getValue(PROVIDER);
comment|// }
block|}
specifier|private
class|class
name|ReferencesHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REFERENCES
init|=
literal|"references"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"size"
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|repositoryUris
decl_stmt|;
specifier|public
name|ReferencesHandler
parameter_list|()
block|{
name|super
argument_list|(
name|REFERENCES
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|RepositoryReferenceHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|RepositoryReferenceHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|RepositoryReferenceHandler
name|child
parameter_list|)
block|{
name|repositoryUris
operator|.
name|add
argument_list|(
name|child
operator|.
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|repositoryUris
operator|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|RepositoryReferenceHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY
init|=
literal|"repository"
decl_stmt|;
comment|// private static final String TYPE = "type";
comment|//
comment|// private static final String OPTIONS = "options";
comment|//
comment|// private static final String NAME = "name";
specifier|private
specifier|static
specifier|final
name|String
name|URI
init|=
literal|"uri"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"url"
decl_stmt|;
specifier|public
name|RepositoryReferenceHandler
parameter_list|()
block|{
name|super
argument_list|(
name|REPOSITORY
argument_list|)
expr_stmt|;
block|}
comment|// int type;
comment|//
comment|// int options;
comment|//
comment|// String name;
name|URI
name|uri
decl_stmt|;
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// type = Integer.parseInt(atts.getValue(TYPE));
comment|// options = Integer.parseInt(atts.getValue(OPTIONS));
comment|// name = atts.getValue(NAME);
name|String
name|uriAtt
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|URI
argument_list|)
decl_stmt|;
name|String
name|urlAtt
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriAtt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|uriAtt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXParseException
argument_list|(
literal|"Invalid uri attribute "
operator|+
name|uriAtt
operator|+
literal|"("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|,
name|getLocator
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
name|urlAtt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|urlAtt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXParseException
argument_list|(
literal|"Invalid url attribute "
operator|+
name|urlAtt
operator|+
literal|"("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|,
name|getLocator
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|UnitsHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|UNITS
init|=
literal|"units"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"size"
decl_stmt|;
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|bundles
decl_stmt|;
specifier|public
name|UnitsHandler
parameter_list|()
block|{
name|super
argument_list|(
name|UNITS
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|UnitHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|UnitHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|UnitHandler
name|child
parameter_list|)
block|{
if|if
condition|(
name|child
operator|.
name|bundleInfo
operator|!=
literal|null
operator|&&
operator|!
name|child
operator|.
name|bundleInfo
operator|.
name|getCapabilities
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bundles
operator|.
name|add
argument_list|(
name|child
operator|.
name|bundleInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|bundles
operator|=
operator|new
name|ArrayList
argument_list|<
name|BundleInfo
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|UnitHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CATEGORY_PROPERTY
init|=
literal|"org.eclipse.equinox.p2.type.category"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UNIT
init|=
literal|"unit"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"version"
decl_stmt|;
comment|// private static final String SINGLETON = "singleton";
name|BundleInfo
name|bundleInfo
decl_stmt|;
specifier|public
name|UnitHandler
parameter_list|()
block|{
name|super
argument_list|(
name|UNIT
argument_list|)
expr_stmt|;
comment|// addChild(new UpdateHandler(), new ChildElementHandler() {
comment|// public void childHanlded(DelegetingHandler child) {
comment|// }
comment|// });
name|addChild
argument_list|(
operator|new
name|PropertiesHandler
argument_list|(
name|CATEGORY_PROPERTY
argument_list|)
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|PropertiesHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|PropertiesHandler
name|child
parameter_list|)
block|{
name|String
name|category
init|=
name|child
operator|.
name|properties
operator|.
name|get
argument_list|(
name|CATEGORY_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|category
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|valueOf
argument_list|(
name|category
argument_list|)
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
comment|// this is a category definition, this is useless, skip this unit
name|child
operator|.
name|getParent
argument_list|()
operator|.
name|skip
argument_list|()
expr_stmt|;
name|bundleInfo
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|ProvidesHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|ProvidesHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|ProvidesHandler
name|child
parameter_list|)
block|{
if|if
condition|(
literal|"source"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|eclipseType
argument_list|)
condition|)
block|{
comment|// this is some source of some bundle
name|bundleInfo
operator|.
name|setSource
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// we need to parse the manifest in the toupointData to figure out the
comment|// targeted bundle
comment|// in case we won't have the proper data in the manifest, prepare the source
comment|// data from the convention
name|String
name|symbolicName
init|=
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
decl_stmt|;
if|if
condition|(
name|symbolicName
operator|.
name|endsWith
argument_list|(
literal|".source"
argument_list|)
condition|)
block|{
name|bundleInfo
operator|.
name|setSymbolicNameTarget
argument_list|(
name|symbolicName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|symbolicName
operator|.
name|length
argument_list|()
operator|-
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|bundleInfo
operator|.
name|setVersionTarget
argument_list|(
name|bundleInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|BundleCapability
name|capability
range|:
name|child
operator|.
name|capabilities
control|)
block|{
name|bundleInfo
operator|.
name|addCapability
argument_list|(
name|capability
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|FilterHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|FilterHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|FilterHandler
name|child
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|RequiresHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|RequiresHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|RequiresHandler
name|child
parameter_list|)
block|{
for|for
control|(
name|BundleRequirement
name|requirement
range|:
name|child
operator|.
name|requirements
control|)
block|{
name|bundleInfo
operator|.
name|addRequirement
argument_list|(
name|requirement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|HostRequirementsHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|HostRequirementsHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|HostRequirementsHandler
name|child
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|MetaRequirementsHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|MetaRequirementsHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|MetaRequirementsHandler
name|child
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|ArtifactsHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|ArtifactsHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|ArtifactsHandler
name|child
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
comment|// addChild(new TouchpointHandler(), new ChildElementHandler() {
comment|// public void childHanlded(DelegetingHandler child) {
comment|// }
comment|// });
name|addChild
argument_list|(
operator|new
name|TouchpointDataHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|TouchpointDataHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|TouchpointDataHandler
name|child
parameter_list|)
throws|throws
name|SAXParseException
block|{
if|if
condition|(
name|child
operator|.
name|zipped
operator|!=
literal|null
condition|)
block|{
name|bundleInfo
operator|.
name|setHasInnerClasspath
argument_list|(
name|child
operator|.
name|zipped
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bundleInfo
operator|.
name|isSource
argument_list|()
condition|)
block|{
comment|// we only care about parsing the manifest if it is a source
return|return;
block|}
if|if
condition|(
name|child
operator|.
name|manifest
operator|!=
literal|null
condition|)
block|{
comment|// Eclipse may have serialized a little bit weirdly
name|String
name|manifest
init|=
name|ManifestParser
operator|.
name|formatLines
argument_list|(
name|child
operator|.
name|manifest
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|BundleInfo
name|embeddedInfo
decl_stmt|;
try|try
block|{
name|embeddedInfo
operator|=
name|ManifestParser
operator|.
name|parseManifest
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|logLevel
operator|>=
name|Message
operator|.
name|MSG_VERBOSE
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"The Manifest of the source bundle "
operator|+
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" could not be parsed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
if|if
condition|(
name|logLevel
operator|>=
name|Message
operator|.
name|MSG_VERBOSE
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"The Manifest of the source bundle "
operator|+
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" is ill formed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|embeddedInfo
operator|.
name|isSource
argument_list|()
condition|)
block|{
if|if
condition|(
name|logLevel
operator|>=
name|Message
operator|.
name|MSG_VERBOSE
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"The Manifest of the source bundle "
operator|+
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" is not declaring being a source."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|String
name|symbolicNameTarget
init|=
name|embeddedInfo
operator|.
name|getSymbolicNameTarget
argument_list|()
decl_stmt|;
if|if
condition|(
name|symbolicNameTarget
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|logLevel
operator|>=
name|Message
operator|.
name|MSG_VERBOSE
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"The Manifest of the source bundle "
operator|+
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" is not declaring a target symbolic name."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|Version
name|versionTarget
init|=
name|embeddedInfo
operator|.
name|getVersionTarget
argument_list|()
decl_stmt|;
if|if
condition|(
name|versionTarget
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|logLevel
operator|>=
name|Message
operator|.
name|MSG_VERBOSE
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"The Manifest of the source bundle "
operator|+
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" is not declaring a target version."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|bundleInfo
operator|.
name|setSymbolicNameTarget
argument_list|(
name|symbolicNameTarget
argument_list|)
expr_stmt|;
name|bundleInfo
operator|.
name|setVersionTarget
argument_list|(
name|versionTarget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// addChild(new LicensesHandler(), new ChildElementHandler() {
comment|// public void childHanlded(DelegetingHandler child) {
comment|// }
comment|// });
comment|// addChild(new CopyrightHandler(), new ChildElementHandler() {
comment|// public void childHanlded(DelegetingHandler child) {
comment|// }
comment|// });
comment|// addChild(new ChangesHandler(), new ChildElementHandler() {
comment|// public void childHanlded(DelegetingHandler child) {
comment|// }
comment|// });
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|id
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|ID
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|VERSION
argument_list|)
decl_stmt|;
comment|// Boolean singleton = Boolean.valueOf(atts.getValue(SINGLETON));
try|try
block|{
name|bundleInfo
operator|=
operator|new
name|BundleInfo
argument_list|(
name|id
argument_list|,
operator|new
name|Version
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Incorrect version on bundle '"
operator|+
name|id
operator|+
literal|"': "
operator|+
name|version
operator|+
literal|" ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// static class UpdateHandler extends DelegetingHandler {
comment|//
comment|// private static final String UPDATE = "update";
comment|//
comment|// private static final String ID = "id";
comment|//
comment|// private static final String RANGE = "range";
comment|//
comment|// private static final String SEVERITY = "severity";
comment|//
comment|// public UpdateHandler() {
comment|// super(UPDATE);
comment|// }
comment|//
comment|// protected void handleAttributes(Attributes atts) {
comment|// String id = atts.getValue(ID);
comment|// String range = atts.getValue(RANGE);
comment|// String severity = atts.getValue(SEVERITY);
comment|// }
comment|//
comment|// }
specifier|private
specifier|static
class|class
name|FilterHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FILTER
init|=
literal|"filter"
decl_stmt|;
specifier|public
name|FilterHandler
parameter_list|()
block|{
name|super
argument_list|(
name|FILTER
argument_list|)
expr_stmt|;
name|setBufferingChar
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|namespace2Type
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|.
name|equals
argument_list|(
literal|"java.package"
argument_list|)
condition|)
block|{
return|return
name|BundleInfo
operator|.
name|PACKAGE_TYPE
return|;
block|}
if|if
condition|(
name|namespace
operator|.
name|equals
argument_list|(
literal|"osgi.bundle"
argument_list|)
condition|)
block|{
return|return
name|BundleInfo
operator|.
name|BUNDLE_TYPE
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
class|class
name|ProvidesHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROVIDES
init|=
literal|"provides"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"size"
decl_stmt|;
name|List
argument_list|<
name|BundleCapability
argument_list|>
name|capabilities
decl_stmt|;
name|String
name|eclipseType
decl_stmt|;
specifier|public
name|ProvidesHandler
parameter_list|()
block|{
name|super
argument_list|(
name|PROVIDES
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|ProvidedHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|ProvidedHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|ProvidedHandler
name|child
parameter_list|)
block|{
if|if
condition|(
name|child
operator|.
name|namespace
operator|.
name|equals
argument_list|(
literal|"org.eclipse.equinox.p2.eclipse.type"
argument_list|)
condition|)
block|{
name|eclipseType
operator|=
name|child
operator|.
name|name
expr_stmt|;
block|}
else|else
block|{
name|String
name|type
init|=
name|namespace2Type
argument_list|(
name|child
operator|.
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|logLevel
operator|>=
name|Message
operator|.
name|MSG_DEBUG
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"Unsupported provided capability "
operator|+
name|child
operator|.
name|namespace
operator|+
literal|" "
operator|+
name|child
operator|.
name|name
operator|+
literal|" "
operator|+
name|child
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|BundleCapability
name|capability
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|BundleInfo
operator|.
name|PACKAGE_TYPE
condition|)
block|{
name|capability
operator|=
operator|new
name|ExportPackage
argument_list|(
name|child
operator|.
name|name
argument_list|,
name|child
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|capability
operator|=
operator|new
name|BundleCapability
argument_list|(
name|type
argument_list|,
name|child
operator|.
name|name
argument_list|,
name|child
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
name|capabilities
operator|.
name|add
argument_list|(
name|capability
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|capabilities
operator|=
operator|new
name|ArrayList
argument_list|<
name|BundleCapability
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ProvidedHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROVIDED
init|=
literal|"provided"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"namespace"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"version"
decl_stmt|;
name|String
name|namespace
decl_stmt|;
name|String
name|name
decl_stmt|;
name|Version
name|version
decl_stmt|;
specifier|public
name|ProvidedHandler
parameter_list|()
block|{
name|super
argument_list|(
name|PROVIDED
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|namespace
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|NAMESPACE
argument_list|)
expr_stmt|;
name|name
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
try|try
block|{
name|version
operator|=
operator|new
name|Version
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Incorrect version on provided capability: "
operator|+
name|version
operator|+
literal|" ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|abstract
class|class
name|AbstractRequirementHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"size"
decl_stmt|;
name|List
argument_list|<
name|BundleRequirement
argument_list|>
name|requirements
decl_stmt|;
specifier|public
name|AbstractRequirementHandler
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|RequiredHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|RequiredHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|RequiredHandler
name|child
parameter_list|)
block|{
name|String
name|name
init|=
name|child
operator|.
name|name
decl_stmt|;
name|VersionRange
name|range
init|=
name|child
operator|.
name|range
decl_stmt|;
name|String
name|type
init|=
name|namespace2Type
argument_list|(
name|child
operator|.
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|logLevel
operator|>=
name|Message
operator|.
name|MSG_DEBUG
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"Unsupported required capability "
operator|+
name|child
operator|.
name|namespace
operator|+
literal|" "
operator|+
name|name
operator|+
literal|" "
operator|+
name|range
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|resolution
init|=
name|child
operator|.
name|optional
condition|?
literal|"optional"
else|:
literal|null
decl_stmt|;
name|requirements
operator|.
name|add
argument_list|(
operator|new
name|BundleRequirement
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
name|range
argument_list|,
name|resolution
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|requirements
operator|=
operator|new
name|ArrayList
argument_list|<
name|BundleRequirement
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|RequiresHandler
extends|extends
name|AbstractRequirementHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REQUIRES
init|=
literal|"requires"
decl_stmt|;
specifier|public
name|RequiresHandler
parameter_list|()
block|{
name|super
argument_list|(
name|REQUIRES
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|RequiredHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REQUIRED
init|=
literal|"required"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"namespace"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RANGE
init|=
literal|"range"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTIONAL
init|=
literal|"optional"
decl_stmt|;
comment|// private static final String GREEDY = "greedy";
name|String
name|namespace
decl_stmt|;
name|String
name|name
decl_stmt|;
name|VersionRange
name|range
decl_stmt|;
comment|// String filter;
comment|//
comment|// boolean greedy;
name|boolean
name|optional
decl_stmt|;
specifier|public
name|RequiredHandler
parameter_list|()
block|{
name|super
argument_list|(
name|REQUIRED
argument_list|)
expr_stmt|;
comment|// addChild(new FilterHandler(), new ChildElementHandler<FilterHandler>() {
comment|// public void childHanlded(FilterHandler child) {
comment|// filter = child.getBufferedChars().trim();
comment|// }
comment|// });
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXParseException
block|{
name|namespace
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|NAMESPACE
argument_list|)
expr_stmt|;
name|name
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
try|try
block|{
name|range
operator|=
operator|new
name|VersionRange
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|RANGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// greedy = getOptionalBooleanAttribute(atts, GREEDY, Boolean.TRUE).booleanValue();
name|optional
operator|=
name|getOptionalBooleanAttribute
argument_list|(
name|atts
argument_list|,
name|OPTIONAL
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|HostRequirementsHandler
extends|extends
name|AbstractRequirementHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HOST_REQUIREMENTS
init|=
literal|"hostRequirements"
decl_stmt|;
specifier|public
name|HostRequirementsHandler
parameter_list|()
block|{
name|super
argument_list|(
name|HOST_REQUIREMENTS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|MetaRequirementsHandler
extends|extends
name|AbstractRequirementHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|META_REQUIREMENTS
init|=
literal|"metaRequirements"
decl_stmt|;
specifier|public
name|MetaRequirementsHandler
parameter_list|()
block|{
name|super
argument_list|(
name|META_REQUIREMENTS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ArtifactsHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ARTIFACTS
init|=
literal|"artifacts"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"size"
decl_stmt|;
name|List
argument_list|<
name|P2Artifact
argument_list|>
name|artifacts
decl_stmt|;
specifier|public
name|ArtifactsHandler
parameter_list|()
block|{
name|super
argument_list|(
name|ARTIFACTS
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|ArtifactHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|ArtifactHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|ArtifactHandler
name|child
parameter_list|)
block|{
name|artifacts
operator|.
name|add
argument_list|(
name|child
operator|.
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|artifacts
operator|=
operator|new
name|ArrayList
argument_list|<
name|P2Artifact
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ArtifactHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ARTIFACT
init|=
literal|"artifact"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"version"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASSIFIER
init|=
literal|"classifier"
decl_stmt|;
name|P2Artifact
name|artifact
decl_stmt|;
specifier|public
name|ArtifactHandler
parameter_list|()
block|{
name|super
argument_list|(
name|ARTIFACT
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|id
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|ID
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|VERSION
argument_list|)
decl_stmt|;
name|String
name|classifier
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|CLASSIFIER
argument_list|)
decl_stmt|;
try|try
block|{
name|artifact
operator|=
operator|new
name|P2Artifact
argument_list|(
name|id
argument_list|,
operator|new
name|Version
argument_list|(
name|version
argument_list|)
argument_list|,
name|classifier
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Incorrect version on artifact '"
operator|+
name|id
operator|+
literal|"': "
operator|+
name|version
operator|+
literal|" ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// private static class TouchpointHandler extends DelegetingHandler {
comment|//
comment|// private static final String TOUCHPOINT = "touchpoint";
comment|//
comment|// private static final String ID = "id";
comment|//
comment|// private static final String VERSION = "version";
comment|//
comment|// public TouchpointHandler() {
comment|// super(TOUCHPOINT);
comment|// }
comment|//
comment|// protected void handleAttributes(Attributes atts) {
comment|// String id = atts.getValue(ID);
comment|// String version = atts.getValue(VERSION);
comment|// }
comment|//
comment|// }
specifier|private
class|class
name|TouchpointDataHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TOUCHPOINTDATA
init|=
literal|"touchpointData"
decl_stmt|;
comment|// private static final String SIZE = "size";
name|String
name|manifest
decl_stmt|;
name|Boolean
name|zipped
decl_stmt|;
specifier|public
name|TouchpointDataHandler
parameter_list|()
block|{
name|super
argument_list|(
name|TOUCHPOINTDATA
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|InstructionsHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|InstructionsHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|InstructionsHandler
name|child
parameter_list|)
block|{
name|manifest
operator|=
name|child
operator|.
name|manifest
expr_stmt|;
name|zipped
operator|=
name|child
operator|.
name|zipped
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
comment|// String size = atts.getValue(SIZE);
block|}
block|}
specifier|private
class|class
name|InstructionsHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INSTRUCTIONS
init|=
literal|"instructions"
decl_stmt|;
comment|// private static final String SIZE = "size";
name|String
name|manifest
decl_stmt|;
name|Boolean
name|zipped
decl_stmt|;
specifier|public
name|InstructionsHandler
parameter_list|()
block|{
name|super
argument_list|(
name|INSTRUCTIONS
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|InstructionHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|InstructionHandler
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|childHanlded
parameter_list|(
name|InstructionHandler
name|child
parameter_list|)
block|{
name|manifest
operator|=
literal|null
expr_stmt|;
name|zipped
operator|=
literal|null
expr_stmt|;
name|String
name|buffer
init|=
name|child
operator|.
name|getBufferedChars
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"manifest"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|key
argument_list|)
condition|)
block|{
name|manifest
operator|=
name|buffer
expr_stmt|;
block|}
if|else if
condition|(
literal|"zipped"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|key
argument_list|)
operator|&&
name|buffer
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|zipped
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
comment|// String size = atts.getValue(SIZE);
block|}
block|}
specifier|private
class|class
name|InstructionHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INSTRUCTION
init|=
literal|"instruction"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"key"
decl_stmt|;
name|String
name|key
decl_stmt|;
specifier|public
name|InstructionHandler
parameter_list|()
block|{
name|super
argument_list|(
name|INSTRUCTION
argument_list|)
expr_stmt|;
name|setBufferingChar
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|key
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|KEY
argument_list|)
expr_stmt|;
block|}
block|}
comment|// private static class LicensesHandler extends DelegetingHandler {
comment|//
comment|// private static final String LICENSES = "licenses";
comment|//
comment|// private static final String SIZE = "size";
comment|//
comment|// public LicensesHandler() {
comment|// super(LICENSES);
comment|// addChild(new LicenseHandler(), new ChildElementHandler() {
comment|// public void childHanlded(DelegetingHandler child) {
comment|// }
comment|// });
comment|// }
comment|//
comment|// protected void handleAttributes(Attributes atts) {
comment|// String size = atts.getValue(SIZE);
comment|// }
comment|//
comment|// }
comment|// private static class LicenseHandler extends DelegetingHandler {
comment|//
comment|// private static final String LICENSE = "license";
comment|//
comment|// private static final String URI = "uri";
comment|//
comment|// private static final String URL = "url";
comment|//
comment|// public LicenseHandler() {
comment|// super(LICENSE);
comment|// setBufferingChar(true);
comment|// }
comment|//
comment|// protected void handleAttributes(Attributes atts) {
comment|// String uri = atts.getValue(URI);
comment|// String url = atts.getValue(URL);
comment|// }
comment|//
comment|// }
comment|// private static class CopyrightHandler extends DelegetingHandler {
comment|//
comment|// private static final String COPYRIGHT = "copyright";
comment|//
comment|// private static final String URI = "uri";
comment|//
comment|// private static final String URL = "url";
comment|//
comment|// public CopyrightHandler() {
comment|// super(COPYRIGHT);
comment|// }
comment|//
comment|// protected void handleAttributes(Attributes atts) {
comment|// String uri = atts.getValue(URI);
comment|// String url = atts.getValue(URL);
comment|// }
comment|//
comment|// }
comment|// private class ChangesHandler extends DelegetingHandler {
comment|//
comment|// private static final String CHANGES = "changes";
comment|//
comment|// private static final String SIZE = "size";
comment|//
comment|// public ChangesHandler() {
comment|// super(CHANGES);
comment|// addChild(new ChangeHandler(), new ChildElementHandler<ChangeHandler>() {
comment|// public void childHanlded(ChangeHandler child) {
comment|// }
comment|// });
comment|// }
comment|//
comment|// protected void handleAttributes(Attributes atts) {
comment|// int size = Integer.parseInt(atts.getValue(SIZE));
comment|// }
comment|// }
comment|// private class ChangeHandler extends DelegetingHandler {
comment|//
comment|// private static final String CHANGE = "change";
comment|//
comment|// public ChangeHandler() {
comment|// super(CHANGE);
comment|// }
comment|// }
comment|// private class FromHandler extends AbstractRequirementHandler {
comment|//
comment|// private static final String FROM = "from";
comment|//
comment|// public FromHandler() {
comment|// super(FROM);
comment|// }
comment|//
comment|// }
comment|// private class ToHandler extends AbstractRequirementHandler {
comment|//
comment|// private static final String TO = "to";
comment|//
comment|// public ToHandler() {
comment|// super(TO);
comment|// }
comment|//
comment|// }
comment|// private class PatchScopeHandler extends DelegetingHandler {
comment|//
comment|// private static final String PATCH_SCOPE = "patchScope";
comment|//
comment|// private static final String SIZE = "size";
comment|//
comment|// public PatchScopeHandler() {
comment|// super(PATCH_SCOPE);
comment|// addChild(new PatchScopeHandler(), new ChildElementHandler<PatchScopeHandler>() {
comment|// public void childHanlded(PatchScopeHandler child) {
comment|// }
comment|// });
comment|// }
comment|//
comment|// protected void handleAttributes(Attributes atts) {
comment|// int size = Integer.parseInt(atts.getValue(SIZE));
comment|// }
comment|// }
comment|// private class ScopeHandler extends DelegetingHandler {
comment|//
comment|// private static final String SCOPE = "scope";
comment|//
comment|// public ScopeHandler() {
comment|// super(SCOPE);
comment|// addChild(new RequiresHandler(), new ChildElementHandler<RequiresHandler>() {
comment|// public void childHanlded(RequiresHandler child) {
comment|// }
comment|// });
comment|// }
comment|// }
comment|// private class LifeCycleHandler extends AbstractRequirementHandler {
comment|//
comment|// private static final String LIFE_CYCLE = "lifeCycle";
comment|//
comment|// public LifeCycleHandler() {
comment|// super(LIFE_CYCLE);
comment|// }
comment|// }
block|}
end_class

end_unit

