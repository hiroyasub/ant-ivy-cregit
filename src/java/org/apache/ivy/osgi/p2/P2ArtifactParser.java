begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|p2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|filter
operator|.
name|OSGiFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|filter
operator|.
name|OSGiFilterParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|p2
operator|.
name|PropertiesParser
operator|.
name|PropertiesHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|DelegatingHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|XMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_class
specifier|public
class|class
name|P2ArtifactParser
implements|implements
name|XMLInputParser
block|{
specifier|private
specifier|final
name|P2Descriptor
name|p2Descriptor
decl_stmt|;
specifier|private
specifier|final
name|String
name|repoUrl
decl_stmt|;
specifier|public
name|P2ArtifactParser
parameter_list|(
name|P2Descriptor
name|p2Descriptor
parameter_list|,
name|String
name|repoUrl
parameter_list|)
block|{
name|this
operator|.
name|p2Descriptor
operator|=
name|p2Descriptor
expr_stmt|;
name|this
operator|.
name|repoUrl
operator|=
name|repoUrl
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
throws|,
name|SAXException
block|{
name|RepositoryHandler
name|handler
init|=
operator|new
name|RepositoryHandler
argument_list|(
name|p2Descriptor
argument_list|,
name|repoUrl
argument_list|)
decl_stmt|;
try|try
block|{
name|XMLHelper
operator|.
name|parse
argument_list|(
name|in
argument_list|,
literal|null
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RepositoryHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY
init|=
literal|"repository"
decl_stmt|;
comment|// private static final String NAME = "name";
comment|//
comment|// private static final String TYPE = "type";
comment|//
comment|// private static final String VERSION = "version";
specifier|private
name|Map
argument_list|<
name|OSGiFilter
argument_list|,
name|String
argument_list|>
name|artifactPatterns
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|RepositoryHandler
parameter_list|(
specifier|final
name|P2Descriptor
name|p2Descriptor
parameter_list|,
name|String
name|repoUrl
parameter_list|)
block|{
name|super
argument_list|(
name|REPOSITORY
argument_list|)
expr_stmt|;
comment|// addChild(new PropertiesHandler(), new ChildElementHandler<PropertiesHandler>() {
comment|// public void childHandled(PropertiesHandler child) {
comment|// }
comment|// });
name|addChild
argument_list|(
operator|new
name|MappingsHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|MappingsHandler
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|childHandled
parameter_list|(
name|MappingsHandler
name|child
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|child
operator|.
name|outputByFilter
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|OSGiFilter
name|filter
decl_stmt|;
try|try
block|{
name|filter
operator|=
name|OSGiFilterParser
operator|.
name|parse
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|artifactPatterns
operator|.
name|put
argument_list|(
name|filter
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|ArtifactsHandler
argument_list|(
name|p2Descriptor
argument_list|,
name|artifactPatterns
argument_list|,
name|repoUrl
argument_list|)
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|ArtifactsHandler
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|childHandled
parameter_list|(
name|ArtifactsHandler
name|child
parameter_list|)
block|{
comment|// nothing to do
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// protected void handleAttributes(Attributes atts) {
comment|// String name = atts.getValue(NAME);
comment|// String type = atts.getValue(TYPE);
comment|// String version = atts.getValue(VERSION);
comment|// }
block|}
specifier|private
specifier|static
class|class
name|MappingsHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MAPPINGS
init|=
literal|"mappings"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"size"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|outputByFilter
decl_stmt|;
specifier|public
name|MappingsHandler
parameter_list|()
block|{
name|super
argument_list|(
name|MAPPINGS
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|RuleHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|RuleHandler
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|childHandled
parameter_list|(
name|RuleHandler
name|child
parameter_list|)
block|{
name|outputByFilter
operator|.
name|put
argument_list|(
name|child
operator|.
name|filter
argument_list|,
name|child
operator|.
name|output
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|outputByFilter
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RuleHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|RULE
init|=
literal|"rule"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILTER
init|=
literal|"filter"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT
init|=
literal|"output"
decl_stmt|;
specifier|private
name|String
name|filter
decl_stmt|;
specifier|private
name|String
name|output
decl_stmt|;
specifier|public
name|RuleHandler
parameter_list|()
block|{
name|super
argument_list|(
name|RULE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|filter
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|FILTER
argument_list|)
expr_stmt|;
name|output
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|OUTPUT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ArtifactsHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ARTIFACTS
init|=
literal|"artifacts"
decl_stmt|;
comment|// private static final String SIZE = "size";
specifier|public
name|ArtifactsHandler
parameter_list|(
specifier|final
name|P2Descriptor
name|p2Descriptor
parameter_list|,
specifier|final
name|Map
argument_list|<
name|OSGiFilter
argument_list|,
name|String
argument_list|>
name|artifactPatterns
parameter_list|,
specifier|final
name|String
name|repoUrl
parameter_list|)
block|{
name|super
argument_list|(
name|ARTIFACTS
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|ArtifactHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|ArtifactHandler
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|childHandled
parameter_list|(
name|ArtifactHandler
name|child
parameter_list|)
throws|throws
name|SAXParseException
block|{
name|String
name|url
init|=
name|getPattern
argument_list|(
name|child
operator|.
name|p2Artifact
argument_list|,
name|child
operator|.
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|.
name|replaceAll
argument_list|(
literal|"\\$\\{repoUrl\\}"
argument_list|,
name|repoUrl
argument_list|)
expr_stmt|;
name|url
operator|=
name|url
operator|.
name|replaceAll
argument_list|(
literal|"\\$\\{id\\}"
argument_list|,
name|child
operator|.
name|p2Artifact
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
name|url
operator|.
name|replaceAll
argument_list|(
literal|"\\$\\{version\\}"
argument_list|,
name|child
operator|.
name|p2Artifact
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|uri
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXParseException
argument_list|(
literal|"Incorrect artifact url '"
operator|+
name|url
operator|+
literal|"' ("
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|,
name|getLocator
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|p2Descriptor
operator|.
name|addArtifactUrl
argument_list|(
name|child
operator|.
name|p2Artifact
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|child
operator|.
name|p2Artifact
operator|.
name|getId
argument_list|()
argument_list|,
name|child
operator|.
name|p2Artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|uri
argument_list|,
name|child
operator|.
name|properties
operator|.
name|get
argument_list|(
literal|"format"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getPattern
parameter_list|(
name|P2Artifact
name|p2Artifact
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"classifier"
argument_list|,
name|p2Artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|OSGiFilter
argument_list|,
name|String
argument_list|>
name|pattern
range|:
name|artifactPatterns
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|getKey
argument_list|()
operator|.
name|eval
argument_list|(
name|props
argument_list|)
condition|)
block|{
return|return
name|pattern
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// protected void handleAttributes(Attributes atts) {
comment|// int size = Integer.parseInt(atts.getValue(SIZE));
comment|// artifacts = new ArrayList(size);
comment|// }
block|}
specifier|private
specifier|static
class|class
name|ArtifactHandler
extends|extends
name|DelegatingHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ARTIFACT
init|=
literal|"artifact"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASSIFIER
init|=
literal|"classifier"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"version"
decl_stmt|;
specifier|private
name|P2Artifact
name|p2Artifact
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
specifier|public
name|ArtifactHandler
parameter_list|()
block|{
name|super
argument_list|(
name|ARTIFACT
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
operator|new
name|PropertiesHandler
argument_list|()
argument_list|,
operator|new
name|ChildElementHandler
argument_list|<
name|PropertiesHandler
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|childHandled
parameter_list|(
name|PropertiesHandler
name|child
parameter_list|)
block|{
name|properties
operator|=
name|child
operator|.
name|properties
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|id
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|ID
argument_list|)
decl_stmt|;
name|Version
name|version
init|=
operator|new
name|Version
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|VERSION
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|classifier
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|CLASSIFIER
argument_list|)
decl_stmt|;
name|p2Artifact
operator|=
operator|new
name|P2Artifact
argument_list|(
name|id
argument_list|,
name|version
argument_list|,
name|classifier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

