begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|obr
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|obr
operator|.
name|xml
operator|.
name|RequirementFilter
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|MultiOperatorFilter
extends|extends
name|RequirementFilter
block|{
specifier|private
name|List
argument_list|<
name|RequirementFilter
argument_list|>
name|subFilters
init|=
operator|new
name|ArrayList
argument_list|<
name|RequirementFilter
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MultiOperatorFilter
parameter_list|()
block|{
comment|// default constructor
block|}
specifier|public
name|MultiOperatorFilter
parameter_list|(
name|RequirementFilter
index|[]
name|filters
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|RequirementFilter
name|filter
init|=
name|filters
index|[
name|i
index|]
decl_stmt|;
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
specifier|abstract
specifier|protected
name|char
name|operator
parameter_list|()
function_decl|;
specifier|public
name|void
name|append
parameter_list|(
name|StringBuffer
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|operator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RequirementFilter
name|filter
range|:
name|subFilters
control|)
block|{
name|filter
operator|.
name|append
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|RequirementFilter
name|subFilter2
parameter_list|)
block|{
name|subFilters
operator|.
name|add
argument_list|(
name|subFilter2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RequirementFilter
argument_list|>
name|getSubFilters
parameter_list|()
block|{
return|return
name|subFilters
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
for|for
control|(
name|RequirementFilter
name|subFilter
range|:
name|subFilters
control|)
block|{
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|subFilter
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|subFilter
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|MultiOperatorFilter
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|MultiOperatorFilter
name|other
init|=
operator|(
name|MultiOperatorFilter
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|subFilters
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|subFilters
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
name|other
operator|.
name|subFilters
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|subFilters
operator|.
name|size
argument_list|()
operator|!=
name|other
operator|.
name|subFilters
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
operator|!
name|subFilters
operator|.
name|containsAll
argument_list|(
name|other
operator|.
name|subFilters
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

