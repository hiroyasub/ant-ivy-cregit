begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|obr
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|filter
operator|.
name|AndFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|filter
operator|.
name|CompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|filter
operator|.
name|NotFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|filter
operator|.
name|OSGiFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|VersionRange
import|;
end_import

begin_class
specifier|public
class|class
name|RequirementAdapter
block|{
specifier|private
name|Version
name|startVersion
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|startExclusive
init|=
literal|false
decl_stmt|;
specifier|private
name|Version
name|endVersion
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|endExclusive
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|type
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|void
name|adapt
parameter_list|(
name|BundleInfo
name|info
parameter_list|,
name|Requirement
name|requirement
parameter_list|)
throws|throws
name|UnsupportedFilterException
throws|,
name|ParseException
block|{
name|RequirementAdapter
name|adapter
init|=
operator|new
name|RequirementAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|extractFilter
argument_list|(
name|requirement
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|adapt
argument_list|(
name|info
argument_list|,
name|requirement
operator|.
name|isOptional
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractFilter
parameter_list|(
name|OSGiFilter
name|filter
parameter_list|)
throws|throws
name|UnsupportedFilterException
block|{
if|if
condition|(
name|filter
operator|instanceof
name|AndFilter
condition|)
block|{
name|AndFilter
name|andFilter
init|=
operator|(
name|AndFilter
operator|)
name|filter
decl_stmt|;
for|for
control|(
name|OSGiFilter
name|subFilter
range|:
name|andFilter
operator|.
name|getSubFilters
argument_list|()
control|)
block|{
name|extractFilter
argument_list|(
name|subFilter
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|filter
operator|instanceof
name|CompareFilter
condition|)
block|{
name|CompareFilter
name|compareFilter
init|=
operator|(
operator|(
name|CompareFilter
operator|)
name|filter
operator|)
decl_stmt|;
name|parseCompareFilter
argument_list|(
name|compareFilter
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|filter
operator|instanceof
name|NotFilter
condition|)
block|{
name|NotFilter
name|notFilter
init|=
operator|(
operator|(
name|NotFilter
operator|)
name|filter
operator|)
decl_stmt|;
if|if
condition|(
name|notFilter
operator|.
name|getSubFilter
argument_list|()
operator|instanceof
name|CompareFilter
condition|)
block|{
name|CompareFilter
name|compareFilter
init|=
operator|(
operator|(
name|CompareFilter
operator|)
name|notFilter
operator|.
name|getSubFilter
argument_list|()
operator|)
decl_stmt|;
name|parseCompareFilter
argument_list|(
name|compareFilter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedFilterException
argument_list|(
literal|"Unsupported filter: "
operator|+
name|filter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|adapt
parameter_list|(
name|BundleInfo
name|info
parameter_list|,
name|boolean
name|optional
parameter_list|)
throws|throws
name|ParseException
block|{
name|VersionRange
name|range
init|=
name|getVersionRange
argument_list|()
decl_stmt|;
name|String
name|resolution
init|=
name|optional
condition|?
literal|"optional"
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"No requirement actually specified"
argument_list|,
literal|0
argument_list|)
throw|;
block|}
name|BundleRequirement
name|requirement
init|=
operator|new
name|BundleRequirement
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
name|range
argument_list|,
name|resolution
argument_list|)
decl_stmt|;
name|info
operator|.
name|addRequirement
argument_list|(
name|requirement
argument_list|)
expr_stmt|;
if|if
condition|(
name|BundleInfo
operator|.
name|EXECUTION_ENVIRONMENT_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|info
operator|.
name|addExecutionEnvironment
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|VersionRange
name|getVersionRange
parameter_list|()
block|{
name|VersionRange
name|range
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|startVersion
operator|!=
literal|null
operator|||
name|endVersion
operator|!=
literal|null
condition|)
block|{
name|range
operator|=
operator|new
name|VersionRange
argument_list|(
name|startExclusive
argument_list|,
name|startVersion
argument_list|,
name|endExclusive
argument_list|,
name|endVersion
argument_list|)
expr_stmt|;
block|}
return|return
name|range
return|;
block|}
specifier|private
name|void
name|parseCompareFilter
parameter_list|(
name|CompareFilter
name|compareFilter
parameter_list|,
name|boolean
name|not
parameter_list|)
throws|throws
name|UnsupportedFilterException
block|{
name|String
name|att
init|=
name|compareFilter
operator|.
name|getLeftValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"symbolicname"
operator|.
name|equals
argument_list|(
name|att
argument_list|)
condition|)
block|{
name|att
operator|=
name|BundleInfo
operator|.
name|BUNDLE_TYPE
expr_stmt|;
block|}
switch|switch
condition|(
name|att
condition|)
block|{
case|case
name|BundleInfo
operator|.
name|BUNDLE_TYPE
case|:
case|case
name|BundleInfo
operator|.
name|EXECUTION_ENVIRONMENT_TYPE
case|:
case|case
name|BundleInfo
operator|.
name|PACKAGE_TYPE
case|:
case|case
name|BundleInfo
operator|.
name|SERVICE_TYPE
case|:
if|if
condition|(
name|not
condition|)
block|{
throw|throw
operator|new
name|UnsupportedFilterException
argument_list|(
literal|"Not filter on requirement comparison is not supported"
argument_list|)
throw|;
block|}
if|if
condition|(
name|compareFilter
operator|.
name|getOperator
argument_list|()
operator|!=
name|Operator
operator|.
name|EQUALS
condition|)
block|{
throw|throw
operator|new
name|UnsupportedFilterException
argument_list|(
literal|"Filtering is only supported with the operator '='"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedFilterException
argument_list|(
literal|"Multiple requirement type are not supported"
argument_list|)
throw|;
block|}
name|type
operator|=
name|att
expr_stmt|;
name|name
operator|=
name|compareFilter
operator|.
name|getRightValue
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"version"
case|:
name|Version
name|version
init|=
operator|new
name|Version
argument_list|(
name|compareFilter
operator|.
name|getRightValue
argument_list|()
argument_list|)
decl_stmt|;
name|Operator
name|operator
init|=
name|compareFilter
operator|.
name|getOperator
argument_list|()
decl_stmt|;
if|if
condition|(
name|not
condition|)
block|{
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|EQUALS
case|:
throw|throw
operator|new
name|UnsupportedFilterException
argument_list|(
literal|"Not filter on equals comparison is not supported"
argument_list|)
throw|;
case|case
name|GREATER_OR_EQUAL
case|:
name|operator
operator|=
name|Operator
operator|.
name|LOWER_THAN
expr_stmt|;
break|break;
case|case
name|GREATER_THAN
case|:
name|operator
operator|=
name|Operator
operator|.
name|LOWER_OR_EQUAL
expr_stmt|;
break|break;
case|case
name|LOWER_OR_EQUAL
case|:
name|operator
operator|=
name|Operator
operator|.
name|GREATER_THAN
expr_stmt|;
break|break;
case|case
name|LOWER_THAN
case|:
name|operator
operator|=
name|Operator
operator|.
name|GREATER_OR_EQUAL
expr_stmt|;
break|break;
block|}
block|}
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|EQUALS
case|:
if|if
condition|(
name|startVersion
operator|!=
literal|null
operator|||
name|endVersion
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedFilterException
argument_list|(
literal|"Multiple version matching is not supported"
argument_list|)
throw|;
block|}
name|startVersion
operator|=
name|version
expr_stmt|;
name|startExclusive
operator|=
literal|false
expr_stmt|;
name|endVersion
operator|=
name|version
expr_stmt|;
name|endExclusive
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|GREATER_OR_EQUAL
case|:
if|if
condition|(
name|startVersion
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedFilterException
argument_list|(
literal|"Multiple version matching is not supported"
argument_list|)
throw|;
block|}
name|startVersion
operator|=
name|version
expr_stmt|;
name|startExclusive
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|GREATER_THAN
case|:
if|if
condition|(
name|startVersion
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedFilterException
argument_list|(
literal|"Multiple version matching is not supported"
argument_list|)
throw|;
block|}
name|startVersion
operator|=
name|version
expr_stmt|;
name|startExclusive
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|LOWER_OR_EQUAL
case|:
if|if
condition|(
name|endVersion
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedFilterException
argument_list|(
literal|"Multiple version matching is not supported"
argument_list|)
throw|;
block|}
name|endVersion
operator|=
name|version
expr_stmt|;
name|endExclusive
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|LOWER_THAN
case|:
if|if
condition|(
name|endVersion
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedFilterException
argument_list|(
literal|"Multiple version matching is not supported"
argument_list|)
throw|;
block|}
name|endVersion
operator|=
name|version
expr_stmt|;
name|endExclusive
operator|=
literal|true
expr_stmt|;
break|break;
block|}
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedFilterException
argument_list|(
literal|"Unsupported attribute: "
operator|+
name|att
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

