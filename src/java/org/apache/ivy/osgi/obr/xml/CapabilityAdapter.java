begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|obr
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|ExportPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|CapabilityAdapter
block|{
specifier|public
specifier|static
name|void
name|adapt
parameter_list|(
name|BundleInfo
name|bundleInfo
parameter_list|,
name|Capability
name|capability
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|name
init|=
name|capability
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|BundleInfo
operator|.
name|PACKAGE_TYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|ExportPackage
name|exportPackage
init|=
name|getExportPackage
argument_list|(
name|bundleInfo
argument_list|,
name|capability
argument_list|)
decl_stmt|;
name|bundleInfo
operator|.
name|addCapability
argument_list|(
name|exportPackage
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|BundleInfo
operator|.
name|BUNDLE_TYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// nothing to do, already handled at the resource tag level
block|}
if|else if
condition|(
name|BundleInfo
operator|.
name|SERVICE_TYPE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|BundleCapability
name|service
init|=
name|getOSGiService
argument_list|(
name|bundleInfo
argument_list|,
name|capability
argument_list|)
decl_stmt|;
name|bundleInfo
operator|.
name|addCapability
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"Unsupported capability '"
operator|+
name|name
operator|+
literal|"' on the bundle '"
operator|+
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ExportPackage
name|getExportPackage
parameter_list|(
name|BundleInfo
name|bundleInfo
parameter_list|,
name|Capability
name|capability
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|pkgName
init|=
literal|null
decl_stmt|;
name|Version
name|version
init|=
literal|null
decl_stmt|;
name|String
name|uses
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CapabilityProperty
name|property
range|:
name|capability
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|propName
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"package"
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|pkgName
operator|=
name|property
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"version"
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|version
operator|=
operator|new
name|Version
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"uses"
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|uses
operator|=
name|property
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"Unsupported property '"
operator|+
name|propName
operator|+
literal|"' on the 'package' capability of the bundle '"
operator|+
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pkgName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"No package name for the capability"
argument_list|,
literal|0
argument_list|)
throw|;
block|}
name|ExportPackage
name|exportPackage
init|=
operator|new
name|ExportPackage
argument_list|(
name|pkgName
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|uses
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|split
init|=
name|uses
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|split
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|u
init|=
name|split
index|[
name|i
index|]
decl_stmt|;
name|exportPackage
operator|.
name|addUse
argument_list|(
name|u
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exportPackage
return|;
block|}
specifier|private
specifier|static
name|BundleCapability
name|getOSGiService
parameter_list|(
name|BundleInfo
name|bundleInfo
parameter_list|,
name|Capability
name|capability
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
name|Version
name|version
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CapabilityProperty
name|property
range|:
name|capability
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|propName
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"service"
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|name
operator|=
name|property
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"version"
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|version
operator|=
operator|new
name|Version
argument_list|(
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|warn
argument_list|(
literal|"Unsupported property '"
operator|+
name|propName
operator|+
literal|"' on the 'package' capability of the bundle '"
operator|+
name|bundleInfo
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"No service name for the capability"
argument_list|,
literal|0
argument_list|)
throw|;
block|}
name|BundleCapability
name|service
init|=
operator|new
name|BundleCapability
argument_list|(
name|BundleInfo
operator|.
name|SERVICE_TYPE
argument_list|,
name|name
argument_list|,
name|version
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
block|}
end_class

end_unit

