begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|ivy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultDependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|ExportPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|ManifestParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|ivy
operator|.
name|internal
operator|.
name|PackageRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|NameUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|NameUtil
operator|.
name|OrgAndName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|AbstractModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ParserSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|FileResource
import|;
end_import

begin_comment
comment|/**  * An parser for OSGi Manifest descriptor.  *   * @author jerome@benois.fr  * @author alex@radeski.net  */
end_comment

begin_class
specifier|public
class|class
name|OsgiManifestParser
extends|extends
name|AbstractModuleDescriptorParser
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PACKAGE
init|=
literal|".package"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Pattern
name|PATH_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*/)?([\\w\\.]+)[\\-_](\\d\\.\\d\\.\\d)[\\.]?([\\w]+)?"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|OsgiManifestParser
name|INSTANCE
init|=
operator|new
name|OsgiManifestParser
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|OsgiManifestParser
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
if|if
condition|(
name|res
operator|==
literal|null
operator|||
name|res
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|res
operator|.
name|getName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|res
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"META-INF/MANIFEST.MF"
argument_list|)
operator|||
name|res
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".JAR"
argument_list|)
operator|||
name|res
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".PKGREF"
argument_list|)
return|;
block|}
specifier|public
name|ModuleDescriptor
name|parseDescriptor
parameter_list|(
name|ParserSettings
name|ivySettings
parameter_list|,
name|URL
name|descriptorURL
parameter_list|,
name|Resource
name|res
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tparse descriptor: resource="
operator|+
name|res
argument_list|)
expr_stmt|;
specifier|final
name|InternalParser
name|parser
init|=
operator|new
name|InternalParser
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|res
argument_list|,
name|ivySettings
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|getModuleDescriptor
argument_list|()
return|;
block|}
specifier|public
name|ModuleDescriptor
name|parseExports
parameter_list|(
name|Resource
name|res
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tparse descriptor: resource="
operator|+
name|res
argument_list|)
expr_stmt|;
specifier|final
name|InternalParser
name|parser
init|=
operator|new
name|InternalParser
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|res
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|parser
operator|.
name|getModuleDescriptor
argument_list|()
return|;
block|}
specifier|public
name|void
name|toIvyFile
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Resource
name|res
parameter_list|,
name|File
name|destFile
parameter_list|,
name|ModuleDescriptor
name|md
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
try|try
block|{
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|md
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|InternalParser
extends|extends
name|AbstractParser
block|{
specifier|protected
name|InternalParser
parameter_list|(
name|ModuleDescriptorParser
name|parser
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|Resource
name|res
parameter_list|,
name|ParserSettings
name|ivySettings
parameter_list|)
throws|throws
name|IOException
block|{
name|parse
argument_list|(
name|res
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|Resource
name|res
parameter_list|,
name|boolean
name|useExports
parameter_list|)
throws|throws
name|IOException
block|{
name|Manifest
name|manifest
decl_stmt|;
if|if
condition|(
operator|(
name|res
operator|instanceof
name|FileResource
operator|)
operator|&&
operator|(
operator|(
name|FileResource
operator|)
name|res
operator|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|manifest
operator|=
operator|new
name|Manifest
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|res
operator|.
name|getName
argument_list|()
operator|+
literal|"/META-INF/MANIFEST.MF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|res
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".JAR"
argument_list|)
condition|)
block|{
name|manifest
operator|=
operator|new
name|JarInputStream
argument_list|(
name|res
operator|.
name|openStream
argument_list|()
argument_list|)
operator|.
name|getManifest
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|manifest
operator|=
operator|new
name|Manifest
argument_list|(
name|res
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|manifest
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|BundleInfo
name|info
decl_stmt|;
try|try
block|{
name|info
operator|=
name|ManifestParser
operator|.
name|parseManifest
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
name|setResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|// Set Info
name|OrgAndName
name|orgAndName
init|=
name|NameUtil
operator|.
name|instance
argument_list|()
operator|.
name|asOrgAndName
argument_list|(
name|info
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|orgAndName
operator|.
name|org
argument_list|,
name|orgAndName
operator|.
name|name
argument_list|,
name|info
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|getMd
argument_list|()
operator|.
name|setDescription
argument_list|(
name|info
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|setResolvedPublicationDate
argument_list|(
operator|new
name|Date
argument_list|(
name|res
operator|.
name|getLastModified
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|setModuleRevisionId
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"optional"
argument_list|)
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|setStatus
argument_list|(
literal|"release"
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addArtifact
argument_list|(
literal|"default"
argument_list|,
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
name|getDefaultPubDate
argument_list|()
argument_list|,
name|info
operator|.
name|getSymbolicName
argument_list|()
argument_list|,
literal|"jar"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
expr_stmt|;
name|getMd
argument_list|()
operator|.
name|addArtifact
argument_list|(
literal|"source"
argument_list|,
operator|new
name|DefaultArtifact
argument_list|(
name|mrid
argument_list|,
name|getDefaultPubDate
argument_list|()
argument_list|,
name|info
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|".source"
argument_list|,
literal|"src"
argument_list|,
literal|"jar"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useExports
condition|)
block|{
name|addExports
argument_list|(
name|getMd
argument_list|()
argument_list|,
name|info
operator|.
name|getExports
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
comment|/*<ModuleRevisionId> */
name|processedDeps
init|=
operator|new
name|HashSet
comment|/*<ModuleRevisionId> */
argument_list|()
decl_stmt|;
name|processedDeps
operator|.
name|add
argument_list|(
name|mrid
argument_list|)
expr_stmt|;
name|addRequiredBundles
argument_list|(
name|getMd
argument_list|()
argument_list|,
name|info
operator|.
name|getRequires
argument_list|()
argument_list|,
name|processedDeps
argument_list|)
expr_stmt|;
name|addImports
argument_list|(
name|getMd
argument_list|()
argument_list|,
name|info
operator|.
name|getImports
argument_list|()
argument_list|,
name|processedDeps
argument_list|)
expr_stmt|;
block|}
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tparse: bundle info: "
operator|+
name|info
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addExports
parameter_list|(
name|DefaultModuleDescriptor
name|parent
parameter_list|,
name|Set
comment|/*<ExportPackage> */
name|bundleDependencies
parameter_list|)
block|{
name|Iterator
name|itDeps
init|=
name|bundleDependencies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itDeps
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExportPackage
name|dep
init|=
operator|(
name|ExportPackage
operator|)
name|itDeps
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|dep
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rev
operator|=
name|dep
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|final
name|ModuleRevisionId
name|depMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|PACKAGE
argument_list|,
name|dep
operator|.
name|getName
argument_list|()
argument_list|,
name|rev
argument_list|)
decl_stmt|;
specifier|final
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|parent
argument_list|,
name|depMrid
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"default"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addRequiredBundles
parameter_list|(
name|DefaultModuleDescriptor
name|parent
parameter_list|,
name|Set
comment|/*<BundleRequirement> */
name|bundleDependencies
parameter_list|,
name|Set
comment|/*<ModuleRevisionId> */
name|processedDeps
parameter_list|)
block|{
name|Iterator
name|itDeps
init|=
name|bundleDependencies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itDeps
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BundleRequirement
name|dep
init|=
operator|(
name|BundleRequirement
operator|)
name|itDeps
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|rev
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|dep
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rev
operator|=
name|dep
operator|.
name|getVersion
argument_list|()
operator|.
name|toIvyRevision
argument_list|()
expr_stmt|;
block|}
name|OrgAndName
name|orgAndName
init|=
name|NameUtil
operator|.
name|instance
argument_list|()
operator|.
name|asOrgAndName
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ModuleRevisionId
name|depMrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|orgAndName
operator|.
name|org
argument_list|,
name|orgAndName
operator|.
name|name
argument_list|,
name|rev
argument_list|)
decl_stmt|;
if|if
condition|(
name|processedDeps
operator|.
name|contains
argument_list|(
name|depMrid
argument_list|)
condition|)
block|{
return|return;
block|}
name|processedDeps
operator|.
name|add
argument_list|(
name|depMrid
argument_list|)
expr_stmt|;
specifier|final
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|parent
argument_list|,
name|depMrid
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|.
name|getResolution
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"default"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|dep
operator|.
name|getResolution
argument_list|()
argument_list|,
name|dep
operator|.
name|getResolution
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addImports
parameter_list|(
name|DefaultModuleDescriptor
name|parent
parameter_list|,
name|Set
comment|/*<BundleRequirement> */
name|bundleDependencies
parameter_list|,
name|Set
comment|/*<ModuleRevisionId> */
name|processedDeps
parameter_list|)
block|{
name|Iterator
name|itDeps
init|=
name|bundleDependencies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itDeps
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BundleRequirement
name|dep
init|=
operator|(
name|BundleRequirement
operator|)
name|itDeps
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|ModuleRevisionId
name|pkgMrid
init|=
name|PackageRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|processImports
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|,
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|processedDeps
operator|.
name|contains
argument_list|(
name|pkgMrid
argument_list|)
condition|)
block|{
return|return;
block|}
name|processedDeps
operator|.
name|add
argument_list|(
name|pkgMrid
argument_list|)
expr_stmt|;
if|if
condition|(
name|pkgMrid
operator|!=
literal|null
condition|)
block|{
specifier|final
name|DefaultDependencyDescriptor
name|dd
init|=
operator|new
name|DefaultDependencyDescriptor
argument_list|(
name|parent
argument_list|,
name|pkgMrid
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|.
name|getResolution
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
literal|"default"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dd
operator|.
name|addDependencyConfiguration
argument_list|(
name|dep
operator|.
name|getResolution
argument_list|()
argument_list|,
name|dep
operator|.
name|getResolution
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"Failed to resolve imported package: "
operator|+
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

