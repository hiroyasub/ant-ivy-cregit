begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|ivy
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|ivy
operator|.
name|internal
operator|.
name|FilePackageScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|ivy
operator|.
name|internal
operator|.
name|JarEntryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|ivy
operator|.
name|internal
operator|.
name|JarFileRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
operator|.
name|ZipUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|file
operator|.
name|FileRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|repository
operator|.
name|file
operator|.
name|FileResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|FileSystemResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|resolver
operator|.
name|util
operator|.
name|ResolvedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * An OSGi file system resolver.  *   * @author alex@radeski.net  */
end_comment

begin_class
specifier|public
class|class
name|OsgiFileResolver
extends|extends
name|FileSystemResolver
block|{
specifier|private
specifier|final
name|FilePackageScanner
name|packageScanner
init|=
operator|new
name|FilePackageScanner
argument_list|()
decl_stmt|;
specifier|public
name|OsgiFileResolver
parameter_list|()
block|{
name|setRepository
argument_list|(
operator|new
name|JarFileRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ResolvedResource
name|findArtifactRef
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"\tfind artifact ref: artifact=%s, date=%s"
argument_list|,
name|artifact
argument_list|,
name|date
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ModuleRevisionId
name|newMrid
init|=
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
name|ResolvedResource
name|resolvedResource
init|=
name|findResourceUsingPatterns
argument_list|(
name|newMrid
argument_list|,
name|getArtifactPatterns
argument_list|()
argument_list|,
name|artifact
argument_list|,
name|getDefaultRMDParser
argument_list|(
name|artifact
operator|.
name|getModuleRevisionId
argument_list|()
operator|.
name|getModuleId
argument_list|()
argument_list|)
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"\t\tfind artifact ref: mrid=%s, resource=%s"
argument_list|,
name|newMrid
argument_list|,
name|resolvedResource
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolvedResource
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tfind artifact file ref: resource was null"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|Resource
name|resource
init|=
name|resolvedResource
operator|.
name|getResource
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|resource
operator|instanceof
name|FileResource
operator|)
operator|&&
operator|(
operator|(
name|FileResource
operator|)
name|resource
operator|)
operator|.
name|getFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|FileResource
name|dirResource
init|=
operator|(
name|FileResource
operator|)
name|resource
decl_stmt|;
try|try
block|{
specifier|final
name|File
name|bundleZipFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"ivy-osgi-"
operator|+
name|newMrid
argument_list|,
literal|".zip"
argument_list|)
decl_stmt|;
name|ZipUtil
operator|.
name|zip
argument_list|(
name|dirResource
operator|.
name|getFile
argument_list|()
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|bundleZipFile
argument_list|)
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tfind artifact ref: zip file="
operator|+
name|bundleZipFile
argument_list|)
expr_stmt|;
return|return
operator|new
name|ResolvedResource
argument_list|(
operator|new
name|FileResource
argument_list|(
name|dirResource
operator|.
name|getRepository
argument_list|()
argument_list|,
name|bundleZipFile
argument_list|)
argument_list|,
name|resolvedResource
operator|.
name|getRevision
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to create temp zip file for bundle:"
operator|+
name|newMrid
argument_list|)
throw|;
block|}
block|}
name|Message
operator|.
name|debug
argument_list|(
literal|"\t\tfind artifact ref: resource="
operator|+
name|resolvedResource
argument_list|)
expr_stmt|;
return|return
name|resolvedResource
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|ResolvedResource
name|findIvyFileRef
parameter_list|(
name|DependencyDescriptor
name|dd
parameter_list|,
name|ResolveData
name|data
parameter_list|)
block|{
name|packageScanner
operator|.
name|scanAllPackageExportHeaders
argument_list|(
name|getIvyPatterns
argument_list|()
argument_list|,
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"\tfind ivy file ref: dd=%s, data=%s"
argument_list|,
name|dd
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ModuleRevisionId
name|newMrid
init|=
name|dd
operator|.
name|getDependencyRevisionId
argument_list|()
decl_stmt|;
specifier|final
name|ResolvedResource
name|bundleResolvedResource
init|=
name|findResourceUsingPatterns
argument_list|(
name|newMrid
argument_list|,
name|getIvyPatterns
argument_list|()
argument_list|,
name|DefaultArtifact
operator|.
name|newIvyArtifact
argument_list|(
name|newMrid
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|,
name|getRMDParser
argument_list|(
name|dd
argument_list|,
name|data
argument_list|)
argument_list|,
name|data
operator|.
name|getDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleResolvedResource
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"\tfind ivy file ref: resource was null"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|Resource
name|bundleResource
init|=
name|bundleResolvedResource
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|Resource
name|res
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|bundleResource
operator|instanceof
name|FileResource
operator|)
operator|&&
operator|(
operator|(
name|FileResource
operator|)
name|bundleResource
operator|)
operator|.
name|getFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
specifier|final
name|FileResource
name|fileResource
init|=
operator|(
name|FileResource
operator|)
name|bundleResource
decl_stmt|;
name|res
operator|=
operator|new
name|FileResource
argument_list|(
operator|(
name|FileRepository
operator|)
name|getRepository
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|fileResource
operator|.
name|getFile
argument_list|()
argument_list|,
literal|"META-INF/MANIFEST.MF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|bundleResource
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".JAR"
argument_list|)
condition|)
block|{
name|res
operator|=
operator|new
name|JarEntryResource
argument_list|(
name|bundleResource
argument_list|,
literal|"META-INF/MANIFEST.MF"
argument_list|)
expr_stmt|;
block|}
name|ResolvedResource
name|resolvedResource
init|=
operator|new
name|ResolvedResource
argument_list|(
name|res
argument_list|,
name|bundleResolvedResource
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"\tfind ivy file ref: resource=%s"
argument_list|,
name|bundleResolvedResource
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resolvedResource
return|;
block|}
comment|//    protected ModuleRevisionId modifyModuleRevisionId(final ModuleRevisionId oldMrid) {
comment|//        String revision = oldMrid.getRevision();
comment|//        try {
comment|//            VersionRange versionRange = new VersionRange(oldMrid.getRevision());
comment|//            revision = versionRange.toIvyRevision();
comment|//        } catch (ParseException nfe) {
comment|//            // Do nothing as we fallback to default behaviour
comment|//        }
comment|//        final ModuleRevisionId newMrid = ModuleRevisionId.newInstance(oldMrid.getOrganisation(),
comment|//                oldMrid.getName(),
comment|//                oldMrid.getBranch(),
comment|//                revision,
comment|//                oldMrid.getExtraAttributes());
comment|//        return newMrid;
comment|//    }
block|}
end_class

end_unit

