begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|ExecutionEnvironmentProfileProvider
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PROFILES_FILE
init|=
literal|"jvm-packages.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGE_PREFIX
init|=
literal|"org/apache/ivy/osgi/core/"
decl_stmt|;
specifier|private
name|Map
comment|/*<String, ExecutionEnvironmentProfile> */
name|profileList
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ExecutionEnvironmentProfileProvider
name|INSTANCE
decl_stmt|;
static|static
block|{
try|try
block|{
name|INSTANCE
operator|=
operator|new
name|ExecutionEnvironmentProfileProvider
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|ExecutionEnvironmentProfileProvider
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
specifier|public
name|ExecutionEnvironmentProfileProvider
parameter_list|()
throws|throws
name|IOException
block|{
name|profileList
operator|=
name|loadDefaultProfileList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ExecutionEnvironmentProfile
name|getProfile
parameter_list|(
name|String
name|profile
parameter_list|)
block|{
return|return
operator|(
name|ExecutionEnvironmentProfile
operator|)
name|profileList
operator|.
name|get
argument_list|(
name|profile
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
comment|/*<String, ExecutionEnvironmentProfile> */
name|loadDefaultProfileList
parameter_list|()
throws|throws
name|IOException
block|{
name|ClassLoader
name|loader
init|=
name|ExecutionEnvironmentProfileProvider
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|InputStream
name|defaultProfilesFile
init|=
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|PACKAGE_PREFIX
operator|+
name|DEFAULT_PROFILES_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultProfilesFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|PACKAGE_PREFIX
operator|+
name|DEFAULT_PROFILES_FILE
operator|+
literal|" not found in the classpath"
argument_list|)
throw|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|defaultProfilesFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|defaultProfilesFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Map
comment|/*<String, ExecutionEnvironmentProfile> */
name|profiles
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Iterator
name|itProp
init|=
name|props
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itProp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
comment|/*<String, String> */
name|prop
init|=
operator|(
name|Entry
operator|)
name|itProp
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|prop
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|endsWith
argument_list|(
literal|".pkglist"
argument_list|)
condition|)
block|{
name|String
name|profileName
init|=
name|propName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|propName
operator|.
name|length
argument_list|()
operator|-
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|profiles
operator|.
name|containsKey
argument_list|(
name|profileName
argument_list|)
condition|)
block|{
name|loadProfile
argument_list|(
name|props
argument_list|,
name|profiles
argument_list|,
name|profileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|profiles
return|;
block|}
specifier|private
specifier|static
name|ExecutionEnvironmentProfile
name|loadProfile
parameter_list|(
name|Properties
name|props
parameter_list|,
name|Map
comment|/*                                                                                  *<String,                                                                                  * ExecutionEnvironmentProfile                                                                                  *>                                                                                  */
name|profiles
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|ExecutionEnvironmentProfile
name|profile
init|=
operator|new
name|ExecutionEnvironmentProfile
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// load the package for the extended profile
name|String
name|extendedProfileName
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|name
operator|+
literal|".extends"
argument_list|)
decl_stmt|;
if|if
condition|(
name|extendedProfileName
operator|!=
literal|null
condition|)
block|{
name|ExecutionEnvironmentProfile
name|extendedProfile
init|=
operator|(
name|ExecutionEnvironmentProfile
operator|)
name|profiles
operator|.
name|get
argument_list|(
name|extendedProfileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|extendedProfile
operator|==
literal|null
condition|)
block|{
comment|// not loaded yet, so load it now
name|extendedProfile
operator|=
name|loadProfile
argument_list|(
name|props
argument_list|,
name|profiles
argument_list|,
name|extendedProfileName
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|itExtended
init|=
name|extendedProfile
operator|.
name|getPkgNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itExtended
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|profile
operator|.
name|addPkgName
argument_list|(
operator|(
name|String
operator|)
name|itExtended
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// load the actual list
name|String
name|pkgList
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|name
operator|+
literal|".pkglist"
argument_list|)
decl_stmt|;
name|String
index|[]
name|packages
init|=
name|pkgList
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pkg
init|=
name|packages
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkg
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|profile
operator|.
name|addPkgName
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
block|}
name|profiles
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|profile
argument_list|)
expr_stmt|;
name|Message
operator|.
name|verbose
argument_list|(
literal|"Execution environment profile "
operator|+
name|profile
operator|.
name|getName
argument_list|()
operator|+
literal|" loaded"
argument_list|)
expr_stmt|;
return|return
name|profile
return|;
block|}
block|}
end_class

end_unit

