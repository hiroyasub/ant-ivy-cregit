begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
class|class
name|ArtifactTokens
block|{
specifier|public
specifier|static
specifier|final
name|Comparator
comment|/*<ArtifactTokens> */
name|ORDER_BY_VERSION_ASC
init|=
operator|new
name|OrderByVersion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Comparator
comment|/*<ArtifactTokens> */
name|ORDER_BY_VERSION_DESC
init|=
operator|new
name|OrderByVersion
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Pattern
name|ARTIFACT_TOKEN_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*/)?([\\w\\.]+)[\\-_](\\d*\\.\\d*\\.\\d*)[\\.]?([\\w\\-]+)?"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|String
name|prefix
decl_stmt|;
specifier|public
specifier|final
name|String
name|module
decl_stmt|;
specifier|public
specifier|final
name|Version
name|version
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|isJar
decl_stmt|;
specifier|public
name|ArtifactTokens
parameter_list|(
name|String
name|artifactStr
parameter_list|)
block|{
name|isJar
operator|=
name|artifactStr
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
expr_stmt|;
name|artifactStr
operator|=
operator|(
name|isJar
condition|?
name|artifactStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|artifactStr
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
else|:
name|artifactStr
operator|)
expr_stmt|;
specifier|final
name|Matcher
name|matcher
init|=
name|ARTIFACT_TOKEN_REGEX
operator|.
name|matcher
argument_list|(
name|artifactStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|prefix
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|module
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|version
operator|=
operator|new
name|Version
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
literal|null
expr_stmt|;
name|module
operator|=
literal|null
expr_stmt|;
name|version
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|prefix
operator|!=
literal|null
condition|?
name|prefix
else|:
literal|""
operator|)
operator|+
name|module
operator|+
literal|"-"
operator|+
name|version
operator|+
operator|(
name|isJar
condition|?
literal|".jar"
else|:
literal|""
operator|)
return|;
block|}
specifier|public
name|String
name|toDetailString
parameter_list|()
block|{
return|return
literal|"prefix="
operator|+
name|prefix
operator|+
literal|", module="
operator|+
name|module
operator|+
literal|", version="
operator|+
name|version
operator|+
literal|", isJar="
operator|+
name|isJar
return|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
operator|(
name|prefix
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|module
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|version
operator|!=
literal|null
operator|)
return|;
block|}
specifier|private
specifier|static
class|class
name|OrderByVersion
implements|implements
name|Comparator
comment|/*<ArtifactTokens> */
block|{
specifier|private
specifier|final
name|boolean
name|ascending
decl_stmt|;
specifier|public
name|OrderByVersion
parameter_list|(
name|boolean
name|ascending
parameter_list|)
block|{
name|this
operator|.
name|ascending
operator|=
name|ascending
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|ArtifactTokens
operator|)
name|o1
argument_list|,
operator|(
name|ArtifactTokens
operator|)
name|o2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|ArtifactTokens
name|a
parameter_list|,
name|ArtifactTokens
name|b
parameter_list|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|module
operator|.
name|equalsIgnoreCase
argument_list|(
name|b
operator|.
name|module
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot order different modules by version. A="
operator|+
name|a
operator|+
literal|", B="
operator|+
name|b
argument_list|)
throw|;
block|}
specifier|final
name|int
name|val
init|=
name|a
operator|.
name|version
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|version
argument_list|)
decl_stmt|;
return|return
operator|(
name|ascending
condition|?
name|val
else|:
operator|-
name|val
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

