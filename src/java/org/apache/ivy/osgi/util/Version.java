begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Provides OSGi version support.  */
end_comment

begin_class
specifier|public
class|class
name|Version
implements|implements
name|Comparable
comment|/*<Version> */
block|{
specifier|private
specifier|final
name|int
name|major
decl_stmt|;
specifier|private
specifier|final
name|int
name|minor
decl_stmt|;
specifier|private
specifier|final
name|int
name|patch
decl_stmt|;
specifier|private
specifier|final
name|String
name|qualifier
decl_stmt|;
specifier|public
name|Version
parameter_list|(
name|String
name|versionStr
parameter_list|,
name|String
name|qualifier
parameter_list|)
throws|throws
name|NumberFormatException
block|{
name|this
argument_list|(
name|versionStr
operator|+
literal|"."
operator|+
operator|(
name|qualifier
operator|!=
literal|null
condition|?
name|qualifier
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Version
parameter_list|(
name|String
name|versionStr
parameter_list|)
throws|throws
name|NumberFormatException
block|{
specifier|final
name|String
index|[]
name|tmp
init|=
name|versionStr
operator|.
name|split
argument_list|(
literal|"[\\.]"
argument_list|)
decl_stmt|;
name|major
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tmp
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|minor
operator|=
name|tmp
operator|.
name|length
operator|>=
literal|2
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|tmp
index|[
literal|1
index|]
argument_list|)
else|:
literal|0
expr_stmt|;
name|patch
operator|=
name|tmp
operator|.
name|length
operator|>=
literal|3
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|tmp
index|[
literal|2
index|]
argument_list|)
else|:
literal|0
expr_stmt|;
name|qualifier
operator|=
name|tmp
operator|.
name|length
operator|==
literal|4
condition|?
name|tmp
index|[
literal|3
index|]
else|:
literal|null
expr_stmt|;
block|}
specifier|public
name|Version
parameter_list|(
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|,
name|int
name|patch
parameter_list|,
name|String
name|qualifier
parameter_list|)
block|{
name|this
operator|.
name|major
operator|=
name|major
expr_stmt|;
name|this
operator|.
name|minor
operator|=
name|minor
expr_stmt|;
name|this
operator|.
name|patch
operator|=
name|patch
expr_stmt|;
name|this
operator|.
name|qualifier
operator|=
name|qualifier
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|numbersAsString
argument_list|()
operator|+
operator|(
name|qualifier
operator|==
literal|null
condition|?
literal|""
else|:
literal|"."
operator|+
name|qualifier
operator|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|major
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|minor
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|patch
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|qualifier
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|qualifier
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Version
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Version
name|other
init|=
operator|(
name|Version
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|major
operator|!=
name|other
operator|.
name|major
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|minor
operator|!=
name|other
operator|.
name|minor
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|patch
operator|!=
name|other
operator|.
name|patch
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|qualifier
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|qualifier
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
operator|!
name|qualifier
operator|.
name|equals
argument_list|(
name|other
operator|.
name|qualifier
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|numbersAsString
parameter_list|()
block|{
return|return
name|major
operator|+
literal|"."
operator|+
name|minor
operator|+
literal|"."
operator|+
name|patch
return|;
block|}
specifier|public
name|Version
name|withNudgedPatch
parameter_list|()
block|{
return|return
operator|new
name|Version
argument_list|(
name|major
argument_list|,
name|minor
argument_list|,
name|patch
operator|+
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Version
name|withoutQualifier
parameter_list|()
block|{
return|return
operator|new
name|Version
argument_list|(
name|major
argument_list|,
name|minor
argument_list|,
name|patch
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|String
name|qualifier
parameter_list|()
block|{
return|return
name|qualifier
operator|==
literal|null
condition|?
literal|""
else|:
name|qualifier
return|;
block|}
specifier|public
name|int
name|compareUnqualified
parameter_list|(
name|Version
name|other
parameter_list|)
block|{
name|int
name|diff
init|=
name|major
operator|-
name|other
operator|.
name|major
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
return|return
name|diff
return|;
block|}
name|diff
operator|=
name|minor
operator|-
name|other
operator|.
name|minor
expr_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
return|return
name|diff
return|;
block|}
name|diff
operator|=
name|patch
operator|-
name|other
operator|.
name|patch
expr_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
return|return
name|diff
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|Version
operator|)
name|obj
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Version
name|other
parameter_list|)
block|{
name|int
name|diff
init|=
name|compareUnqualified
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
return|return
name|diff
return|;
block|}
if|if
condition|(
name|qualifier
operator|==
literal|null
condition|)
block|{
return|return
name|other
operator|.
name|qualifier
operator|!=
literal|null
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
if|if
condition|(
name|other
operator|.
name|qualifier
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|qualifier
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|qualifier
argument_list|)
return|;
block|}
block|}
end_class

end_unit

