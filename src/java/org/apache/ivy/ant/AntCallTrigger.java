begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|IvyPatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|event
operator|.
name|IvyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|trigger
operator|.
name|AbstractTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|trigger
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|CallTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|taskdefs
operator|.
name|Property
import|;
end_import

begin_comment
comment|/**  * Triggers an call to an ant target on an event occurence.  *<p>  * This trigger only works when ivy is called from an ant build file, otherwise the trigger only log  * a failure.  *<p>  * Example of use in an ivysettings file:  *   *<pre>  *&lt;ant-call-trigger event=&quot;post-download-artifact&quot; filter=&quot;type=zip&quot;  * target=&quot;unzip&quot;/&gt;  *</pre>  * Triggers a call to the target "unzip" for any downloaded artifact of type zip  *   * @see AntBuildTrigger  * @since 1.4  */
end_comment

begin_class
specifier|public
class|class
name|AntCallTrigger
extends|extends
name|AbstractTrigger
implements|implements
name|Trigger
block|{
specifier|private
name|boolean
name|onlyonce
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|target
init|=
literal|null
decl_stmt|;
specifier|private
name|Collection
name|calls
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|String
name|prefix
decl_stmt|;
specifier|public
name|void
name|progress
parameter_list|(
name|IvyEvent
name|event
parameter_list|)
block|{
name|Project
name|project
init|=
operator|(
name|Project
operator|)
name|IvyContext
operator|.
name|peekInContextStack
argument_list|(
name|IvyTask
operator|.
name|ANT_PROJECT_CONTEXT_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|info
argument_list|(
literal|"ant call trigger can only be used from an ant build. Ignoring."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|onlyonce
operator|&&
name|isTriggered
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"call already triggered for this event, skipping: "
operator|+
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CallTarget
name|call
init|=
operator|new
name|CallTarget
argument_list|()
decl_stmt|;
name|call
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|call
operator|.
name|setTaskName
argument_list|(
literal|"antcall"
argument_list|)
expr_stmt|;
name|Map
name|attributes
init|=
name|event
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|String
name|target
init|=
name|IvyPatternHelper
operator|.
name|substituteTokens
argument_list|(
name|getTarget
argument_list|()
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|call
operator|.
name|setTarget
argument_list|(
name|target
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|attributes
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|call
operator|.
name|createParam
argument_list|()
decl_stmt|;
name|p
operator|.
name|setName
argument_list|(
name|prefix
operator|==
literal|null
condition|?
name|key
else|:
name|prefix
operator|+
name|key
argument_list|)
expr_stmt|;
name|p
operator|.
name|setValue
argument_list|(
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|value
argument_list|)
expr_stmt|;
block|}
name|Message
operator|.
name|verbose
argument_list|(
literal|"triggering ant call: target="
operator|+
name|target
operator|+
literal|" for "
operator|+
name|event
argument_list|)
expr_stmt|;
name|call
operator|.
name|execute
argument_list|()
expr_stmt|;
name|markTriggered
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"triggered ant call finished: target="
operator|+
name|target
operator|+
literal|" for "
operator|+
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|markTriggered
parameter_list|(
name|IvyEvent
name|event
parameter_list|)
block|{
name|calls
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isTriggered
parameter_list|(
name|IvyEvent
name|event
parameter_list|)
block|{
return|return
name|calls
operator|.
name|contains
argument_list|(
name|event
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTarget
parameter_list|()
block|{
return|return
name|target
return|;
block|}
specifier|public
name|void
name|setTarget
parameter_list|(
name|String
name|target
parameter_list|)
block|{
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOnlyonce
parameter_list|()
block|{
return|return
name|onlyonce
return|;
block|}
specifier|public
name|void
name|setOnlyonce
parameter_list|(
name|boolean
name|onlyonce
parameter_list|)
block|{
name|this
operator|.
name|onlyonce
operator|=
name|onlyonce
expr_stmt|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|this
operator|.
name|prefix
operator|+=
literal|"."
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

