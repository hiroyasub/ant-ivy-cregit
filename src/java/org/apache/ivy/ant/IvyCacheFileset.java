begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|FileSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|PatternSet
operator|.
name|NameEntry
import|;
end_import

begin_comment
comment|/**  * Creates an ant fileset consisting in all artifacts found during a resolve. Note that this task is  * not compatible with the useOrigin mode.  */
end_comment

begin_class
specifier|public
class|class
name|IvyCacheFileset
extends|extends
name|IvyCacheTask
block|{
specifier|private
name|String
name|setid
decl_stmt|;
specifier|public
name|String
name|getSetid
parameter_list|()
block|{
return|return
name|setid
return|;
block|}
specifier|public
name|void
name|setSetid
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|setid
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|void
name|setUseOrigin
parameter_list|(
name|boolean
name|useOrigin
parameter_list|)
block|{
if|if
condition|(
name|useOrigin
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"the cachefileset task does not support the useOrigin mode, since filesets "
operator|+
literal|"require to have only one root directory. Please use the the cachepath "
operator|+
literal|"task instead"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|doExecute
parameter_list|()
throws|throws
name|BuildException
block|{
name|prepareAndCheck
argument_list|()
expr_stmt|;
if|if
condition|(
name|setid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"setid is required in ivy cachefileset"
argument_list|)
throw|;
block|}
try|try
block|{
name|FileSet
name|fileset
init|=
operator|new
name|FileSet
argument_list|()
decl_stmt|;
name|fileset
operator|.
name|setProject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|getProject
argument_list|()
operator|.
name|addReference
argument_list|(
name|setid
argument_list|,
name|fileset
argument_list|)
expr_stmt|;
name|List
name|paths
init|=
name|getArtifactReports
argument_list|()
decl_stmt|;
name|File
name|base
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|paths
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ArtifactDownloadReport
name|a
init|=
operator|(
name|ArtifactDownloadReport
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getLocalFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|base
operator|=
name|getBaseDir
argument_list|(
name|base
argument_list|,
name|a
operator|.
name|getLocalFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
name|fileset
operator|.
name|setDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|NameEntry
name|ne
init|=
name|fileset
operator|.
name|createExclude
argument_list|()
decl_stmt|;
name|ne
operator|.
name|setName
argument_list|(
literal|"**/*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileset
operator|.
name|setDir
argument_list|(
name|base
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|paths
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ArtifactDownloadReport
name|a
init|=
operator|(
name|ArtifactDownloadReport
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getLocalFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|NameEntry
name|ne
init|=
name|fileset
operator|.
name|createInclude
argument_list|()
decl_stmt|;
name|ne
operator|.
name|setName
argument_list|(
name|getPath
argument_list|(
name|base
argument_list|,
name|a
operator|.
name|getLocalFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"impossible to build ivy cache fileset: "
operator|+
name|ex
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the path of the file relative to the given base directory.      *       * @param base the parent directory to which the file must be evaluated.      * @param file the file for which the path should be returned      * @returnthe path of the file relative to the given base directory.      */
specifier|private
name|String
name|getPath
parameter_list|(
name|File
name|base
parameter_list|,
name|File
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|substring
argument_list|(
name|base
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**      * Returns the common base directory between a current base directory and a given file.      *<p>      * The returned base directory must be a parent of both the current base and the given file.      *</p>      *       * @param base      *            the current base directory, may be null.      * @param file      *            the file for which the new base directory should be returned.      * @return the common base directory between a current base directory and a given file.      */
name|File
name|getBaseDir
parameter_list|(
name|File
name|base
parameter_list|,
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
return|return
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsoluteFile
argument_list|()
return|;
block|}
else|else
block|{
name|Iterator
name|bases
init|=
name|getParents
argument_list|(
name|base
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
name|fileParents
init|=
name|getParents
argument_list|(
name|file
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|File
name|result
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|bases
operator|.
name|hasNext
argument_list|()
operator|&&
name|fileParents
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|File
name|next
init|=
operator|(
name|File
operator|)
name|bases
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|equals
argument_list|(
name|fileParents
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
name|next
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**      * @return a list of files, starting with the root and ending with the file itself      */
specifier|private
name|LinkedList
comment|/*<File>*/
name|getParents
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|LinkedList
name|r
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
while|while
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|addFirst
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|file
operator|=
name|file
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

