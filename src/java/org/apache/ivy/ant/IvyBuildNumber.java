begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_comment
comment|/**  * Look for the latest module in the repository matching the given criteria, and sets a set of  * properties according to what was found.  */
end_comment

begin_class
specifier|public
class|class
name|IvyBuildNumber
extends|extends
name|IvyTask
block|{
specifier|private
name|String
name|organisation
decl_stmt|;
specifier|private
name|String
name|module
decl_stmt|;
specifier|private
name|String
name|branch
decl_stmt|;
specifier|private
name|String
name|revision
decl_stmt|;
specifier|private
name|String
name|revSep
init|=
literal|"."
decl_stmt|;
specifier|private
name|String
name|prefix
init|=
literal|"ivy."
decl_stmt|;
specifier|private
name|String
name|defaultValue
init|=
literal|"0"
decl_stmt|;
specifier|private
name|String
name|defaultBuildNumber
init|=
literal|"0"
decl_stmt|;
specifier|public
name|String
name|getModule
parameter_list|()
block|{
return|return
name|module
return|;
block|}
specifier|public
name|void
name|setModule
parameter_list|(
name|String
name|module
parameter_list|)
block|{
name|this
operator|.
name|module
operator|=
name|module
expr_stmt|;
block|}
specifier|public
name|String
name|getOrganisation
parameter_list|()
block|{
return|return
name|organisation
return|;
block|}
specifier|public
name|void
name|setOrganisation
parameter_list|(
name|String
name|organisation
parameter_list|)
block|{
name|this
operator|.
name|organisation
operator|=
name|organisation
expr_stmt|;
block|}
specifier|public
name|String
name|getRevision
parameter_list|()
block|{
return|return
name|revision
return|;
block|}
specifier|public
name|void
name|setRevision
parameter_list|(
name|String
name|revision
parameter_list|)
block|{
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
block|}
specifier|public
name|String
name|getBranch
parameter_list|()
block|{
return|return
name|branch
return|;
block|}
specifier|public
name|void
name|setBranch
parameter_list|(
name|String
name|branch
parameter_list|)
block|{
name|this
operator|.
name|branch
operator|=
name|branch
expr_stmt|;
block|}
specifier|public
name|String
name|getDefault
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
specifier|public
name|void
name|setDefault
parameter_list|(
name|String
name|default1
parameter_list|)
block|{
name|defaultValue
operator|=
name|default1
expr_stmt|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
specifier|public
name|void
name|doExecute
parameter_list|()
throws|throws
name|BuildException
block|{
if|if
condition|(
name|organisation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"no organisation provided for ivy findmodules"
argument_list|)
throw|;
block|}
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"no module name provided for ivy findmodules"
argument_list|)
throw|;
block|}
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"null prefix not allowed"
argument_list|)
throw|;
block|}
name|Ivy
name|ivy
init|=
name|getIvyInstance
argument_list|()
decl_stmt|;
name|IvySettings
name|settings
init|=
name|ivy
operator|.
name|getSettings
argument_list|()
decl_stmt|;
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|settings
operator|.
name|getDefaultBranch
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revision
operator|==
literal|null
operator|||
name|revision
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|revision
operator|=
literal|"latest.integration"
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|revision
operator|.
name|endsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|revision
operator|=
name|revision
operator|+
literal|"+"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
operator|&&
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|prefix
operator|=
name|prefix
operator|+
literal|"."
expr_stmt|;
block|}
name|ResolvedModuleRevision
name|rmr
init|=
name|ivy
operator|.
name|findModule
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
name|branch
argument_list|,
name|revision
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|revision
init|=
name|rmr
operator|==
literal|null
condition|?
literal|null
else|:
name|rmr
operator|.
name|getId
argument_list|()
operator|.
name|getRevision
argument_list|()
decl_stmt|;
name|NewRevision
name|newRevision
init|=
name|computeNewRevision
argument_list|(
name|revision
argument_list|)
decl_stmt|;
name|setProperty
argument_list|(
literal|"revision"
argument_list|,
name|newRevision
operator|.
name|revision
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"new.revision"
argument_list|,
name|newRevision
operator|.
name|newRevision
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"build.number"
argument_list|,
name|newRevision
operator|.
name|buildNumber
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
literal|"new.build.number"
argument_list|,
name|newRevision
operator|.
name|newBuildNumber
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|prefix
operator|+
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|NewRevision
name|computeNewRevision
parameter_list|(
name|String
name|revision
parameter_list|)
block|{
name|String
name|revPrefix
init|=
literal|"latest.integration"
operator|.
name|equals
argument_list|(
name|revision
argument_list|)
condition|?
literal|""
else|:
name|revision
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|revision
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
operator|&&
operator|!
name|revision
operator|.
name|startsWith
argument_list|(
name|revPrefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"invalid exception found in repository: '"
operator|+
name|revision
operator|+
literal|"' for '"
operator|+
name|revPrefix
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|revPrefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|NewRevision
argument_list|(
name|revision
argument_list|,
name|revPrefix
operator|+
operator|(
name|revPrefix
operator|.
name|endsWith
argument_list|(
name|revSep
argument_list|)
condition|?
name|defaultBuildNumber
else|:
name|revSep
operator|+
name|defaultBuildNumber
operator|)
argument_list|,
literal|null
argument_list|,
name|defaultBuildNumber
argument_list|)
return|;
block|}
else|else
block|{
name|Range
name|r
init|=
name|findLastNumber
argument_list|(
name|defaultValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
comment|// no number found
return|return
operator|new
name|NewRevision
argument_list|(
name|revision
argument_list|,
name|defaultValue
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
name|long
name|n
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|defaultValue
operator|.
name|substring
argument_list|(
name|r
operator|.
name|startIndex
argument_list|,
name|r
operator|.
name|endIndex
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|NewRevision
argument_list|(
name|revision
argument_list|,
name|defaultValue
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|n
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
name|Range
name|r
decl_stmt|;
if|if
condition|(
name|revPrefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|r
operator|=
name|findLastNumber
argument_list|(
name|revision
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|NewRevision
argument_list|(
name|revision
argument_list|,
name|revision
operator|+
operator|(
name|revision
operator|.
name|endsWith
argument_list|(
name|revSep
argument_list|)
condition|?
literal|"1"
else|:
name|revSep
operator|+
literal|"1"
operator|)
argument_list|,
literal|null
argument_list|,
literal|"1"
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|r
operator|=
name|findFirstNumber
argument_list|(
name|revision
argument_list|,
name|revPrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|NewRevision
argument_list|(
name|revision
argument_list|,
name|revPrefix
operator|+
operator|(
name|revPrefix
operator|.
name|endsWith
argument_list|(
name|revSep
argument_list|)
condition|?
literal|"1"
else|:
name|revSep
operator|+
literal|"1"
operator|)
argument_list|,
literal|null
argument_list|,
literal|"1"
argument_list|)
return|;
block|}
block|}
name|long
name|n
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|revision
operator|.
name|substring
argument_list|(
name|r
operator|.
name|startIndex
argument_list|,
name|r
operator|.
name|endIndex
argument_list|)
argument_list|)
operator|+
literal|1
decl_stmt|;
return|return
operator|new
name|NewRevision
argument_list|(
name|revision
argument_list|,
name|revision
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|startIndex
argument_list|)
operator|+
name|n
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|n
operator|-
literal|1
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|n
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Range
name|findFirstNumber
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|startIndex
parameter_list|)
block|{
comment|// let's find the first digit in the string
name|int
name|startNumberIndex
init|=
name|startIndex
decl_stmt|;
while|while
condition|(
name|startNumberIndex
operator|<
name|str
operator|.
name|length
argument_list|()
operator|&&
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|startNumberIndex
argument_list|)
argument_list|)
condition|)
block|{
name|startNumberIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|startNumberIndex
operator|==
name|str
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// let's find the end of the number
name|int
name|endNumberIndex
init|=
name|startNumberIndex
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|endNumberIndex
operator|<
name|str
operator|.
name|length
argument_list|()
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|endNumberIndex
argument_list|)
argument_list|)
condition|)
block|{
name|endNumberIndex
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|Range
argument_list|(
name|startNumberIndex
argument_list|,
name|endNumberIndex
argument_list|)
return|;
block|}
specifier|private
name|Range
name|findLastNumber
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|int
name|endNumberIndex
init|=
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|endNumberIndex
operator|>=
literal|0
operator|&&
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|endNumberIndex
argument_list|)
argument_list|)
condition|)
block|{
name|endNumberIndex
operator|--
expr_stmt|;
block|}
name|int
name|startNumberIndex
init|=
name|endNumberIndex
operator|==
operator|-
literal|1
condition|?
operator|-
literal|1
else|:
name|endNumberIndex
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|startNumberIndex
operator|>=
literal|0
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|startNumberIndex
argument_list|)
argument_list|)
condition|)
block|{
name|startNumberIndex
operator|--
expr_stmt|;
block|}
name|endNumberIndex
operator|++
expr_stmt|;
name|startNumberIndex
operator|++
expr_stmt|;
if|if
condition|(
name|startNumberIndex
operator|==
name|endNumberIndex
condition|)
block|{
comment|// no number found
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|Range
argument_list|(
name|startNumberIndex
argument_list|,
name|endNumberIndex
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Range
block|{
specifier|private
name|int
name|startIndex
decl_stmt|;
specifier|private
name|int
name|endIndex
decl_stmt|;
specifier|public
name|Range
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|endIndex
parameter_list|)
block|{
name|this
operator|.
name|startIndex
operator|=
name|startIndex
expr_stmt|;
name|this
operator|.
name|endIndex
operator|=
name|endIndex
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NewRevision
block|{
specifier|private
name|String
name|revision
decl_stmt|;
specifier|private
name|String
name|newRevision
decl_stmt|;
specifier|private
name|String
name|buildNumber
decl_stmt|;
specifier|private
name|String
name|newBuildNumber
decl_stmt|;
specifier|public
name|NewRevision
parameter_list|(
name|String
name|revision
parameter_list|,
name|String
name|newRevision
parameter_list|,
name|String
name|buildNumber
parameter_list|,
name|String
name|newBuildNumber
parameter_list|)
block|{
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
name|this
operator|.
name|newRevision
operator|=
name|newRevision
expr_stmt|;
name|this
operator|.
name|buildNumber
operator|=
name|buildNumber
expr_stmt|;
name|this
operator|.
name|newBuildNumber
operator|=
name|newBuildNumber
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getRevSep
parameter_list|()
block|{
return|return
name|revSep
return|;
block|}
specifier|public
name|void
name|setRevSep
parameter_list|(
name|String
name|revSep
parameter_list|)
block|{
name|this
operator|.
name|revSep
operator|=
name|revSep
expr_stmt|;
block|}
specifier|public
name|String
name|getDefaultBuildNumber
parameter_list|()
block|{
return|return
name|defaultBuildNumber
return|;
block|}
specifier|public
name|void
name|setDefaultBuildNumber
parameter_list|(
name|String
name|defaultBuildNumber
parameter_list|)
block|{
name|this
operator|.
name|defaultBuildNumber
operator|=
name|defaultBuildNumber
expr_stmt|;
block|}
block|}
end_class

end_unit

