begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|cache
operator|.
name|ResolutionCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|FilterHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_comment
comment|/**  * Base class for tasks needing to be performed after a resolve.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|IvyPostResolveTask
extends|extends
name|IvyTask
block|{
specifier|private
name|String
name|conf
decl_stmt|;
specifier|private
name|boolean
name|haltOnFailure
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|transitive
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|inline
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|organisation
decl_stmt|;
specifier|private
name|String
name|branch
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|module
decl_stmt|;
specifier|private
name|String
name|revision
init|=
literal|"latest.integration"
decl_stmt|;
specifier|private
name|String
name|resolveId
decl_stmt|;
specifier|private
name|String
name|type
decl_stmt|;
specifier|private
name|File
name|file
decl_stmt|;
specifier|private
name|Filter
name|artifactFilter
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|useOrigin
init|=
literal|false
decl_stmt|;
specifier|private
name|Boolean
name|keep
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|refresh
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|resolveMode
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|log
init|=
name|ResolveOptions
operator|.
name|LOG_DEFAULT
decl_stmt|;
specifier|private
name|boolean
name|changing
init|=
literal|false
decl_stmt|;
specifier|private
name|IvyResolve
name|resolve
init|=
operator|new
name|IvyResolve
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|isUseOrigin
parameter_list|()
block|{
return|return
name|useOrigin
return|;
block|}
specifier|public
name|void
name|setUseOrigin
parameter_list|(
name|boolean
name|useOrigin
parameter_list|)
block|{
name|this
operator|.
name|useOrigin
operator|=
name|useOrigin
expr_stmt|;
block|}
specifier|public
name|String
name|getLog
parameter_list|()
block|{
return|return
name|log
return|;
block|}
specifier|public
name|void
name|setLog
parameter_list|(
name|String
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
specifier|public
name|IvyDependency
name|createDependency
parameter_list|()
block|{
return|return
name|resolve
operator|.
name|createDependency
argument_list|()
return|;
block|}
specifier|public
name|IvyExclude
name|createExclude
parameter_list|()
block|{
return|return
name|resolve
operator|.
name|createExclude
argument_list|()
return|;
block|}
specifier|public
name|IvyConflict
name|createConflict
parameter_list|()
block|{
return|return
name|resolve
operator|.
name|createConflict
argument_list|()
return|;
block|}
specifier|protected
name|void
name|prepareAndCheck
parameter_list|()
block|{
name|Ivy
name|ivy
init|=
name|getIvyInstance
argument_list|()
decl_stmt|;
name|IvySettings
name|settings
init|=
name|ivy
operator|.
name|getSettings
argument_list|()
decl_stmt|;
name|boolean
name|orgAndModSetManually
init|=
operator|(
name|organisation
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|module
operator|!=
literal|null
operator|)
decl_stmt|;
name|organisation
operator|=
name|getProperty
argument_list|(
name|organisation
argument_list|,
name|settings
argument_list|,
literal|"ivy.organisation"
argument_list|)
expr_stmt|;
name|module
operator|=
name|getProperty
argument_list|(
name|module
argument_list|,
name|settings
argument_list|,
literal|"ivy.module"
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
name|String
name|fileName
init|=
name|getProperty
argument_list|(
name|settings
argument_list|,
literal|"ivy.resolved.file"
argument_list|,
name|resolveId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
name|getProject
argument_list|()
operator|.
name|resolveFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isInline
argument_list|()
condition|)
block|{
name|conf
operator|=
name|conf
operator|==
literal|null
condition|?
literal|"*"
else|:
name|conf
expr_stmt|;
if|if
condition|(
name|organisation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"no organisation provided for ivy cache task in inline mode: "
operator|+
literal|"It can either be set explicitely via the attribute 'organisation' "
operator|+
literal|"or via 'ivy.organisation' property"
argument_list|)
throw|;
block|}
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"no module name provided for ivy cache task in inline mode: "
operator|+
literal|"It can either be set explicitely via the attribute 'module' "
operator|+
literal|"or via 'ivy.module' property"
argument_list|)
throw|;
block|}
name|String
index|[]
name|toResolve
init|=
name|getConfsToResolve
argument_list|(
name|getOrganisation
argument_list|()
argument_list|,
name|getModule
argument_list|()
operator|+
literal|"-caller"
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//When we make an inline resolution, we can not resolve private confs.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toResolve
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|toResolve
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|toResolve
index|[
name|i
index|]
operator|=
literal|"*(public)"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toResolve
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"using inline mode to resolve "
operator|+
name|getOrganisation
argument_list|()
operator|+
literal|" "
operator|+
name|getModule
argument_list|()
operator|+
literal|" "
operator|+
name|getRevision
argument_list|()
operator|+
literal|" ("
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|toResolve
argument_list|,
literal|", "
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|IvyResolve
name|resolve
init|=
name|setupResolve
argument_list|(
name|isHaltonfailure
argument_list|()
argument_list|,
name|isUseOrigin
argument_list|()
argument_list|)
decl_stmt|;
name|resolve
operator|.
name|setOrganisation
argument_list|(
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setModule
argument_list|(
name|getModule
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setBranch
argument_list|(
name|getBranch
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setRevision
argument_list|(
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setInline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setChanging
argument_list|(
name|isChanging
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setResolveId
argument_list|(
name|resolveId
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setTransitive
argument_list|(
name|isTransitive
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"inline resolve already done for "
operator|+
name|getOrganisation
argument_list|()
operator|+
literal|" "
operator|+
name|getModule
argument_list|()
operator|+
literal|" "
operator|+
name|getRevision
argument_list|()
operator|+
literal|" ("
operator|+
name|conf
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|conf
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
name|getResolvedConfigurations
argument_list|(
name|getOrganisation
argument_list|()
argument_list|,
name|getModule
argument_list|()
operator|+
literal|"-caller"
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"using standard ensure resolved"
argument_list|)
expr_stmt|;
comment|// if the organization and module has been manually specified, we'll reuse the resolved
comment|// data from another build (there is no way to know which configurations were resolved
comment|// there (TODO: maybe we can check which reports exist and extract the configurations
comment|// from these report names?)
if|if
condition|(
operator|!
name|orgAndModSetManually
condition|)
block|{
name|ensureResolved
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
name|getProperty
argument_list|(
name|conf
argument_list|,
name|settings
argument_list|,
literal|"ivy.resolved.configurations"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|conf
operator|=
name|getProperty
argument_list|(
name|settings
argument_list|,
literal|"ivy.resolved.configurations"
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"bad conf provided for ivy cache task: "
operator|+
literal|"'*' can only be used with a prior call to<resolve/>"
argument_list|)
throw|;
block|}
block|}
block|}
name|organisation
operator|=
name|getProperty
argument_list|(
name|organisation
argument_list|,
name|settings
argument_list|,
literal|"ivy.organisation"
argument_list|)
expr_stmt|;
name|module
operator|=
name|getProperty
argument_list|(
name|module
argument_list|,
name|settings
argument_list|,
literal|"ivy.module"
argument_list|)
expr_stmt|;
if|if
condition|(
name|organisation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"no organisation provided for ivy cache task: "
operator|+
literal|"It can either be set explicitely via the attribute 'organisation' "
operator|+
literal|"or via 'ivy.organisation' property or a prior call to<resolve/>"
argument_list|)
throw|;
block|}
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"no module name provided for ivy cache task: "
operator|+
literal|"It can either be set explicitely via the attribute 'module' "
operator|+
literal|"or via 'ivy.module' property or a prior call to<resolve/>"
argument_list|)
throw|;
block|}
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"no conf provided for ivy cache task: "
operator|+
literal|"It can either be set explicitely via the attribute 'conf' or "
operator|+
literal|"via 'ivy.resolved.configurations' property or a prior call to<resolve/>"
argument_list|)
throw|;
block|}
name|artifactFilter
operator|=
name|FilterHelper
operator|.
name|getArtifactTypeFilter
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|ensureResolved
parameter_list|(
name|IvySettings
name|settings
parameter_list|)
block|{
name|String
name|requestedConfigs
init|=
name|getProperty
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|settings
argument_list|,
literal|"ivy.resolved.configurations"
argument_list|)
decl_stmt|;
name|String
index|[]
name|confs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getResolveId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|confs
operator|=
name|getConfsToResolve
argument_list|(
name|getResolveId
argument_list|()
argument_list|,
name|requestedConfigs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|confs
operator|=
name|getConfsToResolve
argument_list|(
name|getOrganisation
argument_list|()
argument_list|,
name|getModule
argument_list|()
argument_list|,
name|requestedConfigs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|IvyResolve
name|resolve
init|=
name|setupResolve
argument_list|(
name|isHaltonfailure
argument_list|()
argument_list|,
name|isUseOrigin
argument_list|()
argument_list|)
decl_stmt|;
name|resolve
operator|.
name|setFile
argument_list|(
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setTransitive
argument_list|(
name|isTransitive
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setConf
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|confs
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setResolveId
argument_list|(
name|getResolveId
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
index|[]
name|getConfsToResolve
parameter_list|(
name|String
name|org
parameter_list|,
name|String
name|module
parameter_list|,
name|String
name|conf
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
name|ModuleDescriptor
name|reference
init|=
operator|(
name|ModuleDescriptor
operator|)
name|getResolvedDescriptor
argument_list|(
name|org
argument_list|,
name|module
argument_list|,
name|strict
argument_list|)
decl_stmt|;
name|String
index|[]
name|rconfs
init|=
name|getResolvedConfigurations
argument_list|(
name|org
argument_list|,
name|module
argument_list|,
name|strict
argument_list|)
decl_stmt|;
return|return
name|getConfsToResolve
argument_list|(
name|reference
argument_list|,
name|conf
argument_list|,
name|rconfs
argument_list|)
return|;
block|}
specifier|protected
name|String
index|[]
name|getConfsToResolve
parameter_list|(
name|String
name|resolveId
parameter_list|,
name|String
name|conf
parameter_list|)
block|{
name|ModuleDescriptor
name|reference
init|=
operator|(
name|ModuleDescriptor
operator|)
name|getResolvedDescriptor
argument_list|(
name|resolveId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
comment|// assume the module has been resolved outside this build, resolve the required
comment|// configurations again
comment|// TODO: find a way to discover which confs were resolved by that previous resolve
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
return|;
block|}
else|else
block|{
return|return
name|splitConfs
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
name|String
index|[]
name|rconfs
init|=
operator|(
name|String
index|[]
operator|)
name|getProject
argument_list|()
operator|.
name|getReference
argument_list|(
literal|"ivy.resolved.configurations.ref."
operator|+
name|resolveId
argument_list|)
decl_stmt|;
return|return
name|getConfsToResolve
argument_list|(
name|reference
argument_list|,
name|conf
argument_list|,
name|rconfs
argument_list|)
return|;
block|}
specifier|private
name|String
index|[]
name|getConfsToResolve
parameter_list|(
name|ModuleDescriptor
name|reference
parameter_list|,
name|String
name|conf
parameter_list|,
name|String
index|[]
name|rconfs
parameter_list|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"calculating configurations to resolve"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"module not yet resolved, all confs still need to be resolved"
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
return|;
block|}
else|else
block|{
return|return
name|splitConfs
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|confs
decl_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|confs
operator|=
name|reference
operator|.
name|getConfigurationsNames
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|confs
operator|=
name|splitConfs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|HashSet
name|rconfsSet
init|=
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rconfs
argument_list|)
argument_list|)
decl_stmt|;
comment|// for each resolved configuration, check if the report still exists
name|ResolutionCacheManager
name|cache
init|=
name|getSettings
argument_list|()
operator|.
name|getResolutionCacheManager
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|rconfsSet
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|resolvedConf
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|resolveId
init|=
name|getResolveId
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolveId
operator|==
literal|null
condition|)
block|{
name|resolveId
operator|=
name|ResolveOptions
operator|.
name|getDefaultResolveId
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
name|File
name|report
init|=
name|cache
operator|.
name|getConfigurationResolveReportInCache
argument_list|(
name|resolveId
argument_list|,
name|resolvedConf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|report
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// the report doesn't exist any longer, we have to recreate it...
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|HashSet
name|confsSet
init|=
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|confs
argument_list|)
argument_list|)
decl_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"resolved configurations:   "
operator|+
name|rconfsSet
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"asked configurations:      "
operator|+
name|confsSet
argument_list|)
expr_stmt|;
name|confsSet
operator|.
name|removeAll
argument_list|(
name|rconfsSet
argument_list|)
expr_stmt|;
name|Message
operator|.
name|debug
argument_list|(
literal|"to resolve configurations: "
operator|+
name|confsSet
argument_list|)
expr_stmt|;
return|return
operator|(
name|String
index|[]
operator|)
name|confsSet
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|confsSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
else|else
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"module already resolved, no configuration to resolve"
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|protected
name|IvyResolve
name|setupResolve
parameter_list|(
name|boolean
name|haltOnFailure
parameter_list|,
name|boolean
name|useOrigin
parameter_list|)
block|{
name|Message
operator|.
name|verbose
argument_list|(
literal|"no resolved descriptor found: launching default resolve"
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setTaskName
argument_list|(
name|getTaskName
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setProject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setHaltonfailure
argument_list|(
name|haltOnFailure
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setUseOrigin
argument_list|(
name|useOrigin
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setValidate
argument_list|(
name|doValidate
argument_list|(
name|getSettings
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setKeep
argument_list|(
name|isKeep
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setRefresh
argument_list|(
name|isRefresh
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setLog
argument_list|(
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setSettingsRef
argument_list|(
name|getSettingsRef
argument_list|()
argument_list|)
expr_stmt|;
name|resolve
operator|.
name|setResolveMode
argument_list|(
name|getResolveMode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resolve
return|;
block|}
specifier|protected
name|ModuleRevisionId
name|getResolvedMrid
parameter_list|()
block|{
return|return
operator|new
name|ModuleRevisionId
argument_list|(
name|getResolvedModuleId
argument_list|()
argument_list|,
name|getRevision
argument_list|()
operator|==
literal|null
condition|?
name|Ivy
operator|.
name|getWorkingRevision
argument_list|()
else|:
name|getRevision
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|ModuleId
name|getResolvedModuleId
parameter_list|()
block|{
return|return
name|isInline
argument_list|()
condition|?
operator|new
name|ModuleId
argument_list|(
name|getOrganisation
argument_list|()
argument_list|,
name|getModule
argument_list|()
operator|+
literal|"-caller"
argument_list|)
else|:
operator|new
name|ModuleId
argument_list|(
name|getOrganisation
argument_list|()
argument_list|,
name|getModule
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|ResolveReport
name|getResolvedReport
parameter_list|()
block|{
return|return
name|getResolvedReport
argument_list|(
name|getOrganisation
argument_list|()
argument_list|,
name|isInline
argument_list|()
condition|?
name|getModule
argument_list|()
operator|+
literal|"-caller"
else|:
name|getModule
argument_list|()
argument_list|,
name|resolveId
argument_list|)
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|String
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|String
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|String
name|getModule
parameter_list|()
block|{
return|return
name|module
return|;
block|}
specifier|public
name|void
name|setModule
parameter_list|(
name|String
name|module
parameter_list|)
block|{
name|this
operator|.
name|module
operator|=
name|module
expr_stmt|;
block|}
specifier|public
name|String
name|getOrganisation
parameter_list|()
block|{
return|return
name|organisation
return|;
block|}
specifier|public
name|void
name|setOrganisation
parameter_list|(
name|String
name|organisation
parameter_list|)
block|{
name|this
operator|.
name|organisation
operator|=
name|organisation
expr_stmt|;
block|}
specifier|public
name|String
name|getBranch
parameter_list|()
block|{
return|return
name|branch
return|;
block|}
specifier|public
name|void
name|setBranch
parameter_list|(
name|String
name|branch
parameter_list|)
block|{
name|this
operator|.
name|branch
operator|=
name|branch
expr_stmt|;
block|}
specifier|public
name|boolean
name|isHaltonfailure
parameter_list|()
block|{
return|return
name|haltOnFailure
return|;
block|}
specifier|public
name|void
name|setHaltonfailure
parameter_list|(
name|boolean
name|haltOnFailure
parameter_list|)
block|{
name|this
operator|.
name|haltOnFailure
operator|=
name|haltOnFailure
expr_stmt|;
block|}
specifier|public
name|void
name|setCache
parameter_list|(
name|File
name|cache
parameter_list|)
block|{
name|cacheAttributeNotSupported
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getRevision
parameter_list|()
block|{
return|return
name|revision
return|;
block|}
specifier|public
name|void
name|setRevision
parameter_list|(
name|String
name|rev
parameter_list|)
block|{
name|revision
operator|=
name|rev
expr_stmt|;
block|}
specifier|public
name|Filter
name|getArtifactFilter
parameter_list|()
block|{
return|return
name|artifactFilter
return|;
block|}
specifier|public
name|boolean
name|isTransitive
parameter_list|()
block|{
return|return
name|transitive
return|;
block|}
specifier|public
name|void
name|setTransitive
parameter_list|(
name|boolean
name|transitive
parameter_list|)
block|{
name|this
operator|.
name|transitive
operator|=
name|transitive
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInline
parameter_list|()
block|{
return|return
name|inline
return|;
block|}
specifier|public
name|void
name|setInline
parameter_list|(
name|boolean
name|inline
parameter_list|)
block|{
name|this
operator|.
name|inline
operator|=
name|inline
expr_stmt|;
block|}
specifier|public
name|void
name|setResolveId
parameter_list|(
name|String
name|resolveId
parameter_list|)
block|{
name|this
operator|.
name|resolveId
operator|=
name|resolveId
expr_stmt|;
block|}
specifier|public
name|String
name|getResolveId
parameter_list|()
block|{
return|return
name|resolveId
return|;
block|}
specifier|public
name|void
name|setFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
specifier|public
name|void
name|setKeep
parameter_list|(
name|boolean
name|keep
parameter_list|)
block|{
name|this
operator|.
name|keep
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|keep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isKeep
parameter_list|()
block|{
return|return
name|this
operator|.
name|keep
operator|==
literal|null
condition|?
operator|!
name|isInline
argument_list|()
else|:
name|this
operator|.
name|keep
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setChanging
parameter_list|(
name|boolean
name|changing
parameter_list|)
block|{
name|this
operator|.
name|changing
operator|=
name|changing
expr_stmt|;
block|}
specifier|public
name|boolean
name|isChanging
parameter_list|()
block|{
return|return
name|this
operator|.
name|changing
return|;
block|}
specifier|public
name|void
name|setRefresh
parameter_list|(
name|boolean
name|refresh
parameter_list|)
block|{
name|this
operator|.
name|refresh
operator|=
name|refresh
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRefresh
parameter_list|()
block|{
return|return
name|refresh
return|;
block|}
specifier|public
name|String
name|getResolveMode
parameter_list|()
block|{
return|return
name|resolveMode
return|;
block|}
specifier|public
name|void
name|setResolveMode
parameter_list|(
name|String
name|resolveMode
parameter_list|)
block|{
name|this
operator|.
name|resolveMode
operator|=
name|resolveMode
expr_stmt|;
block|}
block|}
end_class

end_unit

