begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|LogOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultExcludeRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DefaultModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|DependencyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ArtifactDownloadReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ConfigurationResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|report
operator|.
name|ResolveReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolveOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|filter
operator|.
name|FilterHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|BaseResourceCollectionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|resources
operator|.
name|FileResource
import|;
end_import

begin_class
specifier|public
class|class
name|IvyResources
extends|extends
name|BaseResourceCollectionWrapper
block|{
specifier|private
name|List
comment|/*<IvyDependency> */
name|dependencies
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
comment|/*<IvyExclude> */
name|excludes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
comment|/*<IvyConflict> */
name|conflicts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|String
name|type
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|pubdate
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|useCacheOnly
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|transitive
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|refresh
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|resolveMode
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|resolveId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|log
init|=
name|ResolveOptions
operator|.
name|LOG_DEFAULT
decl_stmt|;
specifier|private
name|Reference
name|antIvyEngineRef
decl_stmt|;
specifier|public
name|IvyDependency
name|createDependency
parameter_list|()
block|{
name|IvyDependency
name|dep
init|=
operator|new
name|IvyDependency
argument_list|()
decl_stmt|;
name|dependencies
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
return|return
name|dep
return|;
block|}
specifier|public
name|IvyExclude
name|createExclude
parameter_list|()
block|{
name|IvyExclude
name|ex
init|=
operator|new
name|IvyExclude
argument_list|()
decl_stmt|;
name|excludes
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
return|return
name|ex
return|;
block|}
specifier|public
name|IvyConflict
name|createConflict
parameter_list|()
block|{
name|IvyConflict
name|c
init|=
operator|new
name|IvyConflict
argument_list|()
decl_stmt|;
name|conflicts
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|String
name|pubdate
parameter_list|)
block|{
name|this
operator|.
name|pubdate
operator|=
name|pubdate
expr_stmt|;
block|}
specifier|public
name|void
name|setPubdate
parameter_list|(
name|String
name|pubdate
parameter_list|)
block|{
name|this
operator|.
name|pubdate
operator|=
name|pubdate
expr_stmt|;
block|}
specifier|public
name|void
name|setUseCacheOnly
parameter_list|(
name|boolean
name|useCacheOnly
parameter_list|)
block|{
name|this
operator|.
name|useCacheOnly
operator|=
name|useCacheOnly
expr_stmt|;
block|}
specifier|public
name|void
name|setTransitive
parameter_list|(
name|boolean
name|transitive
parameter_list|)
block|{
name|this
operator|.
name|transitive
operator|=
name|transitive
expr_stmt|;
block|}
specifier|public
name|void
name|setRefresh
parameter_list|(
name|boolean
name|refresh
parameter_list|)
block|{
name|this
operator|.
name|refresh
operator|=
name|refresh
expr_stmt|;
block|}
specifier|public
name|void
name|setResolveMode
parameter_list|(
name|String
name|resolveMode
parameter_list|)
block|{
name|this
operator|.
name|resolveMode
operator|=
name|resolveMode
expr_stmt|;
block|}
specifier|public
name|void
name|setResolveId
parameter_list|(
name|String
name|resolveId
parameter_list|)
block|{
name|this
operator|.
name|resolveId
operator|=
name|resolveId
expr_stmt|;
block|}
specifier|public
name|void
name|setLog
parameter_list|(
name|String
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
specifier|public
name|void
name|setSettingsRef
parameter_list|(
name|Reference
name|ref
parameter_list|)
block|{
name|antIvyEngineRef
operator|=
name|ref
expr_stmt|;
block|}
specifier|public
name|boolean
name|isFilesystemOnly
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|protected
name|Collection
comment|/*<String> */
name|getAllowedLogOptions
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|LogOptions
operator|.
name|LOG_DEFAULT
block|,
name|LogOptions
operator|.
name|LOG_DOWNLOAD_ONLY
block|,
name|LogOptions
operator|.
name|LOG_QUIET
block|}
argument_list|)
return|;
block|}
specifier|protected
name|Ivy
name|getIvyInstance
parameter_list|()
block|{
name|Object
name|antIvyEngine
decl_stmt|;
if|if
condition|(
name|antIvyEngineRef
operator|!=
literal|null
condition|)
block|{
name|antIvyEngine
operator|=
name|antIvyEngineRef
operator|.
name|getReferencedObject
argument_list|(
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|antIvyEngine
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|IvyAntSettings
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|antIvyEngineRef
operator|.
name|getRefId
argument_list|()
operator|+
literal|" doesn't reference an ivy:settings"
argument_list|,
name|getLocation
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|antIvyEngine
operator|instanceof
name|IvyAntSettings
operator|)
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|antIvyEngineRef
operator|.
name|getRefId
argument_list|()
operator|+
literal|" has been defined in a different classloader.  "
operator|+
literal|"Please use the same loader when defining your task, or "
operator|+
literal|"redeclare your ivy:settings in this classloader"
argument_list|,
name|getLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|antIvyEngine
operator|=
name|IvyAntSettings
operator|.
name|getDefaultInstance
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|Ivy
name|ivy
init|=
operator|(
operator|(
name|IvyAntSettings
operator|)
name|antIvyEngine
operator|)
operator|.
name|getConfiguredIvyInstance
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|AntMessageLogger
operator|.
name|register
argument_list|(
name|this
argument_list|,
name|ivy
argument_list|)
expr_stmt|;
return|return
name|ivy
return|;
block|}
specifier|protected
name|Collection
name|getCollection
parameter_list|()
block|{
if|if
condition|(
operator|!
name|getAllowedLogOptions
argument_list|()
operator|.
name|contains
argument_list|(
name|log
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"invalid option for 'log': "
operator|+
name|log
operator|+
literal|". Available options are "
operator|+
name|getAllowedLogOptions
argument_list|()
argument_list|)
throw|;
block|}
name|Ivy
name|ivy
init|=
name|getIvyInstance
argument_list|()
decl_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|DefaultModuleDescriptor
name|md
init|=
name|DefaultModuleDescriptor
operator|.
name|newBasicInstance
argument_list|(
name|mrid
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Iterator
name|itDeps
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itDeps
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IvyDependency
name|dep
init|=
operator|(
name|IvyDependency
operator|)
name|itDeps
operator|.
name|next
argument_list|()
decl_stmt|;
name|DependencyDescriptor
name|dd
init|=
name|dep
operator|.
name|asDependencyDescriptor
argument_list|(
name|md
argument_list|,
literal|"default"
argument_list|,
name|ivy
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
name|md
operator|.
name|addDependency
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|itExcludes
init|=
name|excludes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itExcludes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IvyExclude
name|exclude
init|=
operator|(
name|IvyExclude
operator|)
name|itExcludes
operator|.
name|next
argument_list|()
decl_stmt|;
name|DefaultExcludeRule
name|rule
init|=
name|exclude
operator|.
name|asRule
argument_list|(
name|ivy
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
name|md
operator|.
name|addExcludeRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|itConflicts
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itConflicts
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IvyConflict
name|conflict
init|=
operator|(
name|IvyConflict
operator|)
name|itConflicts
operator|.
name|next
argument_list|()
decl_stmt|;
name|conflict
operator|.
name|addConflict
argument_list|(
name|md
argument_list|,
name|ivy
operator|.
name|getSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ResolveOptions
name|options
init|=
operator|new
name|ResolveOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setConfs
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDate
argument_list|(
name|IvyTask
operator|.
name|getPubDate
argument_list|(
name|pubdate
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|setUseCacheOnly
argument_list|(
name|useCacheOnly
argument_list|)
expr_stmt|;
name|options
operator|.
name|setRefresh
argument_list|(
name|refresh
argument_list|)
expr_stmt|;
name|options
operator|.
name|setTransitive
argument_list|(
name|transitive
argument_list|)
expr_stmt|;
name|options
operator|.
name|setResolveMode
argument_list|(
name|resolveMode
argument_list|)
expr_stmt|;
name|options
operator|.
name|setResolveId
argument_list|(
name|resolveId
argument_list|)
expr_stmt|;
name|ResolveReport
name|report
decl_stmt|;
try|try
block|{
name|report
operator|=
name|ivy
operator|.
name|resolve
argument_list|(
name|md
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
comment|/*<> */
name|resources
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|report
operator|.
name|hasError
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"resolve failed - see output for details"
argument_list|)
throw|;
block|}
else|else
block|{
name|Filter
name|artifactTypeFilter
init|=
name|FilterHelper
operator|.
name|getArtifactTypeFilter
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|ConfigurationResolveReport
name|configurationReport
init|=
name|report
operator|.
name|getConfigurationReport
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|Set
name|revisions
init|=
name|configurationReport
operator|.
name|getModuleRevisionIds
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|revisions
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ModuleRevisionId
name|revId
init|=
operator|(
name|ModuleRevisionId
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ArtifactDownloadReport
index|[]
name|aReports
init|=
name|configurationReport
operator|.
name|getDownloadReports
argument_list|(
name|revId
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aReports
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|artifactTypeFilter
operator|.
name|accept
argument_list|(
name|aReports
index|[
name|i
index|]
operator|.
name|getArtifact
argument_list|()
argument_list|)
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
operator|new
name|FileResource
argument_list|(
name|aReports
index|[
name|i
index|]
operator|.
name|getLocalFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|resources
return|;
block|}
block|}
end_class

end_unit

