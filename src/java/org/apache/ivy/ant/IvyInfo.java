begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|Ivy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|id
operator|.
name|ModuleRevisionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|resolve
operator|.
name|ResolvedModuleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|ModuleDescriptorParserRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|Configuration
operator|.
name|Visibility
operator|.
name|PUBLIC
import|;
end_import

begin_comment
comment|/**  * Parses information about an ivy file and make them available in ant.  */
end_comment

begin_class
specifier|public
class|class
name|IvyInfo
extends|extends
name|IvyTask
block|{
specifier|private
name|File
name|file
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|organisation
decl_stmt|;
specifier|private
name|String
name|module
decl_stmt|;
specifier|private
name|String
name|branch
decl_stmt|;
specifier|private
name|String
name|revision
decl_stmt|;
specifier|private
name|String
name|property
init|=
literal|"ivy"
decl_stmt|;
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
specifier|public
name|void
name|setFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|String
name|getModule
parameter_list|()
block|{
return|return
name|module
return|;
block|}
specifier|public
name|void
name|setModule
parameter_list|(
name|String
name|module
parameter_list|)
block|{
name|this
operator|.
name|module
operator|=
name|module
expr_stmt|;
block|}
specifier|public
name|String
name|getOrganisation
parameter_list|()
block|{
return|return
name|organisation
return|;
block|}
specifier|public
name|void
name|setOrganisation
parameter_list|(
name|String
name|organisation
parameter_list|)
block|{
name|this
operator|.
name|organisation
operator|=
name|organisation
expr_stmt|;
block|}
specifier|public
name|String
name|getRevision
parameter_list|()
block|{
return|return
name|revision
return|;
block|}
specifier|public
name|void
name|setRevision
parameter_list|(
name|String
name|revision
parameter_list|)
block|{
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
block|}
specifier|public
name|String
name|getBranch
parameter_list|()
block|{
return|return
name|branch
return|;
block|}
specifier|public
name|void
name|setBranch
parameter_list|(
name|String
name|branch
parameter_list|)
block|{
name|this
operator|.
name|branch
operator|=
name|branch
expr_stmt|;
block|}
specifier|public
name|String
name|getProperty
parameter_list|()
block|{
return|return
name|property
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|property
operator|=
name|prefix
expr_stmt|;
block|}
specifier|public
name|void
name|doExecute
parameter_list|()
throws|throws
name|BuildException
block|{
name|Ivy
name|ivy
init|=
name|getIvyInstance
argument_list|()
decl_stmt|;
name|IvySettings
name|settings
init|=
name|ivy
operator|.
name|getSettings
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|organisation
operator|!=
literal|null
operator|||
name|module
operator|!=
literal|null
operator|||
name|revision
operator|!=
literal|null
operator|||
name|branch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|organisation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"no organisation provided for ivy info task"
argument_list|)
throw|;
block|}
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"no module name provided for ivy info task"
argument_list|)
throw|;
block|}
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"no revision provided for ivy info task"
argument_list|)
throw|;
block|}
if|if
condition|(
name|branch
operator|==
literal|null
condition|)
block|{
name|settings
operator|.
name|getDefaultBranch
argument_list|(
operator|new
name|ModuleId
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ResolvedModuleRevision
name|rmr
init|=
name|ivy
operator|.
name|findModule
argument_list|(
name|ModuleRevisionId
operator|.
name|newInstance
argument_list|(
name|organisation
argument_list|,
name|module
argument_list|,
name|branch
argument_list|,
name|revision
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmr
operator|!=
literal|null
condition|)
block|{
name|ModuleDescriptor
name|md
init|=
name|rmr
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|rmr
operator|.
name|getId
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|md
argument_list|,
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
name|file
operator|=
name|getProject
argument_list|()
operator|.
name|resolveFile
argument_list|(
name|getProperty
argument_list|(
name|settings
argument_list|,
literal|"ivy.dep.file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ModuleDescriptor
name|md
init|=
name|ModuleDescriptorParserRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|parseDescriptor
argument_list|(
name|settings
argument_list|,
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|doValidate
argument_list|(
name|settings
argument_list|)
argument_list|)
decl_stmt|;
name|ModuleRevisionId
name|mrid
init|=
name|md
operator|.
name|getModuleRevisionId
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|md
argument_list|,
name|mrid
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"unable to convert given ivy file to url: "
operator|+
name|file
operator|+
literal|": "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|log
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"syntax errors in ivy file: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"impossible to resolve dependencies: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|setProperties
parameter_list|(
name|ModuleDescriptor
name|md
parameter_list|,
name|ModuleRevisionId
name|mrid
parameter_list|)
block|{
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".organisation"
argument_list|,
name|mrid
operator|.
name|getOrganisation
argument_list|()
argument_list|)
expr_stmt|;
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".module"
argument_list|,
name|mrid
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mrid
operator|.
name|getBranch
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".branch"
argument_list|,
name|mrid
operator|.
name|getBranch
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".revision"
argument_list|,
name|mrid
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".status"
argument_list|,
name|md
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|.
name|getPublicationDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".publication"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|md
operator|.
name|getPublicationDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|mrid
operator|.
name|getExtraAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".extra."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".configurations"
argument_list|,
name|mergeConfs
argument_list|(
name|md
operator|.
name|getConfigurationsNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// store the public configurations in a separate property
name|List
argument_list|<
name|String
argument_list|>
name|publicConfigsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Configuration
name|config
range|:
name|md
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|config
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|PUBLIC
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getVisibility
argument_list|()
argument_list|)
condition|)
block|{
name|publicConfigsList
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".configuration."
operator|+
name|name
operator|+
literal|".desc"
argument_list|,
name|config
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|publicConfigs
init|=
name|publicConfigsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|publicConfigsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".public.configurations"
argument_list|,
name|mergeConfs
argument_list|(
name|publicConfigs
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|md
operator|.
name|getAllArtifacts
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|artifacts
control|)
block|{
name|int
name|id
init|=
name|artifacts
operator|.
name|indexOf
argument_list|(
name|artifact
argument_list|)
operator|+
literal|1
decl_stmt|;
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".artifact."
operator|+
name|id
operator|+
literal|".name"
argument_list|,
name|artifact
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".artifact."
operator|+
name|id
operator|+
literal|".type"
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".artifact."
operator|+
name|id
operator|+
literal|".ext"
argument_list|,
name|artifact
operator|.
name|getExt
argument_list|()
argument_list|)
expr_stmt|;
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".artifact."
operator|+
name|id
operator|+
literal|".conf"
argument_list|,
name|mergeConfs
argument_list|(
name|artifact
operator|.
name|getConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|artifact
operator|.
name|getExtraAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|getProject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|property
operator|+
literal|".artifact."
operator|+
name|id
operator|+
literal|".extra."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

