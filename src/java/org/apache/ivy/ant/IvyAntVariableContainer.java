begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvyVariableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|settings
operator|.
name|IvyVariableContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_class
class|class
name|IvyAntVariableContainer
extends|extends
name|IvyVariableContainerImpl
implements|implements
name|IvyVariableContainer
block|{
specifier|protected
name|Map
name|_overwrittenProperties
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|Project
name|_project
decl_stmt|;
specifier|public
name|IvyAntVariableContainer
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
name|this
operator|.
name|_project
operator|=
name|project
expr_stmt|;
block|}
specifier|public
name|String
name|getVariable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|r
init|=
operator|(
name|String
operator|)
name|_overwrittenProperties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
name|_project
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
name|super
operator|.
name|getVariable
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|public
name|Map
name|getVariables
parameter_list|()
block|{
name|Map
name|r
init|=
operator|new
name|HashMap
argument_list|(
name|super
operator|.
name|getVariables
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|putAll
argument_list|(
name|_project
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|putAll
argument_list|(
name|_overwrittenProperties
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
specifier|public
name|void
name|setVariable
parameter_list|(
name|String
name|varName
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
block|{
if|if
condition|(
name|overwrite
condition|)
block|{
name|Message
operator|.
name|debug
argument_list|(
literal|"setting '"
operator|+
name|varName
operator|+
literal|"' to '"
operator|+
name|value
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|_overwrittenProperties
operator|.
name|put
argument_list|(
name|varName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|setVariable
argument_list|(
name|varName
argument_list|,
name|value
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

