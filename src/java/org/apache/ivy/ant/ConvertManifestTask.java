begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|ant
operator|.
name|IvyTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|core
operator|.
name|module
operator|.
name|descriptor
operator|.
name|ModuleDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|BundleInfoAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|ExecutionEnvironmentProfileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|ManifestParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|osgi
operator|.
name|core
operator|.
name|OSGiManifestParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|plugins
operator|.
name|parser
operator|.
name|xml
operator|.
name|XmlModuleDescriptorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_class
specifier|public
class|class
name|ConvertManifestTask
extends|extends
name|IvyTask
block|{
specifier|private
name|File
name|manifest
init|=
literal|null
decl_stmt|;
specifier|private
name|File
name|ivyFile
init|=
literal|null
decl_stmt|;
specifier|private
name|ExecutionEnvironmentProfileProvider
name|profileProvider
decl_stmt|;
specifier|public
name|void
name|setProfileProvider
parameter_list|(
name|ExecutionEnvironmentProfileProvider
name|profileProvider
parameter_list|)
block|{
name|this
operator|.
name|profileProvider
operator|=
name|profileProvider
expr_stmt|;
block|}
specifier|public
name|void
name|setManifest
parameter_list|(
name|File
name|manifest
parameter_list|)
block|{
name|this
operator|.
name|manifest
operator|=
name|manifest
expr_stmt|;
block|}
specifier|public
name|void
name|setIvyFile
parameter_list|(
name|File
name|ivyFile
parameter_list|)
block|{
name|this
operator|.
name|ivyFile
operator|=
name|ivyFile
expr_stmt|;
block|}
specifier|public
name|void
name|doExecute
parameter_list|()
throws|throws
name|BuildException
block|{
if|if
condition|(
name|ivyFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"destination ivy file is required for convertmanifest task"
argument_list|)
throw|;
block|}
if|if
condition|(
name|manifest
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"source manifest file is required for convertmanifest task"
argument_list|)
throw|;
block|}
if|if
condition|(
name|profileProvider
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|profileProvider
operator|=
operator|new
name|ExecutionEnvironmentProfileProvider
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Enable to load the default environment profiles"
argument_list|)
throw|;
block|}
block|}
name|Manifest
name|m
decl_stmt|;
try|try
block|{
name|m
operator|=
operator|new
name|Manifest
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|manifest
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"the manifest file '"
operator|+
name|manifest
operator|+
literal|"' was not found"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"the manifest file '"
operator|+
name|manifest
operator|+
literal|"' could not be read"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|BundleInfo
name|bundleInfo
decl_stmt|;
try|try
block|{
name|bundleInfo
operator|=
name|ManifestParser
operator|.
name|parseManifest
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Incorrect manifest file '"
operator|+
name|manifest
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|ModuleDescriptor
name|md
init|=
name|BundleInfoAdapter
operator|.
name|toModuleDescriptor
argument_list|(
name|OSGiManifestParser
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|null
argument_list|,
name|bundleInfo
argument_list|,
name|profileProvider
argument_list|)
decl_stmt|;
try|try
block|{
name|XmlModuleDescriptorWriter
operator|.
name|write
argument_list|(
name|md
argument_list|,
name|ivyFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"The ivyFile '"
operator|+
name|ivyFile
operator|+
literal|"' could not be written"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

