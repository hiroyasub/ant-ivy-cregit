begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|namespace
package|;
end_package

begin_class
specifier|public
class|class
name|NamespaceRule
block|{
specifier|private
name|String
name|_name
decl_stmt|;
specifier|private
name|String
name|_description
decl_stmt|;
specifier|private
name|MRIDTransformationRule
name|_fromSystem
decl_stmt|;
specifier|private
name|MRIDTransformationRule
name|_toSystem
decl_stmt|;
specifier|public
name|MRIDTransformationRule
name|getFromSystem
parameter_list|()
block|{
return|return
name|_fromSystem
return|;
block|}
specifier|public
name|void
name|addFromsystem
parameter_list|(
name|MRIDTransformationRule
name|fromSystem
parameter_list|)
block|{
if|if
condition|(
name|_fromSystem
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"only one fromsystem is allowed per rule"
argument_list|)
throw|;
block|}
name|_fromSystem
operator|=
name|fromSystem
expr_stmt|;
block|}
specifier|public
name|MRIDTransformationRule
name|getToSystem
parameter_list|()
block|{
return|return
name|_toSystem
return|;
block|}
specifier|public
name|void
name|addTosystem
parameter_list|(
name|MRIDTransformationRule
name|toSystem
parameter_list|)
block|{
if|if
condition|(
name|_toSystem
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"only one tosystem is allowed per rule"
argument_list|)
throw|;
block|}
name|_toSystem
operator|=
name|toSystem
expr_stmt|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|_description
return|;
block|}
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|_description
operator|=
name|description
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|_name
operator|=
name|name
expr_stmt|;
block|}
block|}
end_class

end_unit

