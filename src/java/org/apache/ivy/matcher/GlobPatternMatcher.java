begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|matcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ivy
operator|.
name|util
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|GlobCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|MalformedPatternException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Perl5Matcher
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|GlobPatternMatcher
implements|implements
name|PatternMatcher
block|{
specifier|public
specifier|static
class|class
name|GlobMatcher
implements|implements
name|Matcher
block|{
specifier|private
name|Pattern
name|_p
decl_stmt|;
specifier|public
name|GlobMatcher
parameter_list|(
name|String
name|exp
parameter_list|)
block|{
try|try
block|{
name|_p
operator|=
operator|new
name|GlobCompiler
argument_list|()
operator|.
name|compile
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedPatternException
name|e
parameter_list|)
block|{
name|Message
operator|.
name|error
argument_list|(
literal|"impossible to compile glob pattern: "
operator|+
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|_p
operator|!=
literal|null
operator|&&
operator|new
name|Perl5Matcher
argument_list|()
operator|.
name|matches
argument_list|(
name|str
argument_list|,
name|_p
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isExact
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|GlobPatternMatcher
name|INSTANCE
init|=
operator|new
name|GlobPatternMatcher
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|PatternMatcher
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
specifier|private
name|GlobPatternMatcher
parameter_list|()
block|{
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|GLOB
return|;
block|}
specifier|public
name|Matcher
name|getMatcher
parameter_list|(
name|String
name|exp
parameter_list|)
block|{
if|if
condition|(
name|ANY_EXPRESSION
operator|.
name|equals
argument_list|(
name|exp
argument_list|)
condition|)
block|{
return|return
name|AnyMatcher
operator|.
name|getInstance
argument_list|()
return|;
block|}
return|return
operator|new
name|GlobMatcher
argument_list|(
name|exp
argument_list|)
return|;
block|}
block|}
end_class

end_unit

